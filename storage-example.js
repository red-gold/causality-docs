/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"storage-example": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./examples/storage/examples.js","vendors"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./examples/storage/examples.js":
/*!**************************************!*\
  !*** ./examples/storage/examples.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./storage.png.babel */ "./examples/storage/storage.png.babel.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_storagePng) {
  "use strict";
});

/***/ }),

/***/ "./examples/storage/storage.png.babel.js":
/*!***********************************************!*\
  !*** ./examples/storage/storage.png.babel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! causal-net.storage */ "./packages/causality-storage/dist/@causalNet/storage.web.js"), __webpack_require__(/*! causal-net.utils */ "./packages/causality-utils/dist/@causalNet/utils.web.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_causalNet, _causalNet2) {
  "use strict";

  (async () => {
    const base_url = 'http://storage.googleapis.com/moderatordev-223307.appspot.com/MNIST_dataset/';

    const idxs = _causalNet2.Sampling.choice(650, 1);

    console.log({
      idxs
    });

    for (let idx of idxs) {
      console.log({
        idx
      });
      const surl = `${base_url}data-chunk-${idx}.png`;
      console.log({
        surl
      }); // let readStream = await Fetch.streamData(surl);
      // const WriteFn = (chunkData, chunkEncoding, callback) =>{
      //     console.log({chunkData:chunkData.length});
      //     callback();
      // };
      // let writer = Stream.makeWritable(WriteFn);
      // readStream.pipe(writer);
      // readStream.pipe(new PNG()).on('parsed', function(){
      //     console.log({len: this.data.length});
      // });

      let imageBuffer = await _causalNet.indexDBStorage.fetchPNGFile(surl, `/mnist/data/${idx}`);
      console.log({
        imageBuffer: imageBuffer
      });
      const lurl = `${base_url}label-chunk-${idx}`;
      console.log({
        lurl
      });
      let labelBuffer = await _causalNet.indexDBStorage.fetchFile(lurl, `/mnist/label/${idx}`);
      console.log({
        labelBuffer: labelBuffer
      });
    }
  })().catch(err => {
    console.error(err);
  });
});

/***/ }),

/***/ "./packages/causality-storage/dist/@causalNet/storage.web.js":
/*!*******************************************************************!*\
  !*** ./packages/causality-storage/dist/@causalNet/storage.web.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! causal-net.utils */ "./packages/causality-utils/dist/@causalNet/utils.web.js"), __webpack_require__(/*! level-js */ "./node_modules/level-js/index.js"));
	else {}
})(this, function(__WEBPACK_EXTERNAL_MODULE_causal_net_utils__, __WEBPACK_EXTERNAL_MODULE_leveldown__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*******************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "../../node_modules/assert/assert.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/assert/assert.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = __webpack_require__(/*! util/ */ "../../node_modules/util/util.js");
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/base64-js/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!***********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/buffer/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "../../node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "../../node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "../../node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/deferred-iterator.js":
/*!***********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/deferred-iterator.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AbstractIterator = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js").AbstractIterator
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")

function DeferredIterator (options) {
  AbstractIterator.call(this, options)

  this._options = options
  this._iterator = null
  this._operations = []
}

inherits(DeferredIterator, AbstractIterator)

DeferredIterator.prototype.setDb = function (db) {
  var it = this._iterator = db.iterator(this._options)
  this._operations.forEach(function (op) {
    it[op.method].apply(it, op.args)
  })
}

DeferredIterator.prototype._operation = function (method, args) {
  if (this._iterator) return this._iterator[method].apply(this._iterator, args)
  this._operations.push({ method: method, args: args })
}

'next end'.split(' ').forEach(function (m) {
  DeferredIterator.prototype['_' + m] = function () {
    this._operation(m, arguments)
  }
})

module.exports = DeferredIterator


/***/ }),

/***/ "../../node_modules/deferred-leveldown/deferred-leveldown.js":
/*!************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/deferred-leveldown.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AbstractLevelDOWN = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js").AbstractLevelDOWN
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var DeferredIterator = __webpack_require__(/*! ./deferred-iterator */ "../../node_modules/deferred-leveldown/deferred-iterator.js")
var deferrables = 'put get del batch'.split(' ')

function DeferredLevelDOWN (db) {
  AbstractLevelDOWN.call(this, '')
  this._db = db
  this._operations = []
  this._iterators = []
  closed(this)
}

inherits(DeferredLevelDOWN, AbstractLevelDOWN)

DeferredLevelDOWN.prototype._open = function (options, callback) {
  var self = this

  this._db.open(options, function (err) {
    if (err) return callback(err)

    self._operations.forEach(function (op) {
      self._db[op.method].apply(self._db, op.args)
    })
    self._operations = []
    self._iterators.forEach(function (it) {
      it.setDb(self._db)
    })
    self._iterators = []
    open(self)
    callback()
  })
}

DeferredLevelDOWN.prototype._close = function (callback) {
  var self = this

  this._db.close(function (err) {
    if (err) return callback(err)
    closed(self)
    callback()
  })
}

function open (self) {
  deferrables.concat('iterator').forEach(function (m) {
    self['_' + m] = function () {
      return this._db[m].apply(this._db, arguments)
    }
  })
  if (self._db.approximateSize) {
    self.approximateSize = function () {
      return this._db.approximateSize.apply(this._db, arguments)
    }
  }
}

function closed (self) {
  deferrables.forEach(function (m) {
    self['_' + m] = function () {
      this._operations.push({ method: m, args: arguments })
    }
  })
  if (typeof self._db.approximateSize === 'function') {
    self.approximateSize = function () {
      this._operations.push({
        method: 'approximateSize',
        args: arguments
      })
    }
  }
  self._iterator = function (options) {
    var it = new DeferredIterator(options)
    this._iterators.push(it)
    return it
  }
}

DeferredLevelDOWN.prototype._serializeKey = function (key) {
  return key
}

DeferredLevelDOWN.prototype._serializeValue = function (value) {
  return value
}

module.exports = DeferredLevelDOWN
module.exports.DeferredIterator = DeferredIterator


/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js":
/*!************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js ***!
  \************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function AbstractChainedBatch (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._operations = []
  this._written = false
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch')
  }
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this.db._checkKey(key) || this.db._checkValue(value)
  if (err) throw err

  key = this.db._serializeKey(key)
  value = this.db._serializeValue(value)

  this._put(key, value)

  return this
}

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({ type: 'put', key: key, value: value })
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this.db._checkKey(key)
  if (err) throw err

  key = this.db._serializeKey(key)
  this._del(key)

  return this
}

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({ type: 'del', key: key })
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()
  this._clear()

  return this
}

AbstractChainedBatch.prototype._clear = function () {
  this._operations = []
}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options === 'function') { callback = options }
  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument')
  }
  if (typeof options !== 'object' || options === null) {
    options = {}
  }

  this._written = true
  this._write(options, callback)
}

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback)
}

module.exports = AbstractChainedBatch


/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js":
/*!*******************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function AbstractIterator (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument')
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'))
    return self
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'))
    return self
  }

  self._nexting = true
  self._next(function () {
    self._nexting = false
    callback.apply(null, arguments)
  })

  return self
}

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback)
}

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()')
  }
  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed')
  }

  target = this.db._serializeKey(target)
  this._seek(target)
}

AbstractIterator.prototype._seek = function (target) {}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument')
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'))
  }

  this._ended = true
  this._end(callback)
}

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback)
}

module.exports = AbstractIterator

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js":
/*!********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var xtend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js")
var AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js")
var hasOwnProperty = Object.prototype.hasOwnProperty
var rangeOptions = 'start end gt gte lt lte'.split(' ')

function AbstractLevelDOWN () {
  this.status = 'new'
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this
  var oldStatus = this.status

  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument')
  }

  if (typeof options !== 'object' || options === null) options = {}

  options.createIfMissing = options.createIfMissing !== false
  options.errorIfExists = !!options.errorIfExists

  this.status = 'opening'
  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'open'
    callback()
  })
}

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this
  var oldStatus = this.status

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument')
  }

  this.status = 'closing'
  this._close(function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'closed'
    callback()
  })
}

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  options.asBuffer = options.asBuffer !== false

  this._get(key, options, callback)
}

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument')
  }

  var err = this._checkKey(key) || this._checkValue(value)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)
  value = this._serializeValue(value)

  if (typeof options !== 'object' || options === null) options = {}

  this._put(key, value, options, callback)
}

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  this._del(key, options, callback)
}

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch()

  if (typeof options === 'function') callback = options

  if (typeof array === 'function') callback = array

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument')
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'))
  }

  if (typeof options !== 'object' || options === null) options = {}

  var serialized = new Array(array.length)

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'))
    }

    var e = xtend(array[i])

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"))
    }

    var err = this._checkKey(e.key)
    if (err) return process.nextTick(callback, err)

    e.key = this._serializeKey(e.key)

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value)
      if (valueErr) return process.nextTick(callback, valueErr)

      e.value = this._serializeValue(e.value)
    }

    serialized[i] = e
  }

  this._batch(serialized, options, callback)
}

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options)

  options.reverse = !!options.reverse
  options.keys = options.keys !== false
  options.values = options.values !== false
  options.limit = 'limit' in options ? options.limit : -1
  options.keyAsBuffer = options.keyAsBuffer !== false
  options.valueAsBuffer = options.valueAsBuffer !== false

  return options
}

function cleanRangeOptions (db, options) {
  var result = {}

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue

    var opt = options[k]

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt)
    }

    result[k] = opt
  }

  return result
}

function isRangeOption (k) {
  return rangeOptions.indexOf(k) !== -1
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {}
  options = this._setupIteratorOptions(options)
  return this._iterator(options)
}

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key
}

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value
}

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`')
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer')
  } else if (key === '') {
    return new Error('key cannot be an empty String')
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array')
  }
}

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`')
  }
}

module.exports = AbstractLevelDOWN

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js"), __webpack_require__(/*! ./../../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js":
/*!*******************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/deferred-leveldown/node_modules/abstract-leveldown/index.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.AbstractLevelDOWN = __webpack_require__(/*! ./abstract-leveldown */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-leveldown.js")
exports.AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-iterator.js")
exports.AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/deferred-leveldown/node_modules/abstract-leveldown/abstract-chained-batch.js")


/***/ }),

/***/ "../../node_modules/errno/custom.js":
/*!***********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/errno/custom.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var prr = __webpack_require__(/*! prr */ "../../node_modules/prr/prr.js")

function init (type, message, cause) {
  if (!!message && typeof message != 'string') {
    message = message.message || message.name
  }
  prr(this, {
      type    : type
    , name    : type
      // can be passed just a 'cause'
    , cause   : typeof message != 'string' ? message : cause
    , message : message
  }, 'ewr')
}

// generic prototype, not intended to be actually used - helpful for `instanceof`
function CustomError (message, cause) {
  Error.call(this)
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, this.constructor)
  init.call(this, 'CustomError', message, cause)
}

CustomError.prototype = new Error()

function createError (errno, type, proto) {
  var err = function (message, cause) {
    init.call(this, type, message, cause)
    //TODO: the specificity here is stupid, errno should be available everywhere
    if (type == 'FilesystemError') {
      this.code    = this.cause.code
      this.path    = this.cause.path
      this.errno   = this.cause.errno
      this.message =
        (errno.errno[this.cause.errno]
          ? errno.errno[this.cause.errno].description
          : this.cause.message)
        + (this.cause.path ? ' [' + this.cause.path + ']' : '')
    }
    Error.call(this)
    if (Error.captureStackTrace)
      Error.captureStackTrace(this, err)
  }
  err.prototype = !!proto ? new proto() : new CustomError()
  return err
}

module.exports = function (errno) {
  var ce = function (type, proto) {
    return createError(errno, type, proto)
  }
  return {
      CustomError     : CustomError
    , FilesystemError : ce('FilesystemError')
    , createError     : ce
  }
}


/***/ }),

/***/ "../../node_modules/errno/errno.js":
/*!**********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/errno/errno.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var all = module.exports.all = [
  {
    errno: -2,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: -1,
    code: 'UNKNOWN',
    description: 'unknown error'
  },
  {
    errno: 0,
    code: 'OK',
    description: 'success'
  },
  {
    errno: 1,
    code: 'EOF',
    description: 'end of file'
  },
  {
    errno: 2,
    code: 'EADDRINFO',
    description: 'getaddrinfo error'
  },
  {
    errno: 3,
    code: 'EACCES',
    description: 'permission denied'
  },
  {
    errno: 4,
    code: 'EAGAIN',
    description: 'resource temporarily unavailable'
  },
  {
    errno: 5,
    code: 'EADDRINUSE',
    description: 'address already in use'
  },
  {
    errno: 6,
    code: 'EADDRNOTAVAIL',
    description: 'address not available'
  },
  {
    errno: 7,
    code: 'EAFNOSUPPORT',
    description: 'address family not supported'
  },
  {
    errno: 8,
    code: 'EALREADY',
    description: 'connection already in progress'
  },
  {
    errno: 9,
    code: 'EBADF',
    description: 'bad file descriptor'
  },
  {
    errno: 10,
    code: 'EBUSY',
    description: 'resource busy or locked'
  },
  {
    errno: 11,
    code: 'ECONNABORTED',
    description: 'software caused connection abort'
  },
  {
    errno: 12,
    code: 'ECONNREFUSED',
    description: 'connection refused'
  },
  {
    errno: 13,
    code: 'ECONNRESET',
    description: 'connection reset by peer'
  },
  {
    errno: 14,
    code: 'EDESTADDRREQ',
    description: 'destination address required'
  },
  {
    errno: 15,
    code: 'EFAULT',
    description: 'bad address in system call argument'
  },
  {
    errno: 16,
    code: 'EHOSTUNREACH',
    description: 'host is unreachable'
  },
  {
    errno: 17,
    code: 'EINTR',
    description: 'interrupted system call'
  },
  {
    errno: 18,
    code: 'EINVAL',
    description: 'invalid argument'
  },
  {
    errno: 19,
    code: 'EISCONN',
    description: 'socket is already connected'
  },
  {
    errno: 20,
    code: 'EMFILE',
    description: 'too many open files'
  },
  {
    errno: 21,
    code: 'EMSGSIZE',
    description: 'message too long'
  },
  {
    errno: 22,
    code: 'ENETDOWN',
    description: 'network is down'
  },
  {
    errno: 23,
    code: 'ENETUNREACH',
    description: 'network is unreachable'
  },
  {
    errno: 24,
    code: 'ENFILE',
    description: 'file table overflow'
  },
  {
    errno: 25,
    code: 'ENOBUFS',
    description: 'no buffer space available'
  },
  {
    errno: 26,
    code: 'ENOMEM',
    description: 'not enough memory'
  },
  {
    errno: 27,
    code: 'ENOTDIR',
    description: 'not a directory'
  },
  {
    errno: 28,
    code: 'EISDIR',
    description: 'illegal operation on a directory'
  },
  {
    errno: 29,
    code: 'ENONET',
    description: 'machine is not on the network'
  },
  {
    errno: 31,
    code: 'ENOTCONN',
    description: 'socket is not connected'
  },
  {
    errno: 32,
    code: 'ENOTSOCK',
    description: 'socket operation on non-socket'
  },
  {
    errno: 33,
    code: 'ENOTSUP',
    description: 'operation not supported on socket'
  },
  {
    errno: 34,
    code: 'ENOENT',
    description: 'no such file or directory'
  },
  {
    errno: 35,
    code: 'ENOSYS',
    description: 'function not implemented'
  },
  {
    errno: 36,
    code: 'EPIPE',
    description: 'broken pipe'
  },
  {
    errno: 37,
    code: 'EPROTO',
    description: 'protocol error'
  },
  {
    errno: 38,
    code: 'EPROTONOSUPPORT',
    description: 'protocol not supported'
  },
  {
    errno: 39,
    code: 'EPROTOTYPE',
    description: 'protocol wrong type for socket'
  },
  {
    errno: 40,
    code: 'ETIMEDOUT',
    description: 'connection timed out'
  },
  {
    errno: 41,
    code: 'ECHARSET',
    description: 'invalid Unicode character'
  },
  {
    errno: 42,
    code: 'EAIFAMNOSUPPORT',
    description: 'address family for hostname not supported'
  },
  {
    errno: 44,
    code: 'EAISERVICE',
    description: 'servname not supported for ai_socktype'
  },
  {
    errno: 45,
    code: 'EAISOCKTYPE',
    description: 'ai_socktype not supported'
  },
  {
    errno: 46,
    code: 'ESHUTDOWN',
    description: 'cannot send after transport endpoint shutdown'
  },
  {
    errno: 47,
    code: 'EEXIST',
    description: 'file already exists'
  },
  {
    errno: 48,
    code: 'ESRCH',
    description: 'no such process'
  },
  {
    errno: 49,
    code: 'ENAMETOOLONG',
    description: 'name too long'
  },
  {
    errno: 50,
    code: 'EPERM',
    description: 'operation not permitted'
  },
  {
    errno: 51,
    code: 'ELOOP',
    description: 'too many symbolic links encountered'
  },
  {
    errno: 52,
    code: 'EXDEV',
    description: 'cross-device link not permitted'
  },
  {
    errno: 53,
    code: 'ENOTEMPTY',
    description: 'directory not empty'
  },
  {
    errno: 54,
    code: 'ENOSPC',
    description: 'no space left on device'
  },
  {
    errno: 55,
    code: 'EIO',
    description: 'i/o error'
  },
  {
    errno: 56,
    code: 'EROFS',
    description: 'read-only file system'
  },
  {
    errno: 57,
    code: 'ENODEV',
    description: 'no such device'
  },
  {
    errno: 58,
    code: 'ESPIPE',
    description: 'invalid seek'
  },
  {
    errno: 59,
    code: 'ECANCELED',
    description: 'operation canceled'
  }
]

module.exports.errno = {}
module.exports.code = {}

all.forEach(function (error) {
  module.exports.errno[error.errno] = error
  module.exports.code[error.code] = error
})

module.exports.custom = __webpack_require__(/*! ./custom */ "../../node_modules/errno/custom.js")(module.exports)
module.exports.create = module.exports.custom.createError


/***/ }),

/***/ "../../node_modules/events/events.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/events/events.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/ieee754/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "../../node_modules/immediate/lib/index.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var types = [
  __webpack_require__(/*! ./nextTick */ "../../node_modules/immediate/lib/nextTick.js"),
  __webpack_require__(/*! ./mutation.js */ "../../node_modules/immediate/lib/mutation.js"),
  __webpack_require__(/*! ./messageChannel */ "../../node_modules/immediate/lib/messageChannel.js"),
  __webpack_require__(/*! ./stateChange */ "../../node_modules/immediate/lib/stateChange.js"),
  __webpack_require__(/*! ./timeout */ "../../node_modules/immediate/lib/timeout.js")
];
var draining;
var currentQueue;
var queueIndex = -1;
var queue = [];
var scheduled = false;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    nextTick();
  }
}

//named nextTick for less confusing stack traces
function nextTick() {
  if (draining) {
    return;
  }
  scheduled = false;
  draining = true;
  var len = queue.length;
  var timeout = setTimeout(cleanUpNextTick);
  while (len) {
    currentQueue = queue;
    queue = [];
    while (currentQueue && ++queueIndex < len) {
      currentQueue[queueIndex].run();
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  queueIndex = -1;
  draining = false;
  clearTimeout(timeout);
}
var scheduleDrain;
var i = -1;
var len = types.length;
while (++i < len) {
  if (types[i] && types[i].test && types[i].test()) {
    scheduleDrain = types[i].install(nextTick);
    break;
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  var fun = this.fun;
  var array = this.array;
  switch (array.length) {
  case 0:
    return fun();
  case 1:
    return fun(array[0]);
  case 2:
    return fun(array[0], array[1]);
  case 3:
    return fun(array[0], array[1], array[2]);
  default:
    return fun.apply(null, array);
  }

};
module.exports = immediate;
function immediate(task) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(task, args));
  if (!scheduled && !draining) {
    scheduled = true;
    scheduleDrain();
  }
}


/***/ }),

/***/ "../../node_modules/immediate/lib/messageChannel.js":
/*!***************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/messageChannel.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  if (global.setImmediate) {
    // we can only get here in IE10
    // which doesn't handel postMessage well
    return false;
  }
  return typeof global.MessageChannel !== 'undefined';
};

exports.install = function (func) {
  var channel = new global.MessageChannel();
  channel.port1.onmessage = func;
  return function () {
    channel.port2.postMessage(0);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/mutation.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/mutation.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
//based off rsvp https://github.com/tildeio/rsvp.js
//license https://github.com/tildeio/rsvp.js/blob/master/LICENSE
//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/asap.js

var Mutation = global.MutationObserver || global.WebKitMutationObserver;

exports.test = function () {
  return Mutation;
};

exports.install = function (handle) {
  var called = 0;
  var observer = new Mutation(handle);
  var element = global.document.createTextNode('');
  observer.observe(element, {
    characterData: true
  });
  return function () {
    element.data = (called = ++called % 2);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/nextTick.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/nextTick.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
exports.test = function () {
  // Don't get fooled by e.g. browserify environments.
  return (typeof process !== 'undefined') && !process.browser;
};

exports.install = function (func) {
  return function () {
    process.nextTick(func);
  };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/stateChange.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/stateChange.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
};

exports.install = function (handle) {
  return function () {

    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
    var scriptEl = global.document.createElement('script');
    scriptEl.onreadystatechange = function () {
      handle();

      scriptEl.onreadystatechange = null;
      scriptEl.parentNode.removeChild(scriptEl);
      scriptEl = null;
    };
    global.document.documentElement.appendChild(scriptEl);

    return handle;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/immediate/lib/timeout.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/immediate/lib/timeout.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.test = function () {
  return true;
};

exports.install = function (t) {
  return function () {
    setTimeout(t, 0);
  };
};

/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/inherits/inherits_browser.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "../../node_modules/is-typedarray/index.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/is-typedarray/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports      = isTypedArray
isTypedArray.strict = isStrictTypedArray
isTypedArray.loose  = isLooseTypedArray

var toString = Object.prototype.toString
var names = {
    '[object Int8Array]': true
  , '[object Int16Array]': true
  , '[object Int32Array]': true
  , '[object Uint8Array]': true
  , '[object Uint8ClampedArray]': true
  , '[object Uint16Array]': true
  , '[object Uint32Array]': true
  , '[object Float32Array]': true
  , '[object Float64Array]': true
}

function isTypedArray(arr) {
  return (
       isStrictTypedArray(arr)
    || isLooseTypedArray(arr)
  )
}

function isStrictTypedArray(arr) {
  return (
       arr instanceof Int8Array
    || arr instanceof Int16Array
    || arr instanceof Int32Array
    || arr instanceof Uint8Array
    || arr instanceof Uint8ClampedArray
    || arr instanceof Uint16Array
    || arr instanceof Uint32Array
    || arr instanceof Float32Array
    || arr instanceof Float64Array
  )
}

function isLooseTypedArray(arr) {
  return names[toString.call(arr)]
}


/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/isarray/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "../../node_modules/level-errors/errors.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-errors/errors.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 LevelUP contributors
 * See list at <https://github.com/rvagg/node-levelup#contributing>
 * MIT License
 * <https://github.com/rvagg/node-levelup/blob/master/LICENSE.md>
 */

var createError = __webpack_require__(/*! errno */ "../../node_modules/errno/errno.js").create
var LevelUPError = createError('LevelUPError')
var NotFoundError = createError('NotFoundError', LevelUPError)

NotFoundError.prototype.notFound = true
NotFoundError.prototype.status = 404

module.exports = {
  LevelUPError: LevelUPError,
  InitializationError: createError('InitializationError', LevelUPError),
  OpenError: createError('OpenError', LevelUPError),
  ReadError: createError('ReadError', LevelUPError),
  WriteError: createError('WriteError', LevelUPError),
  NotFoundError: NotFoundError,
  EncodingError: createError('EncodingError', LevelUPError)
}


/***/ }),

/***/ "../../node_modules/level-iterator-stream/index.js":
/*!**************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/index.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var Readable = __webpack_require__(/*! readable-stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js").Readable
var extend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")

module.exports = ReadStream
inherits(ReadStream, Readable)

function ReadStream (iterator, options) {
  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options)
  options = options || {}
  Readable.call(this, extend(options, {
    objectMode: true
  }))
  this._iterator = iterator
  this._options = options
  this.on('end', this.destroy.bind(this, null, null))
}

ReadStream.prototype._read = function () {
  var self = this
  var options = this._options
  if (this.destroyed) return

  this._iterator.next(function (err, key, value) {
    if (self.destroyed) return
    if (err) return self.destroy(err)

    if (key === undefined && value === undefined) {
      self.push(null)
    } else if (options.keys !== false && options.values === false) {
      self.push(key)
    } else if (options.keys === false && options.values !== false) {
      self.push(value)
    } else {
      self.push({ key: key, value: value })
    }
  })
}

ReadStream.prototype._destroy = function (err, callback) {
  this._iterator.end(function (err2) {
    callback(err || err2)
  })
}


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js":
/*!****************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js":
/*!*********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var experimentalWarnings = new Set();

function emitExperimentalWarning(feature) {
  if (experimentalWarnings.has(feature)) return;
  var msg = feature + ' is an experimental feature. This feature could ' +
       'change at any time';
  experimentalWarnings.add(feature);
  process.emitWarning(msg, 'ExperimentalWarning');
}

function noop() {}

module.exports.emitExperimentalWarning = process.emitWarning
  ? emitExperimentalWarning
  : noop;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js":
/*!********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(/*! ./_stream_readable */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js");

var Writable = __webpack_require__(/*! ./_stream_writable */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js":
/*!**********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(/*! util */ 0);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js");

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

var _require2 = __webpack_require__(/*! ../experimentalWarning */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/experimentalWarning.js"),
    emitExperimentalWarning = _require2.emitExperimentalWarning; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc); // if setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  self._readableState.readableListening = self.listenerCount('readable') > 0; // crude way to check if we should resume

  if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    emitExperimentalWarning('Readable[Symbol.asyncIterator]');

    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js");
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js":
/*!***********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js ***!
  \***********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js":
/*!**********************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js ***!
  \**********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "../../node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

__webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    stream.emit('error', er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!*************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(/*! ./end-of-stream */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js");

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(null, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(null, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(null, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kLastPromise, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(null, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!**********************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js"),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(/*! util */ 1),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  var _proto = BufferList.prototype;

  _proto.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  _proto.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  _proto.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  _proto.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  _proto.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  _proto.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  } // Consumes a specified amount of bytes or characters from the buffered data.
  ;

  _proto.consume = function consume(n, hasStrings) {
    var ret;

    if (n < this.head.data.length) {
      // `slice` is the same for buffers and strings.
      ret = this.head.data.slice(0, n);
      this.head.data = this.head.data.slice(n);
    } else if (n === this.head.data.length) {
      // First chunk is a perfect match.
      ret = this.shift();
    } else {
      // Result spans more than one buffer.
      ret = hasStrings ? this._getString(n) : this._getBuffer(n);
    }

    return ret;
  };

  _proto.first = function first() {
    return this.head.data;
  } // Consumes a specified amount of characters from the buffered data.
  ;

  _proto._getString = function _getString(n) {
    var p = this.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;

    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;

      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = str.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Consumes a specified amount of bytes from the buffered data.
  ;

  _proto._getBuffer = function _getBuffer(n) {
    var ret = Buffer.allocUnsafe(n);
    var p = this.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;

    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;

      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) this.head = p.next;else this.head = this.tail = null;
        } else {
          this.head = p;
          p.data = buf.slice(nb);
        }

        break;
      }

      ++c;
    }

    this.length -= c;
    return ret;
  } // Make sure the linked list only shows the minimal necessary information.
  ;

  _proto[custom] = function (_, options) {
    return inspect(this, _objectSpread({}, options, {
      // Only inspect one level.
      depth: 0,
      // It should not recurse.
      customInspect: false
    }));
  };

  return BufferList;
}();

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!******************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      process.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      process.nextTick(emitErrorAndCloseNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(/*! ../../../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes.ERR_STREAM_PREMATURE_CLOSE;

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function once(callback) {
  var called = false;
  return function (err) {
    if (called) return;
    called = true;
    callback.call(this, err);
  };
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var ws = stream._writableState;
  var rs = stream._readableState;
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var onfinish = function onfinish() {
    writable = false;
    if (!readable) callback.call(stream);
  };

  var onend = function onend() {
    readable = false;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    if (readable && !(rs && rs.ended)) {
      return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
    }

    if (writable && !(ws && ws.ended)) {
      return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !ws) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js":
/*!****************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/state.js ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(/*! ../../../errors */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/errors-browser.js").codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*************************************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "../../node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js":
/*!******************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-iterator-stream/node_modules/readable-stream/readable-browser.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "../../node_modules/level-iterator-stream/node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "../../node_modules/level-js/index.js":
/*!*************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/index.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* global indexedDB */



module.exports = Level

var AbstractLevelDOWN = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/level-js/node_modules/abstract-leveldown/index.js").AbstractLevelDOWN
var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var Iterator = __webpack_require__(/*! ./iterator */ "../../node_modules/level-js/iterator.js")
var mixedToBuffer = __webpack_require__(/*! ./util/mixed-to-buffer */ "../../node_modules/level-js/util/mixed-to-buffer.js")
var setImmediate = __webpack_require__(/*! ./util/immediate */ "../../node_modules/level-js/util/immediate-browser.js")
var support = __webpack_require__(/*! ./util/support */ "../../node_modules/level-js/util/support.js")

var DEFAULT_PREFIX = 'level-js-'

function Level (location, opts) {
  if (!(this instanceof Level)) return new Level(location, opts)
  AbstractLevelDOWN.call(this)
  opts = opts || {}

  if (typeof location !== 'string') {
    throw new Error('constructor requires a location string argument')
  }

  this.location = location
  this.prefix = opts.prefix || DEFAULT_PREFIX
  this.version = parseInt(opts.version || 1, 10)
}

inherits(Level, AbstractLevelDOWN)

// Detect binary and array key support (IndexedDB Second Edition)
Level.binaryKeys = support.binaryKeys(indexedDB)
Level.arrayKeys = support.arrayKeys(indexedDB)

Level.prototype._open = function (options, callback) {
  var req = indexedDB.open(this.prefix + this.location, this.version)
  var self = this

  req.onerror = function () {
    callback(req.error || new Error('unknown error'))
  }

  req.onsuccess = function () {
    self.db = req.result
    callback()
  }

  req.onupgradeneeded = function (ev) {
    var db = ev.target.result

    if (!db.objectStoreNames.contains(self.location)) {
      db.createObjectStore(self.location)
    }
  }
}

Level.prototype.store = function (mode) {
  var transaction = this.db.transaction([this.location], mode)
  return transaction.objectStore(this.location)
}

Level.prototype.await = function (request, callback) {
  var transaction = request.transaction

  // Take advantage of the fact that a non-canceled request error aborts
  // the transaction. I.e. no need to listen for "request.onerror".
  transaction.onabort = function () {
    callback(transaction.error || new Error('aborted by user'))
  }

  transaction.oncomplete = function () {
    callback(null, request.result)
  }
}

Level.prototype._get = function (key, options, callback) {
  var store = this.store('readonly')

  try {
    var req = store.get(key)
  } catch (err) {
    return setImmediate(function () {
      callback(err)
    })
  }

  this.await(req, function (err, value) {
    if (err) return callback(err)

    if (value === undefined) {
      // 'NotFound' error, consistent with LevelDOWN API
      return callback(new Error('NotFound'))
    }

    if (options.asBuffer) {
      value = mixedToBuffer(value)
    }

    callback(null, value)
  })
}

Level.prototype._del = function (key, options, callback) {
  var store = this.store('readwrite')

  try {
    var req = store.delete(key)
  } catch (err) {
    return setImmediate(function () {
      callback(err)
    })
  }

  this.await(req, callback)
}

Level.prototype._put = function (key, value, options, callback) {
  var store = this.store('readwrite')

  try {
    // Will throw a DataError or DataCloneError if the environment
    // does not support serializing the key or value respectively.
    var req = store.put(value, key)
  } catch (err) {
    return setImmediate(function () {
      callback(err)
    })
  }

  this.await(req, callback)
}

// Valid key types in IndexedDB Second Edition:
//
// - Number, except NaN. Includes Infinity and -Infinity
// - Date, except invalid (NaN)
// - String
// - ArrayBuffer or a view thereof (typed arrays). In level-js we also support
//   Buffer (which is an Uint8Array) (and the primary binary type of Level).
// - Array, except cyclical and empty (e.g. Array(10)). Elements must be valid
//   types themselves.
Level.prototype._serializeKey = function (key) {
  if (Buffer.isBuffer(key)) {
    return Level.binaryKeys ? key : key.toString()
  } else if (Array.isArray(key)) {
    return Level.arrayKeys ? key.map(this._serializeKey, this) : String(key)
  } else {
    return key
  }
}

Level.prototype._serializeValue = function (value) {
  return value
}

Level.prototype._iterator = function (options) {
  return new Iterator(this, this.location, options)
}

Level.prototype._batch = function (operations, options, callback) {
  if (operations.length === 0) return setImmediate(callback)

  var store = this.store('readwrite')
  var transaction = store.transaction
  var index = 0
  var error

  transaction.onabort = function () {
    callback(error || transaction.error || new Error('aborted by user'))
  }

  transaction.oncomplete = function () {
    callback()
  }

  // Wait for a request to complete before making the next, saving CPU.
  function loop () {
    var op = operations[index++]
    var key = op.key

    try {
      var req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)
    } catch (err) {
      error = err
      transaction.abort()
      return
    }

    if (index < operations.length) {
      req.onsuccess = loop
    }
  }

  loop()
}

Level.prototype._close = function (callback) {
  this.db.close()
  setImmediate(callback)
}

Level.destroy = function (location, prefix, callback) {
  if (typeof prefix === 'function') {
    callback = prefix
    prefix = DEFAULT_PREFIX
  }
  var request = indexedDB.deleteDatabase(prefix + location)
  request.onsuccess = function () {
    callback()
  }
  request.onerror = function (err) {
    callback(err)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/level-js/iterator.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/iterator.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* global IDBKeyRange */



var inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js")
var AbstractIterator = __webpack_require__(/*! abstract-leveldown */ "../../node_modules/level-js/node_modules/abstract-leveldown/index.js").AbstractIterator
var ltgt = __webpack_require__(/*! ltgt */ "../../node_modules/ltgt/index.js")
var mixedToBuffer = __webpack_require__(/*! ./util/mixed-to-buffer */ "../../node_modules/level-js/util/mixed-to-buffer.js")
var setImmediate = __webpack_require__(/*! ./util/immediate */ "../../node_modules/level-js/util/immediate-browser.js")
var noop = function () {}

module.exports = Iterator

function Iterator (db, location, options) {
  AbstractIterator.call(this, db)

  this._limit = options.limit
  this._count = 0
  this._callback = null
  this._cache = []
  this._completed = false
  this._aborted = false
  this._error = null
  this._transaction = null

  this._keyAsBuffer = options.keyAsBuffer
  this._valueAsBuffer = options.valueAsBuffer

  if (this._limit === 0) {
    this._completed = true
    return
  }

  try {
    var keyRange = this.createKeyRange(options)
  } catch (e) {
    // The lower key is greater than the upper key.
    // IndexedDB throws an error, but we'll just return 0 results.
    this._completed = true
    return
  }

  this.createIterator(location, keyRange, options.reverse)
}

inherits(Iterator, AbstractIterator)

Iterator.prototype.createKeyRange = function (options) {
  var lower = ltgt.lowerBound(options)
  var upper = ltgt.upperBound(options)
  var lowerOpen = ltgt.lowerBoundExclusive(options)
  var upperOpen = ltgt.upperBoundExclusive(options)

  if (lower !== undefined && upper !== undefined) {
    return IDBKeyRange.bound(lower, upper, lowerOpen, upperOpen)
  } else if (lower !== undefined) {
    return IDBKeyRange.lowerBound(lower, lowerOpen)
  } else if (upper !== undefined) {
    return IDBKeyRange.upperBound(upper, upperOpen)
  } else {
    return null
  }
}

Iterator.prototype.createIterator = function (location, keyRange, reverse) {
  var self = this
  var transaction = this.db.db.transaction([location], 'readonly')
  var store = transaction.objectStore(location)
  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')

  req.onsuccess = function (ev) {
    var cursor = ev.target.result
    if (cursor) self.onItem(cursor)
  }

  this._transaction = transaction

  // If an error occurs (on the request), the transaction will abort.
  transaction.onabort = function () {
    self.onAbort(self._transaction.error || new Error('aborted by user'))
  }

  transaction.oncomplete = function () {
    self.onComplete()
  }
}

Iterator.prototype.onItem = function (cursor) {
  this._cache.push(cursor.key, cursor.value)

  if (this._limit <= 0 || ++this._count < this._limit) {
    cursor['continue']()
  }

  this.maybeNext()
}

Iterator.prototype.onAbort = function (err) {
  this._aborted = true
  this._error = err
  this.maybeNext()
}

Iterator.prototype.onComplete = function () {
  this._completed = true
  this.maybeNext()
}

Iterator.prototype.maybeNext = function () {
  if (this._callback) {
    this._next(this._callback)
    this._callback = null
  }
}

Iterator.prototype._next = function (callback) {
  if (this._aborted) {
    // The error should be picked up by either next() or end().
    var err = this._error
    this._error = null

    setImmediate(function () {
      callback(err)
    })
  } else if (this._cache.length > 0) {
    var key = this._cache.shift()
    var value = this._cache.shift()

    if (this._keyAsBuffer) key = mixedToBuffer(key)
    if (this._valueAsBuffer) value = mixedToBuffer(value)

    setImmediate(function () {
      callback(null, key, value)
    })
  } else if (this._completed) {
    setImmediate(callback)
  } else {
    this._callback = callback
  }
}

Iterator.prototype._end = function (callback) {
  if (this._aborted || this._completed) {
    var err = this._error

    setImmediate(function () {
      callback(err)
    })

    return
  }

  // Don't advance the cursor anymore, and the transaction will complete
  // on its own in the next tick. This approach is much cleaner than calling
  // transaction.abort() with its unpredictable event order.
  this.onItem = noop
  this.onAbort = callback
  this.onComplete = callback
}


/***/ }),

/***/ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-chained-batch.js":
/*!**************************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/node_modules/abstract-leveldown/abstract-chained-batch.js ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function AbstractChainedBatch (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._operations = []
  this._written = false
}

AbstractChainedBatch.prototype._checkWritten = function () {
  if (this._written) {
    throw new Error('write() already called on this batch')
  }
}

AbstractChainedBatch.prototype.put = function (key, value) {
  this._checkWritten()

  var err = this.db._checkKey(key) || this.db._checkValue(value)
  if (err) throw err

  key = this.db._serializeKey(key)
  value = this.db._serializeValue(value)

  this._put(key, value)

  return this
}

AbstractChainedBatch.prototype._put = function (key, value) {
  this._operations.push({ type: 'put', key: key, value: value })
}

AbstractChainedBatch.prototype.del = function (key) {
  this._checkWritten()

  var err = this.db._checkKey(key)
  if (err) throw err

  key = this.db._serializeKey(key)
  this._del(key)

  return this
}

AbstractChainedBatch.prototype._del = function (key) {
  this._operations.push({ type: 'del', key: key })
}

AbstractChainedBatch.prototype.clear = function () {
  this._checkWritten()
  this._clear()

  return this
}

AbstractChainedBatch.prototype._clear = function () {
  this._operations = []
}

AbstractChainedBatch.prototype.write = function (options, callback) {
  this._checkWritten()

  if (typeof options === 'function') { callback = options }
  if (typeof callback !== 'function') {
    throw new Error('write() requires a callback argument')
  }
  if (typeof options !== 'object' || options === null) {
    options = {}
  }

  this._written = true
  this._write(options, callback)
}

AbstractChainedBatch.prototype._write = function (options, callback) {
  this.db._batch(this._operations, options, callback)
}

module.exports = AbstractChainedBatch


/***/ }),

/***/ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-iterator.js":
/*!*********************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/node_modules/abstract-leveldown/abstract-iterator.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function AbstractIterator (db) {
  if (typeof db !== 'object' || db === null) {
    throw new TypeError('First argument must be an abstract-leveldown compliant store')
  }

  this.db = db
  this._ended = false
  this._nexting = false
}

AbstractIterator.prototype.next = function (callback) {
  var self = this

  if (typeof callback !== 'function') {
    throw new Error('next() requires a callback argument')
  }

  if (self._ended) {
    process.nextTick(callback, new Error('cannot call next() after end()'))
    return self
  }

  if (self._nexting) {
    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'))
    return self
  }

  self._nexting = true
  self._next(function () {
    self._nexting = false
    callback.apply(null, arguments)
  })

  return self
}

AbstractIterator.prototype._next = function (callback) {
  process.nextTick(callback)
}

AbstractIterator.prototype.seek = function (target) {
  if (this._ended) {
    throw new Error('cannot call seek() after end()')
  }
  if (this._nexting) {
    throw new Error('cannot call seek() before next() has completed')
  }

  target = this.db._serializeKey(target)
  this._seek(target)
}

AbstractIterator.prototype._seek = function (target) {}

AbstractIterator.prototype.end = function (callback) {
  if (typeof callback !== 'function') {
    throw new Error('end() requires a callback argument')
  }

  if (this._ended) {
    return process.nextTick(callback, new Error('end() already called on iterator'))
  }

  this._ended = true
  this._end(callback)
}

AbstractIterator.prototype._end = function (callback) {
  process.nextTick(callback)
}

module.exports = AbstractIterator

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-leveldown.js":
/*!**********************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/node_modules/abstract-leveldown/abstract-leveldown.js ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, Buffer) {var xtend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-iterator.js")
var AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-chained-batch.js")
var hasOwnProperty = Object.prototype.hasOwnProperty
var rangeOptions = 'start end gt gte lt lte'.split(' ')

function AbstractLevelDOWN () {
  this.status = 'new'
}

AbstractLevelDOWN.prototype.open = function (options, callback) {
  var self = this
  var oldStatus = this.status

  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('open() requires a callback argument')
  }

  if (typeof options !== 'object' || options === null) options = {}

  options.createIfMissing = options.createIfMissing !== false
  options.errorIfExists = !!options.errorIfExists

  this.status = 'opening'
  this._open(options, function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'open'
    callback()
  })
}

AbstractLevelDOWN.prototype._open = function (options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.close = function (callback) {
  var self = this
  var oldStatus = this.status

  if (typeof callback !== 'function') {
    throw new Error('close() requires a callback argument')
  }

  this.status = 'closing'
  this._close(function (err) {
    if (err) {
      self.status = oldStatus
      return callback(err)
    }
    self.status = 'closed'
    callback()
  })
}

AbstractLevelDOWN.prototype._close = function (callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.get = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('get() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  options.asBuffer = options.asBuffer !== false

  this._get(key, options, callback)
}

AbstractLevelDOWN.prototype._get = function (key, options, callback) {
  process.nextTick(function () { callback(new Error('NotFound')) })
}

AbstractLevelDOWN.prototype.put = function (key, value, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('put() requires a callback argument')
  }

  var err = this._checkKey(key) || this._checkValue(value)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)
  value = this._serializeValue(value)

  if (typeof options !== 'object' || options === null) options = {}

  this._put(key, value, options, callback)
}

AbstractLevelDOWN.prototype._put = function (key, value, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.del = function (key, options, callback) {
  if (typeof options === 'function') callback = options

  if (typeof callback !== 'function') {
    throw new Error('del() requires a callback argument')
  }

  var err = this._checkKey(key)
  if (err) return process.nextTick(callback, err)

  key = this._serializeKey(key)

  if (typeof options !== 'object' || options === null) options = {}

  this._del(key, options, callback)
}

AbstractLevelDOWN.prototype._del = function (key, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype.batch = function (array, options, callback) {
  if (!arguments.length) return this._chainedBatch()

  if (typeof options === 'function') callback = options

  if (typeof array === 'function') callback = array

  if (typeof callback !== 'function') {
    throw new Error('batch(array) requires a callback argument')
  }

  if (!Array.isArray(array)) {
    return process.nextTick(callback, new Error('batch(array) requires an array argument'))
  }

  if (typeof options !== 'object' || options === null) options = {}

  var serialized = new Array(array.length)

  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] !== 'object' || array[i] === null) {
      return process.nextTick(callback, new Error('batch(array) element must be an object and not `null`'))
    }

    var e = xtend(array[i])

    if (e.type !== 'put' && e.type !== 'del') {
      return process.nextTick(callback, new Error("`type` must be 'put' or 'del'"))
    }

    var err = this._checkKey(e.key)
    if (err) return process.nextTick(callback, err)

    e.key = this._serializeKey(e.key)

    if (e.type === 'put') {
      var valueErr = this._checkValue(e.value)
      if (valueErr) return process.nextTick(callback, valueErr)

      e.value = this._serializeValue(e.value)
    }

    serialized[i] = e
  }

  this._batch(serialized, options, callback)
}

AbstractLevelDOWN.prototype._batch = function (array, options, callback) {
  process.nextTick(callback)
}

AbstractLevelDOWN.prototype._setupIteratorOptions = function (options) {
  options = cleanRangeOptions(this, options)

  options.reverse = !!options.reverse
  options.keys = options.keys !== false
  options.values = options.values !== false
  options.limit = 'limit' in options ? options.limit : -1
  options.keyAsBuffer = options.keyAsBuffer !== false
  options.valueAsBuffer = options.valueAsBuffer !== false

  return options
}

function cleanRangeOptions (db, options) {
  var result = {}

  for (var k in options) {
    if (!hasOwnProperty.call(options, k)) continue

    var opt = options[k]

    if (isRangeOption(k)) {
      // Note that we don't reject nullish and empty options here. While
      // those types are invalid as keys, they are valid as range options.
      opt = db._serializeKey(opt)
    }

    result[k] = opt
  }

  return result
}

function isRangeOption (k) {
  return rangeOptions.indexOf(k) !== -1
}

AbstractLevelDOWN.prototype.iterator = function (options) {
  if (typeof options !== 'object' || options === null) options = {}
  options = this._setupIteratorOptions(options)
  return this._iterator(options)
}

AbstractLevelDOWN.prototype._iterator = function (options) {
  return new AbstractIterator(this)
}

AbstractLevelDOWN.prototype._chainedBatch = function () {
  return new AbstractChainedBatch(this)
}

AbstractLevelDOWN.prototype._serializeKey = function (key) {
  return key
}

AbstractLevelDOWN.prototype._serializeValue = function (value) {
  return value
}

AbstractLevelDOWN.prototype._checkKey = function (key) {
  if (key === null || key === undefined) {
    return new Error('key cannot be `null` or `undefined`')
  } else if (Buffer.isBuffer(key) && key.length === 0) {
    return new Error('key cannot be an empty Buffer')
  } else if (key === '') {
    return new Error('key cannot be an empty String')
  } else if (Array.isArray(key) && key.length === 0) {
    return new Error('key cannot be an empty Array')
  }
}

AbstractLevelDOWN.prototype._checkValue = function (value) {
  if (value === null || value === undefined) {
    return new Error('value cannot be `null` or `undefined`')
  }
}

module.exports = AbstractLevelDOWN

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "../../node_modules/process/browser.js"), __webpack_require__(/*! ./../../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/level-js/node_modules/abstract-leveldown/index.js":
/*!*********************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/node_modules/abstract-leveldown/index.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.AbstractLevelDOWN = __webpack_require__(/*! ./abstract-leveldown */ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-leveldown.js")
exports.AbstractIterator = __webpack_require__(/*! ./abstract-iterator */ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-iterator.js")
exports.AbstractChainedBatch = __webpack_require__(/*! ./abstract-chained-batch */ "../../node_modules/level-js/node_modules/abstract-leveldown/abstract-chained-batch.js")


/***/ }),

/***/ "../../node_modules/level-js/util/immediate-browser.js":
/*!******************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/util/immediate-browser.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! immediate */ "../../node_modules/immediate/lib/index.js")


/***/ }),

/***/ "../../node_modules/level-js/util/mixed-to-buffer.js":
/*!****************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/util/mixed-to-buffer.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var toBuffer = __webpack_require__(/*! typedarray-to-buffer */ "../../node_modules/typedarray-to-buffer/index.js")

module.exports = function (value) {
  if (value instanceof Uint8Array) return toBuffer(value)
  else if (value instanceof ArrayBuffer) return Buffer.from(value)
  else return Buffer.from(String(value))
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/level-js/util/support.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/level-js/util/support.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.test = function (key) {
  return function test (impl) {
    try {
      impl.cmp(key, 0)
      return true
    } catch (err) {
      return false
    }
  }
}

exports.binaryKeys = exports.test(new Uint8Array(0))
exports.arrayKeys = exports.test([1])


/***/ }),

/***/ "../../node_modules/levelup/lib/batch.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/batch.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var WriteError = __webpack_require__(/*! level-errors */ "../../node_modules/level-errors/errors.js").WriteError
var promisify = __webpack_require__(/*! ./promisify */ "../../node_modules/levelup/lib/promisify.js")
var getCallback = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getCallback
var getOptions = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getOptions

function Batch (levelup) {
  this._levelup = levelup
  this.batch = levelup.db.batch()
  this.ops = []
  this.length = 0
}

Batch.prototype.put = function (key, value) {
  try {
    this.batch.put(key, value)
  } catch (e) {
    throw new WriteError(e)
  }

  this.ops.push({ type: 'put', key: key, value: value })
  this.length++

  return this
}

Batch.prototype.del = function (key) {
  try {
    this.batch.del(key)
  } catch (err) {
    throw new WriteError(err)
  }

  this.ops.push({ type: 'del', key: key })
  this.length++

  return this
}

Batch.prototype.clear = function () {
  try {
    this.batch.clear()
  } catch (err) {
    throw new WriteError(err)
  }

  this.ops = []
  this.length = 0

  return this
}

Batch.prototype.write = function (options, callback) {
  var levelup = this._levelup
  var ops = this.ops
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  options = getOptions(options)

  try {
    this.batch.write(options, function (err) {
      if (err) { return callback(new WriteError(err)) }
      levelup.emit('batch', ops)
      callback()
    })
  } catch (err) {
    throw new WriteError(err)
  }

  return promise
}

module.exports = Batch


/***/ }),

/***/ "../../node_modules/levelup/lib/common.js":
/*!*****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/common.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.getCallback = function (options, callback) {
  return typeof options === 'function' ? options : callback
}

exports.getOptions = function (options) {
  return typeof options === 'object' && options !== null ? options : {}
}


/***/ }),

/***/ "../../node_modules/levelup/lib/levelup.js":
/*!******************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/levelup.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter
var inherits = __webpack_require__(/*! util */ "../../node_modules/util/util.js").inherits
var extend = __webpack_require__(/*! xtend */ "../../node_modules/xtend/immutable.js")
var DeferredLevelDOWN = __webpack_require__(/*! deferred-leveldown */ "../../node_modules/deferred-leveldown/deferred-leveldown.js")
var IteratorStream = __webpack_require__(/*! level-iterator-stream */ "../../node_modules/level-iterator-stream/index.js")
var Batch = __webpack_require__(/*! ./batch */ "../../node_modules/levelup/lib/batch.js")
var errors = __webpack_require__(/*! level-errors */ "../../node_modules/level-errors/errors.js")
var assert = __webpack_require__(/*! assert */ "../../node_modules/assert/assert.js")
var promisify = __webpack_require__(/*! ./promisify */ "../../node_modules/levelup/lib/promisify.js")
var getCallback = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getCallback
var getOptions = __webpack_require__(/*! ./common */ "../../node_modules/levelup/lib/common.js").getOptions

var WriteError = errors.WriteError
var ReadError = errors.ReadError
var NotFoundError = errors.NotFoundError
var OpenError = errors.OpenError
var InitializationError = errors.InitializationError

// Possible AbstractLevelDOWN#status values:
//  - 'new'     - newly created, not opened or closed
//  - 'opening' - waiting for the database to be opened, post open()
//  - 'open'    - successfully opened the database, available for use
//  - 'closing' - waiting for the database to be closed, post close()
//  - 'closed'  - database has been successfully closed, should not be
//                 used except for another open() operation

function LevelUP (db, options, callback) {
  if (!(this instanceof LevelUP)) {
    return new LevelUP(db, options, callback)
  }

  var error

  EventEmitter.call(this)
  this.setMaxListeners(Infinity)

  if (typeof options === 'function') {
    callback = options
    options = {}
  }

  options = options || {}

  if (!db || typeof db !== 'object') {
    error = new InitializationError('First argument must be an abstract-leveldown compliant store')
    if (typeof callback === 'function') {
      return process.nextTick(callback, error)
    }
    throw error
  }

  assert.strictEqual(typeof db.status, 'string', '.status required, old abstract-leveldown')

  this.options = getOptions(options)
  this._db = db
  this.db = new DeferredLevelDOWN(db)
  this.open(callback)
}

LevelUP.prototype.emit = EventEmitter.prototype.emit
LevelUP.prototype.once = EventEmitter.prototype.once
inherits(LevelUP, EventEmitter)

LevelUP.prototype.open = function (callback) {
  var self = this
  var promise

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (this.isOpen()) {
    process.nextTick(callback, null, self)
    return promise
  }

  if (this._isOpening()) {
    this.once('open', function () { callback(null, self) })
    return promise
  }

  this.emit('opening')

  this.db.open(this.options, function (err) {
    if (err) {
      return callback(new OpenError(err))
    }
    self.db = self._db
    callback(null, self)
    self.emit('open')
    self.emit('ready')
  })

  return promise
}

LevelUP.prototype.close = function (callback) {
  var self = this
  var promise

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (this.isOpen()) {
    this.db.close(function () {
      self.emit('closed')
      callback.apply(null, arguments)
    })
    this.emit('closing')
    this.db = new DeferredLevelDOWN(this._db)
  } else if (this.isClosed()) {
    process.nextTick(callback)
  } else if (this.db.status === 'closing') {
    this.once('closed', callback)
  } else if (this._isOpening()) {
    this.once('open', function () {
      self.close(callback)
    })
  }

  return promise
}

LevelUP.prototype.isOpen = function () {
  return this.db.status === 'open'
}

LevelUP.prototype._isOpening = function () {
  return this.db.status === 'opening'
}

LevelUP.prototype.isClosed = function () {
  return (/^clos|new/).test(this.db.status)
}

LevelUP.prototype.get = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new ReadError('get() requires a key argument')
  }

  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.get(key, options, function (err, value) {
    if (err) {
      if ((/notfound/i).test(err) || err.notFound) {
        err = new NotFoundError('Key not found in database [' + key + ']', err)
      } else {
        err = new ReadError(err)
      }
      return callback(err)
    }
    callback(null, value)
  })

  return promise
}

LevelUP.prototype.put = function (key, value, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('put() requires a key argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.put(key, value, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('put', key, value)
    callback()
  })

  return promise
}

LevelUP.prototype.del = function (key, options, callback) {
  if (key === null || key === undefined) {
    throw new WriteError('del() requires a key argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.del(key, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('del', key)
    callback()
  })

  return promise
}

LevelUP.prototype.batch = function (arr, options, callback) {
  if (!arguments.length) {
    return new Batch(this)
  }

  if (!Array.isArray(arr)) {
    throw new WriteError('batch() requires an array argument')
  }

  var self = this
  var promise

  callback = getCallback(options, callback)

  if (!callback) {
    callback = promisify()
    promise = callback.promise
  }

  if (maybeError(this, callback)) { return promise }

  options = getOptions(options)

  this.db.batch(arr, options, function (err) {
    if (err) {
      return callback(new WriteError(err))
    }
    self.emit('batch', arr)
    callback()
  })

  return promise
}

LevelUP.prototype.iterator = function (options) {
  return this.db.iterator(options)
}

LevelUP.prototype.readStream =
LevelUP.prototype.createReadStream = function (options) {
  options = extend({ keys: true, values: true }, options)
  if (typeof options.limit !== 'number') { options.limit = -1 }
  return new IteratorStream(this.db.iterator(options), options)
}

LevelUP.prototype.keyStream =
LevelUP.prototype.createKeyStream = function (options) {
  return this.createReadStream(extend(options, { keys: true, values: false }))
}

LevelUP.prototype.valueStream =
LevelUP.prototype.createValueStream = function (options) {
  return this.createReadStream(extend(options, { keys: false, values: true }))
}

LevelUP.prototype.toString = function () {
  return 'LevelUP'
}

function maybeError (db, callback) {
  if (!db._isOpening() && !db.isOpen()) {
    process.nextTick(callback, new ReadError('Database is not open'))
    return true
  }
}

LevelUP.errors = errors
module.exports = LevelUP.default = LevelUP

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/levelup/lib/promisify.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/levelup/lib/promisify.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function promisify () {
  var callback
  var promise = new Promise(function (resolve, reject) {
    callback = function callback (err, value) {
      if (err) reject(err)
      else resolve(value)
    }
  })
  callback.promise = promise
  return callback
}

module.exports = promisify


/***/ }),

/***/ "../../node_modules/ltgt/index.js":
/*!*********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/ltgt/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {
exports.compare = function (a, b) {

  if(Buffer.isBuffer(a)) {
    var l = Math.min(a.length, b.length)
    for(var i = 0; i < l; i++) {
      var cmp = a[i] - b[i]
      if(cmp) return cmp
    }
    return a.length - b.length
  }

  return a < b ? -1 : a > b ? 1 : 0
}

// to be compatible with the current abstract-leveldown tests
// nullish or empty strings.
// I could use !!val but I want to permit numbers and booleans,
// if possible.

function isDef (val) {
  return val !== undefined && val !== ''
}

function has (range, name) {
  return Object.hasOwnProperty.call(range, name)
}

function hasKey(range, name) {
  return Object.hasOwnProperty.call(range, name) && name
}

var lowerBoundKey = exports.lowerBoundKey = function (range) {
    return (
       hasKey(range, 'gt')
    || hasKey(range, 'gte')
    || hasKey(range, 'min')
    || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start'))
    || undefined
    )
}

var lowerBound = exports.lowerBound = function (range, def) {
  var k = lowerBoundKey(range)
  return k ? range[k] : def
}

var lowerBoundInclusive = exports.lowerBoundInclusive = function (range) {
  return has(range, 'gt') ? false : true
}

var upperBoundInclusive = exports.upperBoundInclusive =
  function (range) {
    return (has(range, 'lt') /*&& !range.maxEx*/) ? false : true
  }

var lowerBoundExclusive = exports.lowerBoundExclusive =
  function (range) {
    return !lowerBoundInclusive(range)
  }

var upperBoundExclusive = exports.upperBoundExclusive =
  function (range) {
    return !upperBoundInclusive(range)
  }

var upperBoundKey = exports.upperBoundKey = function (range) {
    return (
       hasKey(range, 'lt')
    || hasKey(range, 'lte')
    || hasKey(range, 'max')
    || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end'))
    || undefined
    )
}

var upperBound = exports.upperBound = function (range, def) {
  var k = upperBoundKey(range)
  return k ? range[k] : def
}

exports.start = function (range, def) {
  return range.reverse ? upperBound(range, def) : lowerBound(range, def)
}
exports.end = function (range, def) {
  return range.reverse ? lowerBound(range, def) : upperBound(range, def)
}
exports.startInclusive = function (range) {
  return (
    range.reverse
  ? upperBoundInclusive(range)
  : lowerBoundInclusive(range)
  )
}
exports.endInclusive = function (range) {
  return (
    range.reverse
  ? lowerBoundInclusive(range)
  : upperBoundInclusive(range)
  )
}

function id (e) { return e }

exports.toLtgt = function (range, _range, map, lower, upper) {
  _range = _range || {}
  map = map || id
  var defaults = arguments.length > 3
  var lb = exports.lowerBoundKey(range)
  var ub = exports.upperBoundKey(range)
  if(lb) {
    if(lb === 'gt') _range.gt = map(range.gt, false)
    else            _range.gte = map(range[lb], false)
  }
  else if(defaults)
    _range.gte = map(lower, false)

  if(ub) {
    if(ub === 'lt') _range.lt = map(range.lt, true)
    else            _range.lte = map(range[ub], true)
  }
  else if(defaults)
    _range.lte = map(upper, true)

  if(range.reverse != null)
    _range.reverse = !!range.reverse

  //if range was used mutably
  //(in level-sublevel it's part of an options object
  //that has more properties on it.)
  if(has(_range, 'max'))   delete _range.max
  if(has(_range, 'min'))   delete _range.min
  if(has(_range, 'start')) delete _range.start
  if(has(_range, 'end'))   delete _range.end

  return _range
}

exports.contains = function (range, key, compare) {
  compare = compare || exports.compare

  var lb = lowerBound(range)
  if(isDef(lb)) {
    var cmp = compare(key, lb)
    if(cmp < 0 || (cmp === 0 && lowerBoundExclusive(range)))
      return false
  }

  var ub = upperBound(range)
  if(isDef(ub)) {
    var cmp = compare(key, ub)
    if(cmp > 0 || (cmp === 0) && upperBoundExclusive(range))
      return false
  }

  return true
}

exports.filter = function (range, compare) {
  return function (key) {
    return exports.contains(range, key, compare)
  }
}



/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/process/browser.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../node_modules/prr/prr.js":
/*!******************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/prr/prr.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
  * prr
  * (c) 2013 Rod Vagg <rod@vagg.org>
  * https://github.com/rvagg/prr
  * License: MIT
  */

(function (name, context, definition) {
  if (  true && module.exports)
    module.exports = definition()
  else
    context[name] = definition()
})('prr', this, function() {

  var setProperty = typeof Object.defineProperty == 'function'
      ? function (obj, key, options) {
          Object.defineProperty(obj, key, options)
          return obj
        }
      : function (obj, key, options) { // < es5
          obj[key] = options.value
          return obj
        }

    , makeOptions = function (value, options) {
        var oo = typeof options == 'object'
          , os = !oo && typeof options == 'string'
          , op = function (p) {
              return oo
                ? !!options[p]
                : os
                  ? options.indexOf(p[0]) > -1
                  : false
            }

        return {
            enumerable   : op('enumerable')
          , configurable : op('configurable')
          , writable     : op('writable')
          , value        : value
        }
      }

    , prr = function (obj, key, value, options) {
        var k

        options = makeOptions(value, options)

        if (typeof key == 'object') {
          for (k in key) {
            if (Object.hasOwnProperty.call(key, k)) {
              options.value = key[k]
              setProperty(obj, k, options)
            }
          }
          return obj
        }

        return setProperty(obj, key, options)
      }

  return prr
})

/***/ }),

/***/ "../../node_modules/safe-buffer/index.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/safe-buffer/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "../../node_modules/string_decoder/lib/string_decoder.js":
/*!********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/string_decoder/lib/string_decoder.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "../../node_modules/typedarray-to-buffer/index.js":
/*!*************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/typedarray-to-buffer/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Convert a typed array to a Buffer without a copy
 *
 * Author:   Feross Aboukhadijeh <https://feross.org>
 * License:  MIT
 *
 * `npm install typedarray-to-buffer`
 */

var isTypedArray = __webpack_require__(/*! is-typedarray */ "../../node_modules/is-typedarray/index.js").strict

module.exports = function typedarrayToBuffer (arr) {
  if (isTypedArray(arr)) {
    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer
    var buf = Buffer.from(arr.buffer)
    if (arr.byteLength !== arr.buffer.byteLength) {
      // Respect the "view", i.e. byteOffset and byteLength, without doing a copy
      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength)
    }
    return buf
  } else {
    // Pass through all other types to `Buffer.from`
    return Buffer.from(arr)
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/util-deprecate/browser.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util-deprecate/browser.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/util/support/isBufferBrowser.js":
/*!***************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util/support/isBufferBrowser.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "../../node_modules/util/util.js":
/*!********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util/util.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "../../node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../../node_modules/xtend/immutable.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/xtend/immutable.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}


/***/ }),

/***/ "./src/PNGFileMixins.js":
/*!******************************!*\
  !*** ./src/PNGFileMixins.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! causal-net.utils */ "causal-net.utils")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _causalNet) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const PNGFileMixins = StorageClass => class extends StorageClass {
    async readPNGFile(filePath) {
      return await this.readFile(filePath, true);
    }
    /**
     * @param  {} filePath
     * @param  {} data
     */


    async writePNGFile(filePath, imgBuffer) {
      return await this.writeFile(filePath, imgBuffer);
    }

    async fetchPNG(url) {
      return new Promise(async (resolve, reject) => {
        let reader = await _causalNet.Fetch.streamData(url);
        let png = new _causalNet.PNG();
        png.on('parsed', function () {
          resolve(this.data);
        });
        png.on('error', err => {
          console.error(err);
          reject(err);
        });
        reader.pipe(png);
      });
    }

    async fetchPNGFile(url, filePath) {
      let data = await this.fetchPNG(url);
      return await this.writePNGFile(filePath, data);
    }

    async streamPNGFile(url, filePath, transfromFn) {
      throw Error('implement required');
    }

  };

  var _default = PNGFileMixins;
  _exports.default = _default;
});

/***/ }),

/***/ "./src/baseStorage.js":
/*!****************************!*\
  !*** ./src/baseStorage.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  class baseStorage {
    constructor(storage) {
      this.storage = storage;
    }

    get CoreStorage() {
      return this.storage;
    }

  }

  _exports.default = baseStorage;
});

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./indexDBStorage */ "./src/indexDBStorage.js"), __webpack_require__(/*! ./baseStorage */ "./src/baseStorage.js"), __webpack_require__(/*! ./PNGFileMixins */ "./src/PNGFileMixins.js"), __webpack_require__(/*! ./storage.mixins */ "./src/storage.mixins.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _indexDBStorage, _baseStorage, _PNGFileMixins, _storage) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "indexDBStorage", {
    enumerable: true,
    get: function () {
      return _indexDBStorage.default;
    }
  });
  Object.defineProperty(_exports, "BaseStorage", {
    enumerable: true,
    get: function () {
      return _baseStorage.default;
    }
  });
  Object.defineProperty(_exports, "PNGFileMixins", {
    enumerable: true,
    get: function () {
      return _PNGFileMixins.default;
    }
  });
  Object.defineProperty(_exports, "StorageMixins", {
    enumerable: true,
    get: function () {
      return _storage.default;
    }
  });
  _indexDBStorage = _interopRequireDefault(_indexDBStorage);
  _baseStorage = _interopRequireDefault(_baseStorage);
  _PNGFileMixins = _interopRequireDefault(_PNGFileMixins);
  _storage = _interopRequireDefault(_storage);
});

/***/ }),

/***/ "./src/indexDBStorage.js":
/*!*******************************!*\
  !*** ./src/indexDBStorage.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! causal-net.utils */ "causal-net.utils"), __webpack_require__(/*! ./baseStorage */ "./src/baseStorage.js"), __webpack_require__(/*! ./PNGFileMixins */ "./src/PNGFileMixins.js"), __webpack_require__(/*! ./indexDBStorage.mixins.node */ "./src/indexDBStorage.mixins.node.js"), __webpack_require__(/*! ./indexDBStorage.mixins.web */ "./src/indexDBStorage.mixins.web.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _causalNet, _baseStorage, _PNGFileMixins, _indexDBStorageMixins, _indexDBStorageMixins2) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _baseStorage = _interopRequireDefault(_baseStorage);
  _PNGFileMixins = _interopRequireDefault(_PNGFileMixins);
  _indexDBStorageMixins = _interopRequireDefault(_indexDBStorageMixins);
  _indexDBStorageMixins2 = _interopRequireDefault(_indexDBStorageMixins2);

  class IndexDBStorage extends _causalNet.Platform.mixWith(_baseStorage.default, {
    'node': [_indexDBStorageMixins.default, _PNGFileMixins.default],
    'web': [_indexDBStorageMixins2.default, _PNGFileMixins.default]
  }) {
    reformateName(key) {
      key = key.replace(/\/{2,3,4,5}/g, '/');

      if (key[0] === '/') {
        return key;
      } else {
        return '/' + key;
      }
    }

    createCheckFileNameFn(name) {
      var pattern = name;
      var regex = new RegExp(`^${pattern}.*`, 'g');
      return fileName => fileName.match(regex) || [];
    }

    async getItem(key, asBuffer = false) {
      return new Promise((resolve, reject) => {
        this.storage.get(key, {
          asBuffer
        }, (err, data) => {
          if (err) {
            console.error({
              err
            });
            reject('error read');
          } else {
            resolve({
              [key]: data
            });
          }
        });
      });
    }

    async setItem(key, data) {
      return new Promise((resolve, reject) => {
        key = this.reformateName(key);
        this.storage.put(key, data, err => {
          if (err) {
            console.error({
              err
            });
            reject('error write');
          } else {
            resolve(key);
          }
        });
      });
    }

    async delItem(key) {
      return new Promise((resolve, reject) => {
        key = this.reformateName(key);
        this.storage.del(key, err => {
          if (err) {
            console.error({
              err
            });
            reject('error write');
          } else {
            resolve(key);
          }
        });
      });
    }

    async batch(ops) {
      return new Promise((resolve, reject) => {
        this.storage.batch(ops, (err, data) => {
          if (err) {
            console.error({
              err
            });
            reject('error ops');
          } else {
            resolve(ops);
          }
        });
      });
    }

    async deleteItem(filePath) {
      return new Promise((resolve, reject) => {
        this.storage.del(filePath, err => {
          if (err) {
            console.error({
              err
            });
            reject('error ops');
          } else {
            resolve(ops);
          }
        });
      });
    }

    async deleteFileByPrefix(filePath) {
      const DelOp = key => ({
        type: 'del',
        key: key
      });

      let fileList = await this.getFileList(filePath);
      let delFileOps = fileList.map(f => DelOp(f));
      return await this.batch(delFileOps);
    }

    async getFileList(filePath = '/') {
      const NameTester = this.createCheckFileNameFn(filePath);
      return new Promise((resolve, reject) => {
        let fileList = [];
        this.storage.createKeyStream().on('data', key => {
          key = key.toString('utf8');

          if (NameTester(key).length === 1) {
            fileList.push(key);
          }
        }).on('close', () => resolve(fileList)).on('end', () => resolve(fileList)).on('error', err => {
          console.error(err);
          reject('error getFileList');
        });
      });
    }
    /**
     * @async
     * @param  {} filePath
     */


    async readFile(filePath) {
      let item = await this.getItem(filePath);
      return item[filePath];
    }
    /**
     * @param  {} filePath
     * @param  {} data
     */


    async writeFile(filePath, data) {
      return await this.setItem(filePath, data);
    }

    async deleteFile(filePath) {
      return await this.delItem(filePath);
    }

    async fetchFile(url, filePath) {
      let response = await _causalNet.Fetch.fetchData(url);
      return await this.writeFile(filePath, response);
    }

    async streamFile(url, filePath, transformer = null) {
      throw Error('implement required');
    }

  }

  var _default = new IndexDBStorage();

  _exports.default = _default;
});

/***/ }),

/***/ "./src/indexDBStorage.mixins.node.js":
/*!*******************************************!*\
  !*** ./src/indexDBStorage.mixins.node.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! levelup */ "../../node_modules/levelup/lib/levelup.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _levelup) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _levelup = _interopRequireDefault(_levelup);

  const LevelDownMixins = StorageClass => class extends StorageClass {
    constructor() {
      var leveldown = __webpack_require__(/*! leveldown */ "leveldown");

      super((0, _levelup.default)(leveldown('data')));
    }

  };

  var _default = LevelDownMixins;
  _exports.default = _default;
});

/***/ }),

/***/ "./src/indexDBStorage.mixins.web.js":
/*!******************************************!*\
  !*** ./src/indexDBStorage.mixins.web.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! levelup */ "../../node_modules/levelup/lib/levelup.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _levelup) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _levelup = _interopRequireDefault(_levelup);

  const LevelJSMixins = StorageClass => class extends StorageClass {
    constructor() {
      var leveljs = __webpack_require__(/*! level-js */ "../../node_modules/level-js/index.js");

      super((0, _levelup.default)(leveljs('data')));
    }

  };

  var _default = LevelJSMixins;
  _exports.default = _default;
});

/***/ }),

/***/ "./src/storage.mixins.js":
/*!*******************************!*\
  !*** ./src/storage.mixins.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  const StorageMixins = BaseClass => class extends BaseClass {
    async storageSummary() {
      return await this.storage.getFileList();
    }

    set Storage(storage) {
      this.storage = storage;
    }

    get Storage() {
      return this.storage;
    }

  };

  var _default = StorageMixins;
  _exports.default = _default;
});

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "causal-net.utils":
/*!***********************************!*\
  !*** external "causal-net.utils" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_causal_net_utils__;

/***/ }),

/***/ "leveldown":
/*!***************************!*\
  !*** external "level-js" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_leveldown__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ "./packages/causality-utils/dist/@causalNet/utils.web.js":
/*!***************************************************************!*\
  !*** ./packages/causality-utils/dist/@causalNet/utils.web.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(/*! cross-fetch */ "./node_modules/cross-fetch/dist/browser-ponyfill.js"), __webpack_require__(/*! platform */ "./node_modules/platform/platform.js"), __webpack_require__(/*! fetch-readablestream */ "./node_modules/fetch-readablestream/lib/entry.js"), __webpack_require__(/*! pngjs3 */ "./node_modules/pngjs3/dist/pngjs3.js"), __webpack_require__(/*! random */ "./node_modules/random/index.js"));
	else {}
})(this, function(__WEBPACK_EXTERNAL_MODULE_cross_fetch__, __WEBPACK_EXTERNAL_MODULE_platform__, __WEBPACK_EXTERNAL_MODULE_fetch_readablestream__, __WEBPACK_EXTERNAL_MODULE_pngjs3__, __WEBPACK_EXTERNAL_MODULE_random__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!*******************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "../../node_modules/base64-js/index.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/base64-js/index.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../node_modules/buffer/index.js":
/*!***********************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/buffer/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "../../node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "../../node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "../../node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/core-util-is/lib/util.js":
/*!********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/core-util-is/lib/util.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "../../node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../../node_modules/events/events.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/events/events.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),

/***/ "../../node_modules/ieee754/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/ieee754/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "../../node_modules/inherits/inherits_browser.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/inherits/inherits_browser.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "../../node_modules/isarray/index.js":
/*!************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/isarray/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "../../node_modules/process-nextick-args/index.js":
/*!*************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/process-nextick-args/index.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/process/browser.js":
/*!**************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/process/browser.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../node_modules/readable-stream/lib/_stream_duplex.js":
/*!*********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "../../node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "../../node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "../../node_modules/readable-stream/lib/_stream_readable.js");
var Writable = __webpack_require__(/*! ./_stream_writable */ "../../node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};

/***/ }),

/***/ "../../node_modules/readable-stream/lib/_stream_passthrough.js":
/*!**************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.



module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "../../node_modules/readable-stream/lib/_stream_transform.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "../../node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "../../node_modules/readable-stream/lib/_stream_readable.js":
/*!***********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/_stream_readable.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "../../node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = __webpack_require__(/*! isarray */ "../../node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "../../node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var debugUtil = __webpack_require__(/*! util */ 0);
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "../../node_modules/readable-stream/lib/internal/streams/BufferList.js");
var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/readable-stream/lib/internal/streams/destroy.js");
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/readable-stream/lib/_stream_duplex.js");

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "../../node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/readable-stream/lib/_stream_transform.js":
/*!************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/_stream_transform.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.



module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/readable-stream/lib/_stream_duplex.js");

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "../../node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

/***/ }),

/***/ "../../node_modules/readable-stream/lib/_stream_writable.js":
/*!***********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/_stream_writable.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.



/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "../../node_modules/process-nextick-args/index.js");
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = __webpack_require__(/*! core-util-is */ "../../node_modules/core-util-is/lib/util.js");
util.inherits = __webpack_require__(/*! inherits */ "../../node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "../../node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/
var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../../node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../../node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/readable-stream/lib/_stream_duplex.js");

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../../node_modules/readable-stream/lib/_stream_duplex.js");

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  pna.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "../../node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "../../node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!**********************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
var util = __webpack_require__(/*! util */ 1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "../../node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!*******************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "../../node_modules/process-nextick-args/index.js");
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "../../node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!**************************************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "../../node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "../../node_modules/readable-stream/readable-browser.js":
/*!*******************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/readable-stream/readable-browser.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "../../node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "../../node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../../node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "../../node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "../../node_modules/readable-stream/lib/_stream_passthrough.js");


/***/ }),

/***/ "../../node_modules/safe-buffer/index.js":
/*!****************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/safe-buffer/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "../../node_modules/setimmediate/setImmediate.js":
/*!************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/setimmediate/setImmediate.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../node_modules/process/browser.js")))

/***/ }),

/***/ "../../node_modules/string_decoder/lib/string_decoder.js":
/*!********************************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/string_decoder/lib/string_decoder.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "../../node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "../../node_modules/timers-browserify/main.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/timers-browserify/main.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "../../node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/util-deprecate/browser.js":
/*!*********************************************************************************!*\
  !*** /home/huynhnguyen/github/causality/node_modules/util-deprecate/browser.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/fetch.js":
/*!**********************!*\
  !*** ./src/fetch.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! cross-fetch */ "cross-fetch"), __webpack_require__(/*! ./stream */ "./src/stream.js"), __webpack_require__(/*! ./platform */ "./src/platform.js"), __webpack_require__(/*! fetch-readablestream */ "fetch-readablestream")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _crossFetch, _stream, _platform, _fetchReadablestream) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _crossFetch = _interopRequireDefault(_crossFetch);
  _stream = _interopRequireDefault(_stream);
  _platform = _interopRequireDefault(_platform);
  _fetchReadablestream = _interopRequireDefault(_fetchReadablestream);

  const NodeStreamMixins = FetchClass => class extends FetchClass {
    static async streamData(url) {
      const response = await (0, _crossFetch.default)(url);

      if (response.status >= 400) {
        throw Error("Bad response from server");
      }

      return response.body;
    }

  };

  const WebStreamMixins = FetchClass => class extends FetchClass {
    static async streamData(url) {
      let response = await (0, _fetchReadablestream.default)(url);

      if (response.status >= 400) {
        console.error(response.status);
        reject("Bad response from server");
      }

      const streamReader = response.body.getReader();

      let reader = _stream.default.makeReadable();

      const recusiveRead = () => {
        return new Promise((resolve, reject) => {
          streamReader.read().then(({
            value,
            done
          }) => {
            if (done) {
              reader.push(null);
              resolve(0);
            } else {
              reader.push(value);
              resolve(1);
            }
          });
        });
      };

      const ReadNext = recusiveRead => {
        recusiveRead().then(hasNext => {
          if (hasNext) {
            ReadNext(recusiveRead);
          }
        });
      };

      ReadNext(recusiveRead);
      return reader;
    }

  };

  class Fetch extends _platform.default.mixWith(_crossFetch.default, {
    'node': [NodeStreamMixins],
    'web': [WebStreamMixins]
  }) {
    constructor() {}

    static async fetchData(url) {
      return new Promise((resolve, reject) => {
        (0, _crossFetch.default)(url).then(response => {
          if (response.status >= 400) {
            console.error(response.status);
            reject("Bad response from server");
          }

          resolve(response.text());
        });
      });
    }

    static async fetchJson(url) {
      return new Promise(async (resolve, reject) => {
        (0, _crossFetch.default)(url).then(response => {
          if (response.status >= 400) {
            console.error(response.status);
            reject("Bad response from server");
          }

          resolve(response.json());
        });
      });
    }

  }

  _exports.default = Fetch;
});

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! ./platform */ "./src/platform.js"), __webpack_require__(/*! ./fetch */ "./src/fetch.js"), __webpack_require__(/*! ./png */ "./src/png.js"), __webpack_require__(/*! ./stream */ "./src/stream.js"), __webpack_require__(/*! ./sampling */ "./src/sampling.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _platform, _fetch, _png, _stream, _sampling) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "Platform", {
    enumerable: true,
    get: function () {
      return _platform.default;
    }
  });
  Object.defineProperty(_exports, "Fetch", {
    enumerable: true,
    get: function () {
      return _fetch.default;
    }
  });
  Object.defineProperty(_exports, "PNG", {
    enumerable: true,
    get: function () {
      return _png.default;
    }
  });
  Object.defineProperty(_exports, "Stream", {
    enumerable: true,
    get: function () {
      return _stream.default;
    }
  });
  Object.defineProperty(_exports, "Sampling", {
    enumerable: true,
    get: function () {
      return _sampling.default;
    }
  });
  _platform = _interopRequireDefault(_platform);
  _fetch = _interopRequireDefault(_fetch);
  _png = _interopRequireDefault(_png);
  _stream = _interopRequireDefault(_stream);
  _sampling = _interopRequireDefault(_sampling);
});

/***/ }),

/***/ "./src/platform.js":
/*!*************************!*\
  !*** ./src/platform.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! platform */ "platform"), __webpack_require__(/*! process */ "../../node_modules/process/browser.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _platform, _process) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _platform = _interopRequireDefault(_platform);
  _process = _interopRequireDefault(_process);

  const PlatformMapping = name => {
    if (name === 'Node.js') {
      return 'node';
    } else {
      return 'web';
    }
  };

  class Platform {
    constructor() {
      this.platform = _platform.default;
    }

    static PID() {
      if (typeof _process.default !== 'undefined' && _process.default.pid) {
        return _process.default.pid;
      } else {
        return null;
      }
    }

    static currentPlatform() {
      return _platform.default.parse();
    }

    static mixWith(BaseClass, mixins) {
      var mixinsList = [];

      if (Array.isArray(mixins)) {
        mixinsList = mixins;
      } else {
        const PfName = PlatformMapping(_platform.default.parse()['name']);
        mixinsList = mixins[PfName];
      }

      if (mixinsList === undefined) {
        throw Error(`${PfName} not found in mixins`);
      }

      return mixinsList.reduce((c, mixin) => mixin(c), BaseClass);
    }

  }

  _exports.default = Platform;
});

/***/ }),

/***/ "./src/png.js":
/*!********************!*\
  !*** ./src/png.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! pngjs3 */ "pngjs3")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _pngjs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  var _default = _pngjs.PNG;
  _exports.default = _default;
});

/***/ }),

/***/ "./src/sampling.js":
/*!*************************!*\
  !*** ./src/sampling.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! random */ "random")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _random) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _random = _interopRequireDefault(_random);

  class Sampling {
    constructor() {
      this.random = _random.default;
    }

    get CoreRandom() {
      return this.random;
    }

    static makeCheckEnough(size) {
      return sample => sample.length < size;
    }

    static range(size) {
      return Array.from(new Float32Array(size)).map((v, i) => i);
    }

    static choice(a, size, replace = false, p = null) {
      let domain = Array.isArray(a) ? a.slice(0) : Sampling.range(a);

      if (size > domain.length && replace === true) {
        throw Error('sample size shall not bigger than domain length without replacing');
      }

      let samples = [];
      const GetUtilEnough = Sampling.makeCheckEnough(size);
      let idx = -1;

      while (GetUtilEnough(samples)) {
        idx = _random.default.int(0, domain.length - 1);

        if (domain[idx] !== null) {
          samples = [...samples, domain[idx]];

          if (!replace) {
            domain[idx] = null; //non replaceable
          }
        }
      }

      return samples;
    }

  }

  _exports.default = Sampling;
});

/***/ }),

/***/ "./src/stream.js":
/*!***********************!*\
  !*** ./src/stream.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! readable-stream */ "../../node_modules/readable-stream/readable-browser.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var mod; }
})(this, function (_exports, _readableStream) {
  "use strict";

  var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "../../node_modules/@babel/runtime/helpers/interopRequireDefault.js");

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _readableStream = _interopRequireDefault(_readableStream);

  class Stream {
    constructor() {
      this.stream = _readableStream.default;
    }

    get coreStream() {
      return this.stream;
    }

    static makeReadable(readFn = null) {
      let reader = new _readableStream.default.Readable({
        objectMode: true
      });

      const DefaultReader = () => {};

      reader._read = readFn || DefaultReader;
      return reader;
    }

    static wrapReadable(readableObj) {
      let reader = new _readableStream.default.Readable();
      reader.wrap(readableObj);
      return reader;
    }

    static makeWritable(writeFn) {
      let writer = new _readableStream.default.Writable({
        objectMode: true
      });
      writer._write = writeFn;
      return writer;
    }

    static makeDuplex(writeFn, readFn = null) {
      let duplex = new _readableStream.default.Duplex({
        objectMode: true
      });
      duplex._write = writeFn;

      const DefaultReader = () => {};

      duplex._read = readFn || DefaultReader;
      return duplex;
    }

    static makeTransform(tranformFn) {
      let transformer = new _readableStream.default.Transform({
        objectMode: true
      });
      transformer._transform = tranformFn;
      return transformer;
    }

    static async makePipeline(streams, onDataFn = null) {
      return new Promise((resolve, reject) => {
        let writer = streams.slice(-1)[0];
        let reader = streams[0];
        writer.on('finish', () => {
          resolve('success');
        });
        writer.on('error', err => {
          reject(`Pipeline failed. ${err}`);
        });
        reader.on('data', data => {
          if (onDataFn) {
            onDataFn(data);
          }
        });
        return streams.reduce((p, s) => p.pipe(s));
      });
    }

  }

  _exports.default = Stream;
});

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "cross-fetch":
/*!******************************!*\
  !*** external "cross-fetch" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cross_fetch__;

/***/ }),

/***/ "fetch-readablestream":
/*!***************************************!*\
  !*** external "fetch-readablestream" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_fetch_readablestream__;

/***/ }),

/***/ "platform":
/*!***************************!*\
  !*** external "platform" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_platform__;

/***/ }),

/***/ "pngjs3":
/*!*************************!*\
  !*** external "pngjs3" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_pngjs3__;

/***/ }),

/***/ "random":
/*!*************************!*\
  !*** external "random" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_random__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZXhhbXBsZXMvc3RvcmFnZS9zdG9yYWdlLnBuZy5iYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9jYXVzYWxpdHktc3RvcmFnZS9kaXN0L0BjYXVzYWxOZXQvc3RvcmFnZS53ZWIuanMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvY2F1c2FsaXR5LXV0aWxzL2Rpc3QvQGNhdXNhbE5ldC91dGlscy53ZWIuanMiLCJ3ZWJwYWNrOi8vL3V0aWwgKGlnbm9yZWQpIiwid2VicGFjazovLy91dGlsIChpZ25vcmVkKT8wMjZlIl0sIm5hbWVzIjpbImJhc2VfdXJsIiwiaWR4cyIsIlNhbXBsaW5nIiwiY2hvaWNlIiwiY29uc29sZSIsImxvZyIsImlkeCIsInN1cmwiLCJpbWFnZUJ1ZmZlciIsImluZGV4REJTdG9yYWdlIiwiZmV0Y2hQTkdGaWxlIiwibHVybCIsImxhYmVsQnVmZmVyIiwiZmV0Y2hGaWxlIiwiY2F0Y2giLCJlcnIiLCJlcnJvciJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQVEsb0JBQW9CO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQWlCLDRCQUE0QjtBQUM3QztBQUNBO0FBQ0EsMEJBQWtCLDJCQUEyQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBeUMsaUNBQWlDO0FBQzFFLHdIQUFnSCxtQkFBbUIsRUFBRTtBQUNySTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQWdCLHVCQUF1QjtBQUN2Qzs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BKQSxHQUFDLFlBQVU7QUFDUCxVQUFNQSxRQUFRLEdBQUcsOEVBQWpCOztBQUNBLFVBQU1DLElBQUksR0FBR0MscUJBQVNDLE1BQVQsQ0FBZ0IsR0FBaEIsRUFBb0IsQ0FBcEIsQ0FBYjs7QUFDQUMsV0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBQ0o7QUFBRCxLQUFaOztBQUNBLFNBQUksSUFBSUssR0FBUixJQUFlTCxJQUFmLEVBQW9CO0FBQ2hCRyxhQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFDQztBQUFELE9BQVo7QUFDQSxZQUFNQyxJQUFJLEdBQUksR0FBRVAsUUFBUyxjQUFhTSxHQUFJLE1BQTFDO0FBQ0FGLGFBQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUNFO0FBQUQsT0FBWixFQUhnQixDQUloQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFJQyxXQUFXLEdBQUcsTUFBTUMsMEJBQWVDLFlBQWYsQ0FBNEJILElBQTVCLEVBQWtDLGVBQWNELEdBQUksRUFBcEQsQ0FBeEI7QUFDQUYsYUFBTyxDQUFDQyxHQUFSLENBQVk7QUFBQ0csbUJBQVcsRUFBRUE7QUFBZCxPQUFaO0FBQ0EsWUFBTUcsSUFBSSxHQUFJLEdBQUVYLFFBQVMsZUFBY00sR0FBSSxFQUEzQztBQUNBRixhQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFDTTtBQUFELE9BQVo7QUFDQSxVQUFJQyxXQUFXLEdBQUcsTUFBTUgsMEJBQWVJLFNBQWYsQ0FBeUJGLElBQXpCLEVBQStCLGdCQUFlTCxHQUFJLEVBQWxELENBQXhCO0FBQ0FGLGFBQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUNPLG1CQUFXLEVBQUVBO0FBQWQsT0FBWjtBQUNIO0FBQ0osR0F6QkQsSUF5QktFLEtBekJMLENBeUJXQyxHQUFHLElBQUU7QUFDWlgsV0FBTyxDQUFDWSxLQUFSLENBQWNELEdBQWQ7QUFDSCxHQTNCRDs7Ozs7Ozs7Ozs7O0FDRkE7QUFDQSxJQUFJLElBQXlEO0FBQzdELDJCQUEyQixtQkFBTyxDQUFDLGlGQUFrQixHQUFHLG1CQUFPLENBQUMsa0RBQVU7QUFDMUUsTUFBTSxFQUs2RTtBQUNuRixDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usa0JBQWtCO0FBQ2xGO0FBQ0EseURBQXlELGNBQWM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUNBQWlDO0FBQ2xGLHdIQUF3SCxtQkFBbUIsRUFBRTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCLEVBQUU7QUFDL0QseUNBQXlDLGVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwrREFBK0Q7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixnREFBZ0Q7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSCxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsUUFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDLG9CQUFvQjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbURBQW1EO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCLDZCQUE2QjtBQUN0RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsNkJBQTZCO0FBQzFEO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QixzQ0FBc0M7QUFDL0Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHlCQUF5Qix3QkFBd0I7QUFDakQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQyxrQ0FBa0M7QUFDbEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0gsb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFdBQVc7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBLFFBQVEsVUFBVTs7QUFFbEI7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTCxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLCtDQUErQywwREFBMEQsMkNBQTJDLGlDQUFpQzs7QUFFckw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBRTs7QUFFSDtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdFQUFnRTs7O0FBR2hFO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0ZBQStGO0FBQy9GO0FBQ0E7QUFDQTs7QUFFQSx5RUFBeUUsbUZBQW1GO0FBQzVKOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFOztBQUVBO0FBQ0Esa0ZBQWtGO0FBQ2xGOztBQUVBLDBGQUEwRjtBQUMxRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0JBQStCOztBQUUvQiwrQ0FBK0M7O0FBRS9DLHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBLDJEQUEyRDs7QUFFM0Qsc0JBQXNCOztBQUV0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7O0FBRUE7QUFDQSxtRUFBbUU7O0FBRW5FOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7OztBQUdBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOzs7QUFHRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkZBQTZGO0FBQzdGLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsNEZBQTRGO0FBQzVGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7O0FBR0Y7QUFDQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBLEVBQUU7OztBQUdGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0RUFBNEU7QUFDNUUsR0FBRzs7O0FBR0g7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTs7QUFFQSw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esc0JBQXNCOztBQUV0QixzREFBc0Q7O0FBRXREOztBQUVBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDs7QUFFaEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdILDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSCx5QkFBeUI7O0FBRXpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKLDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFOztBQUVqRTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2RUFBNkU7O0FBRTdFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMERBQTBEOztBQUUxRCw0RUFBNEU7O0FBRTVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxFQUFFO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7O0FBR0gsaUJBQWlCLHlCQUF5QjtBQUMxQztBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUU7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFFO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0EsbURBQW1ELCtEQUErRDtBQUNsSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseURBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsT0FBTztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFlBQVk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUosMENBQTBDO0FBQzFDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBR0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7O0FBRUE7QUFDQSxrRkFBa0Y7QUFDbEY7QUFDQTs7QUFFQSwwRkFBMEY7O0FBRTFGLDJCQUEyQjs7QUFFM0IseUJBQXlCOztBQUV6QixzQkFBc0I7O0FBRXRCLHFCQUFxQjs7QUFFckIsd0JBQXdCOztBQUV4Qix5QkFBeUI7QUFDekI7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBLDJEQUEyRDtBQUMzRDtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEIsdUJBQXVCOztBQUV2QixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBLElBQUk7OztBQUdKLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBLGtDQUFrQztBQUNsQzs7QUFFQSxxQkFBcUI7QUFDckI7O0FBRUEsMkJBQTJCOztBQUUzQiw0QkFBNEI7O0FBRTVCLCtDQUErQzs7QUFFL0MsZ0NBQWdDO0FBQ2hDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUMsSUFBSTtBQUNMOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdLQUFnSztBQUNoSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUVBQW1FOztBQUVuRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEM7O0FBRTVDO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUU7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxzREFBc0Q7QUFDOUg7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRUFBMEU7QUFDMUU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEseUVBQXlFOztBQUV6RTtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkNBQTZDO0FBQzdDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7OztBQUdBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsMkNBQTJDLGtCQUFrQixrQ0FBa0MscUVBQXFFLEVBQUUsRUFBRSxPQUFPLGtCQUFrQixFQUFFLFlBQVk7O0FBRS9NOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7O0FBRUEseUZBQXlGO0FBQ3pGO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLHlDQUF5QztBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxnQ0FBZ0MsZ0JBQWdCLHNCQUFzQixPQUFPLHVEQUF1RCxtQ0FBbUMsMERBQTBELHNGQUFzRixnRUFBZ0UsRUFBRSxHQUFHLEVBQUUsaUNBQWlDLDJDQUEyQyxFQUFFLEVBQUUsRUFBRSxlQUFlOztBQUUvZCwyQ0FBMkMsa0JBQWtCLGtDQUFrQyxxRUFBcUUsRUFBRSxFQUFFLE9BQU8sa0JBQWtCLEVBQUUsWUFBWTs7QUFFL007QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7O0FBRS9DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7O0FBR0E7QUFDQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7OztBQUdIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEM7Ozs7QUFJOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLHNDQUFzQztBQUMvRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLHdCQUF3QjtBQUNqRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDLGtDQUFrQztBQUNsRTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBLGlCQUFpQixzQ0FBc0M7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSxpQkFBaUIsd0JBQXdCO0FBQ3pDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQyx1QkFBdUI7QUFDMUQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLDJCQUEyQjtBQUMvQywwQ0FBMEM7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0RBQWdELDRCQUE0QjtBQUM1RTs7QUFFQTtBQUNBO0FBQ0EsZ0RBQWdELDRCQUE0QjtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTs7O0FBR3RDLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU8sS0FBSTtBQUNYO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsc0NBQXNDLHNDQUFzQztBQUN6RztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsdUJBQXVCLFNBQVM7QUFDaEM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNENBQTRDLEtBQUs7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1Qzs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsc0JBQXNCO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsTUFBTSxZQUFZO0FBQ3JCLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0dBQWdHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE1BQU0sWUFBWTtBQUNyQixDQUFDO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0dBQWdHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE1BQU0sWUFBWTtBQUNyQixDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLDRCQUE0QixRQUFROztBQUVwQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0dBQWdHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE1BQU0sWUFBWTtBQUNyQixDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsTUFBTSxZQUFZO0FBQ3JCLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUCxVQUFVO0FBQ1YsQ0FBQztBQUNELDJDQUEyQyxjQUFjLDJ2N2M7Ozs7Ozs7Ozs7O0FDcnRWekQ7QUFDQSxJQUFJLElBQXlEO0FBQzdELDJCQUEyQixtQkFBTyxDQUFDLHdFQUFhLEdBQUcsbUJBQU8sQ0FBQyxxREFBVSxHQUFHLG1CQUFPLENBQUMsOEVBQXNCLEdBQUcsbUJBQU8sQ0FBQyxvREFBUSxHQUFHLG1CQUFPLENBQUMsOENBQVE7QUFDNUksTUFBTSxFQUtvSTtBQUMxSSxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0Usa0JBQWtCO0FBQ2xGO0FBQ0EseURBQXlELGNBQWM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsaUNBQWlDO0FBQ2xGLHdIQUF3SCxtQkFBbUIsRUFBRTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMEJBQTBCLEVBQUU7QUFDL0QseUNBQXlDLGVBQWU7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCwrREFBK0Q7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsbURBQW1EO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLFFBQVE7QUFDN0I7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixZQUFZO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSCxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0EsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsUUFBUSxVQUFVOztBQUVsQjtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOzs7QUFHQSw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQ0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7OztBQUd0QyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLDZFQUE2RTtBQUN0Sjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpREFBaUQsMEZBQTBGOztBQUUzSTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrR0FBa0c7QUFDbEcsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDRGQUE0RjtBQUM1RixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnREFBZ0Q7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsNENBQTRDOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0I7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRFQUE0RTs7QUFFNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLHlCQUF5QjtBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQSxtREFBbUQsaUVBQWlFO0FBQ3BIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0MsT0FBTztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFlBQVk7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFFQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFJQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlEQUFpRCwwRkFBMEY7O0FBRTNJO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQzs7QUFFakM7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0RBQW9EO0FBQ3BEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdko7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSw0QkFBNEIsc0JBQXNCO0FBQ2xEO0FBQ0E7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVEQUF1RDtBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDLHNCQUFzQixFQUFFO0FBQ2xFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHNDQUFzQyxzQ0FBc0M7QUFDekc7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUIsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsT0FBTztBQUNsQixhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUM7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7O0FBRUE7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUFnRztBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxNQUFNLFlBQVk7QUFDckIsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnR0FBZ0c7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsTUFBTSxZQUFZO0FBQ3JCLENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0dBQWdHO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE1BQU0sWUFBWTtBQUNyQixDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFDQUFxQyxJQUFJO0FBQ3pDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUCxVQUFVO0FBQ1YsQ0FBQztBQUNELDJDQUEyQyxjQUFjLDJwL1I7Ozs7Ozs7Ozs7O0FDbDdNekQsZTs7Ozs7Ozs7Ozs7QUNBQSxlIiwiZmlsZSI6InN0b3JhZ2UtZXhhbXBsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdFwic3RvcmFnZS1leGFtcGxlXCI6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goW1wiLi9leGFtcGxlcy9zdG9yYWdlL2V4YW1wbGVzLmpzXCIsXCJ2ZW5kb3JzXCJdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiaW1wb3J0IHtpbmRleERCU3RvcmFnZX0gZnJvbSAnY2F1c2FsLW5ldC5zdG9yYWdlJztcbmltcG9ydCB7U2FtcGxpbmcsRmV0Y2gsUE5HLCBTdHJlYW19IGZyb20gJ2NhdXNhbC1uZXQudXRpbHMnO1xuKGFzeW5jICgpPT57XG4gICAgY29uc3QgYmFzZV91cmwgPSAnaHR0cDovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vbW9kZXJhdG9yZGV2LTIyMzMwNy5hcHBzcG90LmNvbS9NTklTVF9kYXRhc2V0Lyc7XG4gICAgY29uc3QgaWR4cyA9IFNhbXBsaW5nLmNob2ljZSg2NTAsMSk7XG4gICAgY29uc29sZS5sb2coe2lkeHN9KTtcbiAgICBmb3IobGV0IGlkeCBvZiBpZHhzKXtcbiAgICAgICAgY29uc29sZS5sb2coe2lkeH0pO1xuICAgICAgICBjb25zdCBzdXJsID0gYCR7YmFzZV91cmx9ZGF0YS1jaHVuay0ke2lkeH0ucG5nYDtcbiAgICAgICAgY29uc29sZS5sb2coe3N1cmx9KTtcbiAgICAgICAgLy8gbGV0IHJlYWRTdHJlYW0gPSBhd2FpdCBGZXRjaC5zdHJlYW1EYXRhKHN1cmwpO1xuICAgICAgICAvLyBjb25zdCBXcml0ZUZuID0gKGNodW5rRGF0YSwgY2h1bmtFbmNvZGluZywgY2FsbGJhY2spID0+e1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coe2NodW5rRGF0YTpjaHVua0RhdGEubGVuZ3RofSk7XG4gICAgICAgIC8vICAgICBjYWxsYmFjaygpO1xuICAgICAgICAvLyB9O1xuICAgICAgICAvLyBsZXQgd3JpdGVyID0gU3RyZWFtLm1ha2VXcml0YWJsZShXcml0ZUZuKTtcbiAgICAgICAgLy8gcmVhZFN0cmVhbS5waXBlKHdyaXRlcik7XG4gICAgICAgIC8vIHJlYWRTdHJlYW0ucGlwZShuZXcgUE5HKCkpLm9uKCdwYXJzZWQnLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coe2xlbjogdGhpcy5kYXRhLmxlbmd0aH0pO1xuICAgICAgICAvLyB9KTtcbiAgICAgICAgbGV0IGltYWdlQnVmZmVyID0gYXdhaXQgaW5kZXhEQlN0b3JhZ2UuZmV0Y2hQTkdGaWxlKHN1cmwsYC9tbmlzdC9kYXRhLyR7aWR4fWApO1xuICAgICAgICBjb25zb2xlLmxvZyh7aW1hZ2VCdWZmZXI6IGltYWdlQnVmZmVyfSk7XG4gICAgICAgIGNvbnN0IGx1cmwgPSBgJHtiYXNlX3VybH1sYWJlbC1jaHVuay0ke2lkeH1gO1xuICAgICAgICBjb25zb2xlLmxvZyh7bHVybH0pO1xuICAgICAgICBsZXQgbGFiZWxCdWZmZXIgPSBhd2FpdCBpbmRleERCU3RvcmFnZS5mZXRjaEZpbGUobHVybCxgL21uaXN0L2xhYmVsLyR7aWR4fWApO1xuICAgICAgICBjb25zb2xlLmxvZyh7bGFiZWxCdWZmZXI6IGxhYmVsQnVmZmVyfSk7XG4gICAgfVxufSkoKS5jYXRjaChlcnI9PntcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG59KTsiLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJjYXVzYWwtbmV0LnV0aWxzXCIpLCByZXF1aXJlKFwibGV2ZWwtanNcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wiY2F1c2FsLW5ldC51dGlsc1wiLCBcImxldmVsLWpzXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkBjYXVzYWxOZXQvc3RvcmFnZVwiXSA9IGZhY3RvcnkocmVxdWlyZShcImNhdXNhbC1uZXQudXRpbHNcIiksIHJlcXVpcmUoXCJsZXZlbC1qc1wiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiQGNhdXNhbE5ldC9zdG9yYWdlXCJdID0gZmFjdG9yeShyb290W1wiY2F1c2FsLW5ldC51dGlsc1wiXSwgcm9vdFtcImxldmVsLWpzXCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY2F1c2FsX25ldF91dGlsc19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2xldmVsZG93bl9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9hc3NlcnQvYXNzZXJ0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvYXNzZXJ0L2Fzc2VydC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4vLyBjb21wYXJlIGFuZCBpc0J1ZmZlciB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGlzQnVmZmVyKGIpIHtcbiAgaWYgKGdsb2JhbC5CdWZmZXIgJiYgdHlwZW9mIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihiKTtcbiAgfVxuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKTtcbn1cblxuLy8gYmFzZWQgb24gbm9kZSBhc3NlcnQsIG9yaWdpbmFsIG5vdGljZTpcblxuLy8gaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvVW5pdF9UZXN0aW5nLzEuMFxuLy9cbi8vIFRISVMgSVMgTk9UIFRFU1RFRCBOT1IgTElLRUxZIFRPIFdPUksgT1VUU0lERSBWOCFcbi8vXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdXRpbC8gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzXCIpO1xudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcFNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGZ1bmN0aW9uc0hhdmVOYW1lcyA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb28oKSB7fS5uYW1lID09PSAnZm9vJztcbn0oKSk7XG5mdW5jdGlvbiBwVG9TdHJpbmcgKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG59XG5mdW5jdGlvbiBpc1ZpZXcoYXJyYnVmKSB7XG4gIGlmIChpc0J1ZmZlcihhcnJidWYpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgZ2xvYmFsLkFycmF5QnVmZmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhhcnJidWYpO1xuICB9XG4gIGlmICghYXJyYnVmKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhcnJidWYgaW5zdGFuY2VvZiBEYXRhVmlldykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChhcnJidWYuYnVmZmVyICYmIGFycmJ1Zi5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbi8vIDEuIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcblxuLy8gMi4gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gYXNzZXJ0LlxuLy8gbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7IG1lc3NhZ2U6IG1lc3NhZ2UsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsOiBhY3R1YWwsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkIH0pXG5cbnZhciByZWdleCA9IC9cXHMqZnVuY3Rpb25cXHMrKFteXFwoXFxzXSopXFxzKi87XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL2Jsb2IvYWRlZWVlYzhiZmNjNjA2OGIxODdkN2Q5ZmIzZDViYjFkM2EzMDg5OS9pbXBsZW1lbnRhdGlvbi5qc1xuZnVuY3Rpb24gZ2V0TmFtZShmdW5jKSB7XG4gIGlmICghdXRpbC5pc0Z1bmN0aW9uKGZ1bmMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcbiAgICByZXR1cm4gZnVuYy5uYW1lO1xuICB9XG4gIHZhciBzdHIgPSBmdW5jLnRvU3RyaW5nKCk7XG4gIHZhciBtYXRjaCA9IHN0ci5tYXRjaChyZWdleCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXTtcbn1cbmFzc2VydC5Bc3NlcnRpb25FcnJvciA9IGZ1bmN0aW9uIEFzc2VydGlvbkVycm9yKG9wdGlvbnMpIHtcbiAgdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcbiAgdGhpcy5hY3R1YWwgPSBvcHRpb25zLmFjdHVhbDtcbiAgdGhpcy5leHBlY3RlZCA9IG9wdGlvbnMuZXhwZWN0ZWQ7XG4gIHRoaXMub3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yO1xuICBpZiAob3B0aW9ucy5tZXNzYWdlKSB7XG4gICAgdGhpcy5tZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlO1xuICAgIHRoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMubWVzc2FnZSA9IGdldE1lc3NhZ2UodGhpcyk7XG4gICAgdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgfVxuICB2YXIgc3RhY2tTdGFydEZ1bmN0aW9uID0gb3B0aW9ucy5zdGFja1N0YXJ0RnVuY3Rpb24gfHwgZmFpbDtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgc3RhY2tTdGFydEZ1bmN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBub24gdjggYnJvd3NlcnMgc28gd2UgY2FuIGhhdmUgYSBzdGFja3RyYWNlXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuICAgIGlmIChlcnIuc3RhY2spIHtcbiAgICAgIHZhciBvdXQgPSBlcnIuc3RhY2s7XG5cbiAgICAgIC8vIHRyeSB0byBzdHJpcCB1c2VsZXNzIGZyYW1lc1xuICAgICAgdmFyIGZuX25hbWUgPSBnZXROYW1lKHN0YWNrU3RhcnRGdW5jdGlvbik7XG4gICAgICB2YXIgaWR4ID0gb3V0LmluZGV4T2YoJ1xcbicgKyBmbl9uYW1lKTtcbiAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAvLyBvbmNlIHdlIGhhdmUgbG9jYXRlZCB0aGUgZnVuY3Rpb24gZnJhbWVcbiAgICAgICAgLy8gd2UgbmVlZCB0byBzdHJpcCBvdXQgZXZlcnl0aGluZyBiZWZvcmUgaXQgKGFuZCBpdHMgbGluZSlcbiAgICAgICAgdmFyIG5leHRfbGluZSA9IG91dC5pbmRleE9mKCdcXG4nLCBpZHggKyAxKTtcbiAgICAgICAgb3V0ID0gb3V0LnN1YnN0cmluZyhuZXh0X2xpbmUgKyAxKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGFjayA9IG91dDtcbiAgICB9XG4gIH1cbn07XG5cbi8vIGFzc2VydC5Bc3NlcnRpb25FcnJvciBpbnN0YW5jZW9mIEVycm9yXG51dGlsLmluaGVyaXRzKGFzc2VydC5Bc3NlcnRpb25FcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiB0cnVuY2F0ZShzLCBuKSB7XG4gIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPCBuID8gcyA6IHMuc2xpY2UoMCwgbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cbn1cbmZ1bmN0aW9uIGluc3BlY3Qoc29tZXRoaW5nKSB7XG4gIGlmIChmdW5jdGlvbnNIYXZlTmFtZXMgfHwgIXV0aWwuaXNGdW5jdGlvbihzb21ldGhpbmcpKSB7XG4gICAgcmV0dXJuIHV0aWwuaW5zcGVjdChzb21ldGhpbmcpO1xuICB9XG4gIHZhciByYXduYW1lID0gZ2V0TmFtZShzb21ldGhpbmcpO1xuICB2YXIgbmFtZSA9IHJhd25hbWUgPyAnOiAnICsgcmF3bmFtZSA6ICcnO1xuICByZXR1cm4gJ1tGdW5jdGlvbicgKyAgbmFtZSArICddJztcbn1cbmZ1bmN0aW9uIGdldE1lc3NhZ2Uoc2VsZikge1xuICByZXR1cm4gdHJ1bmNhdGUoaW5zcGVjdChzZWxmLmFjdHVhbCksIDEyOCkgKyAnICcgK1xuICAgICAgICAgc2VsZi5vcGVyYXRvciArICcgJyArXG4gICAgICAgICB0cnVuY2F0ZShpbnNwZWN0KHNlbGYuZXhwZWN0ZWQpLCAxMjgpO1xufVxuXG4vLyBBdCBwcmVzZW50IG9ubHkgdGhlIHRocmVlIGtleXMgbWVudGlvbmVkIGFib3ZlIGFyZSB1c2VkIGFuZFxuLy8gdW5kZXJzdG9vZCBieSB0aGUgc3BlYy4gSW1wbGVtZW50YXRpb25zIG9yIHN1YiBtb2R1bGVzIGNhbiBwYXNzXG4vLyBvdGhlciBrZXlzIHRvIHRoZSBBc3NlcnRpb25FcnJvcidzIGNvbnN0cnVjdG9yIC0gdGhleSB3aWxsIGJlXG4vLyBpZ25vcmVkLlxuXG4vLyAzLiBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiAgQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0RnVuY3Rpb24pIHtcbiAgdGhyb3cgbmV3IGFzc2VydC5Bc3NlcnRpb25FcnJvcih7XG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgIHN0YWNrU3RhcnRGdW5jdGlvbjogc3RhY2tTdGFydEZ1bmN0aW9uXG4gIH0pO1xufVxuXG4vLyBFWFRFTlNJT04hIGFsbG93cyBmb3Igd2VsbCBiZWhhdmVkIGVycm9ycyBkZWZpbmVkIGVsc2V3aGVyZS5cbmFzc2VydC5mYWlsID0gZmFpbDtcblxuLy8gNC4gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxuLy8gYnkgISFndWFyZC5cbi8vIGFzc2VydC5vayhndWFyZCwgbWVzc2FnZV9vcHQpO1xuLy8gVGhpcyBzdGF0ZW1lbnQgaXMgZXF1aXZhbGVudCB0byBhc3NlcnQuZXF1YWwodHJ1ZSwgISFndWFyZCxcbi8vIG1lc3NhZ2Vfb3B0KTsuIFRvIHRlc3Qgc3RyaWN0bHkgZm9yIHRoZSB2YWx1ZSB0cnVlLCB1c2Vcbi8vIGFzc2VydC5zdHJpY3RFcXVhbCh0cnVlLCBndWFyZCwgbWVzc2FnZV9vcHQpOy5cblxuZnVuY3Rpb24gb2sodmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkgZmFpbCh2YWx1ZSwgdHJ1ZSwgbWVzc2FnZSwgJz09JywgYXNzZXJ0Lm9rKTtcbn1cbmFzc2VydC5vayA9IG9rO1xuXG4vLyA1LiBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGhcbi8vID09LlxuLy8gYXNzZXJ0LmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICc9PScsIGFzc2VydC5lcXVhbCk7XG59O1xuXG4vLyA2LiBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90IGVxdWFsXG4vLyB3aXRoICE9IGFzc2VydC5ub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlX29wdCk7XG5cbmFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJyE9JywgYXNzZXJ0Lm5vdEVxdWFsKTtcbiAgfVxufTtcblxuLy8gNy4gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uXG4vLyBhc3NlcnQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBmYWxzZSkpIHtcbiAgICBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsICdkZWVwRXF1YWwnLCBhc3NlcnQuZGVlcEVxdWFsKTtcbiAgfVxufTtcblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIGRlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICghX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCB0cnVlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ2RlZXBTdHJpY3RFcXVhbCcsIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIHN0cmljdCwgbWVtb3MpIHtcbiAgLy8gNy4xLiBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNCdWZmZXIoYWN0dWFsKSAmJiBpc0J1ZmZlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gY29tcGFyZShhY3R1YWwsIGV4cGVjdGVkKSA9PT0gMDtcblxuICAvLyA3LjIuIElmIHRoZSBleHBlY3RlZCB2YWx1ZSBpcyBhIERhdGUgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIERhdGUgb2JqZWN0IHRoYXQgcmVmZXJzIHRvIHRoZSBzYW1lIHRpbWUuXG4gIH0gZWxzZSBpZiAodXRpbC5pc0RhdGUoYWN0dWFsKSAmJiB1dGlsLmlzRGF0ZShleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsLmdldFRpbWUoKSA9PT0gZXhwZWN0ZWQuZ2V0VGltZSgpO1xuXG4gIC8vIDcuMyBJZiB0aGUgZXhwZWN0ZWQgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCB0aGUgYWN0dWFsIHZhbHVlIGlzXG4gIC8vIGVxdWl2YWxlbnQgaWYgaXQgaXMgYWxzbyBhIFJlZ0V4cCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzb3VyY2UgYW5kXG4gIC8vIHByb3BlcnRpZXMgKGBnbG9iYWxgLCBgbXVsdGlsaW5lYCwgYGxhc3RJbmRleGAsIGBpZ25vcmVDYXNlYCkuXG4gIH0gZWxzZSBpZiAodXRpbC5pc1JlZ0V4cChhY3R1YWwpICYmIHV0aWwuaXNSZWdFeHAoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGFjdHVhbC5zb3VyY2UgPT09IGV4cGVjdGVkLnNvdXJjZSAmJlxuICAgICAgICAgICBhY3R1YWwuZ2xvYmFsID09PSBleHBlY3RlZC5nbG9iYWwgJiZcbiAgICAgICAgICAgYWN0dWFsLm11bHRpbGluZSA9PT0gZXhwZWN0ZWQubXVsdGlsaW5lICYmXG4gICAgICAgICAgIGFjdHVhbC5sYXN0SW5kZXggPT09IGV4cGVjdGVkLmxhc3RJbmRleCAmJlxuICAgICAgICAgICBhY3R1YWwuaWdub3JlQ2FzZSA9PT0gZXhwZWN0ZWQuaWdub3JlQ2FzZTtcblxuICAvLyA3LjQuIE90aGVyIHBhaXJzIHRoYXQgZG8gbm90IGJvdGggcGFzcyB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgPT0uXG4gIH0gZWxzZSBpZiAoKGFjdHVhbCA9PT0gbnVsbCB8fCB0eXBlb2YgYWN0dWFsICE9PSAnb2JqZWN0JykgJiZcbiAgICAgICAgICAgICAoZXhwZWN0ZWQgPT09IG51bGwgfHwgdHlwZW9mIGV4cGVjdGVkICE9PSAnb2JqZWN0JykpIHtcbiAgICByZXR1cm4gc3RyaWN0ID8gYWN0dWFsID09PSBleHBlY3RlZCA6IGFjdHVhbCA9PSBleHBlY3RlZDtcblxuICAvLyBJZiBib3RoIHZhbHVlcyBhcmUgaW5zdGFuY2VzIG9mIHR5cGVkIGFycmF5cywgd3JhcCB0aGVpciB1bmRlcmx5aW5nXG4gIC8vIEFycmF5QnVmZmVycyBpbiBhIEJ1ZmZlciBlYWNoIHRvIGluY3JlYXNlIHBlcmZvcm1hbmNlXG4gIC8vIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoZSBhcnJheXMgdG8gaGF2ZSB0aGUgc2FtZSB0eXBlIGFzIGNoZWNrZWQgYnlcbiAgLy8gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyAoYWthIHBUb1N0cmluZykuIE5ldmVyIHBlcmZvcm0gYmluYXJ5XG4gIC8vIGNvbXBhcmlzb25zIGZvciBGbG9hdCpBcnJheXMsIHRob3VnaCwgc2luY2UgZS5nLiArMCA9PT0gLTAgYnV0IHRoZWlyXG4gIC8vIGJpdCBwYXR0ZXJucyBhcmUgbm90IGlkZW50aWNhbC5cbiAgfSBlbHNlIGlmIChpc1ZpZXcoYWN0dWFsKSAmJiBpc1ZpZXcoZXhwZWN0ZWQpICYmXG4gICAgICAgICAgICAgcFRvU3RyaW5nKGFjdHVhbCkgPT09IHBUb1N0cmluZyhleHBlY3RlZCkgJiZcbiAgICAgICAgICAgICAhKGFjdHVhbCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSB8fFxuICAgICAgICAgICAgICAgYWN0dWFsIGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5KSkge1xuICAgIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGFjdHVhbC5idWZmZXIpLFxuICAgICAgICAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGV4cGVjdGVkLmJ1ZmZlcikpID09PSAwO1xuXG4gIC8vIDcuNSBGb3IgYWxsIG90aGVyIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5IG9iamVjdHMsIGVxdWl2YWxlbmNlIGlzXG4gIC8vIGRldGVybWluZWQgYnkgaGF2aW5nIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzIChhcyB2ZXJpZmllZFxuICAvLyB3aXRoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCksIHRoZSBzYW1lIHNldCBvZiBrZXlzXG4gIC8vIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLCBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnlcbiAgLy8gY29ycmVzcG9uZGluZyBrZXksIGFuZCBhbiBpZGVudGljYWwgJ3Byb3RvdHlwZScgcHJvcGVydHkuIE5vdGU6IHRoaXNcbiAgLy8gYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIH0gZWxzZSBpZiAoaXNCdWZmZXIoYWN0dWFsKSAhPT0gaXNCdWZmZXIoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIG1lbW9zID0gbWVtb3MgfHwge2FjdHVhbDogW10sIGV4cGVjdGVkOiBbXX07XG5cbiAgICB2YXIgYWN0dWFsSW5kZXggPSBtZW1vcy5hY3R1YWwuaW5kZXhPZihhY3R1YWwpO1xuICAgIGlmIChhY3R1YWxJbmRleCAhPT0gLTEpIHtcbiAgICAgIGlmIChhY3R1YWxJbmRleCA9PT0gbWVtb3MuZXhwZWN0ZWQuaW5kZXhPZihleHBlY3RlZCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb3MuYWN0dWFsLnB1c2goYWN0dWFsKTtcbiAgICBtZW1vcy5leHBlY3RlZC5wdXNoKGV4cGVjdGVkKTtcblxuICAgIHJldHVybiBvYmpFcXVpdihhY3R1YWwsIGV4cGVjdGVkLCBzdHJpY3QsIG1lbW9zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyhvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBzdHJpY3QsIGFjdHVhbFZpc2l0ZWRPYmplY3RzKSB7XG4gIGlmIChhID09PSBudWxsIHx8IGEgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG4gIC8vIGlmIG9uZSBpcyBhIHByaW1pdGl2ZSwgdGhlIG90aGVyIG11c3QgYmUgc2FtZVxuICBpZiAodXRpbC5pc1ByaW1pdGl2ZShhKSB8fCB1dGlsLmlzUHJpbWl0aXZlKGIpKVxuICAgIHJldHVybiBhID09PSBiO1xuICBpZiAoc3RyaWN0ICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihhKSAhPT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGIpKVxuICAgIHJldHVybiBmYWxzZTtcbiAgdmFyIGFJc0FyZ3MgPSBpc0FyZ3VtZW50cyhhKTtcbiAgdmFyIGJJc0FyZ3MgPSBpc0FyZ3VtZW50cyhiKTtcbiAgaWYgKChhSXNBcmdzICYmICFiSXNBcmdzKSB8fCAoIWFJc0FyZ3MgJiYgYklzQXJncykpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoYUlzQXJncykge1xuICAgIGEgPSBwU2xpY2UuY2FsbChhKTtcbiAgICBiID0gcFNsaWNlLmNhbGwoYik7XG4gICAgcmV0dXJuIF9kZWVwRXF1YWwoYSwgYiwgc3RyaWN0KTtcbiAgfVxuICB2YXIga2EgPSBvYmplY3RLZXlzKGEpO1xuICB2YXIga2IgPSBvYmplY3RLZXlzKGIpO1xuICB2YXIga2V5LCBpO1xuICAvLyBoYXZpbmcgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMgKGtleXMgaW5jb3Jwb3JhdGVzXG4gIC8vIGhhc093blByb3BlcnR5KVxuICBpZiAoa2EubGVuZ3RoICE9PSBrYi5sZW5ndGgpXG4gICAgcmV0dXJuIGZhbHNlO1xuICAvL3RoZSBzYW1lIHNldCBvZiBrZXlzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpLFxuICBrYS5zb3J0KCk7XG4gIGtiLnNvcnQoKTtcbiAgLy9+fn5jaGVhcCBrZXkgdGVzdFxuICBmb3IgKGkgPSBrYS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChrYVtpXSAhPT0ga2JbaV0pXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy9lcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXksIGFuZFxuICAvL35+fnBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3RcbiAgZm9yIChpID0ga2EubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBrZXkgPSBrYVtpXTtcbiAgICBpZiAoIV9kZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIHN0cmljdCwgYWN0dWFsVmlzaXRlZE9iamVjdHMpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyA4LiBUaGUgbm9uLWVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBmb3IgYW55IGRlZXAgaW5lcXVhbGl0eS5cbi8vIGFzc2VydC5ub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKF9kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgZmFsc2UpKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnbm90RGVlcEVxdWFsJywgYXNzZXJ0Lm5vdERlZXBFcXVhbCk7XG4gIH1cbn07XG5cbmFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWwgPSBub3REZWVwU3RyaWN0RXF1YWw7XG5mdW5jdGlvbiBub3REZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoX2RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCB0cnVlKSkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJ25vdERlZXBTdHJpY3RFcXVhbCcsIG5vdERlZXBTdHJpY3RFcXVhbCk7XG4gIH1cbn1cblxuXG4vLyA5LiBUaGUgc3RyaWN0IGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzdHJpY3QgZXF1YWxpdHksIGFzIGRldGVybWluZWQgYnkgPT09LlxuLy8gYXNzZXJ0LnN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgJz09PScsIGFzc2VydC5zdHJpY3RFcXVhbCk7XG4gIH1cbn07XG5cbi8vIDEwLiBUaGUgc3RyaWN0IG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHN0cmljdCBpbmVxdWFsaXR5LCBhc1xuLy8gZGV0ZXJtaW5lZCBieSAhPT0uICBhc3NlcnQubm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZV9vcHQpO1xuXG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT09IGV4cGVjdGVkKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCAnIT09JywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICBpZiAoIWFjdHVhbCB8fCAhZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGV4cGVjdGVkKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xuICAgIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlLiAgVGhlIGluc3RhbmNlb2YgY2hlY2sgZG9lc24ndCB3b3JrIGZvciBhcnJvdyBmdW5jdGlvbnMuXG4gIH1cblxuICBpZiAoRXJyb3IuaXNQcm90b3R5cGVPZihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gX3RyeUJsb2NrKGJsb2NrKSB7XG4gIHZhciBlcnJvcjtcbiAgdHJ5IHtcbiAgICBibG9jaygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXJyb3IgPSBlO1xuICB9XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gX3Rocm93cyhzaG91bGRUaHJvdywgYmxvY2ssIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIHZhciBhY3R1YWw7XG5cbiAgaWYgKHR5cGVvZiBibG9jayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYmxvY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IGV4cGVjdGVkO1xuICAgIGV4cGVjdGVkID0gbnVsbDtcbiAgfVxuXG4gIGFjdHVhbCA9IF90cnlCbG9jayhibG9jayk7XG5cbiAgbWVzc2FnZSA9IChleHBlY3RlZCAmJiBleHBlY3RlZC5uYW1lID8gJyAoJyArIGV4cGVjdGVkLm5hbWUgKyAnKS4nIDogJy4nKSArXG4gICAgICAgICAgICAobWVzc2FnZSA/ICcgJyArIG1lc3NhZ2UgOiAnLicpO1xuXG4gIGlmIChzaG91bGRUaHJvdyAmJiAhYWN0dWFsKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnTWlzc2luZyBleHBlY3RlZCBleGNlcHRpb24nICsgbWVzc2FnZSk7XG4gIH1cblxuICB2YXIgdXNlclByb3ZpZGVkTWVzc2FnZSA9IHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJztcbiAgdmFyIGlzVW53YW50ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgdXRpbC5pc0Vycm9yKGFjdHVhbCk7XG4gIHZhciBpc1VuZXhwZWN0ZWRFeGNlcHRpb24gPSAhc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmICFleHBlY3RlZDtcblxuICBpZiAoKGlzVW53YW50ZWRFeGNlcHRpb24gJiZcbiAgICAgIHVzZXJQcm92aWRlZE1lc3NhZ2UgJiZcbiAgICAgIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpKSB8fFxuICAgICAgaXNVbmV4cGVjdGVkRXhjZXB0aW9uKSB7XG4gICAgZmFpbChhY3R1YWwsIGV4cGVjdGVkLCAnR290IHVud2FudGVkIGV4Y2VwdGlvbicgKyBtZXNzYWdlKTtcbiAgfVxuXG4gIGlmICgoc2hvdWxkVGhyb3cgJiYgYWN0dWFsICYmIGV4cGVjdGVkICYmXG4gICAgICAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCkpIHx8ICghc2hvdWxkVGhyb3cgJiYgYWN0dWFsKSkge1xuICAgIHRocm93IGFjdHVhbDtcbiAgfVxufVxuXG4vLyAxMS4gRXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3I6XG4vLyBhc3NlcnQudGhyb3dzKGJsb2NrLCBFcnJvcl9vcHQsIG1lc3NhZ2Vfb3B0KTtcblxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uKGJsb2NrLCAvKm9wdGlvbmFsKi9lcnJvciwgLypvcHRpb25hbCovbWVzc2FnZSkge1xuICBfdGhyb3dzKHRydWUsIGJsb2NrLCBlcnJvciwgbWVzc2FnZSk7XG59O1xuXG4vLyBFWFRFTlNJT04hIFRoaXMgaXMgYW5ub3lpbmcgdG8gd3JpdGUgb3V0c2lkZSB0aGlzIG1vZHVsZS5cbmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbihibG9jaywgLypvcHRpb25hbCovZXJyb3IsIC8qb3B0aW9uYWwqL21lc3NhZ2UpIHtcbiAgX3Rocm93cyhmYWxzZSwgYmxvY2ssIGVycm9yLCBtZXNzYWdlKTtcbn07XG5cbmFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24oZXJyKSB7IGlmIChlcnIpIHRocm93IGVycjsgfTtcblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn07XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cblxuXG52YXIgYmFzZTY0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYmFzZTY0LWpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qc1wiKVxudmFyIGllZWU3NTQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpZWVlNzU0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanNcIilcbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaXNhcnJheSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzXCIpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL2RlZmVycmVkLWl0ZXJhdG9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vZGVmZXJyZWQtaXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBBYnN0cmFjdEl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYWJzdHJhY3QtbGV2ZWxkb3duICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2luZGV4LmpzXCIpLkFic3RyYWN0SXRlcmF0b3JcbnZhciBpbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGluaGVyaXRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcIilcblxuZnVuY3Rpb24gRGVmZXJyZWRJdGVyYXRvciAob3B0aW9ucykge1xuICBBYnN0cmFjdEl0ZXJhdG9yLmNhbGwodGhpcywgb3B0aW9ucylcblxuICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuICB0aGlzLl9pdGVyYXRvciA9IG51bGxcbiAgdGhpcy5fb3BlcmF0aW9ucyA9IFtdXG59XG5cbmluaGVyaXRzKERlZmVycmVkSXRlcmF0b3IsIEFic3RyYWN0SXRlcmF0b3IpXG5cbkRlZmVycmVkSXRlcmF0b3IucHJvdG90eXBlLnNldERiID0gZnVuY3Rpb24gKGRiKSB7XG4gIHZhciBpdCA9IHRoaXMuX2l0ZXJhdG9yID0gZGIuaXRlcmF0b3IodGhpcy5fb3B0aW9ucylcbiAgdGhpcy5fb3BlcmF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChvcCkge1xuICAgIGl0W29wLm1ldGhvZF0uYXBwbHkoaXQsIG9wLmFyZ3MpXG4gIH0pXG59XG5cbkRlZmVycmVkSXRlcmF0b3IucHJvdG90eXBlLl9vcGVyYXRpb24gPSBmdW5jdGlvbiAobWV0aG9kLCBhcmdzKSB7XG4gIGlmICh0aGlzLl9pdGVyYXRvcikgcmV0dXJuIHRoaXMuX2l0ZXJhdG9yW21ldGhvZF0uYXBwbHkodGhpcy5faXRlcmF0b3IsIGFyZ3MpXG4gIHRoaXMuX29wZXJhdGlvbnMucHVzaCh7IG1ldGhvZDogbWV0aG9kLCBhcmdzOiBhcmdzIH0pXG59XG5cbiduZXh0IGVuZCcuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gIERlZmVycmVkSXRlcmF0b3IucHJvdG90eXBlWydfJyArIG1dID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX29wZXJhdGlvbihtLCBhcmd1bWVudHMpXG4gIH1cbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gRGVmZXJyZWRJdGVyYXRvclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vZGVmZXJyZWQtbGV2ZWxkb3duLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL2RlZmVycmVkLWxldmVsZG93bi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBBYnN0cmFjdExldmVsRE9XTiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGFic3RyYWN0LWxldmVsZG93biAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9pbmRleC5qc1wiKS5BYnN0cmFjdExldmVsRE9XTlxudmFyIGluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaW5oZXJpdHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiKVxudmFyIERlZmVycmVkSXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2RlZmVycmVkLWl0ZXJhdG9yICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9kZWZlcnJlZC1pdGVyYXRvci5qc1wiKVxudmFyIGRlZmVycmFibGVzID0gJ3B1dCBnZXQgZGVsIGJhdGNoJy5zcGxpdCgnICcpXG5cbmZ1bmN0aW9uIERlZmVycmVkTGV2ZWxET1dOIChkYikge1xuICBBYnN0cmFjdExldmVsRE9XTi5jYWxsKHRoaXMsICcnKVxuICB0aGlzLl9kYiA9IGRiXG4gIHRoaXMuX29wZXJhdGlvbnMgPSBbXVxuICB0aGlzLl9pdGVyYXRvcnMgPSBbXVxuICBjbG9zZWQodGhpcylcbn1cblxuaW5oZXJpdHMoRGVmZXJyZWRMZXZlbERPV04sIEFic3RyYWN0TGV2ZWxET1dOKVxuXG5EZWZlcnJlZExldmVsRE9XTi5wcm90b3R5cGUuX29wZW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgdGhpcy5fZGIub3BlbihvcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgIHNlbGYuX29wZXJhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3ApIHtcbiAgICAgIHNlbGYuX2RiW29wLm1ldGhvZF0uYXBwbHkoc2VsZi5fZGIsIG9wLmFyZ3MpXG4gICAgfSlcbiAgICBzZWxmLl9vcGVyYXRpb25zID0gW11cbiAgICBzZWxmLl9pdGVyYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAoaXQpIHtcbiAgICAgIGl0LnNldERiKHNlbGYuX2RiKVxuICAgIH0pXG4gICAgc2VsZi5faXRlcmF0b3JzID0gW11cbiAgICBvcGVuKHNlbGYpXG4gICAgY2FsbGJhY2soKVxuICB9KVxufVxuXG5EZWZlcnJlZExldmVsRE9XTi5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHRoaXMuX2RiLmNsb3NlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgIGNsb3NlZChzZWxmKVxuICAgIGNhbGxiYWNrKClcbiAgfSlcbn1cblxuZnVuY3Rpb24gb3BlbiAoc2VsZikge1xuICBkZWZlcnJhYmxlcy5jb25jYXQoJ2l0ZXJhdG9yJykuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIHNlbGZbJ18nICsgbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGJbbV0uYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cylcbiAgICB9XG4gIH0pXG4gIGlmIChzZWxmLl9kYi5hcHByb3hpbWF0ZVNpemUpIHtcbiAgICBzZWxmLmFwcHJveGltYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kYi5hcHByb3hpbWF0ZVNpemUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VkIChzZWxmKSB7XG4gIGRlZmVycmFibGVzLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICBzZWxmWydfJyArIG1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fb3BlcmF0aW9ucy5wdXNoKHsgbWV0aG9kOiBtLCBhcmdzOiBhcmd1bWVudHMgfSlcbiAgICB9XG4gIH0pXG4gIGlmICh0eXBlb2Ygc2VsZi5fZGIuYXBwcm94aW1hdGVTaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2VsZi5hcHByb3hpbWF0ZVNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9vcGVyYXRpb25zLnB1c2goe1xuICAgICAgICBtZXRob2Q6ICdhcHByb3hpbWF0ZVNpemUnLFxuICAgICAgICBhcmdzOiBhcmd1bWVudHNcbiAgICAgIH0pXG4gICAgfVxuICB9XG4gIHNlbGYuX2l0ZXJhdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgaXQgPSBuZXcgRGVmZXJyZWRJdGVyYXRvcihvcHRpb25zKVxuICAgIHRoaXMuX2l0ZXJhdG9ycy5wdXNoKGl0KVxuICAgIHJldHVybiBpdFxuICB9XG59XG5cbkRlZmVycmVkTGV2ZWxET1dOLnByb3RvdHlwZS5fc2VyaWFsaXplS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5XG59XG5cbkRlZmVycmVkTGV2ZWxET1dOLnByb3RvdHlwZS5fc2VyaWFsaXplVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmZXJyZWRMZXZlbERPV05cbm1vZHVsZS5leHBvcnRzLkRlZmVycmVkSXRlcmF0b3IgPSBEZWZlcnJlZEl0ZXJhdG9yXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWNoYWluZWQtYmF0Y2guanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1jaGFpbmVkLWJhdGNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gQWJzdHJhY3RDaGFpbmVkQmF0Y2ggKGRiKSB7XG4gIGlmICh0eXBlb2YgZGIgIT09ICdvYmplY3QnIHx8IGRiID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhbiBhYnN0cmFjdC1sZXZlbGRvd24gY29tcGxpYW50IHN0b3JlJylcbiAgfVxuXG4gIHRoaXMuZGIgPSBkYlxuICB0aGlzLl9vcGVyYXRpb25zID0gW11cbiAgdGhpcy5fd3JpdHRlbiA9IGZhbHNlXG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS5fY2hlY2tXcml0dGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fd3JpdHRlbikge1xuICAgIHRocm93IG5ldyBFcnJvcignd3JpdGUoKSBhbHJlYWR5IGNhbGxlZCBvbiB0aGlzIGJhdGNoJylcbiAgfVxufVxuXG5BYnN0cmFjdENoYWluZWRCYXRjaC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fY2hlY2tXcml0dGVuKClcblxuICB2YXIgZXJyID0gdGhpcy5kYi5fY2hlY2tLZXkoa2V5KSB8fCB0aGlzLmRiLl9jaGVja1ZhbHVlKHZhbHVlKVxuICBpZiAoZXJyKSB0aHJvdyBlcnJcblxuICBrZXkgPSB0aGlzLmRiLl9zZXJpYWxpemVLZXkoa2V5KVxuICB2YWx1ZSA9IHRoaXMuZGIuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKVxuXG4gIHRoaXMuX3B1dChrZXksIHZhbHVlKVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS5fcHV0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fb3BlcmF0aW9ucy5wdXNoKHsgdHlwZTogJ3B1dCcsIGtleToga2V5LCB2YWx1ZTogdmFsdWUgfSlcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgdGhpcy5fY2hlY2tXcml0dGVuKClcblxuICB2YXIgZXJyID0gdGhpcy5kYi5fY2hlY2tLZXkoa2V5KVxuICBpZiAoZXJyKSB0aHJvdyBlcnJcblxuICBrZXkgPSB0aGlzLmRiLl9zZXJpYWxpemVLZXkoa2V5KVxuICB0aGlzLl9kZWwoa2V5KVxuXG4gIHJldHVybiB0aGlzXG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS5fZGVsID0gZnVuY3Rpb24gKGtleSkge1xuICB0aGlzLl9vcGVyYXRpb25zLnB1c2goeyB0eXBlOiAnZGVsJywga2V5OiBrZXkgfSlcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jaGVja1dyaXR0ZW4oKVxuICB0aGlzLl9jbGVhcigpXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLl9jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fb3BlcmF0aW9ucyA9IFtdXG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB0aGlzLl9jaGVja1dyaXR0ZW4oKVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgeyBjYWxsYmFjayA9IG9wdGlvbnMgfVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd3cml0ZSgpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgdGhpcy5fd3JpdHRlbiA9IHRydWVcbiAgdGhpcy5fd3JpdGUob3B0aW9ucywgY2FsbGJhY2spXG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdGhpcy5kYi5fYmF0Y2godGhpcy5fb3BlcmF0aW9ucywgb3B0aW9ucywgY2FsbGJhY2spXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RDaGFpbmVkQmF0Y2hcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtaXRlcmF0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtaXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHtmdW5jdGlvbiBBYnN0cmFjdEl0ZXJhdG9yIChkYikge1xuICBpZiAodHlwZW9mIGRiICE9PSAnb2JqZWN0JyB8fCBkYiA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYW4gYWJzdHJhY3QtbGV2ZWxkb3duIGNvbXBsaWFudCBzdG9yZScpXG4gIH1cblxuICB0aGlzLmRiID0gZGJcbiAgdGhpcy5fZW5kZWQgPSBmYWxzZVxuICB0aGlzLl9uZXh0aW5nID0gZmFsc2Vcbn1cblxuQWJzdHJhY3RJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCduZXh0KCkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAoc2VsZi5fZW5kZWQpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoJ2Nhbm5vdCBjYWxsIG5leHQoKSBhZnRlciBlbmQoKScpKVxuICAgIHJldHVybiBzZWxmXG4gIH1cblxuICBpZiAoc2VsZi5fbmV4dGluZykge1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIG5ldyBFcnJvcignY2Fubm90IGNhbGwgbmV4dCgpIGJlZm9yZSBwcmV2aW91cyBuZXh0KCkgaGFzIGNvbXBsZXRlZCcpKVxuICAgIHJldHVybiBzZWxmXG4gIH1cblxuICBzZWxmLl9uZXh0aW5nID0gdHJ1ZVxuICBzZWxmLl9uZXh0KGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9uZXh0aW5nID0gZmFsc2VcbiAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIH0pXG5cbiAgcmV0dXJuIHNlbGZcbn1cblxuQWJzdHJhY3RJdGVyYXRvci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RJdGVyYXRvci5wcm90b3R5cGUuc2VlayA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgaWYgKHRoaXMuX2VuZGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2FsbCBzZWVrKCkgYWZ0ZXIgZW5kKCknKVxuICB9XG4gIGlmICh0aGlzLl9uZXh0aW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgY2FsbCBzZWVrKCkgYmVmb3JlIG5leHQoKSBoYXMgY29tcGxldGVkJylcbiAgfVxuXG4gIHRhcmdldCA9IHRoaXMuZGIuX3NlcmlhbGl6ZUtleSh0YXJnZXQpXG4gIHRoaXMuX3NlZWsodGFyZ2V0KVxufVxuXG5BYnN0cmFjdEl0ZXJhdG9yLnByb3RvdHlwZS5fc2VlayA9IGZ1bmN0aW9uICh0YXJnZXQpIHt9XG5cbkFic3RyYWN0SXRlcmF0b3IucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdlbmQoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGFyZ3VtZW50JylcbiAgfVxuXG4gIGlmICh0aGlzLl9lbmRlZCkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoJ2VuZCgpIGFscmVhZHkgY2FsbGVkIG9uIGl0ZXJhdG9yJykpXG4gIH1cblxuICB0aGlzLl9lbmRlZCA9IHRydWVcbiAgdGhpcy5fZW5kKGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdEl0ZXJhdG9yLnByb3RvdHlwZS5fZW5kID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RJdGVyYXRvclxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWxldmVsZG93bi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtbGV2ZWxkb3duLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2VzcywgQnVmZmVyKSB7dmFyIHh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgeHRlbmQgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzXCIpXG52YXIgQWJzdHJhY3RJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYWJzdHJhY3QtaXRlcmF0b3IgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtaXRlcmF0b3IuanNcIilcbnZhciBBYnN0cmFjdENoYWluZWRCYXRjaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYWJzdHJhY3QtY2hhaW5lZC1iYXRjaCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1jaGFpbmVkLWJhdGNoLmpzXCIpXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5XG52YXIgcmFuZ2VPcHRpb25zID0gJ3N0YXJ0IGVuZCBndCBndGUgbHQgbHRlJy5zcGxpdCgnICcpXG5cbmZ1bmN0aW9uIEFic3RyYWN0TGV2ZWxET1dOICgpIHtcbiAgdGhpcy5zdGF0dXMgPSAnbmV3J1xufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIG9sZFN0YXR1cyA9IHRoaXMuc3RhdHVzXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcGVuKCkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuXG4gIG9wdGlvbnMuY3JlYXRlSWZNaXNzaW5nID0gb3B0aW9ucy5jcmVhdGVJZk1pc3NpbmcgIT09IGZhbHNlXG4gIG9wdGlvbnMuZXJyb3JJZkV4aXN0cyA9ICEhb3B0aW9ucy5lcnJvcklmRXhpc3RzXG5cbiAgdGhpcy5zdGF0dXMgPSAnb3BlbmluZydcbiAgdGhpcy5fb3BlbihvcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgc2VsZi5zdGF0dXMgPSBvbGRTdGF0dXNcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgfVxuICAgIHNlbGYuc3RhdHVzID0gJ29wZW4nXG4gICAgY2FsbGJhY2soKVxuICB9KVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX29wZW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgb2xkU3RhdHVzID0gdGhpcy5zdGF0dXNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbG9zZSgpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgdGhpcy5zdGF0dXMgPSAnY2xvc2luZydcbiAgdGhpcy5fY2xvc2UoZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHNlbGYuc3RhdHVzID0gb2xkU3RhdHVzXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgIH1cbiAgICBzZWxmLnN0YXR1cyA9ICdjbG9zZWQnXG4gICAgY2FsbGJhY2soKVxuICB9KVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldCgpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgdmFyIGVyciA9IHRoaXMuX2NoZWNrS2V5KGtleSlcbiAgaWYgKGVycikgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIGVycilcblxuICBrZXkgPSB0aGlzLl9zZXJpYWxpemVLZXkoa2V5KVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgb3B0aW9ucyA9IHt9XG5cbiAgb3B0aW9ucy5hc0J1ZmZlciA9IG9wdGlvbnMuYXNCdWZmZXIgIT09IGZhbHNlXG5cbiAgdGhpcy5fZ2V0KGtleSwgb3B0aW9ucywgY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5fZ2V0ID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IGNhbGxiYWNrKG5ldyBFcnJvcignTm90Rm91bmQnKSkgfSlcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3B1dCgpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgdmFyIGVyciA9IHRoaXMuX2NoZWNrS2V5KGtleSkgfHwgdGhpcy5fY2hlY2tWYWx1ZSh2YWx1ZSlcbiAgaWYgKGVycikgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIGVycilcblxuICBrZXkgPSB0aGlzLl9zZXJpYWxpemVLZXkoa2V5KVxuICB2YWx1ZSA9IHRoaXMuX3NlcmlhbGl6ZVZhbHVlKHZhbHVlKVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgb3B0aW9ucyA9IHt9XG5cbiAgdGhpcy5fcHV0KGtleSwgdmFsdWUsIG9wdGlvbnMsIGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX3B1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuZGVsID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWwoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBlcnIgPSB0aGlzLl9jaGVja0tleShrZXkpXG4gIGlmIChlcnIpIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBlcnIpXG5cbiAga2V5ID0gdGhpcy5fc2VyaWFsaXplS2V5KGtleSlcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuXG4gIHRoaXMuX2RlbChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2RlbCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5iYXRjaCA9IGZ1bmN0aW9uIChhcnJheSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fY2hhaW5lZEJhdGNoKClcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2YgYXJyYXkgPT09ICdmdW5jdGlvbicpIGNhbGxiYWNrID0gYXJyYXlcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiYXRjaChhcnJheSkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIG5ldyBFcnJvcignYmF0Y2goYXJyYXkpIHJlcXVpcmVzIGFuIGFycmF5IGFyZ3VtZW50JykpXG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuXG4gIHZhciBzZXJpYWxpemVkID0gbmV3IEFycmF5KGFycmF5Lmxlbmd0aClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiBhcnJheVtpXSAhPT0gJ29iamVjdCcgfHwgYXJyYXlbaV0gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoJ2JhdGNoKGFycmF5KSBlbGVtZW50IG11c3QgYmUgYW4gb2JqZWN0IGFuZCBub3QgYG51bGxgJykpXG4gICAgfVxuXG4gICAgdmFyIGUgPSB4dGVuZChhcnJheVtpXSlcblxuICAgIGlmIChlLnR5cGUgIT09ICdwdXQnICYmIGUudHlwZSAhPT0gJ2RlbCcpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoXCJgdHlwZWAgbXVzdCBiZSAncHV0JyBvciAnZGVsJ1wiKSlcbiAgICB9XG5cbiAgICB2YXIgZXJyID0gdGhpcy5fY2hlY2tLZXkoZS5rZXkpXG4gICAgaWYgKGVycikgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIGVycilcblxuICAgIGUua2V5ID0gdGhpcy5fc2VyaWFsaXplS2V5KGUua2V5KVxuXG4gICAgaWYgKGUudHlwZSA9PT0gJ3B1dCcpIHtcbiAgICAgIHZhciB2YWx1ZUVyciA9IHRoaXMuX2NoZWNrVmFsdWUoZS52YWx1ZSlcbiAgICAgIGlmICh2YWx1ZUVycikgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIHZhbHVlRXJyKVxuXG4gICAgICBlLnZhbHVlID0gdGhpcy5fc2VyaWFsaXplVmFsdWUoZS52YWx1ZSlcbiAgICB9XG5cbiAgICBzZXJpYWxpemVkW2ldID0gZVxuICB9XG5cbiAgdGhpcy5fYmF0Y2goc2VyaWFsaXplZCwgb3B0aW9ucywgY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5fYmF0Y2ggPSBmdW5jdGlvbiAoYXJyYXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5fc2V0dXBJdGVyYXRvck9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gY2xlYW5SYW5nZU9wdGlvbnModGhpcywgb3B0aW9ucylcblxuICBvcHRpb25zLnJldmVyc2UgPSAhIW9wdGlvbnMucmV2ZXJzZVxuICBvcHRpb25zLmtleXMgPSBvcHRpb25zLmtleXMgIT09IGZhbHNlXG4gIG9wdGlvbnMudmFsdWVzID0gb3B0aW9ucy52YWx1ZXMgIT09IGZhbHNlXG4gIG9wdGlvbnMubGltaXQgPSAnbGltaXQnIGluIG9wdGlvbnMgPyBvcHRpb25zLmxpbWl0IDogLTFcbiAgb3B0aW9ucy5rZXlBc0J1ZmZlciA9IG9wdGlvbnMua2V5QXNCdWZmZXIgIT09IGZhbHNlXG4gIG9wdGlvbnMudmFsdWVBc0J1ZmZlciA9IG9wdGlvbnMudmFsdWVBc0J1ZmZlciAhPT0gZmFsc2VcblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiBjbGVhblJhbmdlT3B0aW9ucyAoZGIsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9XG5cbiAgZm9yICh2YXIgayBpbiBvcHRpb25zKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGspKSBjb250aW51ZVxuXG4gICAgdmFyIG9wdCA9IG9wdGlvbnNba11cblxuICAgIGlmIChpc1JhbmdlT3B0aW9uKGspKSB7XG4gICAgICAvLyBOb3RlIHRoYXQgd2UgZG9uJ3QgcmVqZWN0IG51bGxpc2ggYW5kIGVtcHR5IG9wdGlvbnMgaGVyZS4gV2hpbGVcbiAgICAgIC8vIHRob3NlIHR5cGVzIGFyZSBpbnZhbGlkIGFzIGtleXMsIHRoZXkgYXJlIHZhbGlkIGFzIHJhbmdlIG9wdGlvbnMuXG4gICAgICBvcHQgPSBkYi5fc2VyaWFsaXplS2V5KG9wdClcbiAgICB9XG5cbiAgICByZXN1bHRba10gPSBvcHRcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gaXNSYW5nZU9wdGlvbiAoaykge1xuICByZXR1cm4gcmFuZ2VPcHRpb25zLmluZGV4T2YoaykgIT09IC0xXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5pdGVyYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkgb3B0aW9ucyA9IHt9XG4gIG9wdGlvbnMgPSB0aGlzLl9zZXR1cEl0ZXJhdG9yT3B0aW9ucyhvcHRpb25zKVxuICByZXR1cm4gdGhpcy5faXRlcmF0b3Iob3B0aW9ucylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9pdGVyYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgQWJzdHJhY3RJdGVyYXRvcih0aGlzKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2NoYWluZWRCYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBBYnN0cmFjdENoYWluZWRCYXRjaCh0aGlzKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX3NlcmlhbGl6ZUtleSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX3NlcmlhbGl6ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2NoZWNrS2V5ID0gZnVuY3Rpb24gKGtleSkge1xuICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcigna2V5IGNhbm5vdCBiZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGAnKVxuICB9IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihrZXkpICYmIGtleS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdrZXkgY2Fubm90IGJlIGFuIGVtcHR5IEJ1ZmZlcicpXG4gIH0gZWxzZSBpZiAoa2V5ID09PSAnJykge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ2tleSBjYW5ub3QgYmUgYW4gZW1wdHkgU3RyaW5nJylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGtleSkgJiYga2V5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ2tleSBjYW5ub3QgYmUgYW4gZW1wdHkgQXJyYXknKVxuICB9XG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5fY2hlY2tWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ3ZhbHVlIGNhbm5vdCBiZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGAnKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RMZXZlbERPV05cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi9idWZmZXIvaW5kZXguanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCIpLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9kZWZlcnJlZC1sZXZlbGRvd24vbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5leHBvcnRzLkFic3RyYWN0TGV2ZWxET1dOID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hYnN0cmFjdC1sZXZlbGRvd24gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVmZXJyZWQtbGV2ZWxkb3duL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtbGV2ZWxkb3duLmpzXCIpXG5leHBvcnRzLkFic3RyYWN0SXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Fic3RyYWN0LWl0ZXJhdG9yICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWl0ZXJhdG9yLmpzXCIpXG5leHBvcnRzLkFic3RyYWN0Q2hhaW5lZEJhdGNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hYnN0cmFjdC1jaGFpbmVkLWJhdGNoICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWNoYWluZWQtYmF0Y2guanNcIilcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZXJybm8vY3VzdG9tLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9lcnJuby9jdXN0b20uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBwcnIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcnIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJyL3Byci5qc1wiKVxuXG5mdW5jdGlvbiBpbml0ICh0eXBlLCBtZXNzYWdlLCBjYXVzZSkge1xuICBpZiAoISFtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlICE9ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UubWVzc2FnZSB8fCBtZXNzYWdlLm5hbWVcbiAgfVxuICBwcnIodGhpcywge1xuICAgICAgdHlwZSAgICA6IHR5cGVcbiAgICAsIG5hbWUgICAgOiB0eXBlXG4gICAgICAvLyBjYW4gYmUgcGFzc2VkIGp1c3QgYSAnY2F1c2UnXG4gICAgLCBjYXVzZSAgIDogdHlwZW9mIG1lc3NhZ2UgIT0gJ3N0cmluZycgPyBtZXNzYWdlIDogY2F1c2VcbiAgICAsIG1lc3NhZ2UgOiBtZXNzYWdlXG4gIH0sICdld3InKVxufVxuXG4vLyBnZW5lcmljIHByb3RvdHlwZSwgbm90IGludGVuZGVkIHRvIGJlIGFjdHVhbGx5IHVzZWQgLSBoZWxwZnVsIGZvciBgaW5zdGFuY2VvZmBcbmZ1bmN0aW9uIEN1c3RvbUVycm9yIChtZXNzYWdlLCBjYXVzZSkge1xuICBFcnJvci5jYWxsKHRoaXMpXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKVxuICBpbml0LmNhbGwodGhpcywgJ0N1c3RvbUVycm9yJywgbWVzc2FnZSwgY2F1c2UpXG59XG5cbkN1c3RvbUVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpXG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yIChlcnJubywgdHlwZSwgcHJvdG8pIHtcbiAgdmFyIGVyciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBjYXVzZSkge1xuICAgIGluaXQuY2FsbCh0aGlzLCB0eXBlLCBtZXNzYWdlLCBjYXVzZSlcbiAgICAvL1RPRE86IHRoZSBzcGVjaWZpY2l0eSBoZXJlIGlzIHN0dXBpZCwgZXJybm8gc2hvdWxkIGJlIGF2YWlsYWJsZSBldmVyeXdoZXJlXG4gICAgaWYgKHR5cGUgPT0gJ0ZpbGVzeXN0ZW1FcnJvcicpIHtcbiAgICAgIHRoaXMuY29kZSAgICA9IHRoaXMuY2F1c2UuY29kZVxuICAgICAgdGhpcy5wYXRoICAgID0gdGhpcy5jYXVzZS5wYXRoXG4gICAgICB0aGlzLmVycm5vICAgPSB0aGlzLmNhdXNlLmVycm5vXG4gICAgICB0aGlzLm1lc3NhZ2UgPVxuICAgICAgICAoZXJybm8uZXJybm9bdGhpcy5jYXVzZS5lcnJub11cbiAgICAgICAgICA/IGVycm5vLmVycm5vW3RoaXMuY2F1c2UuZXJybm9dLmRlc2NyaXB0aW9uXG4gICAgICAgICAgOiB0aGlzLmNhdXNlLm1lc3NhZ2UpXG4gICAgICAgICsgKHRoaXMuY2F1c2UucGF0aCA/ICcgWycgKyB0aGlzLmNhdXNlLnBhdGggKyAnXScgOiAnJylcbiAgICB9XG4gICAgRXJyb3IuY2FsbCh0aGlzKVxuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSlcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIGVycilcbiAgfVxuICBlcnIucHJvdG90eXBlID0gISFwcm90byA/IG5ldyBwcm90bygpIDogbmV3IEN1c3RvbUVycm9yKClcbiAgcmV0dXJuIGVyclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlcnJubykge1xuICB2YXIgY2UgPSBmdW5jdGlvbiAodHlwZSwgcHJvdG8pIHtcbiAgICByZXR1cm4gY3JlYXRlRXJyb3IoZXJybm8sIHR5cGUsIHByb3RvKVxuICB9XG4gIHJldHVybiB7XG4gICAgICBDdXN0b21FcnJvciAgICAgOiBDdXN0b21FcnJvclxuICAgICwgRmlsZXN5c3RlbUVycm9yIDogY2UoJ0ZpbGVzeXN0ZW1FcnJvcicpXG4gICAgLCBjcmVhdGVFcnJvciAgICAgOiBjZVxuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Vycm5vL2Vycm5vLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2Vycm5vL2Vycm5vLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhbGwgPSBtb2R1bGUuZXhwb3J0cy5hbGwgPSBbXG4gIHtcbiAgICBlcnJubzogLTIsXG4gICAgY29kZTogJ0VOT0VOVCcsXG4gICAgZGVzY3JpcHRpb246ICdubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5J1xuICB9LFxuICB7XG4gICAgZXJybm86IC0xLFxuICAgIGNvZGU6ICdVTktOT1dOJyxcbiAgICBkZXNjcmlwdGlvbjogJ3Vua25vd24gZXJyb3InXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMCxcbiAgICBjb2RlOiAnT0snLFxuICAgIGRlc2NyaXB0aW9uOiAnc3VjY2VzcydcbiAgfSxcbiAge1xuICAgIGVycm5vOiAxLFxuICAgIGNvZGU6ICdFT0YnLFxuICAgIGRlc2NyaXB0aW9uOiAnZW5kIG9mIGZpbGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMixcbiAgICBjb2RlOiAnRUFERFJJTkZPJyxcbiAgICBkZXNjcmlwdGlvbjogJ2dldGFkZHJpbmZvIGVycm9yJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDMsXG4gICAgY29kZTogJ0VBQ0NFUycsXG4gICAgZGVzY3JpcHRpb246ICdwZXJtaXNzaW9uIGRlbmllZCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiA0LFxuICAgIGNvZGU6ICdFQUdBSU4nLFxuICAgIGRlc2NyaXB0aW9uOiAncmVzb3VyY2UgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNSxcbiAgICBjb2RlOiAnRUFERFJJTlVTRScsXG4gICAgZGVzY3JpcHRpb246ICdhZGRyZXNzIGFscmVhZHkgaW4gdXNlJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDYsXG4gICAgY29kZTogJ0VBRERSTk9UQVZBSUwnLFxuICAgIGRlc2NyaXB0aW9uOiAnYWRkcmVzcyBub3QgYXZhaWxhYmxlJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDcsXG4gICAgY29kZTogJ0VBRk5PU1VQUE9SVCcsXG4gICAgZGVzY3JpcHRpb246ICdhZGRyZXNzIGZhbWlseSBub3Qgc3VwcG9ydGVkJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDgsXG4gICAgY29kZTogJ0VBTFJFQURZJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Nvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzcydcbiAgfSxcbiAge1xuICAgIGVycm5vOiA5LFxuICAgIGNvZGU6ICdFQkFERicsXG4gICAgZGVzY3JpcHRpb246ICdiYWQgZmlsZSBkZXNjcmlwdG9yJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDEwLFxuICAgIGNvZGU6ICdFQlVTWScsXG4gICAgZGVzY3JpcHRpb246ICdyZXNvdXJjZSBidXN5IG9yIGxvY2tlZCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAxMSxcbiAgICBjb2RlOiAnRUNPTk5BQk9SVEVEJyxcbiAgICBkZXNjcmlwdGlvbjogJ3NvZnR3YXJlIGNhdXNlZCBjb25uZWN0aW9uIGFib3J0J1xuICB9LFxuICB7XG4gICAgZXJybm86IDEyLFxuICAgIGNvZGU6ICdFQ09OTlJFRlVTRUQnLFxuICAgIGRlc2NyaXB0aW9uOiAnY29ubmVjdGlvbiByZWZ1c2VkJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDEzLFxuICAgIGNvZGU6ICdFQ09OTlJFU0VUJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Nvbm5lY3Rpb24gcmVzZXQgYnkgcGVlcidcbiAgfSxcbiAge1xuICAgIGVycm5vOiAxNCxcbiAgICBjb2RlOiAnRURFU1RBRERSUkVRJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Rlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMTUsXG4gICAgY29kZTogJ0VGQVVMVCcsXG4gICAgZGVzY3JpcHRpb246ICdiYWQgYWRkcmVzcyBpbiBzeXN0ZW0gY2FsbCBhcmd1bWVudCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAxNixcbiAgICBjb2RlOiAnRUhPU1RVTlJFQUNIJyxcbiAgICBkZXNjcmlwdGlvbjogJ2hvc3QgaXMgdW5yZWFjaGFibGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMTcsXG4gICAgY29kZTogJ0VJTlRSJyxcbiAgICBkZXNjcmlwdGlvbjogJ2ludGVycnVwdGVkIHN5c3RlbSBjYWxsJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDE4LFxuICAgIGNvZGU6ICdFSU5WQUwnLFxuICAgIGRlc2NyaXB0aW9uOiAnaW52YWxpZCBhcmd1bWVudCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAxOSxcbiAgICBjb2RlOiAnRUlTQ09OTicsXG4gICAgZGVzY3JpcHRpb246ICdzb2NrZXQgaXMgYWxyZWFkeSBjb25uZWN0ZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMjAsXG4gICAgY29kZTogJ0VNRklMRScsXG4gICAgZGVzY3JpcHRpb246ICd0b28gbWFueSBvcGVuIGZpbGVzJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDIxLFxuICAgIGNvZGU6ICdFTVNHU0laRScsXG4gICAgZGVzY3JpcHRpb246ICdtZXNzYWdlIHRvbyBsb25nJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDIyLFxuICAgIGNvZGU6ICdFTkVURE9XTicsXG4gICAgZGVzY3JpcHRpb246ICduZXR3b3JrIGlzIGRvd24nXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMjMsXG4gICAgY29kZTogJ0VORVRVTlJFQUNIJyxcbiAgICBkZXNjcmlwdGlvbjogJ25ldHdvcmsgaXMgdW5yZWFjaGFibGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMjQsXG4gICAgY29kZTogJ0VORklMRScsXG4gICAgZGVzY3JpcHRpb246ICdmaWxlIHRhYmxlIG92ZXJmbG93J1xuICB9LFxuICB7XG4gICAgZXJybm86IDI1LFxuICAgIGNvZGU6ICdFTk9CVUZTJyxcbiAgICBkZXNjcmlwdGlvbjogJ25vIGJ1ZmZlciBzcGFjZSBhdmFpbGFibGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMjYsXG4gICAgY29kZTogJ0VOT01FTScsXG4gICAgZGVzY3JpcHRpb246ICdub3QgZW5vdWdoIG1lbW9yeSdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAyNyxcbiAgICBjb2RlOiAnRU5PVERJUicsXG4gICAgZGVzY3JpcHRpb246ICdub3QgYSBkaXJlY3RvcnknXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMjgsXG4gICAgY29kZTogJ0VJU0RJUicsXG4gICAgZGVzY3JpcHRpb246ICdpbGxlZ2FsIG9wZXJhdGlvbiBvbiBhIGRpcmVjdG9yeSdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAyOSxcbiAgICBjb2RlOiAnRU5PTkVUJyxcbiAgICBkZXNjcmlwdGlvbjogJ21hY2hpbmUgaXMgbm90IG9uIHRoZSBuZXR3b3JrJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDMxLFxuICAgIGNvZGU6ICdFTk9UQ09OTicsXG4gICAgZGVzY3JpcHRpb246ICdzb2NrZXQgaXMgbm90IGNvbm5lY3RlZCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAzMixcbiAgICBjb2RlOiAnRU5PVFNPQ0snLFxuICAgIGRlc2NyaXB0aW9uOiAnc29ja2V0IG9wZXJhdGlvbiBvbiBub24tc29ja2V0J1xuICB9LFxuICB7XG4gICAgZXJybm86IDMzLFxuICAgIGNvZGU6ICdFTk9UU1VQJyxcbiAgICBkZXNjcmlwdGlvbjogJ29wZXJhdGlvbiBub3Qgc3VwcG9ydGVkIG9uIHNvY2tldCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiAzNCxcbiAgICBjb2RlOiAnRU5PRU5UJyxcbiAgICBkZXNjcmlwdGlvbjogJ25vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnknXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMzUsXG4gICAgY29kZTogJ0VOT1NZUycsXG4gICAgZGVzY3JpcHRpb246ICdmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMzYsXG4gICAgY29kZTogJ0VQSVBFJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Jyb2tlbiBwaXBlJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDM3LFxuICAgIGNvZGU6ICdFUFJPVE8nLFxuICAgIGRlc2NyaXB0aW9uOiAncHJvdG9jb2wgZXJyb3InXG4gIH0sXG4gIHtcbiAgICBlcnJubzogMzgsXG4gICAgY29kZTogJ0VQUk9UT05PU1VQUE9SVCcsXG4gICAgZGVzY3JpcHRpb246ICdwcm90b2NvbCBub3Qgc3VwcG9ydGVkJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDM5LFxuICAgIGNvZGU6ICdFUFJPVE9UWVBFJyxcbiAgICBkZXNjcmlwdGlvbjogJ3Byb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiA0MCxcbiAgICBjb2RlOiAnRVRJTUVET1VUJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Nvbm5lY3Rpb24gdGltZWQgb3V0J1xuICB9LFxuICB7XG4gICAgZXJybm86IDQxLFxuICAgIGNvZGU6ICdFQ0hBUlNFVCcsXG4gICAgZGVzY3JpcHRpb246ICdpbnZhbGlkIFVuaWNvZGUgY2hhcmFjdGVyJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDQyLFxuICAgIGNvZGU6ICdFQUlGQU1OT1NVUFBPUlQnLFxuICAgIGRlc2NyaXB0aW9uOiAnYWRkcmVzcyBmYW1pbHkgZm9yIGhvc3RuYW1lIG5vdCBzdXBwb3J0ZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNDQsXG4gICAgY29kZTogJ0VBSVNFUlZJQ0UnLFxuICAgIGRlc2NyaXB0aW9uOiAnc2Vydm5hbWUgbm90IHN1cHBvcnRlZCBmb3IgYWlfc29ja3R5cGUnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNDUsXG4gICAgY29kZTogJ0VBSVNPQ0tUWVBFJyxcbiAgICBkZXNjcmlwdGlvbjogJ2FpX3NvY2t0eXBlIG5vdCBzdXBwb3J0ZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNDYsXG4gICAgY29kZTogJ0VTSFVURE9XTicsXG4gICAgZGVzY3JpcHRpb246ICdjYW5ub3Qgc2VuZCBhZnRlciB0cmFuc3BvcnQgZW5kcG9pbnQgc2h1dGRvd24nXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNDcsXG4gICAgY29kZTogJ0VFWElTVCcsXG4gICAgZGVzY3JpcHRpb246ICdmaWxlIGFscmVhZHkgZXhpc3RzJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDQ4LFxuICAgIGNvZGU6ICdFU1JDSCcsXG4gICAgZGVzY3JpcHRpb246ICdubyBzdWNoIHByb2Nlc3MnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNDksXG4gICAgY29kZTogJ0VOQU1FVE9PTE9ORycsXG4gICAgZGVzY3JpcHRpb246ICduYW1lIHRvbyBsb25nJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDUwLFxuICAgIGNvZGU6ICdFUEVSTScsXG4gICAgZGVzY3JpcHRpb246ICdvcGVyYXRpb24gbm90IHBlcm1pdHRlZCdcbiAgfSxcbiAge1xuICAgIGVycm5vOiA1MSxcbiAgICBjb2RlOiAnRUxPT1AnLFxuICAgIGRlc2NyaXB0aW9uOiAndG9vIG1hbnkgc3ltYm9saWMgbGlua3MgZW5jb3VudGVyZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNTIsXG4gICAgY29kZTogJ0VYREVWJyxcbiAgICBkZXNjcmlwdGlvbjogJ2Nyb3NzLWRldmljZSBsaW5rIG5vdCBwZXJtaXR0ZWQnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNTMsXG4gICAgY29kZTogJ0VOT1RFTVBUWScsXG4gICAgZGVzY3JpcHRpb246ICdkaXJlY3Rvcnkgbm90IGVtcHR5J1xuICB9LFxuICB7XG4gICAgZXJybm86IDU0LFxuICAgIGNvZGU6ICdFTk9TUEMnLFxuICAgIGRlc2NyaXB0aW9uOiAnbm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UnXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNTUsXG4gICAgY29kZTogJ0VJTycsXG4gICAgZGVzY3JpcHRpb246ICdpL28gZXJyb3InXG4gIH0sXG4gIHtcbiAgICBlcnJubzogNTYsXG4gICAgY29kZTogJ0VST0ZTJyxcbiAgICBkZXNjcmlwdGlvbjogJ3JlYWQtb25seSBmaWxlIHN5c3RlbSdcbiAgfSxcbiAge1xuICAgIGVycm5vOiA1NyxcbiAgICBjb2RlOiAnRU5PREVWJyxcbiAgICBkZXNjcmlwdGlvbjogJ25vIHN1Y2ggZGV2aWNlJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDU4LFxuICAgIGNvZGU6ICdFU1BJUEUnLFxuICAgIGRlc2NyaXB0aW9uOiAnaW52YWxpZCBzZWVrJ1xuICB9LFxuICB7XG4gICAgZXJybm86IDU5LFxuICAgIGNvZGU6ICdFQ0FOQ0VMRUQnLFxuICAgIGRlc2NyaXB0aW9uOiAnb3BlcmF0aW9uIGNhbmNlbGVkJ1xuICB9XG5dXG5cbm1vZHVsZS5leHBvcnRzLmVycm5vID0ge31cbm1vZHVsZS5leHBvcnRzLmNvZGUgPSB7fVxuXG5hbGwuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgbW9kdWxlLmV4cG9ydHMuZXJybm9bZXJyb3IuZXJybm9dID0gZXJyb3JcbiAgbW9kdWxlLmV4cG9ydHMuY29kZVtlcnJvci5jb2RlXSA9IGVycm9yXG59KVxuXG5tb2R1bGUuZXhwb3J0cy5jdXN0b20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2N1c3RvbSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9lcnJuby9jdXN0b20uanNcIikobW9kdWxlLmV4cG9ydHMpXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBtb2R1bGUuZXhwb3J0cy5jdXN0b20uY3JlYXRlRXJyb3JcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307XG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbkV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uKG4pIHtcbiAgaWYgKCFpc051bWJlcihuKSB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKGlzT2JqZWN0KHRoaXMuX2V2ZW50cy5lcnJvcikgJiYgIXRoaXMuX2V2ZW50cy5lcnJvci5sZW5ndGgpKSB7XG4gICAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzVW5kZWZpbmVkKGhhbmRsZXIpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKVxuICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/XG4gICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICBlbHNlIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkgJiYgIXRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQpIHtcbiAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuX21heExpc3RlbmVycykpIHtcbiAgICAgIG0gPSB0aGlzLl9tYXhMaXN0ZW5lcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgICB9XG5cbiAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkge1xuICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwXG4gICAgICAgIGNvbnNvbGUudHJhY2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgdmFyIGZpcmVkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuXG4gICAgaWYgKCFmaXJlZCkge1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICBwb3NpdGlvbiA9IC0xO1xuXG4gIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fFxuICAgICAgKGlzRnVuY3Rpb24obGlzdC5saXN0ZW5lcikgJiYgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcblxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgIC8vIExJRk8gb3JkZXJcbiAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aClcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7XG4gIH1cbiAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgcmV0O1xuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhdGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgcmV0ID0gW3RoaXMuX2V2ZW50c1t0eXBlXV07XG4gIGVsc2VcbiAgICByZXQgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMuX2V2ZW50cykge1xuICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZsaXN0ZW5lcikpXG4gICAgICByZXR1cm4gMTtcbiAgICBlbHNlIGlmIChldmxpc3RlbmVyKVxuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICB9XG4gIHJldHVybiAwO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG59O1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvaW1tZWRpYXRlL2xpYi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdHlwZXMgPSBbXG4gIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbmV4dFRpY2sgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW1tZWRpYXRlL2xpYi9uZXh0VGljay5qc1wiKSxcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9tdXRhdGlvbi5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL211dGF0aW9uLmpzXCIpLFxuICBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL21lc3NhZ2VDaGFubmVsICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvbWVzc2FnZUNoYW5uZWwuanNcIiksXG4gIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3RhdGVDaGFuZ2UgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW1tZWRpYXRlL2xpYi9zdGF0ZUNoYW5nZS5qc1wiKSxcbiAgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90aW1lb3V0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvdGltZW91dC5qc1wiKVxuXTtcbnZhciBkcmFpbmluZztcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xudmFyIHF1ZXVlID0gW107XG52YXIgc2NoZWR1bGVkID0gZmFsc2U7XG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBkcmFpbmluZyA9IGZhbHNlO1xuICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVJbmRleCA9IC0xO1xuICB9XG4gIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICBuZXh0VGljaygpO1xuICB9XG59XG5cbi8vbmFtZWQgbmV4dFRpY2sgZm9yIGxlc3MgY29uZnVzaW5nIHN0YWNrIHRyYWNlc1xuZnVuY3Rpb24gbmV4dFRpY2soKSB7XG4gIGlmIChkcmFpbmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgZHJhaW5pbmcgPSB0cnVlO1xuICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgd2hpbGUgKGxlbikge1xuICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgd2hpbGUgKGN1cnJlbnRRdWV1ZSAmJiArK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICB9XG4gICAgcXVldWVJbmRleCA9IC0xO1xuICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgfVxuICBjdXJyZW50UXVldWUgPSBudWxsO1xuICBxdWV1ZUluZGV4ID0gLTE7XG4gIGRyYWluaW5nID0gZmFsc2U7XG4gIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cbnZhciBzY2hlZHVsZURyYWluO1xudmFyIGkgPSAtMTtcbnZhciBsZW4gPSB0eXBlcy5sZW5ndGg7XG53aGlsZSAoKytpIDwgbGVuKSB7XG4gIGlmICh0eXBlc1tpXSAmJiB0eXBlc1tpXS50ZXN0ICYmIHR5cGVzW2ldLnRlc3QoKSkge1xuICAgIHNjaGVkdWxlRHJhaW4gPSB0eXBlc1tpXS5pbnN0YWxsKG5leHRUaWNrKTtcbiAgICBicmVhaztcbiAgfVxufVxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gIHRoaXMuZnVuID0gZnVuO1xuICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmdW4gPSB0aGlzLmZ1bjtcbiAgdmFyIGFycmF5ID0gdGhpcy5hcnJheTtcbiAgc3dpdGNoIChhcnJheS5sZW5ndGgpIHtcbiAgY2FzZSAwOlxuICAgIHJldHVybiBmdW4oKTtcbiAgY2FzZSAxOlxuICAgIHJldHVybiBmdW4oYXJyYXlbMF0pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIGZ1bihhcnJheVswXSwgYXJyYXlbMV0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIGZ1bihhcnJheVswXSwgYXJyYXlbMV0sIGFycmF5WzJdKTtcbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gZnVuLmFwcGx5KG51bGwsIGFycmF5KTtcbiAgfVxuXG59O1xubW9kdWxlLmV4cG9ydHMgPSBpbW1lZGlhdGU7XG5mdW5jdGlvbiBpbW1lZGlhdGUodGFzaykge1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gIH1cbiAgcXVldWUucHVzaChuZXcgSXRlbSh0YXNrLCBhcmdzKSk7XG4gIGlmICghc2NoZWR1bGVkICYmICFkcmFpbmluZykge1xuICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgc2NoZWR1bGVEcmFpbigpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvbWVzc2FnZUNoYW5uZWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL21lc3NhZ2VDaGFubmVsLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbmV4cG9ydHMudGVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAvLyB3ZSBjYW4gb25seSBnZXQgaGVyZSBpbiBJRTEwXG4gICAgLy8gd2hpY2ggZG9lc24ndCBoYW5kZWwgcG9zdE1lc3NhZ2Ugd2VsbFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAoZnVuYykge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBnbG9iYWwuTWVzc2FnZUNoYW5uZWwoKTtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4gIH07XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvbXV0YXRpb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL211dGF0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG4vL2Jhc2VkIG9mZiByc3ZwIGh0dHBzOi8vZ2l0aHViLmNvbS90aWxkZWlvL3JzdnAuanNcbi8vbGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vdGlsZGVpby9yc3ZwLmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0Vcbi8vaHR0cHM6Ly9naXRodWIuY29tL3RpbGRlaW8vcnN2cC5qcy9ibG9iL21hc3Rlci9saWIvcnN2cC9hc2FwLmpzXG5cbnZhciBNdXRhdGlvbiA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuXG5leHBvcnRzLnRlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNdXRhdGlvbjtcbn07XG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbihoYW5kbGUpO1xuICB2YXIgZWxlbWVudCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUoZWxlbWVudCwge1xuICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZWxlbWVudC5kYXRhID0gKGNhbGxlZCA9ICsrY2FsbGVkICUgMik7XG4gIH07XG59O1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvbmV4dFRpY2suanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL25leHRUaWNrLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge1xuZXhwb3J0cy50ZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gIHJldHVybiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSAmJiAhcHJvY2Vzcy5icm93c2VyO1xufTtcblxuZXhwb3J0cy5pbnN0YWxsID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmMpO1xuICB9O1xufTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL3N0YXRlQ2hhbmdlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvaW1tZWRpYXRlL2xpYi9zdGF0ZUNoYW5nZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG5leHBvcnRzLnRlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnZG9jdW1lbnQnIGluIGdsb2JhbCAmJiAnb25yZWFkeXN0YXRlY2hhbmdlJyBpbiBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG59O1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgIHZhciBzY3JpcHRFbCA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHRFbC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGUoKTtcblxuICAgICAgc2NyaXB0RWwub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgIHNjcmlwdEVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0RWwpO1xuICAgICAgc2NyaXB0RWwgPSBudWxsO1xuICAgIH07XG4gICAgZ2xvYmFsLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHRFbCk7XG5cbiAgICByZXR1cm4gaGFuZGxlO1xuICB9O1xufTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL3RpbWVvdXQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2ltbWVkaWF0ZS9saWIvdGltZW91dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMudGVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnRzLmluc3RhbGwgPSBmdW5jdGlvbiAodCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQodCwgMCk7XG4gIH07XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaXMtdHlwZWRhcnJheS9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2lzLXR5cGVkYXJyYXkvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyAgICAgID0gaXNUeXBlZEFycmF5XG5pc1R5cGVkQXJyYXkuc3RyaWN0ID0gaXNTdHJpY3RUeXBlZEFycmF5XG5pc1R5cGVkQXJyYXkubG9vc2UgID0gaXNMb29zZVR5cGVkQXJyYXlcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xudmFyIG5hbWVzID0ge1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgSW50MTZBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgSW50MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDhBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJzogdHJ1ZVxuICAsICdbb2JqZWN0IFVpbnQxNkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBVaW50MzJBcnJheV0nOiB0cnVlXG4gICwgJ1tvYmplY3QgRmxvYXQzMkFycmF5XSc6IHRydWVcbiAgLCAnW29iamVjdCBGbG9hdDY0QXJyYXldJzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc1R5cGVkQXJyYXkoYXJyKSB7XG4gIHJldHVybiAoXG4gICAgICAgaXNTdHJpY3RUeXBlZEFycmF5KGFycilcbiAgICB8fCBpc0xvb3NlVHlwZWRBcnJheShhcnIpXG4gIClcbn1cblxuZnVuY3Rpb24gaXNTdHJpY3RUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgICAgIGFyciBpbnN0YW5jZW9mIEludDhBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEludDE2QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDhBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5XG4gICAgfHwgYXJyIGluc3RhbmNlb2YgVWludDE2QXJyYXlcbiAgICB8fCBhcnIgaW5zdGFuY2VvZiBVaW50MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheVxuICAgIHx8IGFyciBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheVxuICApXG59XG5cbmZ1bmN0aW9uIGlzTG9vc2VUeXBlZEFycmF5KGFycikge1xuICByZXR1cm4gbmFtZXNbdG9TdHJpbmcuY2FsbChhcnIpXVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1lcnJvcnMvZXJyb3JzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtZXJyb3JzL2Vycm9ycy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IExldmVsVVAgY29udHJpYnV0b3JzXG4gKiBTZWUgbGlzdCBhdCA8aHR0cHM6Ly9naXRodWIuY29tL3J2YWdnL25vZGUtbGV2ZWx1cCNjb250cmlidXRpbmc+XG4gKiBNSVQgTGljZW5zZVxuICogPGh0dHBzOi8vZ2l0aHViLmNvbS9ydmFnZy9ub2RlLWxldmVsdXAvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZD5cbiAqL1xuXG52YXIgY3JlYXRlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBlcnJubyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9lcnJuby9lcnJuby5qc1wiKS5jcmVhdGVcbnZhciBMZXZlbFVQRXJyb3IgPSBjcmVhdGVFcnJvcignTGV2ZWxVUEVycm9yJylcbnZhciBOb3RGb3VuZEVycm9yID0gY3JlYXRlRXJyb3IoJ05vdEZvdW5kRXJyb3InLCBMZXZlbFVQRXJyb3IpXG5cbk5vdEZvdW5kRXJyb3IucHJvdG90eXBlLm5vdEZvdW5kID0gdHJ1ZVxuTm90Rm91bmRFcnJvci5wcm90b3R5cGUuc3RhdHVzID0gNDA0XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBMZXZlbFVQRXJyb3I6IExldmVsVVBFcnJvcixcbiAgSW5pdGlhbGl6YXRpb25FcnJvcjogY3JlYXRlRXJyb3IoJ0luaXRpYWxpemF0aW9uRXJyb3InLCBMZXZlbFVQRXJyb3IpLFxuICBPcGVuRXJyb3I6IGNyZWF0ZUVycm9yKCdPcGVuRXJyb3InLCBMZXZlbFVQRXJyb3IpLFxuICBSZWFkRXJyb3I6IGNyZWF0ZUVycm9yKCdSZWFkRXJyb3InLCBMZXZlbFVQRXJyb3IpLFxuICBXcml0ZUVycm9yOiBjcmVhdGVFcnJvcignV3JpdGVFcnJvcicsIExldmVsVVBFcnJvciksXG4gIE5vdEZvdW5kRXJyb3I6IE5vdEZvdW5kRXJyb3IsXG4gIEVuY29kaW5nRXJyb3I6IGNyZWF0ZUVycm9yKCdFbmNvZGluZ0Vycm9yJywgTGV2ZWxVUEVycm9yKVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIGluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaW5oZXJpdHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiKVxudmFyIFJlYWRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhZGFibGUtc3RyZWFtICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanNcIikuUmVhZGFibGVcbnZhciBleHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB4dGVuZCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanNcIilcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkU3RyZWFtXG5pbmhlcml0cyhSZWFkU3RyZWFtLCBSZWFkYWJsZSlcblxuZnVuY3Rpb24gUmVhZFN0cmVhbSAoaXRlcmF0b3IsIG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRTdHJlYW0pKSByZXR1cm4gbmV3IFJlYWRTdHJlYW0oaXRlcmF0b3IsIG9wdGlvbnMpXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIFJlYWRhYmxlLmNhbGwodGhpcywgZXh0ZW5kKG9wdGlvbnMsIHtcbiAgICBvYmplY3RNb2RlOiB0cnVlXG4gIH0pKVxuICB0aGlzLl9pdGVyYXRvciA9IGl0ZXJhdG9yXG4gIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zXG4gIHRoaXMub24oJ2VuZCcsIHRoaXMuZGVzdHJveS5iaW5kKHRoaXMsIG51bGwsIG51bGwpKVxufVxuXG5SZWFkU3RyZWFtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBvcHRpb25zID0gdGhpcy5fb3B0aW9uc1xuICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVyblxuXG4gIHRoaXMuX2l0ZXJhdG9yLm5leHQoZnVuY3Rpb24gKGVyciwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChzZWxmLmRlc3Ryb3llZCkgcmV0dXJuXG4gICAgaWYgKGVycikgcmV0dXJuIHNlbGYuZGVzdHJveShlcnIpXG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VsZi5wdXNoKG51bGwpXG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmtleXMgIT09IGZhbHNlICYmIG9wdGlvbnMudmFsdWVzID09PSBmYWxzZSkge1xuICAgICAgc2VsZi5wdXNoKGtleSlcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMua2V5cyA9PT0gZmFsc2UgJiYgb3B0aW9ucy52YWx1ZXMgIT09IGZhbHNlKSB7XG4gICAgICBzZWxmLnB1c2godmFsdWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsdWUgfSlcbiAgICB9XG4gIH0pXG59XG5cblJlYWRTdHJlYW0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2FsbGJhY2spIHtcbiAgdGhpcy5faXRlcmF0b3IuZW5kKGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2FsbGJhY2soZXJyIHx8IGVycjIpXG4gIH0pXG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgY29kZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgaWYgKCFCYXNlKSB7XG4gICAgQmFzZSA9IEVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBOb2RlRXJyb3IgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0c0xvb3NlKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHJldHVybiBfQmFzZS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpIHx8IHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vZGVFcnJvcjtcbiAgfShCYXNlKTtcblxuICBOb2RlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBCYXNlLm5hbWU7XG4gIE5vZGVFcnJvci5wcm90b3R5cGUuY29kZSA9IGNvZGU7XG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9PUFRfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuICdUaGUgdmFsdWUgXCInICsgdmFsdWUgKyAnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwiJyArIG5hbWUgKyAnXCInO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfVxuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQodHlwZW9mIGFjdHVhbCk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GJywgJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEJywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuICdUaGUgJyArIG5hbWUgKyAnIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFJywgJ1ByZW1hdHVyZSBjbG9zZScpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX0RFU1RST1lFRCcsIGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiAnQ2Fubm90IGNhbGwgJyArIG5hbWUgKyAnIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWQnO1xufSk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NVUxUSVBMRV9DQUxMQkFDSycsICdDYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1NUUkVBTV9DQU5OT1RfUElQRScsICdDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlJyk7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EJywgJ3dyaXRlIGFmdGVyIGVuZCcpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfU1RSRUFNX05VTExfVkFMVUVTJywgJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX1VOS05PV05fRU5DT0RJTkcnLCBmdW5jdGlvbiAoYXJnKSB7XG4gIHJldHVybiAnVW5rbm93biBlbmNvZGluZzogJyArIGFyZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQnLCAnc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2V4cGVyaW1lbnRhbFdhcm5pbmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9leHBlcmltZW50YWxXYXJuaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge1xuXG52YXIgZXhwZXJpbWVudGFsV2FybmluZ3MgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIGVtaXRFeHBlcmltZW50YWxXYXJuaW5nKGZlYXR1cmUpIHtcbiAgaWYgKGV4cGVyaW1lbnRhbFdhcm5pbmdzLmhhcyhmZWF0dXJlKSkgcmV0dXJuO1xuICB2YXIgbXNnID0gZmVhdHVyZSArICcgaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUuIFRoaXMgZmVhdHVyZSBjb3VsZCAnICtcbiAgICAgICAnY2hhbmdlIGF0IGFueSB0aW1lJztcbiAgZXhwZXJpbWVudGFsV2FybmluZ3MuYWRkKGZlYXR1cmUpO1xuICBwcm9jZXNzLmVtaXRXYXJuaW5nKG1zZywgJ0V4cGVyaW1lbnRhbFdhcm5pbmcnKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbm1vZHVsZS5leHBvcnRzLmVtaXRFeHBlcmltZW50YWxXYXJuaW5nID0gcHJvY2Vzcy5lbWl0V2FybmluZ1xuICA/IGVtaXRFeHBlcmltZW50YWxXYXJuaW5nXG4gIDogbm9vcDtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgey8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbnZhciBSZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3N0cmVhbV9yZWFkYWJsZSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qc1wiKTtcblxudmFyIFdyaXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX3dyaXRhYmxlICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIEFsbG93IHRoZSBrZXlzIGFycmF5IHRvIGJlIEdDJ2VkLlxuICB2YXIga2V5cyA9IG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKTtcblxuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG4gICAgICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbiAgICB9XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICd3cml0YWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIoKTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGg7XG4gIH1cbn0pOyAvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5cbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBJZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCwgdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjsgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cblxuICBwcm9jZXNzLm5leHRUaWNrKG9uRW5kTlQsIHRoaXMpO1xufVxuXG5mdW5jdGlvbiBvbkVuZE5UKHNlbGYpIHtcbiAgc2VsZi5lbmQoKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KER1cGxleC5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3N0cmVhbV90cmFuc2Zvcm0gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzXCIpO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBFRSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGV2ZW50cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzXCIpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIEVFbGlzdGVuZXJDb3VudChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIFN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanNcIik7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYnVmZmVyICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXI7XG5cbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5cbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cblxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG4vKjxyZXBsYWNlbWVudD4qL1xuXG5cbnZhciBkZWJ1Z1V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB1dGlsICovIDApO1xuXG52YXIgZGVidWc7XG5cbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gZGVidWcoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbnZhciBCdWZmZXJMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2J1ZmZlcl9saXN0LmpzXCIpO1xuXG52YXIgZGVzdHJveUltcGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzXCIpO1xuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL3N0cmVhbXMvc3RhdGUgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RhdGUuanNcIiksXG4gICAgZ2V0SGlnaFdhdGVyTWFyayA9IF9yZXF1aXJlLmdldEhpZ2hXYXRlck1hcms7XG5cbnZhciBfcmVxdWlyZSRjb2RlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2Vycm9ycyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9lcnJvcnMtYnJvd3Nlci5qc1wiKS5jb2RlcyxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICAgIEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX1BVU0hfQUZURVJfRU9GLFxuICAgIEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEID0gX3JlcXVpcmUkY29kZXMuRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQsXG4gICAgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fVU5TSElGVF9BRlRFUl9FTkRfRVZFTlQ7XG5cbnZhciBfcmVxdWlyZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9leHBlcmltZW50YWxXYXJuaW5nICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2V4cGVyaW1lbnRhbFdhcm5pbmcuanNcIiksXG4gICAgZW1pdEV4cGVyaW1lbnRhbFdhcm5pbmcgPSBfcmVxdWlyZTIuZW1pdEV4cGVyaW1lbnRhbFdhcm5pbmc7IC8vIExhenkgbG9hZGVkIHRvIGltcHJvdmUgdGhlIHN0YXJ0dXAgcGVyZm9ybWFuY2UuXG5cblxudmFyIFN0cmluZ0RlY29kZXI7XG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTsgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtLCBpc0R1cGxleCkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG5cbiAgaWYgKHR5cGVvZiBpc0R1cGxleCAhPT0gJ2Jvb2xlYW4nKSBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDsgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcblxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTsgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGdldEhpZ2hXYXRlck1hcmsodGhpcywgb3B0aW9ucywgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIGlzRHVwbGV4KTsgLy8gQSBsaW5rZWQgbGlzdCBpcyB1c2VkIHRvIHN0b3JlIGRhdGEgY2h1bmtzIGluc3RlYWQgb2YgYW4gYXJyYXkgYmVjYXVzZSB0aGVcbiAgLy8gbGlua2VkIGxpc3QgY2FuIHJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBiZWdpbm5pbmcgZmFzdGVyIHRoYW5cbiAgLy8gYXJyYXkuc2hpZnQoKVxuXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7IC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIGV2ZW50ICdyZWFkYWJsZScvJ2RhdGEnIGlzIGVtaXR0ZWRcbiAgLy8gaW1tZWRpYXRlbHksIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2VcbiAgLy8gYW55IGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHJlYWQgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cblxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7IC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuXG5cbiAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zLmVtaXRDbG9zZSAhPT0gZmFsc2U7IC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7IC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG5cbiAgdGhpcy5hd2FpdERyYWluID0gMDsgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG5cbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpbmdfZGVjb2Rlci8gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzXCIpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIik7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7IC8vIENoZWNraW5nIGZvciBhIFN0cmVhbS5EdXBsZXggaW5zdGFuY2UgaXMgZmFzdGVyIGhlcmUgaW5zdGVhZCBvZiBpbnNpZGVcbiAgLy8gdGhlIFJlYWRhYmxlU3RhdGUgY29uc3RydWN0b3IsIGF0IGxlYXN0IHdpdGggVjggNi41XG5cbiAgdmFyIGlzRHVwbGV4ID0gdGhpcyBpbnN0YW5jZW9mIER1cGxleDtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5XG5cbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZGVzdHJveSA9IG9wdGlvbnMuZGVzdHJveTtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcblxuXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5SZWFkYWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcblxuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgY2IoZXJyKTtcbn07IC8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICAgICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IEJ1ZmZlci5mcm9tKGNodW5rLCBlbmNvZGluZyk7XG4gICAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTsgLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCwgc2tpcENodW5rQ2hlY2spIHtcbiAgZGVidWcoJ3JlYWRhYmxlQWRkQ2h1bmsnLCBjaHVuayk7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKCFza2lwQ2h1bmtDaGVjaykgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcblxuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVCgpKTtlbHNlIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kZWQpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0YoKSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIWVuY29kaW5nKSB7XG4gICAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICAgICAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuay5sZW5ndGggIT09IDApIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7ZWxzZSBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfSAvLyBXZSBjYW4gcHVzaCBtb3JlIGRhdGEgaWYgd2UgYXJlIGJlbG93IHRoZSBoaWdoV2F0ZXJNYXJrLlxuICAvLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZSBtb3JlIGJ5dGVzLlxuICAvLyBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLCBzdWNoIGFzIHRoZSByZXBsLlxuXG5cbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG5cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG5cbiAgaWYgKCFfaXNVaW50OEFycmF5KGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2h1bmsnLCBbJ3N0cmluZycsICdCdWZmZXInLCAnVWludDhBcnJheSddLCBjaHVuayk7XG4gIH1cblxuICByZXR1cm4gZXI7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59OyAvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUuc2V0RW5jb2RpbmcgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHN0cmluZ19kZWNvZGVyLyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanNcIikuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTsgLy8gaWYgc2V0RW5jb2RpbmcobnVsbCksIGRlY29kZXIuZW5jb2RpbmcgZXF1YWxzIHV0ZjhcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyLmVuY29kaW5nO1xuICByZXR1cm4gdGhpcztcbn07IC8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcblxuXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuXG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG5cbiAgcmV0dXJuIG47XG59IC8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG5cbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH0gLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG5cblxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjsgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcblxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59IC8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5cblxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7IC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cblxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKChzdGF0ZS5oaWdoV2F0ZXJNYXJrICE9PSAwID8gc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgOiBzdGF0ZS5sZW5ndGggPiAwKSB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7IC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cblxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cblxuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTsgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfSAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG5cblxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlOyAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcblxuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTsgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gICAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cblxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcblxuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLnN5bmMpIHtcbiAgICAvLyBpZiB3ZSBhcmUgc3luYywgd2FpdCB1bnRpbCBuZXh0IHRpY2sgdG8gZW1pdCB0aGUgZGF0YS5cbiAgICAvLyBPdGhlcndpc2Ugd2UgcmlzayBlbWl0dGluZyBkYXRhIGluIHRoZSBmbG93KClcbiAgICAvLyB0aGUgcmVhZGFibGUgY29kZSB0cmlnZ2VycyBkdXJpbmcgYSByZWFkKCkgY2FsbFxuICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9IGVsc2Uge1xuICAgIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gICAgfVxuICB9XG59IC8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VtaXRSZWFkYWJsZV8nLCBzdGF0ZS5kZXN0cm95ZWQsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuXG4gIGlmICghc3RhdGUuZGVzdHJveWVkICYmIChzdGF0ZS5sZW5ndGggfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIH0gLy8gVGhlIHN0cmVhbSBuZWVkcyBhbm90aGVyIHJlYWRhYmxlIGV2ZW50IGlmXG4gIC8vIDEuIEl0IGlzIG5vdCBmbG93aW5nLCBhcyB0aGUgZmxvdyBtZWNoYW5pc20gd2lsbCB0YWtlXG4gIC8vICAgIGNhcmUgb2YgaXQuXG4gIC8vIDIuIEl0IGlzIG5vdCBlbmRlZC5cbiAgLy8gMy4gSXQgaXMgYmVsb3cgdGhlIGhpZ2hXYXRlck1hcmssIHNvIHdlIGNhbiBzY2hlZHVsZVxuICAvLyAgICBhbm90aGVyIHJlYWRhYmxlIGxhdGVyLlxuXG5cbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICBmbG93KHN0cmVhbSk7XG59IC8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuXG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcblxuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuXG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59IC8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ19yZWFkKCknKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3MubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuXG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG5cbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfSAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cblxuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTsgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBjbGVhbmVkVXAgPSB0cnVlOyAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGRlYnVnKCdkZXN0LndyaXRlJywgcmV0KTtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgfVxuXG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH0gLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cblxuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuXG5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpOyAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG5cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cblxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH0gLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cblxuXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7IC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cblxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gcGlwZU9uRHJhaW5GdW5jdGlvblJlc3VsdCgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcblxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0ge1xuICAgIGhhc1VucGlwZWQ6IGZhbHNlXG4gIH07IC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cblxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7IC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cblxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlczsgLy8gZ290IGEgbWF0Y2guXG5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9IC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB7XG4gICAgICAgIGhhc1VucGlwZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuXG5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICByZXR1cm4gdGhpcztcbn07IC8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5cblxuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyB1cGRhdGUgcmVhZGFibGVMaXN0ZW5pbmcgc28gdGhhdCByZXN1bWUoKSBtYXkgYmUgYSBuby1vcFxuICAgIC8vIGEgZmV3IGxpbmVzIGRvd24uIFRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgb25jZSgncmVhZGFibGUnKS5cbiAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHRoaXMubGlzdGVuZXJDb3VudCgncmVhZGFibGUnKSA+IDA7IC8vIFRyeSBzdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcblxuICAgIGlmIChzdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgZGVidWcoJ29uIHJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5yZWFkaW5nKTtcblxuICAgICAgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuUmVhZGFibGUucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lci5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGVyZSBpcyBzb21lb25lIHN0aWxsIGxpc3RlbmluZyB0b1xuICAgIC8vIHJlYWRhYmxlIGFuZCByZXNldCB0aGUgc3RhdGUuIEhvd2V2ZXIgdGhpcyBuZWVkcyB0byBoYXBwZW5cbiAgICAvLyBhZnRlciByZWFkYWJsZSBoYXMgYmVlbiBlbWl0dGVkIGJ1dCBiZWZvcmUgSS9PIChuZXh0VGljaykgdG9cbiAgICAvLyBzdXBwb3J0IG9uY2UoJ3JlYWRhYmxlJywgZm4pIGN5Y2xlcy4gVGhpcyBtZWFucyB0aGF0IGNhbGxpbmdcbiAgICAvLyByZXN1bWUgd2l0aGluIHRoZSBzYW1lIHRpY2sgd2lsbCBoYXZlIG5vXG4gICAgLy8gZWZmZWN0LlxuICAgIHByb2Nlc3MubmV4dFRpY2sodXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcsIHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnIHx8IGV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIHNvbWVvbmUgc3RpbGwgbGlzdGVuaW5nIHRvXG4gICAgLy8gcmVhZGFibGUgYW5kIHJlc2V0IHRoZSBzdGF0ZS4gSG93ZXZlciB0aGlzIG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIHJlYWRhYmxlIGhhcyBiZWVuIGVtaXR0ZWQgYnV0IGJlZm9yZSBJL08gKG5leHRUaWNrKSB0b1xuICAgIC8vIHN1cHBvcnQgb25jZSgncmVhZGFibGUnLCBmbikgY3ljbGVzLiBUaGlzIG1lYW5zIHRoYXQgY2FsbGluZ1xuICAgIC8vIHJlc3VtZSB3aXRoaW4gdGhlIHNhbWUgdGljayB3aWxsIGhhdmUgbm9cbiAgICAvLyBlZmZlY3QuXG4gICAgcHJvY2Vzcy5uZXh0VGljayh1cGRhdGVSZWFkYWJsZUxpc3RlbmluZywgdGhpcyk7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlUmVhZGFibGVMaXN0ZW5pbmcoc2VsZikge1xuICBzZWxmLl9yZWFkYWJsZVN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc2VsZi5saXN0ZW5lckNvdW50KCdyZWFkYWJsZScpID4gMDsgLy8gY3J1ZGUgd2F5IHRvIGNoZWNrIGlmIHdlIHNob3VsZCByZXN1bWVcblxuICBpZiAoc2VsZi5saXN0ZW5lckNvdW50KCdkYXRhJykgPiAwKSB7XG4gICAgc2VsZi5yZXN1bWUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59IC8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTsgLy8gd2UgZmxvdyBvbmx5IGlmIHRoZXJlIGlzIG5vIG9uZSBsaXN0ZW5pbmdcbiAgICAvLyBmb3IgcmVhZGFibGUsIGJ1dCB3ZSBzdGlsbCBoYXZlIHRvIGNhbGxcbiAgICAvLyByZXN1bWUoKVxuXG4gICAgc3RhdGUuZmxvd2luZyA9ICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZztcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgZGVidWcoJ3Jlc3VtZScsIHN0YXRlLnJlYWRpbmcpO1xuXG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcblxuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7XG4gICAgO1xuICB9XG59IC8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblxuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuXG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG5cbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG5cbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7IC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiBtZXRob2RXcmFwKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWV0aG9kV3JhcFJldHVybkZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfSAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG5cblxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9IC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG5cblxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuXG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVhZGFibGUucHJvdG90eXBlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICBlbWl0RXhwZXJpbWVudGFsV2FybmluZygnUmVhZGFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdJyk7XG5cbiAgICBpZiAoY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNyZWF0ZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvc3RyZWFtcy9hc3luY19pdGVyYXRvciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9hc3luY19pdGVyYXRvci5qc1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHRoaXMpO1xuICB9O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUJ1ZmZlcicsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXI7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlRmxvd2luZycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3RhdGUpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gc3RhdGU7XG4gICAgfVxuICB9XG59KTsgLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTsgLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5maXJzdCgpO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbnN1bWUobiwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2VuZFJlYWRhYmxlJywgc3RhdGUuZW5kRW1pdHRlZCk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIGRlYnVnKCdlbmRSZWFkYWJsZU5UJywgc3RhdGUuZW5kRW1pdHRlZCwgc3RhdGUubGVuZ3RoKTsgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9lcnJvcnMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZXJyb3JzLWJyb3dzZXIuanNcIikuY29kZXMsXG4gICAgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCxcbiAgICBFUlJfTVVMVElQTEVfQ0FMTEJBQ0sgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTVVMVElQTEVfQ0FMTEJBQ0ssXG4gICAgRVJSX1RSQU5TRk9STV9BTFJFQURZX1RSQU5TRk9STUlORyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9UUkFOU0ZPUk1fQUxSRUFEWV9UUkFOU0ZPUk1JTkcsXG4gICAgRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wID0gX3JlcXVpcmUkY29kZXMuRVJSX1RSQU5TRk9STV9XSVRIX0xFTkdUSF8wO1xuXG52YXIgRHVwbGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIik7XG5cbl9fd2VicGFja19yZXF1aXJlX18oLyohIGluaGVyaXRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcIikoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCkpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG4gIGNiKGVyKTtcbiAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuXG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9OyAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7IC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9IC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cblxuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCkge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTsgLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ190cmFuc2Zvcm0oKScpKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG5cbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59OyAvLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuXG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBEdXBsZXgucHJvdG90eXBlLl9kZXN0cm95LmNhbGwodGhpcywgZXJyLCBmdW5jdGlvbiAoZXJyMikge1xuICAgIGNiKGVycjIpO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlciwgZGF0YSkge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpOyAvLyBUT0RPKEJyaWRnZUFSKTogV3JpdGUgYSB0ZXN0IGZvciB0aGVzZSB0d28gZXJyb3IgY2FzZXNcbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcblxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVSUl9UUkFOU0ZPUk1fV0lUSF9MRU5HVEhfMCgpO1xuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFUlJfVFJBTlNGT1JNX0FMUkVBRFlfVFJBTlNGT1JNSU5HKCk7XG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCwgcHJvY2Vzcykgey8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn0gLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cblxuXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG5cbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cblxudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdXRpbC1kZXByZWNhdGUgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qc1wiKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbnZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBidWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCIpLkJ1ZmZlcjtcblxudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcblxuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuXG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxudmFyIGRlc3Ryb3lJbXBsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qc1wiKTtcblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzXCIpLFxuICAgIGdldEhpZ2hXYXRlck1hcmsgPSBfcmVxdWlyZS5nZXRIaWdoV2F0ZXJNYXJrO1xuXG52YXIgX3JlcXVpcmUkY29kZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9lcnJvcnMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZXJyb3JzLWJyb3dzZXIuanNcIikuY29kZXMsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVELFxuICAgIEVSUl9NVUxUSVBMRV9DQUxMQkFDSyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NVUxUSVBMRV9DQUxMQkFDSyxcbiAgICBFUlJfU1RSRUFNX0NBTk5PVF9QSVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9DQU5OT1RfUElQRSxcbiAgICBFUlJfU1RSRUFNX0RFU1RST1lFRCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9TVFJFQU1fREVTVFJPWUVELFxuICAgIEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfU1RSRUFNX05VTExfVkFMVUVTLFxuICAgIEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EID0gX3JlcXVpcmUkY29kZXMuRVJSX1NUUkVBTV9XUklURV9BRlRFUl9FTkQsXG4gICAgRVJSX1VOS05PV05fRU5DT0RJTkcgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfVU5LTk9XTl9FTkNPRElORztcblxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaW5oZXJpdHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiKShXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0sIGlzRHVwbGV4KSB7XG4gIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zdHJlYW1fZHVwbGV4ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cblxuICBpZiAodHlwZW9mIGlzRHVwbGV4ICE9PSAnYm9vbGVhbicpIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4OyAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlOyAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcblxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBnZXRIaWdoV2F0ZXJNYXJrKHRoaXMsIG9wdGlvbnMsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCBpc0R1cGxleCk7IC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcblxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7IC8vIGRyYWluIGV2ZW50IGZsYWcuXG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTsgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcblxuICB0aGlzLmVuZGluZyA9IGZhbHNlOyAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG5cbiAgdGhpcy5lbmRlZCA9IGZhbHNlOyAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcblxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7IC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7IC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cblxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7IC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7IC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG5cbiAgdGhpcy5sZW5ndGggPSAwOyAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlOyAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG5cbiAgdGhpcy5jb3JrZWQgPSAwOyAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cblxuICB0aGlzLnN5bmMgPSB0cnVlOyAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOyAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG5cbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTsgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG5cblxuICB0aGlzLndyaXRlY2IgPSBudWxsOyAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG5cbiAgdGhpcy5wZW5kaW5nY2IgPSAwOyAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG5cbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlOyAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7IC8vIFNob3VsZCBjbG9zZSBiZSBlbWl0dGVkIG9uIGRlc3Ryb3kuIERlZmF1bHRzIHRvIHRydWUuXG5cbiAgdGhpcy5lbWl0Q2xvc2UgPSBvcHRpb25zLmVtaXRDbG9zZSAhPT0gZmFsc2U7IC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7IC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuXG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiB3cml0YWJsZVN0YXRlQnVmZmVyR2V0dGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTsgLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG5cblxudmFyIHJlYWxIYXNJbnN0YW5jZTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAodGhpcyAhPT0gV3JpdGFibGUpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gcmVhbEhhc0luc3RhbmNlKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zdHJlYW1fZHVwbGV4ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKTsgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAvLyBDaGVja2luZyBmb3IgYSBTdHJlYW0uRHVwbGV4IGluc3RhbmNlIGlzIGZhc3RlciBoZXJlIGluc3RlYWQgb2YgaW5zaWRlXG4gIC8vIHRoZSBXcml0YWJsZVN0YXRlIGNvbnN0cnVjdG9yLCBhdCBsZWFzdCB3aXRoIFY4IDYuNVxuXG4gIHZhciBpc0R1cGxleCA9IHRoaXMgaW5zdGFuY2VvZiBEdXBsZXg7XG4gIGlmICghaXNEdXBsZXggJiYgIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMsIGlzRHVwbGV4KTsgLy8gbGVnYWN5LlxuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn0gLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuXG5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVSUl9TVFJFQU1fQ0FOTk9UX1BJUEUoKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EKCk7IC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG5cbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGNiLCBlcik7XG59IC8vIENoZWNrcyB0aGF0IGEgdXNlci1zdXBwbGllZCBjaHVuayBpcyB2YWxpZCwgZXNwZWNpYWxseSBmb3IgdGhlIHBhcnRpY3VsYXJcbi8vIG1vZGUgdGhlIHN0cmVhbSBpcyBpbi4gQ3VycmVudGx5IHRoaXMgbWVhbnMgdGhhdCBgbnVsbGAgaXMgbmV2ZXIgYWNjZXB0ZWRcbi8vIGFuZCB1bmRlZmluZWQvbm9uLXN0cmluZyB2YWx1ZXMgYXJlIG9ubHkgYWxsb3dlZCBpbiBvYmplY3QgbW9kZS5cblxuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgZXI7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgRVJSX1NUUkVBTV9OVUxMX1ZBTFVFUygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnY2h1bmsnLCBbJ3N0cmluZycsICdCdWZmZXInXSwgY2h1bmspO1xuICB9XG5cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG4gIGlmIChzdGF0ZS5lbmRpbmcpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl93cml0YWJsZVN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG4gICAgaWYgKCFzdGF0ZS53cml0aW5nICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBFUlJfVU5LTk9XTl9FTkNPRElORyhlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuXG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7IC8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyazsgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcblxuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAoc3RhdGUuZGVzdHJveWVkKSBzdGF0ZS5vbndyaXRlKG5ldyBFUlJfU1RSRUFNX0RFU1RST1lFRCgnd3JpdGUnKSk7ZWxzZSBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2IsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcblxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRVJSX01VTFRJUExFX0NBTExCQUNLKCk7XG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59IC8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuXG5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn0gLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcblxuXG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG5cbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcblxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cblxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTsgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cblxuICAgICAgaWYgKHN0YXRlLndyaXRpbmcpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQoJ193cml0ZSgpJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9IC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cblxuXG4gIGlmICghc3RhdGUuZW5kaW5nKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUxlbmd0aCcsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUubGVuZ3RoO1xuICB9XG59KTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuXG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcblxuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuXG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nICYmICFzdGF0ZS5kZXN0cm95ZWQpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcblxuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cblxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuXG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9IC8vIHJldXNlIHRoZSBmcmVlIGNvcmtSZXEuXG5cblxuICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuXG5cbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICBjYihlcnIpO1xufTtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2FzeW5jX2l0ZXJhdG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHtcblxudmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlTztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIGZpbmlzaGVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9lbmQtb2Ytc3RyZWFtICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanNcIik7XG5cbnZhciBrTGFzdFJlc29sdmUgPSBTeW1ib2woJ2xhc3RSZXNvbHZlJyk7XG52YXIga0xhc3RSZWplY3QgPSBTeW1ib2woJ2xhc3RSZWplY3QnKTtcbnZhciBrRXJyb3IgPSBTeW1ib2woJ2Vycm9yJyk7XG52YXIga0VuZGVkID0gU3ltYm9sKCdlbmRlZCcpO1xudmFyIGtMYXN0UHJvbWlzZSA9IFN5bWJvbCgnbGFzdFByb21pc2UnKTtcbnZhciBrSGFuZGxlUHJvbWlzZSA9IFN5bWJvbCgnaGFuZGxlUHJvbWlzZScpO1xudmFyIGtTdHJlYW0gPSBTeW1ib2woJ3N0cmVhbScpO1xuXG5mdW5jdGlvbiBjcmVhdGVJdGVyUmVzdWx0KHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGRvbmU6IGRvbmVcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhZEFuZFJlc29sdmUoaXRlcikge1xuICB2YXIgcmVzb2x2ZSA9IGl0ZXJba0xhc3RSZXNvbHZlXTtcblxuICBpZiAocmVzb2x2ZSAhPT0gbnVsbCkge1xuICAgIHZhciBkYXRhID0gaXRlcltrU3RyZWFtXS5yZWFkKCk7IC8vIHdlIGRlZmVyIGlmIGRhdGEgaXMgbnVsbFxuICAgIC8vIHdlIGNhbiBiZSBleHBlY3RpbmcgZWl0aGVyICdlbmQnIG9yXG4gICAgLy8gJ2Vycm9yJ1xuXG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIGl0ZXJba0xhc3RQcm9taXNlXSA9IG51bGw7XG4gICAgICBpdGVyW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcltrTGFzdFJlamVjdF0gPSBudWxsO1xuICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVhZGFibGUoaXRlcikge1xuICAvLyB3ZSB3YWl0IGZvciB0aGUgbmV4dCB0aWNrLCBiZWNhdXNlIGl0IG1pZ2h0XG4gIC8vIGVtaXQgYW4gZXJyb3Igd2l0aCBwcm9jZXNzLm5leHRUaWNrXG4gIHByb2Nlc3MubmV4dFRpY2socmVhZEFuZFJlc29sdmUsIGl0ZXIpO1xufVxuXG5mdW5jdGlvbiB3cmFwRm9yTmV4dChsYXN0UHJvbWlzZSwgaXRlcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxhc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgaXRlcltrSGFuZGxlUHJvbWlzZV0ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9LCByZWplY3QpO1xuICB9O1xufVxuXG52YXIgQXN5bmNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihmdW5jdGlvbiAoKSB7fSk7XG52YXIgUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlID0gT2JqZWN0LnNldFByb3RvdHlwZU9mKChfT2JqZWN0JHNldFByb3RvdHlwZU8gPSB7XG4gIGdldCBzdHJlYW0oKSB7XG4gICAgcmV0dXJuIHRoaXNba1N0cmVhbV07XG4gIH0sXG5cbiAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBkZXRlY3RlZCBhbiBlcnJvciBpbiB0aGUgbWVhbndoaWxlXG4gICAgLy8gcmVqZWN0IHN0cmFpZ2h0IGF3YXlcbiAgICB2YXIgZXJyb3IgPSB0aGlzW2tFcnJvcl07XG5cbiAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNba0VuZGVkXSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KG51bGwsIHRydWUpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1trU3RyZWFtXS5kZXN0cm95ZWQpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gZGVmZXIgdmlhIG5leHRUaWNrIGJlY2F1c2UgaWYgLmRlc3Ryb3koZXJyKSBpc1xuICAgICAgLy8gY2FsbGVkLCB0aGUgZXJyb3Igd2lsbCBiZSBlbWl0dGVkIHZpYSBuZXh0VGljaywgYW5kXG4gICAgICAvLyB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoYXQgdGhlcmUgaXMgbm8gZXJyb3IgbGluZ2VyaW5nIGFyb3VuZFxuICAgICAgLy8gd2FpdGluZyB0byBiZSBlbWl0dGVkLlxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzW2tFcnJvcl0pIHtcbiAgICAgICAgICAgIHJlamVjdChfdGhpc1trRXJyb3JdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KG51bGwsIHRydWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSAvLyBpZiB3ZSBoYXZlIG11bHRpcGxlIG5leHQoKSBjYWxsc1xuICAgIC8vIHdlIHdpbGwgd2FpdCBmb3IgdGhlIHByZXZpb3VzIFByb21pc2UgdG8gZmluaXNoXG4gICAgLy8gdGhpcyBsb2dpYyBpcyBvcHRpbWl6ZWQgdG8gc3VwcG9ydCBmb3IgYXdhaXQgbG9vcHMsXG4gICAgLy8gd2hlcmUgbmV4dCgpIGlzIG9ubHkgY2FsbGVkIG9uY2UgYXQgYSB0aW1lXG5cblxuICAgIHZhciBsYXN0UHJvbWlzZSA9IHRoaXNba0xhc3RQcm9taXNlXTtcbiAgICB2YXIgcHJvbWlzZTtcblxuICAgIGlmIChsYXN0UHJvbWlzZSkge1xuICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHdyYXBGb3JOZXh0KGxhc3RQcm9taXNlLCB0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZhc3QgcGF0aCBuZWVkZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSB0aGlzLnB1c2goKVxuICAgICAgLy8gd2l0aG91dCB0cmlnZ2VyaW5nIHRoZSBuZXh0KCkgcXVldWVcbiAgICAgIHZhciBkYXRhID0gdGhpc1trU3RyZWFtXS5yZWFkKCk7XG5cbiAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChkYXRhLCBmYWxzZSkpO1xuICAgICAgfVxuXG4gICAgICBwcm9taXNlID0gbmV3IFByb21pc2UodGhpc1trSGFuZGxlUHJvbWlzZV0pO1xuICAgIH1cblxuICAgIHRoaXNba0xhc3RQcm9taXNlXSA9IHByb21pc2U7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn0sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JHNldFByb3RvdHlwZU8sIFN5bWJvbC5hc3luY0l0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JHNldFByb3RvdHlwZU8sIFwicmV0dXJuXCIsIGZ1bmN0aW9uIF9yZXR1cm4oKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIC8vIGRlc3Ryb3koZXJyLCBjYikgaXMgYSBwcml2YXRlIEFQSVxuICAvLyB3ZSBjYW4gZ3VhcmFudGVlIHdlIGhhdmUgdGhhdCBoZXJlLCBiZWNhdXNlIHdlIGNvbnRyb2wgdGhlXG4gIC8vIFJlYWRhYmxlIGNsYXNzIHRoaXMgaXMgYXR0YWNoZWQgdG9cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBfdGhpczJba1N0cmVhbV0uZGVzdHJveShudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChudWxsLCB0cnVlKSk7XG4gICAgfSk7XG4gIH0pO1xufSksIF9PYmplY3Qkc2V0UHJvdG90eXBlTyksIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUpO1xuXG52YXIgY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHN0cmVhbSkge1xuICB2YXIgX09iamVjdCRjcmVhdGU7XG5cbiAgdmFyIGl0ZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUsIChfT2JqZWN0JGNyZWF0ZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtTdHJlYW0sIHtcbiAgICB2YWx1ZTogc3RyZWFtLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVzb2x2ZSwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UmVqZWN0LCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0Vycm9yLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwga0VuZGVkLCB7XG4gICAgdmFsdWU6IHN0cmVhbS5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtMYXN0UHJvbWlzZSwge1xuICAgIHZhbHVlOiBudWxsLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIGtIYW5kbGVQcm9taXNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGRhdGEgPSBpdGVyYXRvcltrU3RyZWFtXS5yZWFkKCk7XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UHJvbWlzZV0gPSBudWxsO1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgICAgcmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KGRhdGEsIGZhbHNlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFJlc29sdmVdID0gcmVzb2x2ZTtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gcmVqZWN0O1xuICAgICAgfVxuICAgIH0sXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSksIF9PYmplY3QkY3JlYXRlKSk7XG4gIGZpbmlzaGVkKHN0cmVhbSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIgJiYgZXJyLmNvZGUgIT09ICdFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRScpIHtcbiAgICAgIHZhciByZWplY3QgPSBpdGVyYXRvcltrTGFzdFJlamVjdF07IC8vIHJlamVjdCBpZiB3ZSBhcmUgd2FpdGluZyBmb3IgZGF0YSBpbiB0aGUgUHJvbWlzZVxuICAgICAgLy8gcmV0dXJuZWQgYnkgbmV4dCgpIGFuZCBzdG9yZSB0aGUgZXJyb3JcblxuICAgICAgaWYgKHJlamVjdCAhPT0gbnVsbCkge1xuICAgICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgICAgaXRlcmF0b3Jba0xhc3RSZXNvbHZlXSA9IG51bGw7XG4gICAgICAgIGl0ZXJhdG9yW2tMYXN0UmVqZWN0XSA9IG51bGw7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuXG4gICAgICBpdGVyYXRvcltrRXJyb3JdID0gZXJyO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlID0gaXRlcmF0b3Jba0xhc3RSZXNvbHZlXTtcblxuICAgIGlmIChyZXNvbHZlICE9PSBudWxsKSB7XG4gICAgICBpdGVyYXRvcltrTGFzdFByb21pc2VdID0gbnVsbDtcbiAgICAgIGl0ZXJhdG9yW2tMYXN0UmVzb2x2ZV0gPSBudWxsO1xuICAgICAgaXRlcmF0b3Jba0xhc3RSZWplY3RdID0gbnVsbDtcbiAgICAgIHJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChudWxsLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgaXRlcmF0b3Jba0VuZGVkXSA9IHRydWU7XG4gIH0pO1xuICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgb25SZWFkYWJsZS5iaW5kKG51bGwsIGl0ZXJhdG9yKSk7XG4gIHJldHVybiBpdGVyYXRvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9idWZmZXJfbGlzdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanNcIiksXG4gICAgQnVmZmVyID0gX3JlcXVpcmUuQnVmZmVyO1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgdXRpbCAqLyAxKSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBjdXN0b20gPSBpbnNwZWN0ICYmIGluc3BlY3QuY3VzdG9tIHx8ICdpbnNwZWN0JztcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKHNyYywgdGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdWZmZXJMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGRhdGE6IHYsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8udW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIGRhdGE6IHYsXG4gICAgICBuZXh0OiB0aGlzLmhlYWRcbiAgICB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8uc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIF9wcm90by5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuXG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgX3Byb3RvLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBvciBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gIDtcblxuICBfcHJvdG8uY29uc3VtZSA9IGZ1bmN0aW9uIGNvbnN1bWUobiwgaGFzU3RyaW5ncykge1xuICAgIHZhciByZXQ7XG5cbiAgICBpZiAobiA8IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgLy8gYHNsaWNlYCBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cbiAgICAgIHJldCA9IHRoaXMuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgICAgdGhpcy5oZWFkLmRhdGEgPSB0aGlzLmhlYWQuZGF0YS5zbGljZShuKTtcbiAgICB9IGVsc2UgaWYgKG4gPT09IHRoaXMuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgICAgLy8gRmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoLlxuICAgICAgcmV0ID0gdGhpcy5zaGlmdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXIuXG4gICAgICByZXQgPSBoYXNTdHJpbmdzID8gdGhpcy5fZ2V0U3RyaW5nKG4pIDogdGhpcy5fZ2V0QnVmZmVyKG4pO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgX3Byb3RvLmZpcnN0ID0gZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICB9IC8vIENvbnN1bWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGJ1ZmZlcmVkIGRhdGEuXG4gIDtcblxuICBfcHJvdG8uX2dldFN0cmluZyA9IGZ1bmN0aW9uIF9nZXRTdHJpbmcobikge1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBjID0gMTtcbiAgICB2YXIgcmV0ID0gcC5kYXRhO1xuICAgIG4gLT0gcmV0Lmxlbmd0aDtcblxuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgICBuIC09IG5iO1xuXG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICArK2M7XG4gICAgICAgICAgaWYgKHAubmV4dCkgdGhpcy5oZWFkID0gcC5uZXh0O2Vsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgKytjO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgcmV0dXJuIHJldDtcbiAgfSAvLyBDb25zdW1lcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgYnVmZmVyZWQgZGF0YS5cbiAgO1xuXG4gIF9wcm90by5fZ2V0QnVmZmVyID0gZnVuY3Rpb24gX2dldEJ1ZmZlcihuKSB7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgYyA9IDE7XG4gICAgcC5kYXRhLmNvcHkocmV0KTtcbiAgICBuIC09IHAuZGF0YS5sZW5ndGg7XG5cbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgICBuIC09IG5iO1xuXG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgICArK2M7XG4gICAgICAgICAgaWYgKHAubmV4dCkgdGhpcy5oZWFkID0gcC5uZXh0O2Vsc2UgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlYWQgPSBwO1xuICAgICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgKytjO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoIC09IGM7XG4gICAgcmV0dXJuIHJldDtcbiAgfSAvLyBNYWtlIHN1cmUgdGhlIGxpbmtlZCBsaXN0IG9ubHkgc2hvd3MgdGhlIG1pbmltYWwgbmVjZXNzYXJ5IGluZm9ybWF0aW9uLlxuICA7XG5cbiAgX3Byb3RvW2N1c3RvbV0gPSBmdW5jdGlvbiAoXywgb3B0aW9ucykge1xuICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMsIHtcbiAgICAgIC8vIE9ubHkgaW5zcGVjdCBvbmUgbGV2ZWwuXG4gICAgICBkZXB0aDogMCxcbiAgICAgIC8vIEl0IHNob3VsZCBub3QgcmVjdXJzZS5cbiAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7IC8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcblxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0gLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH0gLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuXG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdEVycm9yQW5kQ2xvc2VOVCwgX3RoaXMsIGVycik7XG5cbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZW1pdENsb3NlTlQsIF90aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JBbmRDbG9zZU5UKHNlbGYsIGVycikge1xuICBlbWl0RXJyb3JOVChzZWxmLCBlcnIpO1xuICBlbWl0Q2xvc2VOVChzZWxmKTtcbn1cblxuZnVuY3Rpb24gZW1pdENsb3NlTlQoc2VsZikge1xuICBpZiAoc2VsZi5fd3JpdGFibGVTdGF0ZSAmJiAhc2VsZi5fd3JpdGFibGVTdGF0ZS5lbWl0Q2xvc2UpIHJldHVybjtcbiAgaWYgKHNlbGYuX3JlYWRhYmxlU3RhdGUgJiYgIXNlbGYuX3JlYWRhYmxlU3RhdGUuZW1pdENsb3NlKSByZXR1cm47XG4gIHNlbGYuZW1pdCgnY2xvc2UnKTtcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluYWxDYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLnByZWZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9lbmQtb2Ytc3RyZWFtLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBQb3J0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWFmaW50b3NoL2VuZC1vZi1zdHJlYW0gd2l0aFxuLy8gcGVybWlzc2lvbiBmcm9tIHRoZSBhdXRob3IsIE1hdGhpYXMgQnV1cyAoQG1hZmludG9zaCkuXG5cblxudmFyIEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vLi4vZXJyb3JzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2Vycm9ycy1icm93c2VyLmpzXCIpLmNvZGVzLkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gaXNSZXF1ZXN0KHN0cmVhbSkge1xuICByZXR1cm4gc3RyZWFtLnNldEhlYWRlciAmJiB0eXBlb2Ygc3RyZWFtLmFib3J0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBvbmNlKGNhbGxiYWNrKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGVycik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVvcyhzdHJlYW0sIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVvcyhzdHJlYW0sIG51bGwsIG9wdHMpO1xuICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgY2FsbGJhY2sgPSBvbmNlKGNhbGxiYWNrIHx8IG5vb3ApO1xuICB2YXIgd3MgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHJlYWRhYmxlID0gb3B0cy5yZWFkYWJsZSB8fCBvcHRzLnJlYWRhYmxlICE9PSBmYWxzZSAmJiBzdHJlYW0ucmVhZGFibGU7XG4gIHZhciB3cml0YWJsZSA9IG9wdHMud3JpdGFibGUgfHwgb3B0cy53cml0YWJsZSAhPT0gZmFsc2UgJiYgc3RyZWFtLndyaXRhYmxlO1xuXG4gIHZhciBvbmxlZ2FjeWZpbmlzaCA9IGZ1bmN0aW9uIG9ubGVnYWN5ZmluaXNoKCkge1xuICAgIGlmICghc3RyZWFtLndyaXRhYmxlKSBvbmZpbmlzaCgpO1xuICB9O1xuXG4gIHZhciBvbmZpbmlzaCA9IGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIHdyaXRhYmxlID0gZmFsc2U7XG4gICAgaWYgKCFyZWFkYWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuICB9O1xuXG4gIHZhciBvbmVuZCA9IGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIHJlYWRhYmxlID0gZmFsc2U7XG4gICAgaWYgKCF3cml0YWJsZSkgY2FsbGJhY2suY2FsbChzdHJlYW0pO1xuICB9O1xuXG4gIHZhciBvbmVycm9yID0gZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICBjYWxsYmFjay5jYWxsKHN0cmVhbSwgZXJyKTtcbiAgfTtcblxuICB2YXIgb25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKHJlYWRhYmxlICYmICEocnMgJiYgcnMuZW5kZWQpKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbChzdHJlYW0sIG5ldyBFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRSgpKTtcbiAgICB9XG5cbiAgICBpZiAod3JpdGFibGUgJiYgISh3cyAmJiB3cy5lbmRlZCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHN0cmVhbSwgbmV3IEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFKCkpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgb25yZXF1ZXN0ID0gZnVuY3Rpb24gb25yZXF1ZXN0KCkge1xuICAgIHN0cmVhbS5yZXEub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgfTtcblxuICBpZiAoaXNSZXF1ZXN0KHN0cmVhbSkpIHtcbiAgICBzdHJlYW0ub24oJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5vbignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBpZiAoc3RyZWFtLnJlcSkgb25yZXF1ZXN0KCk7ZWxzZSBzdHJlYW0ub24oJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICB9IGVsc2UgaWYgKHdyaXRhYmxlICYmICF3cykge1xuICAgIC8vIGxlZ2FjeSBzdHJlYW1zXG4gICAgc3RyZWFtLm9uKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLm9uKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgfVxuXG4gIHN0cmVhbS5vbignZW5kJywgb25lbmQpO1xuICBzdHJlYW0ub24oJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgaWYgKG9wdHMuZXJyb3IgIT09IGZhbHNlKSBzdHJlYW0ub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIHN0cmVhbS5vbignY2xvc2UnLCBvbmNsb3NlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2NvbXBsZXRlJywgb25maW5pc2gpO1xuICAgIHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignYWJvcnQnLCBvbmNsb3NlKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ3JlcXVlc3QnLCBvbnJlcXVlc3QpO1xuICAgIGlmIChzdHJlYW0ucmVxKSBzdHJlYW0ucmVxLnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmxlZ2FjeWZpbmlzaCk7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9ubGVnYWN5ZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVvcztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0YXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBFUlJfSU5WQUxJRF9PUFRfVkFMVUUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8uLi9lcnJvcnMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZXJyb3JzLWJyb3dzZXIuanNcIikuY29kZXMuRVJSX0lOVkFMSURfT1BUX1ZBTFVFO1xuXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0SGlnaFdhdGVyTWFyayhzdGF0ZSwgb3B0aW9ucywgZHVwbGV4S2V5LCBpc0R1cGxleCkge1xuICB2YXIgaHdtID0gaGlnaFdhdGVyTWFya0Zyb20ob3B0aW9ucywgaXNEdXBsZXgsIGR1cGxleEtleSk7XG5cbiAgaWYgKGh3bSAhPSBudWxsKSB7XG4gICAgaWYgKCEoaXNGaW5pdGUoaHdtKSAmJiBNYXRoLmZsb29yKGh3bSkgPT09IGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgdmFyIG5hbWUgPSBpc0R1cGxleCA/IGR1cGxleEtleSA6ICdoaWdoV2F0ZXJNYXJrJztcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9PUFRfVkFMVUUobmFtZSwgaHdtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihod20pO1xuICB9IC8vIERlZmF1bHQgdmFsdWVcblxuXG4gIHJldHVybiBzdGF0ZS5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRIaWdoV2F0ZXJNYXJrOiBnZXRIaWdoV2F0ZXJNYXJrXG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBldmVudHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qc1wiKS5FdmVudEVtaXR0ZXI7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qc1wiKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL19zdHJlYW1fd3JpdGFibGUuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanNcIik7XG5leHBvcnRzLkR1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL19zdHJlYW1fZHVwbGV4LmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWl0ZXJhdG9yLXN0cmVhbS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzXCIpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtaXRlcmF0b3Itc3RyZWFtL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanNcIik7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWpzL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlcikgey8qIGdsb2JhbCBpbmRleGVkREIgKi9cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxcblxudmFyIEFic3RyYWN0TGV2ZWxET1dOID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYWJzdHJhY3QtbGV2ZWxkb3duICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vaW5kZXguanNcIikuQWJzdHJhY3RMZXZlbERPV05cbnZhciBpbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGluaGVyaXRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcIilcbnZhciBJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaXRlcmF0b3IgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvaXRlcmF0b3IuanNcIilcbnZhciBtaXhlZFRvQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsL21peGVkLXRvLWJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy91dGlsL21peGVkLXRvLWJ1ZmZlci5qc1wiKVxudmFyIHNldEltbWVkaWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbC9pbW1lZGlhdGUgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvdXRpbC9pbW1lZGlhdGUtYnJvd3Nlci5qc1wiKVxudmFyIHN1cHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWwvc3VwcG9ydCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy91dGlsL3N1cHBvcnQuanNcIilcblxudmFyIERFRkFVTFRfUFJFRklYID0gJ2xldmVsLWpzLSdcblxuZnVuY3Rpb24gTGV2ZWwgKGxvY2F0aW9uLCBvcHRzKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBMZXZlbCkpIHJldHVybiBuZXcgTGV2ZWwobG9jYXRpb24sIG9wdHMpXG4gIEFic3RyYWN0TGV2ZWxET1dOLmNhbGwodGhpcylcbiAgb3B0cyA9IG9wdHMgfHwge31cblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY29uc3RydWN0b3IgcmVxdWlyZXMgYSBsb2NhdGlvbiBzdHJpbmcgYXJndW1lbnQnKVxuICB9XG5cbiAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uXG4gIHRoaXMucHJlZml4ID0gb3B0cy5wcmVmaXggfHwgREVGQVVMVF9QUkVGSVhcbiAgdGhpcy52ZXJzaW9uID0gcGFyc2VJbnQob3B0cy52ZXJzaW9uIHx8IDEsIDEwKVxufVxuXG5pbmhlcml0cyhMZXZlbCwgQWJzdHJhY3RMZXZlbERPV04pXG5cbi8vIERldGVjdCBiaW5hcnkgYW5kIGFycmF5IGtleSBzdXBwb3J0IChJbmRleGVkREIgU2Vjb25kIEVkaXRpb24pXG5MZXZlbC5iaW5hcnlLZXlzID0gc3VwcG9ydC5iaW5hcnlLZXlzKGluZGV4ZWREQilcbkxldmVsLmFycmF5S2V5cyA9IHN1cHBvcnQuYXJyYXlLZXlzKGluZGV4ZWREQilcblxuTGV2ZWwucHJvdG90eXBlLl9vcGVuID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciByZXEgPSBpbmRleGVkREIub3Blbih0aGlzLnByZWZpeCArIHRoaXMubG9jYXRpb24sIHRoaXMudmVyc2lvbilcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGJhY2socmVxLmVycm9yIHx8IG5ldyBFcnJvcigndW5rbm93biBlcnJvcicpKVxuICB9XG5cbiAgcmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLmRiID0gcmVxLnJlc3VsdFxuICAgIGNhbGxiYWNrKClcbiAgfVxuXG4gIHJlcS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICB2YXIgZGIgPSBldi50YXJnZXQucmVzdWx0XG5cbiAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoc2VsZi5sb2NhdGlvbikpIHtcbiAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKHNlbGYubG9jYXRpb24pXG4gICAgfVxuICB9XG59XG5cbkxldmVsLnByb3RvdHlwZS5zdG9yZSA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gIHZhciB0cmFuc2FjdGlvbiA9IHRoaXMuZGIudHJhbnNhY3Rpb24oW3RoaXMubG9jYXRpb25dLCBtb2RlKVxuICByZXR1cm4gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5sb2NhdGlvbilcbn1cblxuTGV2ZWwucHJvdG90eXBlLmF3YWl0ID0gZnVuY3Rpb24gKHJlcXVlc3QsIGNhbGxiYWNrKSB7XG4gIHZhciB0cmFuc2FjdGlvbiA9IHJlcXVlc3QudHJhbnNhY3Rpb25cblxuICAvLyBUYWtlIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGF0IGEgbm9uLWNhbmNlbGVkIHJlcXVlc3QgZXJyb3IgYWJvcnRzXG4gIC8vIHRoZSB0cmFuc2FjdGlvbi4gSS5lLiBubyBuZWVkIHRvIGxpc3RlbiBmb3IgXCJyZXF1ZXN0Lm9uZXJyb3JcIi5cbiAgdHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayh0cmFuc2FjdGlvbi5lcnJvciB8fCBuZXcgRXJyb3IoJ2Fib3J0ZWQgYnkgdXNlcicpKVxuICB9XG5cbiAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayhudWxsLCByZXF1ZXN0LnJlc3VsdClcbiAgfVxufVxuXG5MZXZlbC5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzdG9yZSA9IHRoaXMuc3RvcmUoJ3JlYWRvbmx5JylcblxuICB0cnkge1xuICAgIHZhciByZXEgPSBzdG9yZS5nZXQoa2V5KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGVycilcbiAgICB9KVxuICB9XG5cbiAgdGhpcy5hd2FpdChyZXEsIGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyAnTm90Rm91bmQnIGVycm9yLCBjb25zaXN0ZW50IHdpdGggTGV2ZWxET1dOIEFQSVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignTm90Rm91bmQnKSlcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hc0J1ZmZlcikge1xuICAgICAgdmFsdWUgPSBtaXhlZFRvQnVmZmVyKHZhbHVlKVxuICAgIH1cblxuICAgIGNhbGxiYWNrKG51bGwsIHZhbHVlKVxuICB9KVxufVxuXG5MZXZlbC5wcm90b3R5cGUuX2RlbCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzdG9yZSA9IHRoaXMuc3RvcmUoJ3JlYWR3cml0ZScpXG5cbiAgdHJ5IHtcbiAgICB2YXIgcmVxID0gc3RvcmUuZGVsZXRlKGtleSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHNldEltbWVkaWF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhlcnIpXG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuYXdhaXQocmVxLCBjYWxsYmFjaylcbn1cblxuTGV2ZWwucHJvdG90eXBlLl9wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZSgncmVhZHdyaXRlJylcblxuICB0cnkge1xuICAgIC8vIFdpbGwgdGhyb3cgYSBEYXRhRXJyb3Igb3IgRGF0YUNsb25lRXJyb3IgaWYgdGhlIGVudmlyb25tZW50XG4gICAgLy8gZG9lcyBub3Qgc3VwcG9ydCBzZXJpYWxpemluZyB0aGUga2V5IG9yIHZhbHVlIHJlc3BlY3RpdmVseS5cbiAgICB2YXIgcmVxID0gc3RvcmUucHV0KHZhbHVlLCBrZXkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZXJyKVxuICAgIH0pXG4gIH1cblxuICB0aGlzLmF3YWl0KHJlcSwgY2FsbGJhY2spXG59XG5cbi8vIFZhbGlkIGtleSB0eXBlcyBpbiBJbmRleGVkREIgU2Vjb25kIEVkaXRpb246XG4vL1xuLy8gLSBOdW1iZXIsIGV4Y2VwdCBOYU4uIEluY2x1ZGVzIEluZmluaXR5IGFuZCAtSW5maW5pdHlcbi8vIC0gRGF0ZSwgZXhjZXB0IGludmFsaWQgKE5hTilcbi8vIC0gU3RyaW5nXG4vLyAtIEFycmF5QnVmZmVyIG9yIGEgdmlldyB0aGVyZW9mICh0eXBlZCBhcnJheXMpLiBJbiBsZXZlbC1qcyB3ZSBhbHNvIHN1cHBvcnRcbi8vICAgQnVmZmVyICh3aGljaCBpcyBhbiBVaW50OEFycmF5KSAoYW5kIHRoZSBwcmltYXJ5IGJpbmFyeSB0eXBlIG9mIExldmVsKS5cbi8vIC0gQXJyYXksIGV4Y2VwdCBjeWNsaWNhbCBhbmQgZW1wdHkgKGUuZy4gQXJyYXkoMTApKS4gRWxlbWVudHMgbXVzdCBiZSB2YWxpZFxuLy8gICB0eXBlcyB0aGVtc2VsdmVzLlxuTGV2ZWwucHJvdG90eXBlLl9zZXJpYWxpemVLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoa2V5KSkge1xuICAgIHJldHVybiBMZXZlbC5iaW5hcnlLZXlzID8ga2V5IDoga2V5LnRvU3RyaW5nKClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGtleSkpIHtcbiAgICByZXR1cm4gTGV2ZWwuYXJyYXlLZXlzID8ga2V5Lm1hcCh0aGlzLl9zZXJpYWxpemVLZXksIHRoaXMpIDogU3RyaW5nKGtleSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ga2V5XG4gIH1cbn1cblxuTGV2ZWwucHJvdG90eXBlLl9zZXJpYWxpemVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVcbn1cblxuTGV2ZWwucHJvdG90eXBlLl9pdGVyYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgSXRlcmF0b3IodGhpcywgdGhpcy5sb2NhdGlvbiwgb3B0aW9ucylcbn1cblxuTGV2ZWwucHJvdG90eXBlLl9iYXRjaCA9IGZ1bmN0aW9uIChvcGVyYXRpb25zLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spXG5cbiAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZSgncmVhZHdyaXRlJylcbiAgdmFyIHRyYW5zYWN0aW9uID0gc3RvcmUudHJhbnNhY3Rpb25cbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgZXJyb3JcblxuICB0cmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKGVycm9yIHx8IHRyYW5zYWN0aW9uLmVycm9yIHx8IG5ldyBFcnJvcignYWJvcnRlZCBieSB1c2VyJykpXG4gIH1cblxuICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKClcbiAgfVxuXG4gIC8vIFdhaXQgZm9yIGEgcmVxdWVzdCB0byBjb21wbGV0ZSBiZWZvcmUgbWFraW5nIHRoZSBuZXh0LCBzYXZpbmcgQ1BVLlxuICBmdW5jdGlvbiBsb29wICgpIHtcbiAgICB2YXIgb3AgPSBvcGVyYXRpb25zW2luZGV4KytdXG4gICAgdmFyIGtleSA9IG9wLmtleVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXEgPSBvcC50eXBlID09PSAnZGVsJyA/IHN0b3JlLmRlbGV0ZShrZXkpIDogc3RvcmUucHV0KG9wLnZhbHVlLCBrZXkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBlcnJvciA9IGVyclxuICAgICAgdHJhbnNhY3Rpb24uYWJvcnQoKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKGluZGV4IDwgb3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJlcS5vbnN1Y2Nlc3MgPSBsb29wXG4gICAgfVxuICB9XG5cbiAgbG9vcCgpXG59XG5cbkxldmVsLnByb3RvdHlwZS5fY2xvc2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy5kYi5jbG9zZSgpXG4gIHNldEltbWVkaWF0ZShjYWxsYmFjaylcbn1cblxuTGV2ZWwuZGVzdHJveSA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgcHJlZml4LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHByZWZpeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gcHJlZml4XG4gICAgcHJlZml4ID0gREVGQVVMVF9QUkVGSVhcbiAgfVxuICB2YXIgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShwcmVmaXggKyBsb2NhdGlvbilcbiAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGJhY2soKVxuICB9XG4gIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBjYWxsYmFjayhlcnIpXG4gIH1cbn1cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vYnVmZmVyL2luZGV4LmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXIpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvaXRlcmF0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtanMvaXRlcmF0b3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWwgSURCS2V5UmFuZ2UgKi9cblxuXG5cbnZhciBpbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGluaGVyaXRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcIilcbnZhciBBYnN0cmFjdEl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYWJzdHJhY3QtbGV2ZWxkb3duICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vaW5kZXguanNcIikuQWJzdHJhY3RJdGVyYXRvclxudmFyIGx0Z3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBsdGd0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2x0Z3QvaW5kZXguanNcIilcbnZhciBtaXhlZFRvQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlsL21peGVkLXRvLWJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy91dGlsL21peGVkLXRvLWJ1ZmZlci5qc1wiKVxudmFyIHNldEltbWVkaWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbC9pbW1lZGlhdGUgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvdXRpbC9pbW1lZGlhdGUtYnJvd3Nlci5qc1wiKVxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IEl0ZXJhdG9yXG5cbmZ1bmN0aW9uIEl0ZXJhdG9yIChkYiwgbG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgQWJzdHJhY3RJdGVyYXRvci5jYWxsKHRoaXMsIGRiKVxuXG4gIHRoaXMuX2xpbWl0ID0gb3B0aW9ucy5saW1pdFxuICB0aGlzLl9jb3VudCA9IDBcbiAgdGhpcy5fY2FsbGJhY2sgPSBudWxsXG4gIHRoaXMuX2NhY2hlID0gW11cbiAgdGhpcy5fY29tcGxldGVkID0gZmFsc2VcbiAgdGhpcy5fYWJvcnRlZCA9IGZhbHNlXG4gIHRoaXMuX2Vycm9yID0gbnVsbFxuICB0aGlzLl90cmFuc2FjdGlvbiA9IG51bGxcblxuICB0aGlzLl9rZXlBc0J1ZmZlciA9IG9wdGlvbnMua2V5QXNCdWZmZXJcbiAgdGhpcy5fdmFsdWVBc0J1ZmZlciA9IG9wdGlvbnMudmFsdWVBc0J1ZmZlclxuXG4gIGlmICh0aGlzLl9saW1pdCA9PT0gMCkge1xuICAgIHRoaXMuX2NvbXBsZXRlZCA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGtleVJhbmdlID0gdGhpcy5jcmVhdGVLZXlSYW5nZShvcHRpb25zKVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhlIGxvd2VyIGtleSBpcyBncmVhdGVyIHRoYW4gdGhlIHVwcGVyIGtleS5cbiAgICAvLyBJbmRleGVkREIgdGhyb3dzIGFuIGVycm9yLCBidXQgd2UnbGwganVzdCByZXR1cm4gMCByZXN1bHRzLlxuICAgIHRoaXMuX2NvbXBsZXRlZCA9IHRydWVcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRoaXMuY3JlYXRlSXRlcmF0b3IobG9jYXRpb24sIGtleVJhbmdlLCBvcHRpb25zLnJldmVyc2UpXG59XG5cbmluaGVyaXRzKEl0ZXJhdG9yLCBBYnN0cmFjdEl0ZXJhdG9yKVxuXG5JdGVyYXRvci5wcm90b3R5cGUuY3JlYXRlS2V5UmFuZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgbG93ZXIgPSBsdGd0Lmxvd2VyQm91bmQob3B0aW9ucylcbiAgdmFyIHVwcGVyID0gbHRndC51cHBlckJvdW5kKG9wdGlvbnMpXG4gIHZhciBsb3dlck9wZW4gPSBsdGd0Lmxvd2VyQm91bmRFeGNsdXNpdmUob3B0aW9ucylcbiAgdmFyIHVwcGVyT3BlbiA9IGx0Z3QudXBwZXJCb3VuZEV4Y2x1c2l2ZShvcHRpb25zKVxuXG4gIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkICYmIHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gSURCS2V5UmFuZ2UuYm91bmQobG93ZXIsIHVwcGVyLCBsb3dlck9wZW4sIHVwcGVyT3BlbilcbiAgfSBlbHNlIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIElEQktleVJhbmdlLmxvd2VyQm91bmQobG93ZXIsIGxvd2VyT3BlbilcbiAgfSBlbHNlIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIElEQktleVJhbmdlLnVwcGVyQm91bmQodXBwZXIsIHVwcGVyT3BlbilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5jcmVhdGVJdGVyYXRvciA9IGZ1bmN0aW9uIChsb2NhdGlvbiwga2V5UmFuZ2UsIHJldmVyc2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciB0cmFuc2FjdGlvbiA9IHRoaXMuZGIuZGIudHJhbnNhY3Rpb24oW2xvY2F0aW9uXSwgJ3JlYWRvbmx5JylcbiAgdmFyIHN0b3JlID0gdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobG9jYXRpb24pXG4gIHZhciByZXEgPSBzdG9yZS5vcGVuQ3Vyc29yKGtleVJhbmdlLCByZXZlcnNlID8gJ3ByZXYnIDogJ25leHQnKVxuXG4gIHJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICB2YXIgY3Vyc29yID0gZXYudGFyZ2V0LnJlc3VsdFxuICAgIGlmIChjdXJzb3IpIHNlbGYub25JdGVtKGN1cnNvcilcbiAgfVxuXG4gIHRoaXMuX3RyYW5zYWN0aW9uID0gdHJhbnNhY3Rpb25cblxuICAvLyBJZiBhbiBlcnJvciBvY2N1cnMgKG9uIHRoZSByZXF1ZXN0KSwgdGhlIHRyYW5zYWN0aW9uIHdpbGwgYWJvcnQuXG4gIHRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkFib3J0KHNlbGYuX3RyYW5zYWN0aW9uLmVycm9yIHx8IG5ldyBFcnJvcignYWJvcnRlZCBieSB1c2VyJykpXG4gIH1cblxuICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25Db21wbGV0ZSgpXG4gIH1cbn1cblxuSXRlcmF0b3IucHJvdG90eXBlLm9uSXRlbSA9IGZ1bmN0aW9uIChjdXJzb3IpIHtcbiAgdGhpcy5fY2FjaGUucHVzaChjdXJzb3Iua2V5LCBjdXJzb3IudmFsdWUpXG5cbiAgaWYgKHRoaXMuX2xpbWl0IDw9IDAgfHwgKyt0aGlzLl9jb3VudCA8IHRoaXMuX2xpbWl0KSB7XG4gICAgY3Vyc29yWydjb250aW51ZSddKClcbiAgfVxuXG4gIHRoaXMubWF5YmVOZXh0KClcbn1cblxuSXRlcmF0b3IucHJvdG90eXBlLm9uQWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHRoaXMuX2Fib3J0ZWQgPSB0cnVlXG4gIHRoaXMuX2Vycm9yID0gZXJyXG4gIHRoaXMubWF5YmVOZXh0KClcbn1cblxuSXRlcmF0b3IucHJvdG90eXBlLm9uQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NvbXBsZXRlZCA9IHRydWVcbiAgdGhpcy5tYXliZU5leHQoKVxufVxuXG5JdGVyYXRvci5wcm90b3R5cGUubWF5YmVOZXh0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5fY2FsbGJhY2spIHtcbiAgICB0aGlzLl9uZXh0KHRoaXMuX2NhbGxiYWNrKVxuICAgIHRoaXMuX2NhbGxiYWNrID0gbnVsbFxuICB9XG59XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBpZiAodGhpcy5fYWJvcnRlZCkge1xuICAgIC8vIFRoZSBlcnJvciBzaG91bGQgYmUgcGlja2VkIHVwIGJ5IGVpdGhlciBuZXh0KCkgb3IgZW5kKCkuXG4gICAgdmFyIGVyciA9IHRoaXMuX2Vycm9yXG4gICAgdGhpcy5fZXJyb3IgPSBudWxsXG5cbiAgICBzZXRJbW1lZGlhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2soZXJyKVxuICAgIH0pXG4gIH0gZWxzZSBpZiAodGhpcy5fY2FjaGUubGVuZ3RoID4gMCkge1xuICAgIHZhciBrZXkgPSB0aGlzLl9jYWNoZS5zaGlmdCgpXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fY2FjaGUuc2hpZnQoKVxuXG4gICAgaWYgKHRoaXMuX2tleUFzQnVmZmVyKSBrZXkgPSBtaXhlZFRvQnVmZmVyKGtleSlcbiAgICBpZiAodGhpcy5fdmFsdWVBc0J1ZmZlcikgdmFsdWUgPSBtaXhlZFRvQnVmZmVyKHZhbHVlKVxuXG4gICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGtleSwgdmFsdWUpXG4gICAgfSlcbiAgfSBlbHNlIGlmICh0aGlzLl9jb21wbGV0ZWQpIHtcbiAgICBzZXRJbW1lZGlhdGUoY2FsbGJhY2spXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFja1xuICB9XG59XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5fZW5kID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIGlmICh0aGlzLl9hYm9ydGVkIHx8IHRoaXMuX2NvbXBsZXRlZCkge1xuICAgIHZhciBlcnIgPSB0aGlzLl9lcnJvclxuXG4gICAgc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGVycilcbiAgICB9KVxuXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBEb24ndCBhZHZhbmNlIHRoZSBjdXJzb3IgYW55bW9yZSwgYW5kIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGNvbXBsZXRlXG4gIC8vIG9uIGl0cyBvd24gaW4gdGhlIG5leHQgdGljay4gVGhpcyBhcHByb2FjaCBpcyBtdWNoIGNsZWFuZXIgdGhhbiBjYWxsaW5nXG4gIC8vIHRyYW5zYWN0aW9uLmFib3J0KCkgd2l0aCBpdHMgdW5wcmVkaWN0YWJsZSBldmVudCBvcmRlci5cbiAgdGhpcy5vbkl0ZW0gPSBub29wXG4gIHRoaXMub25BYm9ydCA9IGNhbGxiYWNrXG4gIHRoaXMub25Db21wbGV0ZSA9IGNhbGxiYWNrXG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtY2hhaW5lZC1iYXRjaC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1jaGFpbmVkLWJhdGNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBBYnN0cmFjdENoYWluZWRCYXRjaCAoZGIpIHtcbiAgaWYgKHR5cGVvZiBkYiAhPT0gJ29iamVjdCcgfHwgZGIgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGFuIGFic3RyYWN0LWxldmVsZG93biBjb21wbGlhbnQgc3RvcmUnKVxuICB9XG5cbiAgdGhpcy5kYiA9IGRiXG4gIHRoaXMuX29wZXJhdGlvbnMgPSBbXVxuICB0aGlzLl93cml0dGVuID0gZmFsc2Vcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLl9jaGVja1dyaXR0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl93cml0dGVuKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd3cml0ZSgpIGFscmVhZHkgY2FsbGVkIG9uIHRoaXMgYmF0Y2gnKVxuICB9XG59XG5cbkFic3RyYWN0Q2hhaW5lZEJhdGNoLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0aGlzLl9jaGVja1dyaXR0ZW4oKVxuXG4gIHZhciBlcnIgPSB0aGlzLmRiLl9jaGVja0tleShrZXkpIHx8IHRoaXMuZGIuX2NoZWNrVmFsdWUodmFsdWUpXG4gIGlmIChlcnIpIHRocm93IGVyclxuXG4gIGtleSA9IHRoaXMuZGIuX3NlcmlhbGl6ZUtleShrZXkpXG4gIHZhbHVlID0gdGhpcy5kYi5fc2VyaWFsaXplVmFsdWUodmFsdWUpXG5cbiAgdGhpcy5fcHV0KGtleSwgdmFsdWUpXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLl9wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0aGlzLl9vcGVyYXRpb25zLnB1c2goeyB0eXBlOiAncHV0Jywga2V5OiBrZXksIHZhbHVlOiB2YWx1ZSB9KVxufVxuXG5BYnN0cmFjdENoYWluZWRCYXRjaC5wcm90b3R5cGUuZGVsID0gZnVuY3Rpb24gKGtleSkge1xuICB0aGlzLl9jaGVja1dyaXR0ZW4oKVxuXG4gIHZhciBlcnIgPSB0aGlzLmRiLl9jaGVja0tleShrZXkpXG4gIGlmIChlcnIpIHRocm93IGVyclxuXG4gIGtleSA9IHRoaXMuZGIuX3NlcmlhbGl6ZUtleShrZXkpXG4gIHRoaXMuX2RlbChrZXkpXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLl9kZWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHRoaXMuX29wZXJhdGlvbnMucHVzaCh7IHR5cGU6ICdkZWwnLCBrZXk6IGtleSB9KVxufVxuXG5BYnN0cmFjdENoYWluZWRCYXRjaC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NoZWNrV3JpdHRlbigpXG4gIHRoaXMuX2NsZWFyKClcblxuICByZXR1cm4gdGhpc1xufVxuXG5BYnN0cmFjdENoYWluZWRCYXRjaC5wcm90b3R5cGUuX2NsZWFyID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9vcGVyYXRpb25zID0gW11cbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHRoaXMuX2NoZWNrV3JpdHRlbigpXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7IGNhbGxiYWNrID0gb3B0aW9ucyB9XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyaXRlKCkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9XG4gIH1cblxuICB0aGlzLl93cml0dGVuID0gdHJ1ZVxuICB0aGlzLl93cml0ZShvcHRpb25zLCBjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RDaGFpbmVkQmF0Y2gucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB0aGlzLmRiLl9iYXRjaCh0aGlzLl9vcGVyYXRpb25zLCBvcHRpb25zLCBjYWxsYmFjaylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBYnN0cmFjdENoYWluZWRCYXRjaFxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWl0ZXJhdG9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1pdGVyYXRvci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7ZnVuY3Rpb24gQWJzdHJhY3RJdGVyYXRvciAoZGIpIHtcbiAgaWYgKHR5cGVvZiBkYiAhPT0gJ29iamVjdCcgfHwgZGIgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGFuIGFic3RyYWN0LWxldmVsZG93biBjb21wbGlhbnQgc3RvcmUnKVxuICB9XG5cbiAgdGhpcy5kYiA9IGRiXG4gIHRoaXMuX2VuZGVkID0gZmFsc2VcbiAgdGhpcy5fbmV4dGluZyA9IGZhbHNlXG59XG5cbkFic3RyYWN0SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignbmV4dCgpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKHNlbGYuX2VuZGVkKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IEVycm9yKCdjYW5ub3QgY2FsbCBuZXh0KCkgYWZ0ZXIgZW5kKCknKSlcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgaWYgKHNlbGYuX25leHRpbmcpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoJ2Nhbm5vdCBjYWxsIG5leHQoKSBiZWZvcmUgcHJldmlvdXMgbmV4dCgpIGhhcyBjb21wbGV0ZWQnKSlcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cbiAgc2VsZi5fbmV4dGluZyA9IHRydWVcbiAgc2VsZi5fbmV4dChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fbmV4dGluZyA9IGZhbHNlXG4gICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICB9KVxuXG4gIHJldHVybiBzZWxmXG59XG5cbkFic3RyYWN0SXRlcmF0b3IucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbkFic3RyYWN0SXRlcmF0b3IucHJvdG90eXBlLnNlZWsgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0aGlzLl9lbmRlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGNhbGwgc2VlaygpIGFmdGVyIGVuZCgpJylcbiAgfVxuICBpZiAodGhpcy5fbmV4dGluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IGNhbGwgc2VlaygpIGJlZm9yZSBuZXh0KCkgaGFzIGNvbXBsZXRlZCcpXG4gIH1cblxuICB0YXJnZXQgPSB0aGlzLmRiLl9zZXJpYWxpemVLZXkodGFyZ2V0KVxuICB0aGlzLl9zZWVrKHRhcmdldClcbn1cblxuQWJzdHJhY3RJdGVyYXRvci5wcm90b3R5cGUuX3NlZWsgPSBmdW5jdGlvbiAodGFyZ2V0KSB7fVxuXG5BYnN0cmFjdEl0ZXJhdG9yLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignZW5kKCkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cblxuICBpZiAodGhpcy5fZW5kZWQpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IEVycm9yKCdlbmQoKSBhbHJlYWR5IGNhbGxlZCBvbiBpdGVyYXRvcicpKVxuICB9XG5cbiAgdGhpcy5fZW5kZWQgPSB0cnVlXG4gIHRoaXMuX2VuZChjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RJdGVyYXRvci5wcm90b3R5cGUuX2VuZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0SXRlcmF0b3JcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vcHJvY2Vzcy9icm93c2VyLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWxldmVsZG93bi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1qcy9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWxldmVsZG93bi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2VzcywgQnVmZmVyKSB7dmFyIHh0ZW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgeHRlbmQgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzXCIpXG52YXIgQWJzdHJhY3RJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYWJzdHJhY3QtaXRlcmF0b3IgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1pdGVyYXRvci5qc1wiKVxudmFyIEFic3RyYWN0Q2hhaW5lZEJhdGNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hYnN0cmFjdC1jaGFpbmVkLWJhdGNoICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vYWJzdHJhY3QtY2hhaW5lZC1iYXRjaC5qc1wiKVxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eVxudmFyIHJhbmdlT3B0aW9ucyA9ICdzdGFydCBlbmQgZ3QgZ3RlIGx0IGx0ZScuc3BsaXQoJyAnKVxuXG5mdW5jdGlvbiBBYnN0cmFjdExldmVsRE9XTiAoKSB7XG4gIHRoaXMuc3RhdHVzID0gJ25ldydcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBvbGRTdGF0dXMgPSB0aGlzLnN0YXR1c1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignb3BlbigpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSBvcHRpb25zID0ge31cblxuICBvcHRpb25zLmNyZWF0ZUlmTWlzc2luZyA9IG9wdGlvbnMuY3JlYXRlSWZNaXNzaW5nICE9PSBmYWxzZVxuICBvcHRpb25zLmVycm9ySWZFeGlzdHMgPSAhIW9wdGlvbnMuZXJyb3JJZkV4aXN0c1xuXG4gIHRoaXMuc3RhdHVzID0gJ29wZW5pbmcnXG4gIHRoaXMuX29wZW4ob3B0aW9ucywgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHNlbGYuc3RhdHVzID0gb2xkU3RhdHVzXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyKVxuICAgIH1cbiAgICBzZWxmLnN0YXR1cyA9ICdvcGVuJ1xuICAgIGNhbGxiYWNrKClcbiAgfSlcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9vcGVuID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2spXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIG9sZFN0YXR1cyA9IHRoaXMuc3RhdHVzXG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xvc2UoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGFyZ3VtZW50JylcbiAgfVxuXG4gIHRoaXMuc3RhdHVzID0gJ2Nsb3NpbmcnXG4gIHRoaXMuX2Nsb3NlKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzZWxmLnN0YXR1cyA9IG9sZFN0YXR1c1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycilcbiAgICB9XG4gICAgc2VsZi5zdGF0dXMgPSAnY2xvc2VkJ1xuICAgIGNhbGxiYWNrKClcbiAgfSlcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdnZXQoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBlcnIgPSB0aGlzLl9jaGVja0tleShrZXkpXG4gIGlmIChlcnIpIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBlcnIpXG5cbiAga2V5ID0gdGhpcy5fc2VyaWFsaXplS2V5KGtleSlcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuXG4gIG9wdGlvbnMuYXNCdWZmZXIgPSBvcHRpb25zLmFzQnVmZmVyICE9PSBmYWxzZVxuXG4gIHRoaXMuX2dldChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2dldCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBjYWxsYmFjayhuZXcgRXJyb3IoJ05vdEZvdW5kJykpIH0pXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwdXQoKSByZXF1aXJlcyBhIGNhbGxiYWNrIGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBlcnIgPSB0aGlzLl9jaGVja0tleShrZXkpIHx8IHRoaXMuX2NoZWNrVmFsdWUodmFsdWUpXG4gIGlmIChlcnIpIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBlcnIpXG5cbiAga2V5ID0gdGhpcy5fc2VyaWFsaXplS2V5KGtleSlcbiAgdmFsdWUgPSB0aGlzLl9zZXJpYWxpemVWYWx1ZSh2YWx1ZSlcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuXG4gIHRoaXMuX3B1dChrZXksIHZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9wdXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgY2FsbGJhY2sgPSBvcHRpb25zXG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVsKCkgcmVxdWlyZXMgYSBjYWxsYmFjayBhcmd1bWVudCcpXG4gIH1cblxuICB2YXIgZXJyID0gdGhpcy5fY2hlY2tLZXkoa2V5KVxuICBpZiAoZXJyKSByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgZXJyKVxuXG4gIGtleSA9IHRoaXMuX3NlcmlhbGl6ZUtleShrZXkpXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSBvcHRpb25zID0ge31cblxuICB0aGlzLl9kZWwoa2V5LCBvcHRpb25zLCBjYWxsYmFjaylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9kZWwgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAoYXJyYXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX2NoYWluZWRCYXRjaCgpXG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IG9wdGlvbnNcblxuICBpZiAodHlwZW9mIGFycmF5ID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjayA9IGFycmF5XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignYmF0Y2goYXJyYXkpIHJlcXVpcmVzIGEgY2FsbGJhY2sgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgRXJyb3IoJ2JhdGNoKGFycmF5KSByZXF1aXJlcyBhbiBhcnJheSBhcmd1bWVudCcpKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSBvcHRpb25zID0ge31cblxuICB2YXIgc2VyaWFsaXplZCA9IG5ldyBBcnJheShhcnJheS5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgYXJyYXlbaV0gIT09ICdvYmplY3QnIHx8IGFycmF5W2ldID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IEVycm9yKCdiYXRjaChhcnJheSkgZWxlbWVudCBtdXN0IGJlIGFuIG9iamVjdCBhbmQgbm90IGBudWxsYCcpKVxuICAgIH1cblxuICAgIHZhciBlID0geHRlbmQoYXJyYXlbaV0pXG5cbiAgICBpZiAoZS50eXBlICE9PSAncHV0JyAmJiBlLnR5cGUgIT09ICdkZWwnKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaywgbmV3IEVycm9yKFwiYHR5cGVgIG11c3QgYmUgJ3B1dCcgb3IgJ2RlbCdcIikpXG4gICAgfVxuXG4gICAgdmFyIGVyciA9IHRoaXMuX2NoZWNrS2V5KGUua2V5KVxuICAgIGlmIChlcnIpIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBlcnIpXG5cbiAgICBlLmtleSA9IHRoaXMuX3NlcmlhbGl6ZUtleShlLmtleSlcblxuICAgIGlmIChlLnR5cGUgPT09ICdwdXQnKSB7XG4gICAgICB2YXIgdmFsdWVFcnIgPSB0aGlzLl9jaGVja1ZhbHVlKGUudmFsdWUpXG4gICAgICBpZiAodmFsdWVFcnIpIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCB2YWx1ZUVycilcblxuICAgICAgZS52YWx1ZSA9IHRoaXMuX3NlcmlhbGl6ZVZhbHVlKGUudmFsdWUpXG4gICAgfVxuXG4gICAgc2VyaWFsaXplZFtpXSA9IGVcbiAgfVxuXG4gIHRoaXMuX2JhdGNoKHNlcmlhbGl6ZWQsIG9wdGlvbnMsIGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2JhdGNoID0gZnVuY3Rpb24gKGFycmF5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrKVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX3NldHVwSXRlcmF0b3JPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IGNsZWFuUmFuZ2VPcHRpb25zKHRoaXMsIG9wdGlvbnMpXG5cbiAgb3B0aW9ucy5yZXZlcnNlID0gISFvcHRpb25zLnJldmVyc2VcbiAgb3B0aW9ucy5rZXlzID0gb3B0aW9ucy5rZXlzICE9PSBmYWxzZVxuICBvcHRpb25zLnZhbHVlcyA9IG9wdGlvbnMudmFsdWVzICE9PSBmYWxzZVxuICBvcHRpb25zLmxpbWl0ID0gJ2xpbWl0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5saW1pdCA6IC0xXG4gIG9wdGlvbnMua2V5QXNCdWZmZXIgPSBvcHRpb25zLmtleUFzQnVmZmVyICE9PSBmYWxzZVxuICBvcHRpb25zLnZhbHVlQXNCdWZmZXIgPSBvcHRpb25zLnZhbHVlQXNCdWZmZXIgIT09IGZhbHNlXG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gY2xlYW5SYW5nZU9wdGlvbnMgKGRiLCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQgPSB7fVxuXG4gIGZvciAodmFyIGsgaW4gb3B0aW9ucykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBrKSkgY29udGludWVcblxuICAgIHZhciBvcHQgPSBvcHRpb25zW2tdXG5cbiAgICBpZiAoaXNSYW5nZU9wdGlvbihrKSkge1xuICAgICAgLy8gTm90ZSB0aGF0IHdlIGRvbid0IHJlamVjdCBudWxsaXNoIGFuZCBlbXB0eSBvcHRpb25zIGhlcmUuIFdoaWxlXG4gICAgICAvLyB0aG9zZSB0eXBlcyBhcmUgaW52YWxpZCBhcyBrZXlzLCB0aGV5IGFyZSB2YWxpZCBhcyByYW5nZSBvcHRpb25zLlxuICAgICAgb3B0ID0gZGIuX3NlcmlhbGl6ZUtleShvcHQpXG4gICAgfVxuXG4gICAgcmVzdWx0W2tdID0gb3B0XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIGlzUmFuZ2VPcHRpb24gKGspIHtcbiAgcmV0dXJuIHJhbmdlT3B0aW9ucy5pbmRleE9mKGspICE9PSAtMVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuaXRlcmF0b3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIG9wdGlvbnMgPSB7fVxuICBvcHRpb25zID0gdGhpcy5fc2V0dXBJdGVyYXRvck9wdGlvbnMob3B0aW9ucylcbiAgcmV0dXJuIHRoaXMuX2l0ZXJhdG9yKG9wdGlvbnMpXG59XG5cbkFic3RyYWN0TGV2ZWxET1dOLnByb3RvdHlwZS5faXRlcmF0b3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEFic3RyYWN0SXRlcmF0b3IodGhpcylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9jaGFpbmVkQmF0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgQWJzdHJhY3RDaGFpbmVkQmF0Y2godGhpcylcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9zZXJpYWxpemVLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9zZXJpYWxpemVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVcbn1cblxuQWJzdHJhY3RMZXZlbERPV04ucHJvdG90eXBlLl9jaGVja0tleSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gbnVsbCB8fCBrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ2tleSBjYW5ub3QgYmUgYG51bGxgIG9yIGB1bmRlZmluZWRgJylcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoa2V5KSAmJiBrZXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcigna2V5IGNhbm5vdCBiZSBhbiBlbXB0eSBCdWZmZXInKVxuICB9IGVsc2UgaWYgKGtleSA9PT0gJycpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdrZXkgY2Fubm90IGJlIGFuIGVtcHR5IFN0cmluZycpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShrZXkpICYmIGtleS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdrZXkgY2Fubm90IGJlIGFuIGVtcHR5IEFycmF5JylcbiAgfVxufVxuXG5BYnN0cmFjdExldmVsRE9XTi5wcm90b3R5cGUuX2NoZWNrVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKCd2YWx1ZSBjYW5ub3QgYmUgYG51bGxgIG9yIGB1bmRlZmluZWRgJylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0TGV2ZWxET1dOXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uLy4uL3Byb2Nlc3MvYnJvd3Nlci5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vLi4vYnVmZmVyL2luZGV4LmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXIpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWpzL25vZGVfbW9kdWxlcy9hYnN0cmFjdC1sZXZlbGRvd24vaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5leHBvcnRzLkFic3RyYWN0TGV2ZWxET1dOID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hYnN0cmFjdC1sZXZlbGRvd24gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1sZXZlbGRvd24uanNcIilcbmV4cG9ydHMuQWJzdHJhY3RJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYWJzdHJhY3QtaXRlcmF0b3IgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvbm9kZV9tb2R1bGVzL2Fic3RyYWN0LWxldmVsZG93bi9hYnN0cmFjdC1pdGVyYXRvci5qc1wiKVxuZXhwb3J0cy5BYnN0cmFjdENoYWluZWRCYXRjaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYWJzdHJhY3QtY2hhaW5lZC1iYXRjaCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1qcy9ub2RlX21vZHVsZXMvYWJzdHJhY3QtbGV2ZWxkb3duL2Fic3RyYWN0LWNoYWluZWQtYmF0Y2guanNcIilcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvdXRpbC9pbW1lZGlhdGUtYnJvd3Nlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWpzL3V0aWwvaW1tZWRpYXRlLWJyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGltbWVkaWF0ZSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbW1lZGlhdGUvbGliL2luZGV4LmpzXCIpXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWpzL3V0aWwvbWl4ZWQtdG8tYnVmZmVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsLWpzL3V0aWwvbWl4ZWQtdG8tYnVmZmVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlcikge1xuXG52YXIgdG9CdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB0eXBlZGFycmF5LXRvLWJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy90eXBlZGFycmF5LXRvLWJ1ZmZlci9pbmRleC5qc1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5KSByZXR1cm4gdG9CdWZmZXIodmFsdWUpXG4gIGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSlcbiAgZWxzZSByZXR1cm4gQnVmZmVyLmZyb20oU3RyaW5nKHZhbHVlKSlcbn1cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vYnVmZmVyL2luZGV4LmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXIpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvdXRpbC9zdXBwb3J0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbC1qcy91dGlsL3N1cHBvcnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmV4cG9ydHMudGVzdCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRlc3QgKGltcGwpIHtcbiAgICB0cnkge1xuICAgICAgaW1wbC5jbXAoa2V5LCAwKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLmJpbmFyeUtleXMgPSBleHBvcnRzLnRlc3QobmV3IFVpbnQ4QXJyYXkoMCkpXG5leHBvcnRzLmFycmF5S2V5cyA9IGV4cG9ydHMudGVzdChbMV0pXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2JhdGNoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2JhdGNoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBXcml0ZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgbGV2ZWwtZXJyb3JzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsLWVycm9ycy9lcnJvcnMuanNcIikuV3JpdGVFcnJvclxudmFyIHByb21pc2lmeSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcHJvbWlzaWZ5ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL3Byb21pc2lmeS5qc1wiKVxudmFyIGdldENhbGxiYWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb21tb24gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWx1cC9saWIvY29tbW9uLmpzXCIpLmdldENhbGxiYWNrXG52YXIgZ2V0T3B0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY29tbW9uICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2NvbW1vbi5qc1wiKS5nZXRPcHRpb25zXG5cbmZ1bmN0aW9uIEJhdGNoIChsZXZlbHVwKSB7XG4gIHRoaXMuX2xldmVsdXAgPSBsZXZlbHVwXG4gIHRoaXMuYmF0Y2ggPSBsZXZlbHVwLmRiLmJhdGNoKClcbiAgdGhpcy5vcHMgPSBbXVxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuQmF0Y2gucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgdGhpcy5iYXRjaC5wdXQoa2V5LCB2YWx1ZSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBXcml0ZUVycm9yKGUpXG4gIH1cblxuICB0aGlzLm9wcy5wdXNoKHsgdHlwZTogJ3B1dCcsIGtleToga2V5LCB2YWx1ZTogdmFsdWUgfSlcbiAgdGhpcy5sZW5ndGgrK1xuXG4gIHJldHVybiB0aGlzXG59XG5cbkJhdGNoLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHRyeSB7XG4gICAgdGhpcy5iYXRjaC5kZWwoa2V5KVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgV3JpdGVFcnJvcihlcnIpXG4gIH1cblxuICB0aGlzLm9wcy5wdXNoKHsgdHlwZTogJ2RlbCcsIGtleToga2V5IH0pXG4gIHRoaXMubGVuZ3RoKytcblxuICByZXR1cm4gdGhpc1xufVxuXG5CYXRjaC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgdGhpcy5iYXRjaC5jbGVhcigpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBXcml0ZUVycm9yKGVycilcbiAgfVxuXG4gIHRoaXMub3BzID0gW11cbiAgdGhpcy5sZW5ndGggPSAwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuQmF0Y2gucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBsZXZlbHVwID0gdGhpcy5fbGV2ZWx1cFxuICB2YXIgb3BzID0gdGhpcy5vcHNcbiAgdmFyIHByb21pc2VcblxuICBjYWxsYmFjayA9IGdldENhbGxiYWNrKG9wdGlvbnMsIGNhbGxiYWNrKVxuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IHByb21pc2lmeSgpXG4gICAgcHJvbWlzZSA9IGNhbGxiYWNrLnByb21pc2VcbiAgfVxuXG4gIG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMpXG5cbiAgdHJ5IHtcbiAgICB0aGlzLmJhdGNoLndyaXRlKG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHsgcmV0dXJuIGNhbGxiYWNrKG5ldyBXcml0ZUVycm9yKGVycikpIH1cbiAgICAgIGxldmVsdXAuZW1pdCgnYmF0Y2gnLCBvcHMpXG4gICAgICBjYWxsYmFjaygpXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IFdyaXRlRXJyb3IoZXJyKVxuICB9XG5cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCYXRjaFxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbHVwL2xpYi9jb21tb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2NvbW1vbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZXhwb3J0cy5nZXRDYWxsYmFjayA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICByZXR1cm4gdHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zIDogY2FsbGJhY2tcbn1cblxuZXhwb3J0cy5nZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsID8gb3B0aW9ucyA6IHt9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2xldmVsdXAuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9sZXZlbHVwL2xpYi9sZXZlbHVwLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MpIHt2YXIgRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZXZlbnRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanNcIikuRXZlbnRFbWl0dGVyXG52YXIgaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB1dGlsICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3V0aWwvdXRpbC5qc1wiKS5pbmhlcml0c1xudmFyIGV4dGVuZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHh0ZW5kICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qc1wiKVxudmFyIERlZmVycmVkTGV2ZWxET1dOID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZGVmZXJyZWQtbGV2ZWxkb3duICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlZmVycmVkLWxldmVsZG93bi9kZWZlcnJlZC1sZXZlbGRvd24uanNcIilcbnZhciBJdGVyYXRvclN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGxldmVsLWl0ZXJhdG9yLXN0cmVhbSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbC1pdGVyYXRvci1zdHJlYW0vaW5kZXguanNcIilcbnZhciBCYXRjaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYmF0Y2ggKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWx1cC9saWIvYmF0Y2guanNcIilcbnZhciBlcnJvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBsZXZlbC1lcnJvcnMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtZXJyb3JzL2Vycm9ycy5qc1wiKVxudmFyIGFzc2VydCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGFzc2VydCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9hc3NlcnQvYXNzZXJ0LmpzXCIpXG52YXIgcHJvbWlzaWZ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wcm9taXNpZnkgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWx1cC9saWIvcHJvbWlzaWZ5LmpzXCIpXG52YXIgZ2V0Q2FsbGJhY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvbW1vbiAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sZXZlbHVwL2xpYi9jb21tb24uanNcIikuZ2V0Q2FsbGJhY2tcbnZhciBnZXRPcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb21tb24gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWx1cC9saWIvY29tbW9uLmpzXCIpLmdldE9wdGlvbnNcblxudmFyIFdyaXRlRXJyb3IgPSBlcnJvcnMuV3JpdGVFcnJvclxudmFyIFJlYWRFcnJvciA9IGVycm9ycy5SZWFkRXJyb3JcbnZhciBOb3RGb3VuZEVycm9yID0gZXJyb3JzLk5vdEZvdW5kRXJyb3JcbnZhciBPcGVuRXJyb3IgPSBlcnJvcnMuT3BlbkVycm9yXG52YXIgSW5pdGlhbGl6YXRpb25FcnJvciA9IGVycm9ycy5Jbml0aWFsaXphdGlvbkVycm9yXG5cbi8vIFBvc3NpYmxlIEFic3RyYWN0TGV2ZWxET1dOI3N0YXR1cyB2YWx1ZXM6XG4vLyAgLSAnbmV3JyAgICAgLSBuZXdseSBjcmVhdGVkLCBub3Qgb3BlbmVkIG9yIGNsb3NlZFxuLy8gIC0gJ29wZW5pbmcnIC0gd2FpdGluZyBmb3IgdGhlIGRhdGFiYXNlIHRvIGJlIG9wZW5lZCwgcG9zdCBvcGVuKClcbi8vICAtICdvcGVuJyAgICAtIHN1Y2Nlc3NmdWxseSBvcGVuZWQgdGhlIGRhdGFiYXNlLCBhdmFpbGFibGUgZm9yIHVzZVxuLy8gIC0gJ2Nsb3NpbmcnIC0gd2FpdGluZyBmb3IgdGhlIGRhdGFiYXNlIHRvIGJlIGNsb3NlZCwgcG9zdCBjbG9zZSgpXG4vLyAgLSAnY2xvc2VkJyAgLSBkYXRhYmFzZSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY2xvc2VkLCBzaG91bGQgbm90IGJlXG4vLyAgICAgICAgICAgICAgICAgdXNlZCBleGNlcHQgZm9yIGFub3RoZXIgb3BlbigpIG9wZXJhdGlvblxuXG5mdW5jdGlvbiBMZXZlbFVQIChkYiwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExldmVsVVApKSB7XG4gICAgcmV0dXJuIG5ldyBMZXZlbFVQKGRiLCBvcHRpb25zLCBjYWxsYmFjaylcbiAgfVxuXG4gIHZhciBlcnJvclxuXG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpXG4gIHRoaXMuc2V0TWF4TGlzdGVuZXJzKEluZmluaXR5KVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB7fVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoIWRiIHx8IHR5cGVvZiBkYiAhPT0gJ29iamVjdCcpIHtcbiAgICBlcnJvciA9IG5ldyBJbml0aWFsaXphdGlvbkVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGFuIGFic3RyYWN0LWxldmVsZG93biBjb21wbGlhbnQgc3RvcmUnKVxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBlcnJvcilcbiAgICB9XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxuXG4gIGFzc2VydC5zdHJpY3RFcXVhbCh0eXBlb2YgZGIuc3RhdHVzLCAnc3RyaW5nJywgJy5zdGF0dXMgcmVxdWlyZWQsIG9sZCBhYnN0cmFjdC1sZXZlbGRvd24nKVxuXG4gIHRoaXMub3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucylcbiAgdGhpcy5fZGIgPSBkYlxuICB0aGlzLmRiID0gbmV3IERlZmVycmVkTGV2ZWxET1dOKGRiKVxuICB0aGlzLm9wZW4oY2FsbGJhY2spXG59XG5cbkxldmVsVVAucHJvdG90eXBlLmVtaXQgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXRcbkxldmVsVVAucHJvdG90eXBlLm9uY2UgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2VcbmluaGVyaXRzKExldmVsVVAsIEV2ZW50RW1pdHRlcilcblxuTGV2ZWxVUC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHByb21pc2VcblxuICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBwcm9taXNpZnkoKVxuICAgIHByb21pc2UgPSBjYWxsYmFjay5wcm9taXNlXG4gIH1cblxuICBpZiAodGhpcy5pc09wZW4oKSkge1xuICAgIHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2ssIG51bGwsIHNlbGYpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGlmICh0aGlzLl9pc09wZW5pbmcoKSkge1xuICAgIHRoaXMub25jZSgnb3BlbicsIGZ1bmN0aW9uICgpIHsgY2FsbGJhY2sobnVsbCwgc2VsZikgfSlcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgdGhpcy5lbWl0KCdvcGVuaW5nJylcblxuICB0aGlzLmRiLm9wZW4odGhpcy5vcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBPcGVuRXJyb3IoZXJyKSlcbiAgICB9XG4gICAgc2VsZi5kYiA9IHNlbGYuX2RiXG4gICAgY2FsbGJhY2sobnVsbCwgc2VsZilcbiAgICBzZWxmLmVtaXQoJ29wZW4nKVxuICAgIHNlbGYuZW1pdCgncmVhZHknKVxuICB9KVxuXG4gIHJldHVybiBwcm9taXNlXG59XG5cbkxldmVsVVAucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcHJvbWlzZVxuXG4gIGlmICghY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IHByb21pc2lmeSgpXG4gICAgcHJvbWlzZSA9IGNhbGxiYWNrLnByb21pc2VcbiAgfVxuXG4gIGlmICh0aGlzLmlzT3BlbigpKSB7XG4gICAgdGhpcy5kYi5jbG9zZShmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Nsb3NlZCcpXG4gICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfSlcbiAgICB0aGlzLmVtaXQoJ2Nsb3NpbmcnKVxuICAgIHRoaXMuZGIgPSBuZXcgRGVmZXJyZWRMZXZlbERPV04odGhpcy5fZGIpXG4gIH0gZWxzZSBpZiAodGhpcy5pc0Nsb3NlZCgpKSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhjYWxsYmFjaylcbiAgfSBlbHNlIGlmICh0aGlzLmRiLnN0YXR1cyA9PT0gJ2Nsb3NpbmcnKSB7XG4gICAgdGhpcy5vbmNlKCdjbG9zZWQnLCBjYWxsYmFjaylcbiAgfSBlbHNlIGlmICh0aGlzLl9pc09wZW5pbmcoKSkge1xuICAgIHRoaXMub25jZSgnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuY2xvc2UoY2FsbGJhY2spXG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlXG59XG5cbkxldmVsVVAucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZGIuc3RhdHVzID09PSAnb3Blbidcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUuX2lzT3BlbmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuZGIuc3RhdHVzID09PSAnb3BlbmluZydcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUuaXNDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAoL15jbG9zfG5ldy8pLnRlc3QodGhpcy5kYi5zdGF0dXMpXG59XG5cbkxldmVsVVAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXksIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChrZXkgPT09IG51bGwgfHwga2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgUmVhZEVycm9yKCdnZXQoKSByZXF1aXJlcyBhIGtleSBhcmd1bWVudCcpXG4gIH1cblxuICB2YXIgcHJvbWlzZVxuXG4gIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2sob3B0aW9ucywgY2FsbGJhY2spXG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gcHJvbWlzaWZ5KClcbiAgICBwcm9taXNlID0gY2FsbGJhY2sucHJvbWlzZVxuICB9XG5cbiAgaWYgKG1heWJlRXJyb3IodGhpcywgY2FsbGJhY2spKSB7IHJldHVybiBwcm9taXNlIH1cblxuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKVxuXG4gIHRoaXMuZGIuZ2V0KGtleSwgb3B0aW9ucywgZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBpZiAoKC9ub3Rmb3VuZC9pKS50ZXN0KGVycikgfHwgZXJyLm5vdEZvdW5kKSB7XG4gICAgICAgIGVyciA9IG5ldyBOb3RGb3VuZEVycm9yKCdLZXkgbm90IGZvdW5kIGluIGRhdGFiYXNlIFsnICsga2V5ICsgJ10nLCBlcnIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnIgPSBuZXcgUmVhZEVycm9yKGVycilcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpXG4gICAgfVxuICAgIGNhbGxiYWNrKG51bGwsIHZhbHVlKVxuICB9KVxuXG4gIHJldHVybiBwcm9taXNlXG59XG5cbkxldmVsVVAucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFdyaXRlRXJyb3IoJ3B1dCgpIHJlcXVpcmVzIGEga2V5IGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcHJvbWlzZVxuXG4gIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2sob3B0aW9ucywgY2FsbGJhY2spXG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gcHJvbWlzaWZ5KClcbiAgICBwcm9taXNlID0gY2FsbGJhY2sucHJvbWlzZVxuICB9XG5cbiAgaWYgKG1heWJlRXJyb3IodGhpcywgY2FsbGJhY2spKSB7IHJldHVybiBwcm9taXNlIH1cblxuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKVxuXG4gIHRoaXMuZGIucHV0KGtleSwgdmFsdWUsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IFdyaXRlRXJyb3IoZXJyKSlcbiAgICB9XG4gICAgc2VsZi5lbWl0KCdwdXQnLCBrZXksIHZhbHVlKVxuICAgIGNhbGxiYWNrKClcbiAgfSlcblxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5MZXZlbFVQLnByb3RvdHlwZS5kZWwgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoa2V5ID09PSBudWxsIHx8IGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFdyaXRlRXJyb3IoJ2RlbCgpIHJlcXVpcmVzIGEga2V5IGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcHJvbWlzZVxuXG4gIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2sob3B0aW9ucywgY2FsbGJhY2spXG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gcHJvbWlzaWZ5KClcbiAgICBwcm9taXNlID0gY2FsbGJhY2sucHJvbWlzZVxuICB9XG5cbiAgaWYgKG1heWJlRXJyb3IodGhpcywgY2FsbGJhY2spKSB7IHJldHVybiBwcm9taXNlIH1cblxuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKVxuXG4gIHRoaXMuZGIuZGVsKGtleSwgb3B0aW9ucywgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgV3JpdGVFcnJvcihlcnIpKVxuICAgIH1cbiAgICBzZWxmLmVtaXQoJ2RlbCcsIGtleSlcbiAgICBjYWxsYmFjaygpXG4gIH0pXG5cbiAgcmV0dXJuIHByb21pc2Vcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAoYXJyLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IEJhdGNoKHRoaXMpXG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIHRocm93IG5ldyBXcml0ZUVycm9yKCdiYXRjaCgpIHJlcXVpcmVzIGFuIGFycmF5IGFyZ3VtZW50JylcbiAgfVxuXG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgcHJvbWlzZVxuXG4gIGNhbGxiYWNrID0gZ2V0Q2FsbGJhY2sob3B0aW9ucywgY2FsbGJhY2spXG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIGNhbGxiYWNrID0gcHJvbWlzaWZ5KClcbiAgICBwcm9taXNlID0gY2FsbGJhY2sucHJvbWlzZVxuICB9XG5cbiAgaWYgKG1heWJlRXJyb3IodGhpcywgY2FsbGJhY2spKSB7IHJldHVybiBwcm9taXNlIH1cblxuICBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKVxuXG4gIHRoaXMuZGIuYmF0Y2goYXJyLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBXcml0ZUVycm9yKGVycikpXG4gICAgfVxuICAgIHNlbGYuZW1pdCgnYmF0Y2gnLCBhcnIpXG4gICAgY2FsbGJhY2soKVxuICB9KVxuXG4gIHJldHVybiBwcm9taXNlXG59XG5cbkxldmVsVVAucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRoaXMuZGIuaXRlcmF0b3Iob3B0aW9ucylcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUucmVhZFN0cmVhbSA9XG5MZXZlbFVQLnByb3RvdHlwZS5jcmVhdGVSZWFkU3RyZWFtID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IGV4dGVuZCh7IGtleXM6IHRydWUsIHZhbHVlczogdHJ1ZSB9LCBvcHRpb25zKVxuICBpZiAodHlwZW9mIG9wdGlvbnMubGltaXQgIT09ICdudW1iZXInKSB7IG9wdGlvbnMubGltaXQgPSAtMSB9XG4gIHJldHVybiBuZXcgSXRlcmF0b3JTdHJlYW0odGhpcy5kYi5pdGVyYXRvcihvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUua2V5U3RyZWFtID1cbkxldmVsVVAucHJvdG90eXBlLmNyZWF0ZUtleVN0cmVhbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLmNyZWF0ZVJlYWRTdHJlYW0oZXh0ZW5kKG9wdGlvbnMsIHsga2V5czogdHJ1ZSwgdmFsdWVzOiBmYWxzZSB9KSlcbn1cblxuTGV2ZWxVUC5wcm90b3R5cGUudmFsdWVTdHJlYW0gPVxuTGV2ZWxVUC5wcm90b3R5cGUuY3JlYXRlVmFsdWVTdHJlYW0gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gdGhpcy5jcmVhdGVSZWFkU3RyZWFtKGV4dGVuZChvcHRpb25zLCB7IGtleXM6IGZhbHNlLCB2YWx1ZXM6IHRydWUgfSkpXG59XG5cbkxldmVsVVAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJ0xldmVsVVAnXG59XG5cbmZ1bmN0aW9uIG1heWJlRXJyb3IgKGRiLCBjYWxsYmFjaykge1xuICBpZiAoIWRiLl9pc09wZW5pbmcoKSAmJiAhZGIuaXNPcGVuKCkpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNrLCBuZXcgUmVhZEVycm9yKCdEYXRhYmFzZSBpcyBub3Qgb3BlbicpKVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuTGV2ZWxVUC5lcnJvcnMgPSBlcnJvcnNcbm1vZHVsZS5leHBvcnRzID0gTGV2ZWxVUC5kZWZhdWx0ID0gTGV2ZWxVUFxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL3Byb21pc2lmeS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbGV2ZWx1cC9saWIvcHJvbWlzaWZ5LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBwcm9taXNpZnkgKCkge1xuICB2YXIgY2FsbGJhY2tcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayAoZXJyLCB2YWx1ZSkge1xuICAgICAgaWYgKGVycikgcmVqZWN0KGVycilcbiAgICAgIGVsc2UgcmVzb2x2ZSh2YWx1ZSlcbiAgICB9XG4gIH0pXG4gIGNhbGxiYWNrLnByb21pc2UgPSBwcm9taXNlXG4gIHJldHVybiBjYWxsYmFja1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb21pc2lmeVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9sdGd0L2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvbHRndC9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHtcbmV4cG9ydHMuY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgaWYoQnVmZmVyLmlzQnVmZmVyKGEpKSB7XG4gICAgdmFyIGwgPSBNYXRoLm1pbihhLmxlbmd0aCwgYi5sZW5ndGgpXG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNtcCA9IGFbaV0gLSBiW2ldXG4gICAgICBpZihjbXApIHJldHVybiBjbXBcbiAgICB9XG4gICAgcmV0dXJuIGEubGVuZ3RoIC0gYi5sZW5ndGhcbiAgfVxuXG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMFxufVxuXG4vLyB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgYWJzdHJhY3QtbGV2ZWxkb3duIHRlc3RzXG4vLyBudWxsaXNoIG9yIGVtcHR5IHN0cmluZ3MuXG4vLyBJIGNvdWxkIHVzZSAhIXZhbCBidXQgSSB3YW50IHRvIHBlcm1pdCBudW1iZXJzIGFuZCBib29sZWFucyxcbi8vIGlmIHBvc3NpYmxlLlxuXG5mdW5jdGlvbiBpc0RlZiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09ICcnXG59XG5cbmZ1bmN0aW9uIGhhcyAocmFuZ2UsIG5hbWUpIHtcbiAgcmV0dXJuIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJhbmdlLCBuYW1lKVxufVxuXG5mdW5jdGlvbiBoYXNLZXkocmFuZ2UsIG5hbWUpIHtcbiAgcmV0dXJuIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJhbmdlLCBuYW1lKSAmJiBuYW1lXG59XG5cbnZhciBsb3dlckJvdW5kS2V5ID0gZXhwb3J0cy5sb3dlckJvdW5kS2V5ID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICBoYXNLZXkocmFuZ2UsICdndCcpXG4gICAgfHwgaGFzS2V5KHJhbmdlLCAnZ3RlJylcbiAgICB8fCBoYXNLZXkocmFuZ2UsICdtaW4nKVxuICAgIHx8IChyYW5nZS5yZXZlcnNlID8gaGFzS2V5KHJhbmdlLCAnZW5kJykgOiBoYXNLZXkocmFuZ2UsICdzdGFydCcpKVxuICAgIHx8IHVuZGVmaW5lZFxuICAgIClcbn1cblxudmFyIGxvd2VyQm91bmQgPSBleHBvcnRzLmxvd2VyQm91bmQgPSBmdW5jdGlvbiAocmFuZ2UsIGRlZikge1xuICB2YXIgayA9IGxvd2VyQm91bmRLZXkocmFuZ2UpXG4gIHJldHVybiBrID8gcmFuZ2Vba10gOiBkZWZcbn1cblxudmFyIGxvd2VyQm91bmRJbmNsdXNpdmUgPSBleHBvcnRzLmxvd2VyQm91bmRJbmNsdXNpdmUgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgcmV0dXJuIGhhcyhyYW5nZSwgJ2d0JykgPyBmYWxzZSA6IHRydWVcbn1cblxudmFyIHVwcGVyQm91bmRJbmNsdXNpdmUgPSBleHBvcnRzLnVwcGVyQm91bmRJbmNsdXNpdmUgPVxuICBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICByZXR1cm4gKGhhcyhyYW5nZSwgJ2x0JykgLyomJiAhcmFuZ2UubWF4RXgqLykgPyBmYWxzZSA6IHRydWVcbiAgfVxuXG52YXIgbG93ZXJCb3VuZEV4Y2x1c2l2ZSA9IGV4cG9ydHMubG93ZXJCb3VuZEV4Y2x1c2l2ZSA9XG4gIGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiAhbG93ZXJCb3VuZEluY2x1c2l2ZShyYW5nZSlcbiAgfVxuXG52YXIgdXBwZXJCb3VuZEV4Y2x1c2l2ZSA9IGV4cG9ydHMudXBwZXJCb3VuZEV4Y2x1c2l2ZSA9XG4gIGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiAhdXBwZXJCb3VuZEluY2x1c2l2ZShyYW5nZSlcbiAgfVxuXG52YXIgdXBwZXJCb3VuZEtleSA9IGV4cG9ydHMudXBwZXJCb3VuZEtleSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgIHJldHVybiAoXG4gICAgICAgaGFzS2V5KHJhbmdlLCAnbHQnKVxuICAgIHx8IGhhc0tleShyYW5nZSwgJ2x0ZScpXG4gICAgfHwgaGFzS2V5KHJhbmdlLCAnbWF4JylcbiAgICB8fCAocmFuZ2UucmV2ZXJzZSA/IGhhc0tleShyYW5nZSwgJ3N0YXJ0JykgOiBoYXNLZXkocmFuZ2UsICdlbmQnKSlcbiAgICB8fCB1bmRlZmluZWRcbiAgICApXG59XG5cbnZhciB1cHBlckJvdW5kID0gZXhwb3J0cy51cHBlckJvdW5kID0gZnVuY3Rpb24gKHJhbmdlLCBkZWYpIHtcbiAgdmFyIGsgPSB1cHBlckJvdW5kS2V5KHJhbmdlKVxuICByZXR1cm4gayA/IHJhbmdlW2tdIDogZGVmXG59XG5cbmV4cG9ydHMuc3RhcnQgPSBmdW5jdGlvbiAocmFuZ2UsIGRlZikge1xuICByZXR1cm4gcmFuZ2UucmV2ZXJzZSA/IHVwcGVyQm91bmQocmFuZ2UsIGRlZikgOiBsb3dlckJvdW5kKHJhbmdlLCBkZWYpXG59XG5leHBvcnRzLmVuZCA9IGZ1bmN0aW9uIChyYW5nZSwgZGVmKSB7XG4gIHJldHVybiByYW5nZS5yZXZlcnNlID8gbG93ZXJCb3VuZChyYW5nZSwgZGVmKSA6IHVwcGVyQm91bmQocmFuZ2UsIGRlZilcbn1cbmV4cG9ydHMuc3RhcnRJbmNsdXNpdmUgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgcmV0dXJuIChcbiAgICByYW5nZS5yZXZlcnNlXG4gID8gdXBwZXJCb3VuZEluY2x1c2l2ZShyYW5nZSlcbiAgOiBsb3dlckJvdW5kSW5jbHVzaXZlKHJhbmdlKVxuICApXG59XG5leHBvcnRzLmVuZEluY2x1c2l2ZSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICByZXR1cm4gKFxuICAgIHJhbmdlLnJldmVyc2VcbiAgPyBsb3dlckJvdW5kSW5jbHVzaXZlKHJhbmdlKVxuICA6IHVwcGVyQm91bmRJbmNsdXNpdmUocmFuZ2UpXG4gIClcbn1cblxuZnVuY3Rpb24gaWQgKGUpIHsgcmV0dXJuIGUgfVxuXG5leHBvcnRzLnRvTHRndCA9IGZ1bmN0aW9uIChyYW5nZSwgX3JhbmdlLCBtYXAsIGxvd2VyLCB1cHBlcikge1xuICBfcmFuZ2UgPSBfcmFuZ2UgfHwge31cbiAgbWFwID0gbWFwIHx8IGlkXG4gIHZhciBkZWZhdWx0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzXG4gIHZhciBsYiA9IGV4cG9ydHMubG93ZXJCb3VuZEtleShyYW5nZSlcbiAgdmFyIHViID0gZXhwb3J0cy51cHBlckJvdW5kS2V5KHJhbmdlKVxuICBpZihsYikge1xuICAgIGlmKGxiID09PSAnZ3QnKSBfcmFuZ2UuZ3QgPSBtYXAocmFuZ2UuZ3QsIGZhbHNlKVxuICAgIGVsc2UgICAgICAgICAgICBfcmFuZ2UuZ3RlID0gbWFwKHJhbmdlW2xiXSwgZmFsc2UpXG4gIH1cbiAgZWxzZSBpZihkZWZhdWx0cylcbiAgICBfcmFuZ2UuZ3RlID0gbWFwKGxvd2VyLCBmYWxzZSlcblxuICBpZih1Yikge1xuICAgIGlmKHViID09PSAnbHQnKSBfcmFuZ2UubHQgPSBtYXAocmFuZ2UubHQsIHRydWUpXG4gICAgZWxzZSAgICAgICAgICAgIF9yYW5nZS5sdGUgPSBtYXAocmFuZ2VbdWJdLCB0cnVlKVxuICB9XG4gIGVsc2UgaWYoZGVmYXVsdHMpXG4gICAgX3JhbmdlLmx0ZSA9IG1hcCh1cHBlciwgdHJ1ZSlcblxuICBpZihyYW5nZS5yZXZlcnNlICE9IG51bGwpXG4gICAgX3JhbmdlLnJldmVyc2UgPSAhIXJhbmdlLnJldmVyc2VcblxuICAvL2lmIHJhbmdlIHdhcyB1c2VkIG11dGFibHlcbiAgLy8oaW4gbGV2ZWwtc3VibGV2ZWwgaXQncyBwYXJ0IG9mIGFuIG9wdGlvbnMgb2JqZWN0XG4gIC8vdGhhdCBoYXMgbW9yZSBwcm9wZXJ0aWVzIG9uIGl0LilcbiAgaWYoaGFzKF9yYW5nZSwgJ21heCcpKSAgIGRlbGV0ZSBfcmFuZ2UubWF4XG4gIGlmKGhhcyhfcmFuZ2UsICdtaW4nKSkgICBkZWxldGUgX3JhbmdlLm1pblxuICBpZihoYXMoX3JhbmdlLCAnc3RhcnQnKSkgZGVsZXRlIF9yYW5nZS5zdGFydFxuICBpZihoYXMoX3JhbmdlLCAnZW5kJykpICAgZGVsZXRlIF9yYW5nZS5lbmRcblxuICByZXR1cm4gX3JhbmdlXG59XG5cbmV4cG9ydHMuY29udGFpbnMgPSBmdW5jdGlvbiAocmFuZ2UsIGtleSwgY29tcGFyZSkge1xuICBjb21wYXJlID0gY29tcGFyZSB8fCBleHBvcnRzLmNvbXBhcmVcblxuICB2YXIgbGIgPSBsb3dlckJvdW5kKHJhbmdlKVxuICBpZihpc0RlZihsYikpIHtcbiAgICB2YXIgY21wID0gY29tcGFyZShrZXksIGxiKVxuICAgIGlmKGNtcCA8IDAgfHwgKGNtcCA9PT0gMCAmJiBsb3dlckJvdW5kRXhjbHVzaXZlKHJhbmdlKSkpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciB1YiA9IHVwcGVyQm91bmQocmFuZ2UpXG4gIGlmKGlzRGVmKHViKSkge1xuICAgIHZhciBjbXAgPSBjb21wYXJlKGtleSwgdWIpXG4gICAgaWYoY21wID4gMCB8fCAoY21wID09PSAwKSAmJiB1cHBlckJvdW5kRXhjbHVzaXZlKHJhbmdlKSlcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0cy5maWx0ZXIgPSBmdW5jdGlvbiAocmFuZ2UsIGNvbXBhcmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5jb250YWlucyhyYW5nZSwga2V5LCBjb21wYXJlKVxuICB9XG59XG5cblxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9idWZmZXIvaW5kZXguanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCIpLkJ1ZmZlcikpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJyL3Byci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3Byci9wcnIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiFcbiAgKiBwcnJcbiAgKiAoYykgMjAxMyBSb2QgVmFnZyA8cm9kQHZhZ2cub3JnPlxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ydmFnZy9wcnJcbiAgKiBMaWNlbnNlOiBNSVRcbiAgKi9cblxuKGZ1bmN0aW9uIChuYW1lLCBjb250ZXh0LCBkZWZpbml0aW9uKSB7XG4gIGlmICggdHJ1ZSAmJiBtb2R1bGUuZXhwb3J0cylcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKVxuICBlbHNlXG4gICAgY29udGV4dFtuYW1lXSA9IGRlZmluaXRpb24oKVxufSkoJ3BycicsIHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gIHZhciBzZXRQcm9wZXJ0eSA9IHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBmdW5jdGlvbiAob2JqLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIG9wdGlvbnMpXG4gICAgICAgICAgcmV0dXJuIG9ialxuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uIChvYmosIGtleSwgb3B0aW9ucykgeyAvLyA8IGVzNVxuICAgICAgICAgIG9ialtrZXldID0gb3B0aW9ucy52YWx1ZVxuICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgfVxuXG4gICAgLCBtYWtlT3B0aW9ucyA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgb28gPSB0eXBlb2Ygb3B0aW9ucyA9PSAnb2JqZWN0J1xuICAgICAgICAgICwgb3MgPSAhb28gJiYgdHlwZW9mIG9wdGlvbnMgPT0gJ3N0cmluZydcbiAgICAgICAgICAsIG9wID0gZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9vXG4gICAgICAgICAgICAgICAgPyAhIW9wdGlvbnNbcF1cbiAgICAgICAgICAgICAgICA6IG9zXG4gICAgICAgICAgICAgICAgICA/IG9wdGlvbnMuaW5kZXhPZihwWzBdKSA+IC0xXG4gICAgICAgICAgICAgICAgICA6IGZhbHNlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVudW1lcmFibGUgICA6IG9wKCdlbnVtZXJhYmxlJylcbiAgICAgICAgICAsIGNvbmZpZ3VyYWJsZSA6IG9wKCdjb25maWd1cmFibGUnKVxuICAgICAgICAgICwgd3JpdGFibGUgICAgIDogb3AoJ3dyaXRhYmxlJylcbiAgICAgICAgICAsIHZhbHVlICAgICAgICA6IHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICwgcHJyID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIga1xuXG4gICAgICAgIG9wdGlvbnMgPSBtYWtlT3B0aW9ucyh2YWx1ZSwgb3B0aW9ucylcblxuICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGZvciAoayBpbiBrZXkpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChrZXksIGspKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBrZXlba11cbiAgICAgICAgICAgICAgc2V0UHJvcGVydHkob2JqLCBrLCBvcHRpb25zKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2JqXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2V0UHJvcGVydHkob2JqLCBrZXksIG9wdGlvbnMpXG4gICAgICB9XG5cbiAgcmV0dXJuIHByclxufSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3NhZmUtYnVmZmVyL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBidWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCIpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgc2FmZS1idWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanNcIikuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy90eXBlZGFycmF5LXRvLWJ1ZmZlci9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy90eXBlZGFycmF5LXRvLWJ1ZmZlci9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oQnVmZmVyKSB7LyoqXG4gKiBDb252ZXJ0IGEgdHlwZWQgYXJyYXkgdG8gYSBCdWZmZXIgd2l0aG91dCBhIGNvcHlcbiAqXG4gKiBBdXRob3I6ICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogTGljZW5zZTogIE1JVFxuICpcbiAqIGBucG0gaW5zdGFsbCB0eXBlZGFycmF5LXRvLWJ1ZmZlcmBcbiAqL1xuXG52YXIgaXNUeXBlZEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaXMtdHlwZWRhcnJheSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pcy10eXBlZGFycmF5L2luZGV4LmpzXCIpLnN0cmljdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHR5cGVkYXJyYXlUb0J1ZmZlciAoYXJyKSB7XG4gIGlmIChpc1R5cGVkQXJyYXkoYXJyKSkge1xuICAgIC8vIFRvIGF2b2lkIGEgY29weSwgdXNlIHRoZSB0eXBlZCBhcnJheSdzIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIgdG8gYmFjayBuZXcgQnVmZmVyXG4gICAgdmFyIGJ1ZiA9IEJ1ZmZlci5mcm9tKGFyci5idWZmZXIpXG4gICAgaWYgKGFyci5ieXRlTGVuZ3RoICE9PSBhcnIuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgIC8vIFJlc3BlY3QgdGhlIFwidmlld1wiLCBpLmUuIGJ5dGVPZmZzZXQgYW5kIGJ5dGVMZW5ndGgsIHdpdGhvdXQgZG9pbmcgYSBjb3B5XG4gICAgICBidWYgPSBidWYuc2xpY2UoYXJyLmJ5dGVPZmZzZXQsIGFyci5ieXRlT2Zmc2V0ICsgYXJyLmJ5dGVMZW5ndGgpXG4gICAgfVxuICAgIHJldHVybiBidWZcbiAgfSBlbHNlIHtcbiAgICAvLyBQYXNzIHRocm91Z2ggYWxsIG90aGVyIHR5cGVzIHRvIGBCdWZmZXIuZnJvbWBcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oYXJyKVxuICB9XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2J1ZmZlci9pbmRleC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanNcIikuQnVmZmVyKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkge1xuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTtcblxuLyoqXG4gKiBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICogUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLm5vRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRocm93RGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgdGhyb3cgYW4gRXJyb3Igd2hlbiBpbnZva2VkLlxuICpcbiAqIElmIGBsb2NhbFN0b3JhZ2UudHJhY2VEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9uc1xuICogd2lsbCBpbnZva2UgYGNvbnNvbGUudHJhY2UoKWAgaW5zdGVhZCBvZiBgY29uc29sZS5lcnJvcigpYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIHRoZSBmdW5jdGlvbiB0byBkZXByZWNhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgLSB0aGUgc3RyaW5nIHRvIHByaW50IHRvIHRoZSBjb25zb2xlIHdoZW4gYGZuYCBpcyBpbnZva2VkXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IGEgbmV3IFwiZGVwcmVjYXRlZFwiIHZlcnNpb24gb2YgYGZuYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZXByZWNhdGUgKGZuLCBtc2cpIHtcbiAgaWYgKGNvbmZpZygnbm9EZXByZWNhdGlvbicpKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAoY29uZmlnKCd0aHJvd0RlcHJlY2F0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKGNvbmZpZygndHJhY2VEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgYGxvY2FsU3RvcmFnZWAgZm9yIGJvb2xlYW4gdmFsdWVzIGZvciB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvbmZpZyAobmFtZSkge1xuICAvLyBhY2Nlc3NpbmcgZ2xvYmFsLmxvY2FsU3RvcmFnZSBjYW4gdHJpZ2dlciBhIERPTUV4Y2VwdGlvbiBpbiBzYW5kYm94ZWQgaWZyYW1lc1xuICB0cnkge1xuICAgIGlmICghZ2xvYmFsLmxvY2FsU3RvcmFnZSkgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB2YWwgPSBnbG9iYWwubG9jYWxTdG9yYWdlW25hbWVdO1xuICBpZiAobnVsbCA9PSB2YWwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIFN0cmluZyh2YWwpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcbn1cblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3V0aWwvc3VwcG9ydC9pc0J1ZmZlckJyb3dzZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy91dGlsL3V0aWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3N1cHBvcnQvaXNCdWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qc1wiKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaW5oZXJpdHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy94dGVuZC9pbW11dGFibGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QTkdGaWxlTWl4aW5zLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUE5HRmlsZU1peGlucy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0cnVlKSB7XG4gICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIGNhdXNhbC1uZXQudXRpbHMgKi8gXCJjYXVzYWwtbmV0LnV0aWxzXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH0gZWxzZSB7IHZhciBtb2Q7IH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChfZXhwb3J0cywgX2NhdXNhbE5ldCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIF9leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbiAgY29uc3QgUE5HRmlsZU1peGlucyA9IFN0b3JhZ2VDbGFzcyA9PiBjbGFzcyBleHRlbmRzIFN0b3JhZ2VDbGFzcyB7XG4gICAgYXN5bmMgcmVhZFBOR0ZpbGUoZmlsZVBhdGgpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJlYWRGaWxlKGZpbGVQYXRoLCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtICB7fSBmaWxlUGF0aFxuICAgICAqIEBwYXJhbSAge30gZGF0YVxuICAgICAqL1xuXG5cbiAgICBhc3luYyB3cml0ZVBOR0ZpbGUoZmlsZVBhdGgsIGltZ0J1ZmZlcikge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMud3JpdGVGaWxlKGZpbGVQYXRoLCBpbWdCdWZmZXIpO1xuICAgIH1cblxuICAgIGFzeW5jIGZldGNoUE5HKHVybCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IHJlYWRlciA9IGF3YWl0IF9jYXVzYWxOZXQuRmV0Y2guc3RyZWFtRGF0YSh1cmwpO1xuICAgICAgICBsZXQgcG5nID0gbmV3IF9jYXVzYWxOZXQuUE5HKCk7XG4gICAgICAgIHBuZy5vbigncGFyc2VkJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlc29sdmUodGhpcy5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHBuZy5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWRlci5waXBlKHBuZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBmZXRjaFBOR0ZpbGUodXJsLCBmaWxlUGF0aCkge1xuICAgICAgbGV0IGRhdGEgPSBhd2FpdCB0aGlzLmZldGNoUE5HKHVybCk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy53cml0ZVBOR0ZpbGUoZmlsZVBhdGgsIGRhdGEpO1xuICAgIH1cblxuICAgIGFzeW5jIHN0cmVhbVBOR0ZpbGUodXJsLCBmaWxlUGF0aCwgdHJhbnNmcm9tRm4pIHtcbiAgICAgIHRocm93IEVycm9yKCdpbXBsZW1lbnQgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgfTtcblxuICB2YXIgX2RlZmF1bHQgPSBQTkdGaWxlTWl4aW5zO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvYmFzZVN0b3JhZ2UuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvYmFzZVN0b3JhZ2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0c10sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9IGVsc2UgeyB2YXIgbW9kOyB9XG59KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4gIGNsYXNzIGJhc2VTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihzdG9yYWdlKSB7XG4gICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIH1cblxuICAgIGdldCBDb3JlU3RvcmFnZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2U7XG4gICAgfVxuXG4gIH1cblxuICBfZXhwb3J0cy5kZWZhdWx0ID0gYmFzZVN0b3JhZ2U7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbmRleERCU3RvcmFnZSAqLyBcIi4vc3JjL2luZGV4REJTdG9yYWdlLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Jhc2VTdG9yYWdlICovIFwiLi9zcmMvYmFzZVN0b3JhZ2UuanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUE5HRmlsZU1peGlucyAqLyBcIi4vc3JjL1BOR0ZpbGVNaXhpbnMuanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3RvcmFnZS5taXhpbnMgKi8gXCIuL3NyYy9zdG9yYWdlLm1peGlucy5qc1wiKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9IGVsc2UgeyB2YXIgbW9kOyB9XG59KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMsIF9pbmRleERCU3RvcmFnZSwgX2Jhc2VTdG9yYWdlLCBfUE5HRmlsZU1peGlucywgX3N0b3JhZ2UpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJpbmRleERCU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfaW5kZXhEQlN0b3JhZ2UuZGVmYXVsdDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiQmFzZVN0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2Jhc2VTdG9yYWdlLmRlZmF1bHQ7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIlBOR0ZpbGVNaXhpbnNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX1BOR0ZpbGVNaXhpbnMuZGVmYXVsdDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiU3RvcmFnZU1peGluc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfc3RvcmFnZS5kZWZhdWx0O1xuICAgIH1cbiAgfSk7XG4gIF9pbmRleERCU3RvcmFnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luZGV4REJTdG9yYWdlKTtcbiAgX2Jhc2VTdG9yYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZVN0b3JhZ2UpO1xuICBfUE5HRmlsZU1peGlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BOR0ZpbGVNaXhpbnMpO1xuICBfc3RvcmFnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0b3JhZ2UpO1xufSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL2luZGV4REJTdG9yYWdlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4REJTdG9yYWdlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0cnVlKSB7XG4gICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIGNhdXNhbC1uZXQudXRpbHMgKi8gXCJjYXVzYWwtbmV0LnV0aWxzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Jhc2VTdG9yYWdlICovIFwiLi9zcmMvYmFzZVN0b3JhZ2UuanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUE5HRmlsZU1peGlucyAqLyBcIi4vc3JjL1BOR0ZpbGVNaXhpbnMuanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW5kZXhEQlN0b3JhZ2UubWl4aW5zLm5vZGUgKi8gXCIuL3NyYy9pbmRleERCU3RvcmFnZS5taXhpbnMubm9kZS5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbmRleERCU3RvcmFnZS5taXhpbnMud2ViICovIFwiLi9zcmMvaW5kZXhEQlN0b3JhZ2UubWl4aW5zLndlYi5qc1wiKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9IGVsc2UgeyB2YXIgbW9kOyB9XG59KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMsIF9jYXVzYWxOZXQsIF9iYXNlU3RvcmFnZSwgX1BOR0ZpbGVNaXhpbnMsIF9pbmRleERCU3RvcmFnZU1peGlucywgX2luZGV4REJTdG9yYWdlTWl4aW5zMikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgX2V4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgX2Jhc2VTdG9yYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZVN0b3JhZ2UpO1xuICBfUE5HRmlsZU1peGlucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BOR0ZpbGVNaXhpbnMpO1xuICBfaW5kZXhEQlN0b3JhZ2VNaXhpbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleERCU3RvcmFnZU1peGlucyk7XG4gIF9pbmRleERCU3RvcmFnZU1peGluczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmRleERCU3RvcmFnZU1peGluczIpO1xuXG4gIGNsYXNzIEluZGV4REJTdG9yYWdlIGV4dGVuZHMgX2NhdXNhbE5ldC5QbGF0Zm9ybS5taXhXaXRoKF9iYXNlU3RvcmFnZS5kZWZhdWx0LCB7XG4gICAgJ25vZGUnOiBbX2luZGV4REJTdG9yYWdlTWl4aW5zLmRlZmF1bHQsIF9QTkdGaWxlTWl4aW5zLmRlZmF1bHRdLFxuICAgICd3ZWInOiBbX2luZGV4REJTdG9yYWdlTWl4aW5zMi5kZWZhdWx0LCBfUE5HRmlsZU1peGlucy5kZWZhdWx0XVxuICB9KSB7XG4gICAgcmVmb3JtYXRlTmFtZShrZXkpIHtcbiAgICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXC97MiwzLDQsNX0vZywgJy8nKTtcblxuICAgICAgaWYgKGtleVswXSA9PT0gJy8nKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJy8nICsga2V5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNoZWNrRmlsZU5hbWVGbihuYW1lKSB7XG4gICAgICB2YXIgcGF0dGVybiA9IG5hbWU7XG4gICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKGBeJHtwYXR0ZXJufS4qYCwgJ2cnKTtcbiAgICAgIHJldHVybiBmaWxlTmFtZSA9PiBmaWxlTmFtZS5tYXRjaChyZWdleCkgfHwgW107XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0SXRlbShrZXksIGFzQnVmZmVyID0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5nZXQoa2V5LCB7XG4gICAgICAgICAgYXNCdWZmZXJcbiAgICAgICAgfSwgKGVyciwgZGF0YSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3Ioe1xuICAgICAgICAgICAgICBlcnJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVqZWN0KCdlcnJvciByZWFkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICBba2V5XTogZGF0YVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHNldEl0ZW0oa2V5LCBkYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBrZXkgPSB0aGlzLnJlZm9ybWF0ZU5hbWUoa2V5KTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLnB1dChrZXksIGRhdGEsIGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcih7XG4gICAgICAgICAgICAgIGVyclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWplY3QoJ2Vycm9yIHdyaXRlJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsSXRlbShrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGtleSA9IHRoaXMucmVmb3JtYXRlTmFtZShrZXkpO1xuICAgICAgICB0aGlzLnN0b3JhZ2UuZGVsKGtleSwgZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHtcbiAgICAgICAgICAgICAgZXJyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igd3JpdGUnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBiYXRjaChvcHMpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5iYXRjaChvcHMsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHtcbiAgICAgICAgICAgICAgZXJyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb3BzJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUob3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlSXRlbShmaWxlUGF0aCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdGhpcy5zdG9yYWdlLmRlbChmaWxlUGF0aCwgZXJyID0+IHtcbiAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHtcbiAgICAgICAgICAgICAgZXJyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb3BzJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUob3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlRmlsZUJ5UHJlZml4KGZpbGVQYXRoKSB7XG4gICAgICBjb25zdCBEZWxPcCA9IGtleSA9PiAoe1xuICAgICAgICB0eXBlOiAnZGVsJyxcbiAgICAgICAga2V5OiBrZXlcbiAgICAgIH0pO1xuXG4gICAgICBsZXQgZmlsZUxpc3QgPSBhd2FpdCB0aGlzLmdldEZpbGVMaXN0KGZpbGVQYXRoKTtcbiAgICAgIGxldCBkZWxGaWxlT3BzID0gZmlsZUxpc3QubWFwKGYgPT4gRGVsT3AoZikpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYmF0Y2goZGVsRmlsZU9wcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RmlsZUxpc3QoZmlsZVBhdGggPSAnLycpIHtcbiAgICAgIGNvbnN0IE5hbWVUZXN0ZXIgPSB0aGlzLmNyZWF0ZUNoZWNrRmlsZU5hbWVGbihmaWxlUGF0aCk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBsZXQgZmlsZUxpc3QgPSBbXTtcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNyZWF0ZUtleVN0cmVhbSgpLm9uKCdkYXRhJywga2V5ID0+IHtcbiAgICAgICAgICBrZXkgPSBrZXkudG9TdHJpbmcoJ3V0ZjgnKTtcblxuICAgICAgICAgIGlmIChOYW1lVGVzdGVyKGtleSkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBmaWxlTGlzdC5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5vbignY2xvc2UnLCAoKSA9PiByZXNvbHZlKGZpbGVMaXN0KSkub24oJ2VuZCcsICgpID0+IHJlc29sdmUoZmlsZUxpc3QpKS5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIGdldEZpbGVMaXN0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBhc3luY1xuICAgICAqIEBwYXJhbSAge30gZmlsZVBhdGhcbiAgICAgKi9cblxuXG4gICAgYXN5bmMgcmVhZEZpbGUoZmlsZVBhdGgpIHtcbiAgICAgIGxldCBpdGVtID0gYXdhaXQgdGhpcy5nZXRJdGVtKGZpbGVQYXRoKTtcbiAgICAgIHJldHVybiBpdGVtW2ZpbGVQYXRoXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtICB7fSBmaWxlUGF0aFxuICAgICAqIEBwYXJhbSAge30gZGF0YVxuICAgICAqL1xuXG5cbiAgICBhc3luYyB3cml0ZUZpbGUoZmlsZVBhdGgsIGRhdGEpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnNldEl0ZW0oZmlsZVBhdGgsIGRhdGEpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZUZpbGUoZmlsZVBhdGgpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRlbEl0ZW0oZmlsZVBhdGgpO1xuICAgIH1cblxuICAgIGFzeW5jIGZldGNoRmlsZSh1cmwsIGZpbGVQYXRoKSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBfY2F1c2FsTmV0LkZldGNoLmZldGNoRGF0YSh1cmwpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMud3JpdGVGaWxlKGZpbGVQYXRoLCByZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3RyZWFtRmlsZSh1cmwsIGZpbGVQYXRoLCB0cmFuc2Zvcm1lciA9IG51bGwpIHtcbiAgICAgIHRocm93IEVycm9yKCdpbXBsZW1lbnQgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgfVxuXG4gIHZhciBfZGVmYXVsdCA9IG5ldyBJbmRleERCU3RvcmFnZSgpO1xuXG4gIF9leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9pbmRleERCU3RvcmFnZS5taXhpbnMubm9kZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9pbmRleERCU3RvcmFnZS5taXhpbnMubm9kZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHJ1ZSkge1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBsZXZlbHVwICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2xldmVsdXAuanNcIildLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgfSBlbHNlIHsgdmFyIG1vZDsgfVxufSkodGhpcywgZnVuY3Rpb24gKF9leHBvcnRzLCBfbGV2ZWx1cCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgX2V4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgX2xldmVsdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sZXZlbHVwKTtcblxuICBjb25zdCBMZXZlbERvd25NaXhpbnMgPSBTdG9yYWdlQ2xhc3MgPT4gY2xhc3MgZXh0ZW5kcyBTdG9yYWdlQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdmFyIGxldmVsZG93biA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGxldmVsZG93biAqLyBcImxldmVsZG93blwiKTtcblxuICAgICAgc3VwZXIoKDAsIF9sZXZlbHVwLmRlZmF1bHQpKGxldmVsZG93bignZGF0YScpKSk7XG4gICAgfVxuXG4gIH07XG5cbiAgdmFyIF9kZWZhdWx0ID0gTGV2ZWxEb3duTWl4aW5zO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaW5kZXhEQlN0b3JhZ2UubWl4aW5zLndlYi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2luZGV4REJTdG9yYWdlLm1peGlucy53ZWIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHJ1ZSkge1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBsZXZlbHVwICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2xldmVsdXAvbGliL2xldmVsdXAuanNcIildLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgfSBlbHNlIHsgdmFyIG1vZDsgfVxufSkodGhpcywgZnVuY3Rpb24gKF9leHBvcnRzLCBfbGV2ZWx1cCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgX2V4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgX2xldmVsdXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sZXZlbHVwKTtcblxuICBjb25zdCBMZXZlbEpTTWl4aW5zID0gU3RvcmFnZUNsYXNzID0+IGNsYXNzIGV4dGVuZHMgU3RvcmFnZUNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHZhciBsZXZlbGpzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgbGV2ZWwtanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvbGV2ZWwtanMvaW5kZXguanNcIik7XG5cbiAgICAgIHN1cGVyKCgwLCBfbGV2ZWx1cC5kZWZhdWx0KShsZXZlbGpzKCdkYXRhJykpKTtcbiAgICB9XG5cbiAgfTtcblxuICB2YXIgX2RlZmF1bHQgPSBMZXZlbEpTTWl4aW5zO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvc3RvcmFnZS5taXhpbnMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvc3RvcmFnZS5taXhpbnMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0c10sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9IGVsc2UgeyB2YXIgbW9kOyB9XG59KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4gIGNvbnN0IFN0b3JhZ2VNaXhpbnMgPSBCYXNlQ2xhc3MgPT4gY2xhc3MgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xuICAgIGFzeW5jIHN0b3JhZ2VTdW1tYXJ5KCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RvcmFnZS5nZXRGaWxlTGlzdCgpO1xuICAgIH1cblxuICAgIHNldCBTdG9yYWdlKHN0b3JhZ2UpIHtcbiAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgfVxuXG4gICAgZ2V0IFN0b3JhZ2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9yYWdlO1xuICAgIH1cblxuICB9O1xuXG4gIHZhciBfZGVmYXVsdCA9IFN0b3JhZ2VNaXhpbnM7XG4gIF9leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMDpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogdXRpbCAoaWdub3JlZCkgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyogKGlnbm9yZWQpICovXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiB1dGlsIChpZ25vcmVkKSAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKiAoaWdub3JlZCkgKi9cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiY2F1c2FsLW5ldC51dGlsc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJjYXVzYWwtbmV0LnV0aWxzXCIgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9jYXVzYWxfbmV0X3V0aWxzX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImxldmVsZG93blwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwibGV2ZWwtanNcIiAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9sZXZlbGRvd25fXztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM04wYjNKaFoyVXZkMlZpY0dGamF5OTFibWwyWlhKellXeE5iMlIxYkdWRVpXWnBibWwwYVc5dUlpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzkzWldKd1lXTnJMMkp2YjNSemRISmhjQ0lzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMkZ6YzJWeWRDOWhjM05sY25RdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwySmhjMlUyTkMxcWN5OXBibVJsZUM1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdlluVm1abVZ5TDJsdVpHVjRMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZjM1J2Y21GblpTOHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlrWldabGNuSmxaQzFzWlhabGJHUnZkMjR2WkdWbVpYSnlaV1F0YVhSbGNtRjBiM0l1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzl6ZEc5eVlXZGxMeTlvYjIxbEwyaDFlVzVvYm1kMWVXVnVMMmRwZEdoMVlpOWpZWFZ6WVd4cGRIa3ZibTlrWlY5dGIyUjFiR1Z6TDJSbFptVnljbVZrTFd4bGRtVnNaRzkzYmk5a1pXWmxjbkpsWkMxc1pYWmxiR1J2ZDI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyUmxabVZ5Y21Wa0xXeGxkbVZzWkc5M2JpOXViMlJsWDIxdlpIVnNaWE12WVdKemRISmhZM1F0YkdWMlpXeGtiM2R1TDJGaWMzUnlZV04wTFdOb1lXbHVaV1F0WW1GMFkyZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMlJsWm1WeWNtVmtMV3hsZG1Wc1pHOTNiaTl1YjJSbFgyMXZaSFZzWlhNdllXSnpkSEpoWTNRdGJHVjJaV3hrYjNkdUwyRmljM1J5WVdOMExXbDBaWEpoZEc5eUxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OWtaV1psY25KbFpDMXNaWFpsYkdSdmQyNHZibTlrWlY5dGIyUjFiR1Z6TDJGaWMzUnlZV04wTFd4bGRtVnNaRzkzYmk5aFluTjBjbUZqZEMxc1pYWmxiR1J2ZDI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyUmxabVZ5Y21Wa0xXeGxkbVZzWkc5M2JpOXViMlJsWDIxdlpIVnNaWE12WVdKemRISmhZM1F0YkdWMlpXeGtiM2R1TDJsdVpHVjRMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZjM1J2Y21GblpTOHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlsY25KdWJ5OWpkWE4wYjIwdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyVnljbTV2TDJWeWNtNXZMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZjM1J2Y21GblpTOHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlsZG1WdWRITXZaWFpsYm5SekxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXBaV1ZsTnpVMEwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5cGJXMWxaR2xoZEdVdmJHbGlMMmx1WkdWNExtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXBiVzFsWkdsaGRHVXZiR2xpTDIxbGMzTmhaMlZEYUdGdWJtVnNMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZjM1J2Y21GblpTOHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlwYlcxbFpHbGhkR1V2YkdsaUwyMTFkR0YwYVc5dUxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXBiVzFsWkdsaGRHVXZiR2xpTDI1bGVIUlVhV05yTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5cGJXMWxaR2xoZEdVdmJHbGlMM04wWVhSbFEyaGhibWRsTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5cGJXMWxaR2xoZEdVdmJHbGlMM1JwYldWdmRYUXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMmx1YUdWeWFYUnpMMmx1YUdWeWFYUnpYMkp5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMmx6TFhSNWNHVmtZWEp5WVhrdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzl6ZEc5eVlXZGxMeTlvYjIxbEwyaDFlVzVvYm1kMWVXVnVMMmRwZEdoMVlpOWpZWFZ6WVd4cGRIa3ZibTlrWlY5dGIyUjFiR1Z6TDJsellYSnlZWGt2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXVnljbTl5Y3k5bGNuSnZjbk11YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzl6ZEc5eVlXZGxMeTlvYjIxbEwyaDFlVzVvYm1kMWVXVnVMMmRwZEdoMVlpOWpZWFZ6WVd4cGRIa3ZibTlrWlY5dGIyUjFiR1Z6TDJ4bGRtVnNMV2wwWlhKaGRHOXlMWE4wY21WaGJTOXBibVJsZUM1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdmJHVjJaV3d0YVhSbGNtRjBiM0l0YzNSeVpXRnRMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmtZV0pzWlMxemRISmxZVzB2WlhKeWIzSnpMV0p5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXbDBaWEpoZEc5eUxYTjBjbVZoYlM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyVjRjR1Z5YVcxbGJuUmhiRmRoY201cGJtY3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXbDBaWEpoZEc5eUxYTjBjbVZoYlM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlmYzNSeVpXRnRYMlIxY0d4bGVDNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZiR1YyWld3dGFYUmxjbUYwYjNJdGMzUnlaV0Z0TDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmJHbGlMMTl6ZEhKbFlXMWZjR0Z6YzNSb2NtOTFaMmd1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzl6ZEc5eVlXZGxMeTlvYjIxbEwyaDFlVzVvYm1kMWVXVnVMMmRwZEdoMVlpOWpZWFZ6WVd4cGRIa3ZibTlrWlY5dGIyUjFiR1Z6TDJ4bGRtVnNMV2wwWlhKaGRHOXlMWE4wY21WaGJTOXViMlJsWDIxdlpIVnNaWE12Y21WaFpHRmliR1V0YzNSeVpXRnRMMnhwWWk5ZmMzUnlaV0Z0WDNKbFlXUmhZbXhsTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5c1pYWmxiQzFwZEdWeVlYUnZjaTF6ZEhKbFlXMHZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzlzYVdJdlgzTjBjbVZoYlY5MGNtRnVjMlp2Y20wdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyeGxkbVZzTFdsMFpYSmhkRzl5TFhOMGNtVmhiUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDJ4cFlpOWZjM1J5WldGdFgzZHlhWFJoWW14bExtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXNaWFpsYkMxcGRHVnlZWFJ2Y2kxemRISmxZVzB2Ym05a1pWOXRiMlIxYkdWekwzSmxZV1JoWW14bExYTjBjbVZoYlM5c2FXSXZhVzUwWlhKdVlXd3ZjM1J5WldGdGN5OWhjM2x1WTE5cGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdmJHVjJaV3d0YVhSbGNtRjBiM0l0YzNSeVpXRnRMMjV2WkdWZmJXOWtkV3hsY3k5eVpXRmtZV0pzWlMxemRISmxZVzB2YkdsaUwybHVkR1Z5Ym1Gc0wzTjBjbVZoYlhNdlluVm1abVZ5WDJ4cGMzUXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXbDBaWEpoZEc5eUxYTjBjbVZoYlM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlwYm5SbGNtNWhiQzl6ZEhKbFlXMXpMMlJsYzNSeWIza3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXbDBaWEpoZEc5eUxYTjBjbVZoYlM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlwYm5SbGNtNWhiQzl6ZEhKbFlXMXpMMlZ1WkMxdlppMXpkSEpsWVcwdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyeGxkbVZzTFdsMFpYSmhkRzl5TFhOMGNtVmhiUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDJ4cFlpOXBiblJsY201aGJDOXpkSEpsWVcxekwzTjBZWFJsTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5c1pYWmxiQzFwZEdWeVlYUnZjaTF6ZEhKbFlXMHZibTlrWlY5dGIyUjFiR1Z6TDNKbFlXUmhZbXhsTFhOMGNtVmhiUzlzYVdJdmFXNTBaWEp1WVd3dmMzUnlaV0Z0Y3k5emRISmxZVzB0WW5KdmQzTmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM04wYjNKaFoyVXZMMmh2YldVdmFIVjVibWh1WjNWNVpXNHZaMmwwYUhWaUwyTmhkWE5oYkdsMGVTOXViMlJsWDIxdlpIVnNaWE12YkdWMlpXd3RhWFJsY21GMGIzSXRjM1J5WldGdEwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZjbVZoWkdGaWJHVXRZbkp2ZDNObGNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZiR1YyWld3dGFuTXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyeGxkbVZzTFdwekwybDBaWEpoZEc5eUxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXNaWFpsYkMxcWN5OXViMlJsWDIxdlpIVnNaWE12WVdKemRISmhZM1F0YkdWMlpXeGtiM2R1TDJGaWMzUnlZV04wTFdOb1lXbHVaV1F0WW1GMFkyZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMnhsZG1Wc0xXcHpMMjV2WkdWZmJXOWtkV3hsY3k5aFluTjBjbUZqZEMxc1pYWmxiR1J2ZDI0dllXSnpkSEpoWTNRdGFYUmxjbUYwYjNJdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyeGxkbVZzTFdwekwyNXZaR1ZmYlc5a2RXeGxjeTloWW5OMGNtRmpkQzFzWlhabGJHUnZkMjR2WVdKemRISmhZM1F0YkdWMlpXeGtiM2R1TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5c1pYWmxiQzFxY3k5dWIyUmxYMjF2WkhWc1pYTXZZV0p6ZEhKaFkzUXRiR1YyWld4a2IzZHVMMmx1WkdWNExtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXNaWFpsYkMxcWN5OTFkR2xzTDJsdGJXVmthV0YwWlMxaWNtOTNjMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5c1pYWmxiQzFxY3k5MWRHbHNMMjFwZUdWa0xYUnZMV0oxWm1abGNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZiR1YyWld3dGFuTXZkWFJwYkM5emRYQndiM0owTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5c1pYWmxiSFZ3TDJ4cFlpOWlZWFJqYUM1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdmJHVjJaV3gxY0M5c2FXSXZZMjl0Ylc5dUxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXNaWFpsYkhWd0wyeHBZaTlzWlhabGJIVndMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZjM1J2Y21GblpTOHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlzWlhabGJIVndMMnhwWWk5d2NtOXRhWE5wWm5rdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwyeDBaM1F2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM0J5YjJObGMzTXZZbkp2ZDNObGNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZjSEp5TDNCeWNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZjMkZtWlMxaWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM04wY21sdVoxOWtaV052WkdWeUwyeHBZaTl6ZEhKcGJtZGZaR1ZqYjJSbGNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzTjBiM0poWjJVdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZkSGx3WldSaGNuSmhlUzEwYnkxaWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM1YwYVd3dFpHVndjbVZqWVhSbEwySnliM2R6WlhJdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwzVjBhV3d2YzNWd2NHOXlkQzlwYzBKMVptWmxja0p5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM1YwYVd3dmRYUnBiQzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM04wYjNKaFoyVXZLSGRsWW5CaFkyc3BMMkoxYVd4a2FXNHZaMnh2WW1Gc0xtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmMzUnZjbUZuWlM4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OTRkR1Z1WkM5cGJXMTFkR0ZpYkdVdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk0dmMzSmpMMUJPUjBacGJHVk5hWGhwYm5NdWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTHk0dmMzSmpMMkpoYzJWVGRHOXlZV2RsTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzh1TDNOeVl5OXBibVJsZUVSQ1UzUnZjbUZuWlM1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2TGk5emNtTXZhVzVrWlhoRVFsTjBiM0poWjJVdWJXbDRhVzV6TG01dlpHVXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEx5NHZjM0pqTDJsdVpHVjRSRUpUZEc5eVlXZGxMbTFwZUdsdWN5NTNaV0l1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzl6ZEc5eVlXZGxMeTR2YzNKakwzTjBiM0poWjJVdWJXbDRhVzV6TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2YzNSdmNtRm5aUzkxZEdsc0lDaHBaMjV2Y21Wa0tTSXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNOMGIzSmhaMlV2ZFhScGJDQW9hV2R1YjNKbFpDay9NMkV4TWlJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM04wYjNKaFoyVXZaWGgwWlhKdVlXd2dYQ0pqWVhWellXd3RibVYwTG5WMGFXeHpYQ0lpTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbEwyVjRkR1Z5Ym1Gc0lGd2liR1YyWld3dGFuTmNJaUpkTENKdVlXMWxjeUk2V3lKUVRrZEdhV3hsVFdsNGFXNXpJaXdpVTNSdmNtRm5aVU5zWVhOeklpd2ljbVZoWkZCT1IwWnBiR1VpTENKbWFXeGxVR0YwYUNJc0luSmxZV1JHYVd4bElpd2lkM0pwZEdWUVRrZEdhV3hsSWl3aWFXMW5RblZtWm1WeUlpd2lkM0pwZEdWR2FXeGxJaXdpWm1WMFkyaFFUa2NpTENKMWNtd2lMQ0pRY205dGFYTmxJaXdpY21WemIyeDJaU0lzSW5KbGFtVmpkQ0lzSW5KbFlXUmxjaUlzSWtabGRHTm9JaXdpYzNSeVpXRnRSR0YwWVNJc0luQnVaeUlzSWxCT1J5SXNJbTl1SWl3aVpHRjBZU0lzSW1WeWNpSXNJbU52Ym5OdmJHVWlMQ0psY25KdmNpSXNJbkJwY0dVaUxDSm1aWFJqYUZCT1IwWnBiR1VpTENKemRISmxZVzFRVGtkR2FXeGxJaXdpZEhKaGJuTm1jbTl0Um00aUxDSkZjbkp2Y2lJc0ltSmhjMlZUZEc5eVlXZGxJaXdpWTI5dWMzUnlkV04wYjNJaUxDSnpkRzl5WVdkbElpd2lRMjl5WlZOMGIzSmhaMlVpTENKSmJtUmxlRVJDVTNSdmNtRm5aU0lzSWxCc1lYUm1iM0p0SWl3aWJXbDRWMmwwYUNJc0lrSmhjMlZUZEc5eVlXZGxJaXdpVEdWMlpXeEViM2R1VFdsNGFXNXpJaXdpVEdWMlpXeEtVMDFwZUdsdWN5SXNJbkpsWm05eWJXRjBaVTVoYldVaUxDSnJaWGtpTENKeVpYQnNZV05sSWl3aVkzSmxZWFJsUTJobFkydEdhV3hsVG1GdFpVWnVJaXdpYm1GdFpTSXNJbkJoZEhSbGNtNGlMQ0p5WldkbGVDSXNJbEpsWjBWNGNDSXNJbVpwYkdWT1lXMWxJaXdpYldGMFkyZ2lMQ0puWlhSSmRHVnRJaXdpWVhOQ2RXWm1aWElpTENKblpYUWlMQ0p6WlhSSmRHVnRJaXdpY0hWMElpd2laR1ZzU1hSbGJTSXNJbVJsYkNJc0ltSmhkR05vSWl3aWIzQnpJaXdpWkdWc1pYUmxTWFJsYlNJc0ltUmxiR1YwWlVacGJHVkNlVkJ5WldacGVDSXNJa1JsYkU5d0lpd2lkSGx3WlNJc0ltWnBiR1ZNYVhOMElpd2laMlYwUm1sc1pVeHBjM1FpTENKa1pXeEdhV3hsVDNCeklpd2liV0Z3SWl3aVppSXNJazVoYldWVVpYTjBaWElpTENKamNtVmhkR1ZMWlhsVGRISmxZVzBpTENKMGIxTjBjbWx1WnlJc0lteGxibWQwYUNJc0luQjFjMmdpTENKcGRHVnRJaXdpWkdWc1pYUmxSbWxzWlNJc0ltWmxkR05vUm1sc1pTSXNJbkpsYzNCdmJuTmxJaXdpWm1WMFkyaEVZWFJoSWl3aWMzUnlaV0Z0Um1sc1pTSXNJblJ5WVc1elptOXliV1Z5SWl3aWJHVjJaV3hrYjNkdUlpd2ljbVZ4ZFdseVpTSXNJbXhsZG1Wc2FuTWlMQ0pUZEc5eVlXZGxUV2w0YVc1eklpd2lRbUZ6WlVOc1lYTnpJaXdpYzNSdmNtRm5aVk4xYlcxaGNua2lMQ0pUZEc5eVlXZGxJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFFzVHp0QlExWkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwUkJRVEJETEdkRFFVRm5RenRCUVVNeFJUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZEZRVUYzUkN4clFrRkJhMEk3UVVGRE1VVTdRVUZEUVN4NVJFRkJhVVFzWTBGQll6dEJRVU12UkRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVSQlFYbERMR2xEUVVGcFF6dEJRVU14UlN4M1NFRkJaMGdzYlVKQlFXMUNMRVZCUVVVN1FVRkRja2s3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h0UTBGQk1rSXNNRUpCUVRCQ0xFVkJRVVU3UVVGRGRrUXNlVU5CUVdsRExHVkJRV1U3UVVGRGFFUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzT0VSQlFYTkVMQ3RFUVVFclJEczdRVUZGY2tnN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVRzN096czdPenM3T3pzN08wRkRiRVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzZDBNN096czdPenM3T3pzN096dEJRMDVCTERoRFFVRmhPenRCUVVWaU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeDFRMEZCZFVNc1UwRkJVenRCUVVOb1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxGZEJRVmNzYlVKQlFVOHNRMEZCUXl3NFEwRkJUenRCUVVNeFFqdEJRVU5CTzBGQlEwRTdRVUZEUVN3d1FrRkJNRUk3UVVGRE1VSXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTERoQ1FVRTRRanRCUVVNNVFqdEJRVU5CTEcxRVFVRnRSRHM3UVVGRmJrUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFXZENPMEZCUTJoQ0xHZEVRVUZuUkRzN1FVRkZhRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0RzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFc1IwRkJSenRCUVVOSUxITkNRVUZ6UWpzN1FVRkZkRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxDUVVGNVFpeFJRVUZSTzBGQlEycERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDVRa0ZCZVVJc1VVRkJVVHRCUVVOcVF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2VVSkJRWGxDTzBGQlEzcENPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeG5RMEZCWjBNc2IwSkJRVzlDT3p0QlFVVndSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdRVU42WlZrN08wRkJSVm83UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEd0RFFVRnJReXhUUVVGVE8wRkJRek5ETzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hwUWtGQmFVSXNVMEZCVXp0QlFVTXhRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2NVSkJRWEZDTEZOQlFWTTdRVUZET1VJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3d3UTBGQk1FTXNWVUZCVlR0QlFVTndSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3T3pzN096czdPenM3T3p0QlEzUktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZXVHM3UVVGRldpeGhRVUZoTEcxQ1FVRlBMRU5CUVVNc2QwUkJRVmM3UVVGRGFFTXNZMEZCWXl4dFFrRkJUeXhEUVVGRExHOUVRVUZUTzBGQlF5OUNMR05CUVdNc2JVSkJRVThzUTBGQlF5eHZSRUZCVXpzN1FVRkZMMEk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIRkNRVUZ4UWl4dFJFRkJiVVE3UVVGRGVFVTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4VlFVRlZPMEZCUXpkQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWl4WlFVRlpPMEZCUXpkQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTd3dRa0ZCTUVJN1FVRkRNVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc2RVTkJRWFZETEZOQlFWTTdRVUZEYUVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWlVGQlpTeHBRa0ZCYVVJN1FVRkRhRU03UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hoUVVGaExHbENRVUZwUWp0QlFVTTVRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSXNVMEZCVXp0QlFVTXhRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENMRk5CUVZNN1FVRkRNVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xGTkJRVk03UVVGRE1VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blJFRkJaMFFzUlVGQlJUdEJRVU5zUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeHBRa0ZCYVVJc1UwRkJVenRCUVVNeFFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRE8wRkJRM3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gzUWtGQmQwSXNaVUZCWlR0QlFVTjJRenRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFTeDNRa0ZCZDBJc1VVRkJVVHRCUVVOb1F6dEJRVU5CTEhGQ1FVRnhRaXhsUVVGbE8wRkJRM0JETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWl4WlFVRlpPMEZCUXpkQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h4UWtGQmNVSXNVMEZCVXp0QlFVTTVRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzY1VKQlFYRkNMRk5CUVZNN1FVRkRPVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2NVSkJRWEZDTEZOQlFWTTdRVUZET1VJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTEd0Q1FVRnJRanRCUVVOdVF6dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEdOQlFXTTdRVUZEYWtNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSFZFUVVGMVJDeFBRVUZQTzBGQlF6bEVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3gxUkVGQmRVUXNUMEZCVHp0QlFVTTVSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4clFrRkJhMEk3UVVGRGJFSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHhRa0ZCY1VJc1VVRkJVVHRCUVVNM1FqdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFc1pVRkJaU3hUUVVGVE8wRkJRM2hDTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMRk5CUVZNN1FVRkROVUk3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHVkJRV1VzYVVKQlFXbENPMEZCUTJoRE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNhVUpCUVdsQ0xGbEJRVms3UVVGRE4wSTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRaXhuUWtGQlowSTdRVUZEYWtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSXNaMEpCUVdkQ08wRkJRMnBET3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR2xDUVVGcFFpeFpRVUZaTzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3TzBGRE5YWkVRU3gxUWtGQmRVSXNiVUpCUVU4c1EwRkJReXd3UjBGQmIwSTdRVUZEYmtRc1pVRkJaU3h0UWtGQlR5eERRVUZETEdsRlFVRlZPenRCUVVWcVF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3g1UWtGQmVVSXNOa0pCUVRaQ08wRkJRM1JFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6czdRVUZGUkRzN096czdPenM3T3pzN08wRkRMMEpCTEhkQ1FVRjNRaXh0UWtGQlR5eERRVUZETERCSFFVRnZRanRCUVVOd1JDeGxRVUZsTEcxQ1FVRlBMRU5CUVVNc2FVVkJRVlU3UVVGRGFrTXNkVUpCUVhWQ0xHMUNRVUZQTEVOQlFVTXNkVVpCUVhGQ08wRkJRM0JFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdzJRa0ZCTmtJc05rSkJRVFpDTzBGQlF6RkVPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3T3pzN096czdPenM3T3p0QlEzWkdRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeDVRa0ZCZVVJc2MwTkJRWE5ETzBGQlF5OUVPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3g1UWtGQmVVSXNkMEpCUVhkQ08wRkJRMnBFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSE5EUVVGelF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN096czdPenM3T3pzN08wRkRhRVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3T3pzN096czdPenM3T3pzN1FVTjJSVUVzYlVWQlFWa3NiVUpCUVU4c1EwRkJReXh2UkVGQlR6dEJRVU16UWl4MVFrRkJkVUlzYlVKQlFVOHNRMEZCUXl4MVNFRkJjVUk3UVVGRGNFUXNNa0pCUVRKQ0xHMUNRVUZQTEVOQlFVTXNhVWxCUVRCQ08wRkJRemRFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR2REUVVGblF5eHJRMEZCYTBNN1FVRkRiRVU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJMR2xDUVVGcFFpeHJRa0ZCYTBJN1FVRkRia003UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN096czdPenM3T3pzN096dEJRMnhSUVN3MFFrRkJORUlzYlVKQlFVOHNRMEZCUXl4NVNFRkJjMEk3UVVGRE1VUXNNa0pCUVRKQ0xHMUNRVUZQTEVOQlFVTXNkVWhCUVhGQ08wRkJRM2hFTEN0Q1FVRXJRaXh0UWtGQlR5eERRVUZETEdsSlFVRXdRanM3T3pzN096czdPenM3TzBGRFJtcEZMRlZCUVZVc2JVSkJRVThzUTBGQlF5d3dRMEZCU3pzN1FVRkZka0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3UVVONFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPenRCUVVWRUxIZENRVUYzUWl4dFFrRkJUeXhEUVVGRExHOUVRVUZWTzBGQlF6RkRPenM3T3pzN096czdPenM3UVVONFZFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTzBGQlEycENMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEVzWlVGQlpTeFRRVUZUTzBGQlEzaENPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeEhRVUZITzBGQlEwZ3NiMEpCUVc5Q0xGTkJRVk03UVVGRE4wSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenRCUXpkVFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlVTeFhRVUZYT3p0QlFVVnVRanRCUVVOQk8wRkJRMEU3UVVGRFFTeFJRVUZSTEZkQlFWYzdPMEZCUlc1Q08wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFJRVUZSTEZkQlFWYzdPMEZCUlc1Q08wRkJRMEU3UVVGRFFTeFJRVUZSTEZWQlFWVTdPMEZCUld4Q08wRkJRMEU3T3pzN096czdPenM3T3pzN1FVTnVSbUU3UVVGRFlqdEJRVU5CTEVWQlFVVXNiVUpCUVU4c1EwRkJReXhuUlVGQldUdEJRVU4wUWl4RlFVRkZMRzFDUVVGUExFTkJRVU1zYlVWQlFXVTdRVUZEZWtJc1JVRkJSU3h0UWtGQlR5eERRVUZETERSRlFVRnJRanRCUVVNMVFpeEZRVUZGTEcxQ1FVRlBMRU5CUVVNc2MwVkJRV1U3UVVGRGVrSXNSVUZCUlN4dFFrRkJUeXhEUVVGRExEaEVRVUZYTzBGQlEzSkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEhOQ1FVRnpRanRCUVVONlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3pzN1FVTXZSa0VzT0VOQlFXRTdPMEZCUldJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3T3pzN096czdPMEZEYWtKQkxEaERRVUZoTzBGQlEySTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPenM3T3pzN096dEJRM0pDUVN3clEwRkJZVHRCUVVOaU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3pzN08wRkRWa0VzT0VOQlFXRTdPMEZCUldJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc2FVTkJRV2xETzBGQlEycERPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVVN096czdPenM3T3pzN096czdRVU4yUW1FN1FVRkRZanRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdPenM3T3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN1FVTjBRa0U3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdRVU40UTBFc2FVSkJRV2xDT3p0QlFVVnFRanRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNhMEpCUVd0Q0xHMUNRVUZQTEVOQlFVTXNaMFJCUVU4N1FVRkRha003UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3TzBGRGNrSkJMR1ZCUVdVc2JVSkJRVThzUTBGQlF5eHBSVUZCVlR0QlFVTnFReXhsUVVGbExHMUNRVUZQTEVOQlFVTXNhMGhCUVdsQ08wRkJRM2hETEdGQlFXRXNiVUpCUVU4c1EwRkJReXh2UkVGQlR6czdRVUZGTlVJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFc1MwRkJTenRCUVVOTUxHbENRVUZwUWl4NVFrRkJlVUk3UVVGRE1VTTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPenM3T3pzN096czdPenM3TzBGRE0wTmhPenRCUVVWaUxDdERRVUVyUXl3d1JFRkJNRVFzTWtOQlFUSkRMR2xEUVVGcFF6czdRVUZGY2t3N08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeEhRVUZIT3p0QlFVVklPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03T3p0QlFVZEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEVzUTBGQlF6czdPMEZCUjBRN1FVRkRRVHRCUVVOQkxFTkJRVU03T3p0QlFVZEVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNRMEZCUXpzN08wRkJSMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJEdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN096czdPenM3T3pzN096czdRVU01U0VFc0swTkJRVms3TzBGQlJWbzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN096dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFlUdEJRVU5pT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRTdPMEZCUlVFc1pVRkJaU3h0UWtGQlR5eERRVUZETEhsSVFVRnZRanM3UVVGRk0wTXNaVUZCWlN4dFFrRkJUeXhEUVVGRExIbElRVUZ2UWpzN1FVRkZNME1zYlVKQlFVOHNRMEZCUXl4cFJVRkJWVHM3UVVGRmJFSTdRVUZEUVR0QlFVTkJPenRCUVVWQkxHbENRVUZwUWl4cFFrRkJhVUk3UVVGRGJFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdRVUZEUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXl4RlFVRkZPenRCUVVWSU8wRkJRMEU3UVVGRFFTeDNRMEZCZDBNN1FVRkRlRU03TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNc1JUczdPenM3T3pzN096czdPenRCUXpGSlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTJFN08wRkJSV0k3TzBGQlJVRXNaMEpCUVdkQ0xHMUNRVUZQTEVOQlFVTXNNa2hCUVhGQ096dEJRVVUzUXl4dFFrRkJUeXhEUVVGRExHbEZRVUZWT3p0QlFVVnNRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3T3pzN096czdPMEZEZEVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFlUczdRVUZGWWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3hUUVVGVExHMUNRVUZQTEVOQlFVTXNiVVJCUVZFN08wRkJSWHBDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96czdRVUZIUVN4aFFVRmhMRzFDUVVGUExFTkJRVU1zSzBsQlFUSkNPMEZCUTJoRU96czdRVUZIUVN4aFFVRmhMRzFDUVVGUExFTkJRVU1zYTBSQlFWRTdPMEZCUlRkQ096dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCUjBFc1owSkJRV2RDTEcxQ1FVRlBMRU5CUVVNc1lVRkJUVHM3UVVGRk9VSTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJEdEJRVU5CTzBGQlEwRTdPenRCUVVkQkxHbENRVUZwUWl4dFFrRkJUeXhEUVVGRExHbEtRVUZuUXpzN1FVRkZla1FzYTBKQlFXdENMRzFDUVVGUExFTkJRVU1zZVVsQlFUUkNPenRCUVVWMFJDeGxRVUZsTEcxQ1FVRlBMRU5CUVVNc2NVbEJRVEJDTzBGQlEycEVPenRCUVVWQkxIRkNRVUZ4UWl4dFFrRkJUeXhEUVVGRExEQkhRVUZYTzBGQlEzaERPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEdkQ1FVRm5RaXh0UWtGQlR5eERRVUZETERSSVFVRjNRanRCUVVOb1JDeG5SVUZCWjBVN096dEJRVWRvUlR0QlFVTkJPenRCUVVWQkxHMUNRVUZQTEVOQlFVTXNhVVZCUVZVN08wRkJSV3hDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxDdEdRVUVyUmp0QlFVTXZSanRCUVVOQk8wRkJRMEU3TzBGQlJVRXNlVVZCUVhsRkxHMUdRVUZ0Ump0QlFVTTFTanM3UVVGRlFUdEJRVU5CTEhGQ1FVRnhRaXh0UWtGQlR5eERRVUZETEhGSVFVRnJRanRCUVVNdlF5d3dRa0ZCTUVJN1FVRkRNVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2VVVkJRWGxGTzBGQlEzcEZPenRCUVVWQk8wRkJRMEVzYTBaQlFXdEdPMEZCUTJ4R096dEJRVVZCTERCR1FVRXdSanRCUVVNeFJqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkVUpCUVhWQ08wRkJRM1pDTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h0UWtGQmJVSTdRVUZEYmtJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNLMEpCUVN0Q096dEJRVVV2UWl3clEwRkJLME03TzBGQlJTOURMSGxDUVVGNVFqdEJRVU42UWp0QlFVTkJPenRCUVVWQkxESkVRVUV5UkRzN1FVRkZNMFFzYzBKQlFYTkNPenRCUVVWMFFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gzUTBGQmQwTXNiVUpCUVU4c1EwRkJReXhuUmtGQmFVSTdRVUZEYWtVN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4eFFrRkJjVUlzYlVKQlFVOHNRMEZCUXl4eFNFRkJhMEk3UVVGREwwTXNaMFZCUVdkRk8wRkJRMmhGT3p0QlFVVkJPMEZCUTBFc2JVVkJRVzFGT3p0QlFVVnVSVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PenM3UVVGSFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVWQlFVVTdRVUZEUmp0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPenRCUVVWQk8wRkJRMEVzUlVGQlJUczdPMEZCUjBZN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxEWkdRVUUyUmp0QlFVTTNSaXhQUVVGUE8wRkJRMUE3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVN4UFFVRlBPMEZCUTFBN08wRkJSVUU3UVVGRFFUdEJRVU5CTERSR1FVRTBSanRCUVVNMVJpeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVN4blJFRkJaMFE3UVVGRGFFUTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFVkJRVVU3T3p0QlFVZEdPMEZCUTBFc2MwTkJRWE5ETEcxQ1FVRlBMRU5CUVVNc1owWkJRV2xDTzBGQlF5OUVMSFZFUVVGMVJEczdRVUZGZGtRN1FVRkRRVHRCUVVOQkxFVkJRVVU3T3p0QlFVZEdPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFTkJRVU03UVVGRFJEczdPMEZCUjBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN3MFJVRkJORVU3UVVGRE5VVXNSMEZCUnpzN08wRkJSMGc3UVVGRFFTeHJRMEZCYTBNN08wRkJSV3hETzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUTBGQlF6czdPMEZCUjBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERaRFFVRTJRenRCUVVNM1F6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3cyUkVGQk5rUTdRVUZETjBRN1FVRkRRVHM3UVVGRlFTdzRRa0ZCT0VJN08wRkJSVGxDTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFc2FVTkJRV2xET3p0QlFVVnFRenRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc2MwSkJRWE5DT3p0QlFVVjBRaXh6UkVGQmMwUTdPMEZCUlhSRU96dEJRVVZCTEhWQ1FVRjFRanRCUVVOMlFqczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYzBOQlFYTkRPenRCUVVWMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2RFUVVGblJEczdRVUZGYUVRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzV1VGQldUdEJRVU5hT3p0QlFVVkJPMEZCUTBFc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUczdPMEZCUjBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SRUZCWjBRN1FVRkRhRVE3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h4UWtGQmNVSTdPMEZCUlhKQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSTdRVUZEY2tJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0RzN08wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN096dEJRVWRJTERCRFFVRXdRenM3UVVGRk1VTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE96czdRVUZIU0N4NVFrRkJlVUk3TzBGQlJYcENPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSk96dEJRVVZLTERCRFFVRXdRenM3UVVGRk1VTTdRVUZEUVR0QlFVTkJPMEZCUTBFc2EwTkJRV3RET3p0QlFVVnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN08wRkJSMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYlVKQlFXMUNMRk5CUVZNN1FVRkROVUk3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVURzN1FVRkZRVHRCUVVOQkxFZEJRVWM3T3p0QlFVZElPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVUZCUlR0QlFVTkdPenM3UVVGSFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVWQlFXbEZPenRCUVVWcVJUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3MlJVRkJOa1U3TzBGQlJUZEZPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN1FVRkRSRHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHOUNRVUZ2UWp0QlFVTndRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc01FUkJRVEJFT3p0QlFVVXhSQ3cwUlVGQk5FVTdPMEZCUlRWRk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSeXhGUVVGRk8wRkJRMHc3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRXNSMEZCUnpzN08wRkJSMGdzYVVKQlFXbENMSGxDUVVGNVFqdEJRVU14UXp0QlFVTkJMRWRCUVVjN1FVRkRTRHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc01FTkJRVEJETEcxQ1FVRlBMRU5CUVVNc2RVcEJRVzFETzBGQlEzSkdPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTXNSVUZCUlRzN1FVRkZTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRExFVkJRVVU3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHRSRUZCYlVRN1FVRkRia1E3UVVGRFFTeHRSRUZCYlVRc0swUkJRU3RFTzBGQlEyeElPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeDVSRUZCZVVRN08wRkJSWHBFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdkRFFVRm5ReXhQUVVGUE8wRkJRM1pETzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hET3pzN096czdPenM3T3pzN08wRkRhR2xEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTd3dRMEZCTUVNc1dVRkJXVHRCUVVOMFJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFlUczdRVUZGWWpzN1FVRkZRU3h4UWtGQmNVSXNiVUpCUVU4c1EwRkJReXd3UjBGQlZ6dEJRVU40UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeGhRVUZoTEcxQ1FVRlBMRU5CUVVNc2NVaEJRV3RDT3p0QlFVVjJReXh0UWtGQlR5eERRVUZETEdsRlFVRlZPenRCUVVWc1FqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEpRVUZKT3p0QlFVVktMREJEUVVFd1F6dEJRVU14UXp0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN096dEJRVWRJTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3c1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGUVVGRk8wRkJRMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVWQlFVVTdRVUZEUmp0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjMEpCUVhOQ08wRkJRM1JDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUXpzN096czdPenM3T3pzN08wRkRlRTFCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRZVHM3UVVGRllqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdPenRCUVVkQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeGhRVUZoTEcxQ1FVRlBMRU5CUVVNc2IwVkJRV2RDTzBGQlEzSkRPMEZCUTBFN08wRkJSVUU3TzBGQlJVRXNZVUZCWVN4dFFrRkJUeXhEUVVGRExDdEpRVUV5UWp0QlFVTm9SRHM3TzBGQlIwRXNZVUZCWVN4dFFrRkJUeXhEUVVGRExHdEVRVUZST3p0QlFVVTNRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEd0Q1FVRnJRaXh0UWtGQlR5eERRVUZETEhsSlFVRTBRanM3UVVGRmRFUXNaVUZCWlN4dFFrRkJUeXhEUVVGRExIRkpRVUV3UWp0QlFVTnFSRHM3UVVGRlFTeHhRa0ZCY1VJc2JVSkJRVThzUTBGQlF5d3dSMEZCVnp0QlFVTjRRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZQTEVOQlFVTXNhVVZCUVZVN08wRkJSV3hDT3p0QlFVVkJPMEZCUTBFc2NVSkJRWEZDTEcxQ1FVRlBMRU5CUVVNc2NVaEJRV3RDTzBGQlF5OURMREJDUVVFd1FqdEJRVU14UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDVSVUZCZVVVN1FVRkRla1U3TzBGQlJVRTdRVUZEUVN4clJrRkJhMFk3UVVGRGJFWTdRVUZEUVRzN1FVRkZRU3d3UmtGQk1FWTdPMEZCUlRGR0xESkNRVUV5UWpzN1FVRkZNMElzZVVKQlFYbENPenRCUVVWNlFpeHpRa0ZCYzBJN08wRkJSWFJDTEhGQ1FVRnhRanM3UVVGRmNrSXNkMEpCUVhkQ096dEJRVVY0UWl4NVFrRkJlVUk3UVVGRGVrSTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHbERRVUZwUXp0QlFVTnFRenRCUVVOQk96dEJRVVZCTERKRVFVRXlSRHRCUVVNelJEdEJRVU5CT3p0QlFVVkJMR3RDUVVGclFqczdRVUZGYkVJc2RVSkJRWFZDT3p0QlFVVjJRaXhyUWtGQmEwSTdRVUZEYkVJN1FVRkRRVHRCUVVOQk96dEJRVVZCTEcxQ1FVRnRRanRCUVVOdVFqdEJRVU5CT3p0QlFVVkJMR2REUVVGblF6czdRVUZGYUVNN1FVRkRRVHRCUVVOQkxFbEJRVWs3T3p0QlFVZEtMSE5DUVVGelFqczdRVUZGZEVJN1FVRkRRVHRCUVVOQkxHdERRVUZyUXp0QlFVTnNRenM3UVVGRlFTeHhRa0ZCY1VJN1FVRkRja0k3TzBGQlJVRXNNa0pCUVRKQ096dEJRVVV6UWl3MFFrRkJORUk3TzBGQlJUVkNMQ3REUVVFclF6czdRVUZGTDBNc1owTkJRV2RETzBGQlEyaERPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVQ3hMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVOQlFVTXNTVUZCU1R0QlFVTk1PenM3UVVGSFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklMRU5CUVVNN1FVRkRSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMSEZDUVVGeFFpeHRRa0ZCVHl4RFFVRkRMSEZJUVVGclFpeEZRVUZGTzBGQlEycEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h0UlVGQmJVVTdPMEZCUlc1Rk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEVOQlFVTTdPenRCUVVkRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRFJEUVVFMFF6czdRVUZGTlVNN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJEdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4cFEwRkJhVU03UVVGRGFrTTdRVUZEUVN3MFEwRkJORU03UVVGRE5VTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTXNSVUZCUlR0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc0swTkJRU3RET3p0QlFVVXZRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZCTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBWQlFYZEZMSE5FUVVGelJEdEJRVU01U0R0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc05rSkJRVFpDTzBGQlF6ZENPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEWkNRVUUyUWp0QlFVTTNRanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEc5RVFVRnZSRHRCUVVOd1JEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFE3UVVGRFFUczdPMEZCUjBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdPenRCUVVkRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMREJGUVVFd1JUdEJRVU14UlRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZCTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4dFEwRkJiVU03UVVGRGJrTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDVSVUZCZVVVN08wRkJSWHBGTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN096dEJRVWRJTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenM3UVVGRlJEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzJRMEZCTmtNN1FVRkROME03TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6czdPMEZCUjBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVERzN08wRkJSMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdRVUZEUkR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEZPenM3T3pzN096czdPenM3TzBGRE1YRkNRU3dyUTBGQllUczdRVUZGWWpzN1FVRkZRU3d5UTBGQk1rTXNhMEpCUVd0Q0xHdERRVUZyUXl4eFJVRkJjVVVzUlVGQlJTeEZRVUZGTEU5QlFVOHNhMEpCUVd0Q0xFVkJRVVVzV1VGQldUczdRVUZGTDAwc1pVRkJaU3h0UWtGQlR5eERRVUZETEc5SlFVRnBRanM3UVVGRmVFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h2UTBGQmIwTTdRVUZEY0VNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFTeHBSVUZCYVVVN1FVRkRha1U3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGZEJRVmM3UVVGRFdEdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVMRTlCUVU4N1FVRkRVQ3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN1FVRkRSRHRCUVVOQkxFTkJRVU03UVVGRFJEczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVOQlFVTTdPMEZCUlVRN1FVRkRRVHM3UVVGRlFTeDVSa0ZCZVVZN1FVRkRla1k3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEVzZVVOQlFYbERPMEZCUTNwRE96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h0UkRzN096czdPenM3T3pzN096dEJRek5OWVRzN1FVRkZZaXhuUTBGQlowTXNaMEpCUVdkQ0xITkNRVUZ6UWl4UFFVRlBMSFZFUVVGMVJDeHRRMEZCYlVNc01FUkJRVEJFTEhOR1FVRnpSaXhuUlVGQlowVXNSVUZCUlN4SFFVRkhMRVZCUVVVc2FVTkJRV2xETERKRFFVRXlReXhGUVVGRkxFVkJRVVVzUlVGQlJTeGxRVUZsT3p0QlFVVXZaQ3d5UTBGQk1rTXNhMEpCUVd0Q0xHdERRVUZyUXl4eFJVRkJjVVVzUlVGQlJTeEZRVUZGTEU5QlFVOHNhMEpCUVd0Q0xFVkJRVVVzV1VGQldUczdRVUZGTDAwc1pVRkJaU3h0UWtGQlR5eERRVUZETEd0RVFVRlJPMEZCUXk5Q096dEJRVVZCTEdkQ1FVRm5RaXh0UWtGQlR5eERRVUZETEdGQlFVMDdRVUZET1VJN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHZEVRVUZuUkR0QlFVTm9SRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZEVRVUYzUkR0QlFVTjRSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNSMEZCUnp0QlFVTklPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkME5CUVhkRE8wRkJRM2hET3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIbERRVUY1UXp0QlFVTjZReXhUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhsRFFVRjVRenRCUVVONlF5eFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JT3p0QlFVVkJPMEZCUTBFc2VVTkJRWGxETzBGQlEzcERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NT3p0QlFVVkJPMEZCUTBFc1EwRkJReXhIT3pzN096czdPenM3T3pzN1FVTTFURVFzSzBOQlFXRTdPMEZCUldJN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1IwRkJSenRCUVVOSU96czdRVUZIUVR0QlFVTkJPMEZCUTBFc1IwRkJSenM3TzBGQlIwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFc1IwRkJSenM3UVVGRlNEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenM3T3pzN096czdRVU53UmtFN1FVRkRRVHRCUVVOaE96dEJRVVZpTEdsRFFVRnBReXh0UWtGQlR5eERRVUZETEdkSVFVRnBRanM3UVVGRk1VUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5RMEZCWjBNN1FVRkRhRU1zUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzY1VJN096czdPenM3T3pzN096dEJRekZHWVRzN1FVRkZZaXcwUWtGQk5FSXNiVUpCUVU4c1EwRkJReXhuU0VGQmFVSTdPMEZCUlhKRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hIUVVGSE96czdRVUZIU0R0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEZPenM3T3pzN096czdPenRCUXpGQ1FTeHBRa0ZCYVVJc2JVSkJRVThzUTBGQlF5eHRSRUZCVVRzN096czdPenM3T3pzN08wRkRRV3BETERKQ1FVRXlRaXh0UWtGQlR5eERRVUZETEdkSlFVRXlRanRCUVVNNVJEdEJRVU5CTzBGQlEwRXNiVUpCUVcxQ0xHMUNRVUZQTEVOQlFVTXNaMGxCUVRKQ08wRkJRM1JFTEdsQ1FVRnBRaXh0UWtGQlR5eERRVUZETERSSVFVRjVRanRCUVVOc1JDeHZRa0ZCYjBJc2JVSkJRVThzUTBGQlF5eHJTVUZCTkVJN1FVRkRlRVFzYzBKQlFYTkNMRzFDUVVGUExFTkJRVU1zYzBsQlFUaENPenM3T3pzN096czdPenM3TzBGRFRqVkVPenRCUVVWWk96dEJRVVZhT3p0QlFVVkJMSGRDUVVGM1FpeHRRa0ZCVHl4RFFVRkRMR2RIUVVGdlFqdEJRVU53UkN4bFFVRmxMRzFDUVVGUExFTkJRVU1zYVVWQlFWVTdRVUZEYWtNc1pVRkJaU3h0UWtGQlR5eERRVUZETERKRVFVRlpPMEZCUTI1RExHOUNRVUZ2UWl4dFFrRkJUeXhEUVVGRExHMUdRVUYzUWp0QlFVTndSQ3h0UWtGQmJVSXNiVUpCUVU4c1EwRkJReXdyUlVGQmEwSTdRVUZETjBNc1kwRkJZeXh0UWtGQlR5eERRVUZETEcxRlFVRm5RanM3UVVGRmRFTTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPenM3UVVOMFRrRTdPMEZCUlZrN08wRkJSVm9zWlVGQlpTeHRRa0ZCVHl4RFFVRkRMR2xGUVVGVk8wRkJRMnBETEhWQ1FVRjFRaXh0UWtGQlR5eERRVUZETEdkSFFVRnZRanRCUVVOdVJDeFhRVUZYTEcxQ1FVRlBMRU5CUVVNc09FTkJRVTA3UVVGRGVrSXNiMEpCUVc5Q0xHMUNRVUZQTEVOQlFVTXNiVVpCUVhkQ08wRkJRM0JFTEcxQ1FVRnRRaXh0UWtGQlR5eERRVUZETEN0RlFVRnJRanRCUVVNM1F6czdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1MRWRCUVVjN1FVRkRTRHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3p0QlF6bEtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeDVRa0ZCZVVJc2MwTkJRWE5ETzBGQlF5OUVPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3g1UWtGQmVVSXNkMEpCUVhkQ08wRkJRMnBFT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSE5EUVVGelF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN096czdPenM3T3pzN08wRkRhRVpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3T3pzN096czdPenM3T3pzN1FVTjJSVUVzYlVWQlFWa3NiVUpCUVU4c1EwRkJReXh2UkVGQlR6dEJRVU16UWl4MVFrRkJkVUlzYlVKQlFVOHNRMEZCUXl3MlIwRkJjVUk3UVVGRGNFUXNNa0pCUVRKQ0xHMUNRVUZQTEVOQlFVTXNkVWhCUVRCQ08wRkJRemRFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR2REUVVGblF5eHJRMEZCYTBNN1FVRkRiRVU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJMR2xDUVVGcFFpeHJRa0ZCYTBJN1FVRkRia003UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN096czdPenM3T3pzN096dEJRMnhSUVN3MFFrRkJORUlzYlVKQlFVOHNRMEZCUXl3clIwRkJjMEk3UVVGRE1VUXNNa0pCUVRKQ0xHMUNRVUZQTEVOQlFVTXNOa2RCUVhGQ08wRkJRM2hFTEN0Q1FVRXJRaXh0UWtGQlR5eERRVUZETEhWSVFVRXdRanM3T3pzN096czdPenM3TzBGRFJtcEZMR2xDUVVGcFFpeHRRa0ZCVHl4RFFVRkRMRFJFUVVGWE96czdPenM3T3pzN096czdPMEZEUVhCRExEaERRVUZaT3p0QlFVVmFMR1ZCUVdVc2JVSkJRVThzUTBGQlF5dzRSVUZCYzBJN08wRkJSVGRETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdPMEZEVWxrN08wRkJSVm83UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenM3T3pzN096czdPenM3UVVOa1FTeHBRa0ZCYVVJc2JVSkJRVThzUTBGQlF5d3JSRUZCWXp0QlFVTjJReXhuUWtGQlowSXNiVUpCUVU4c1EwRkJReXhuUlVGQllUdEJRVU55UXl4clFrRkJhMElzYlVKQlFVOHNRMEZCUXl3d1JFRkJWVHRCUVVOd1F5eHBRa0ZCYVVJc2JVSkJRVThzUTBGQlF5d3dSRUZCVlRzN1FVRkZia003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPenRCUVVWQkxHbENRVUZwUWl4elEwRkJjME03UVVGRGRrUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFTeHBRa0ZCYVVJc2QwSkJRWGRDTzBGQlEzcERPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4blFrRkJaMEk3UVVGRGFFSTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRUQ3hIUVVGSE8wRkJRMGc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk96czdPenM3T3pzN096czdRVU01UlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN08wRkRUa0VzYTBWQlFXMUNMRzFDUVVGUExFTkJRVU1zYlVSQlFWRTdRVUZEYmtNc1pVRkJaU3h0UWtGQlR5eERRVUZETERaRFFVRk5PMEZCUXpkQ0xHRkJRV0VzYlVKQlFVOHNRMEZCUXl4dlJFRkJUenRCUVVNMVFpeDNRa0ZCZDBJc2JVSkJRVThzUTBGQlF5eDFSa0ZCYjBJN1FVRkRjRVFzY1VKQlFYRkNMRzFDUVVGUExFTkJRVU1zWjBaQlFYVkNPMEZCUTNCRUxGbEJRVmtzYlVKQlFVOHNRMEZCUXl4M1JFRkJVenRCUVVNM1FpeGhRVUZoTEcxQ1FVRlBMRU5CUVVNc0swUkJRV003UVVGRGJrTXNZVUZCWVN4dFFrRkJUeXhEUVVGRExHMUVRVUZSTzBGQlF6ZENMR2RDUVVGblFpeHRRa0ZCVHl4RFFVRkRMR2RGUVVGaE8wRkJRM0pETEd0Q1FVRnJRaXh0UWtGQlR5eERRVUZETERCRVFVRlZPMEZCUTNCRExHbENRVUZwUWl4dFFrRkJUeXhEUVVGRExEQkVRVUZWT3p0QlFVVnVRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2JVTkJRVzFETEhWQ1FVRjFRanRCUVVNeFJEdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE96dEJRVVZJTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzFEUVVGdFF6czdRVUZGYmtNN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdPMEZCUlVnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEcxRFFVRnRRenM3UVVGRmJrTTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNiVU5CUVcxRE96dEJRVVZ1UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPenRCUVVWSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYlVOQlFXMURPenRCUVVWdVF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZIT3p0QlFVVklPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h2UWtGQmIwSXNNa0pCUVRKQ08wRkJReTlETERCRFFVRXdRenRCUVVNeFF6dEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3huUkVGQlowUXNORUpCUVRSQ08wRkJRelZGT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3huUkVGQlowUXNORUpCUVRSQ08wRkJRelZGT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdPenM3T3pzN096czdPenRCUXpGVFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN096czdPenM3T3pzN096czdRVU5ZUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzYTBKQlFXdENMRTlCUVU4N1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNhVUpCUVdsQ096dEJRVVZxUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPenM3UVVOc1MwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIVkNRVUYxUWl4elFrRkJjMEk3UVVGRE4wTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSTdRVUZEY2tJN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSEZEUVVGeFF6czdRVUZGY2tNN1FVRkRRVHRCUVVOQk96dEJRVVZCTERKQ1FVRXlRanRCUVVNelFqdEJRVU5CTzBGQlEwRTdRVUZEUVN3MFFrRkJORUlzVlVGQlZUczdPenM3T3pzN096czdPMEZEZGt4MFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeE5RVUZOTEV0QlFUUkNPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdPMEZCUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhORFFVRnpRenRCUVVOMFF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRU5CUVVNc1F6czdPenM3T3pzN096czdRVU01UkVRN1FVRkRRU3hoUVVGaExHMUNRVUZQTEVOQlFVTXNhMFJCUVZFN1FVRkROMEk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVOQlFVTTdRVUZEUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdPenM3T3pzN096czdRVU0zUkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRllUczdRVUZGWWpzN1FVRkZRU3hoUVVGaExHMUNRVUZQTEVOQlFVTXNORVJCUVdFN1FVRkRiRU03TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEUkNRVUUwUWp0QlFVTTFRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRFpDUVVFMlFpeHpRMEZCYzBNc2MwTkJRWE5ETzBGQlEzcEhPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNNa0pCUVRKQ08wRkJRek5DTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hET3pzN096czdPenM3T3p0QlEzWlRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4dFFrRkJUeXhEUVVGRExHZEZRVUZsT3p0QlFVVXhRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3TzBGRGRrSkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hYUVVGWExGTkJRVk03UVVGRGNFSXNWMEZCVnl4UFFVRlBPMEZCUTJ4Q0xHRkJRV0VzVTBGQlV6dEJRVU4wUWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWMEZCVnl4UFFVRlBPMEZCUTJ4Q0xHRkJRV0U3UVVGRFlqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3T3p0QlEyeEZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRenM3T3pzN096czdPenM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMSE5DUVVGelFqdEJRVU42UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0N4MVFrRkJkVUlzVTBGQlV6dEJRVU5vUXp0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRmRCUVZjc1QwRkJUenRCUVVOc1FpeFhRVUZYTEU5QlFVODdRVUZEYkVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVkQlFVYzdPMEZCUlVnN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTdzBRMEZCTkVNc1MwRkJTenM3UVVGRmFrUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVR0QlFVTkJMRzFEUVVGdFF5eFBRVUZQTzBGQlF6RkRPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFTeDVSRUZCZVVRN1FVRkRla1E3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFhRVUZYTzBGQlExZ3NVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRU3hYUVVGWE8wRkJRMWc3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZIT3p0QlFVVklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeHRRa0ZCVHl4RFFVRkRMRGhGUVVGdlFqczdRVUZGTDBNN1FVRkRRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGZEJRVmNzVTBGQlV6dEJRVU53UWp0QlFVTkJMRmRCUVZjc1UwRkJVenRCUVVOd1FqdEJRVU5CTEcxQ1FVRnRRaXh0UWtGQlR5eERRVUZETEdsRlFVRlZPenRCUVVWeVF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPMEZEZW10Q1FUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN1FVRkRSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRFJEUVVFMFF6czdRVUZGTlVNN096czdPenM3T3pzN096dEJRMjVDUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeHpRa0ZCYzBJN1FVRkRla003TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMmhDUVN4UlFVRk5RU3hoUVVGaExFZEJRVWxETEZsQlFVUXNTVUZCYVVJc1kwRkJZMEVzV1VGQlpDeERRVUV3UWp0QlFVVTNSQ3hWUVVGTlF5eFhRVUZPTEVOQlFXdENReXhSUVVGc1FpeEZRVUV5UWp0QlFVTjJRaXhoUVVGUExFMUJRVTBzUzBGQlMwTXNVVUZCVEN4RFFVRmpSQ3hSUVVGa0xFVkJRWGRDTEVsQlFYaENMRU5CUVdJN1FVRkRTRHRCUVVORU96czdPenM3UVVGSlFTeFZRVUZOUlN4WlFVRk9MRU5CUVcxQ1JpeFJRVUZ1UWl4RlFVRTJRa2NzVTBGQk4wSXNSVUZCZFVNN1FVRkRia01zWVVGQlR5eE5RVUZOTEV0QlFVdERMRk5CUVV3c1EwRkJaVW9zVVVGQlppeEZRVUY1UWtjc1UwRkJla0lzUTBGQllqdEJRVU5JT3p0QlFVVkVMRlZCUVUxRkxGRkJRVTRzUTBGQlpVTXNSMEZCWml4RlFVRnRRanRCUVVObUxHRkJRVThzU1VGQlNVTXNUMEZCU2l4RFFVRlpMRTlCUVU5RExFOUJRVkFzUlVGQlowSkRMRTFCUVdoQ0xFdEJRWGxDTzBGQlEzaERMRmxCUVVsRExFMUJRVTBzUjBGQlJ5eE5RVUZOUXl4cFFrRkJUVU1zVlVGQlRpeERRVUZwUWs0c1IwRkJha0lzUTBGQmJrSTdRVUZEUVN4WlFVRkpUeXhIUVVGSExFZEJRVWNzU1VGQlNVTXNZMEZCU2l4RlFVRldPMEZCUTBGRUxGZEJRVWNzUTBGQlEwVXNSVUZCU2l4RFFVRlBMRkZCUVZBc1JVRkJhVUlzV1VGQlZUdEJRVU4yUWxBc2FVSkJRVThzUTBGQlF5eExRVUZMVVN4SlFVRk9MRU5CUVZBN1FVRkRTQ3hUUVVaRU8wRkJSMEZJTEZkQlFVY3NRMEZCUTBVc1JVRkJTaXhEUVVGUExFOUJRVkFzUlVGQlowSkZMRWRCUVVRc1NVRkJUenRCUVVOc1FrTXNhVUpCUVU4c1EwRkJRME1zUzBGQlVpeERRVUZqUml4SFFVRmtPMEZCUTBGU0xHZENRVUZOTEVOQlFVTlJMRWRCUVVRc1EwRkJUanRCUVVOSUxGTkJTRVE3UVVGSlFWQXNZMEZCVFN4RFFVRkRWU3hKUVVGUUxFTkJRVmxRTEVkQlFWbzdRVUZEU0N4UFFWaE5MRU5CUVZBN1FVRlpTRHM3UVVGRlJDeFZRVUZOVVN4WlFVRk9MRU5CUVcxQ1ppeEhRVUZ1UWl4RlFVRjNRazRzVVVGQmVFSXNSVUZCYVVNN1FVRkROMElzVlVGQlNXZENMRWxCUVVrc1IwRkJSeXhOUVVGTkxFdEJRVXRZTEZGQlFVd3NRMEZCWTBNc1IwRkJaQ3hEUVVGcVFqdEJRVU5CTEdGQlFVOHNUVUZCVFN4TFFVRkxTaXhaUVVGTUxFTkJRV3RDUml4UlFVRnNRaXhGUVVFMFFtZENMRWxCUVRWQ0xFTkJRV0k3UVVGRFNEczdRVUZGUkN4VlFVRk5UU3hoUVVGT0xFTkJRVzlDYUVJc1IwRkJjRUlzUlVGQmVVSk9MRkZCUVhwQ0xFVkJRVzFEZFVJc1YwRkJia01zUlVGQkswTTdRVUZETTBNc1dVRkJUVU1zUzBGQlN5eERRVUZETEc5Q1FVRkVMRU5CUVZnN1FVRkRTRHM3UVVGdVF6UkVMRWRCUVdwRk96dHBRa0Z4UTJVelFpeGhPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZGtOQkxGRkJRVTAwUWl4WFFVRk9MRU5CUVdsQ08wRkJRelZDUXl4bFFVRlhMRU5CUVVORExFOUJRVVFzUlVGQlV6dEJRVU5vUWl4WFFVRkxRU3hQUVVGTUxFZEJRV1ZCTEU5QlFXWTdRVUZEU0RzN1FVRkRSQ3hSUVVGSlF5eFhRVUZLTEVkQlFXbENPMEZCUTJJc1lVRkJUeXhMUVVGTFJDeFBRVUZhTzBGQlEwZzdPMEZCVGpKQ096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEwOW9ReXhSUVVGTlJTeGpRVUZPTEZOQlFUWkNReXh2UWtGQlUwTXNUMEZCVkN4RFFVRnBRa01zYjBKQlFXcENMRVZCUTA0N1FVRkJReXhaUVVGUkxFTkJRVU5ETERaQ1FVRkVMRVZCUVd0Q2NFTXNjMEpCUVd4Q0xFTkJRVlE3UVVGRFJTeFhRVUZQTEVOQlFVTnhReXc0UWtGQlJDeEZRVUZuUW5KRExITkNRVUZvUWp0QlFVUlVMRWRCUkUwc1EwRkJOMElzUTBGRlowVTdRVUZGTlVSelF5eHBRa0ZCWVN4RFFVRkRReXhIUVVGRUxFVkJRVXM3UVVGRFpFRXNVMEZCUnl4SFFVRkhRU3hIUVVGSExFTkJRVU5ETEU5QlFVb3NRMEZCV1N4alFVRmFMRVZCUVRKQ0xFZEJRVE5DTEVOQlFVNDdPMEZCUTBFc1ZVRkJSMFFzUjBGQlJ5eERRVUZETEVOQlFVUXNRMEZCU0N4TFFVRlRMRWRCUVZvc1JVRkJaMEk3UVVGRFdpeGxRVUZQUVN4SFFVRlFPMEZCUTBnc1QwRkdSQ3hOUVVkSk8wRkJRMEVzWlVGQlR5eE5RVUZOUVN4SFFVRmlPMEZCUTBnN1FVRkRTanM3UVVGRlJFVXNlVUpCUVhGQ0xFTkJRVU5ETEVsQlFVUXNSVUZCVFR0QlFVTjJRaXhWUVVGSlF5eFBRVUZQTEVkQlFVZEVMRWxCUVdRN1FVRkRRU3hWUVVGSlJTeExRVUZMTEVkQlFVY3NTVUZCU1VNc1RVRkJTaXhEUVVGWkxFbEJRVWRHTEU5QlFWRXNTVUZCZGtJc1JVRkJNa0lzUjBGQk0wSXNRMEZCV2p0QlFVTkJMR0ZCUVZGSExGRkJRVVFzU1VGQldVRXNVVUZCVVN4RFFVRkRReXhMUVVGVUxFTkJRV1ZJTEV0QlFXWXNTMEZCZVVJc1JVRkJOVU03UVVGRFNEczdRVUZGUkN4VlFVRk5TU3hQUVVGT0xFTkJRV05VTEVkQlFXUXNSVUZCYlVKVkxGRkJRVkVzUjBGQlF5eExRVUUxUWl4RlFVRnJRenRCUVVNNVFpeGhRVUZQTEVsQlFVbDJReXhQUVVGS0xFTkJRVmtzUTBGQlEwTXNUMEZCUkN4RlFVRlZReXhOUVVGV0xFdEJRVzFDTzBGQlEyeERMR0ZCUVV0clFpeFBRVUZNTEVOQlFXRnZRaXhIUVVGaUxFTkJRV2xDV0N4SFFVRnFRaXhGUVVGelFqdEJRVUZEVlR0QlFVRkVMRk5CUVhSQ0xFVkJRV3RETEVOQlFVTTNRaXhIUVVGRUxFVkJRVTFFTEVsQlFVNHNTMEZCWVR0QlFVTXpReXhqUVVGSFF5eEhRVUZJTEVWQlFVODdRVUZEU0VNc2JVSkJRVThzUTBGQlEwTXNTMEZCVWl4RFFVRmpPMEZCUVVOR08wRkJRVVFzWVVGQlpEdEJRVU5CVWl4clFrRkJUU3hEUVVGRExGbEJRVVFzUTBGQlRqdEJRVU5JTEZkQlNFUXNUVUZKU1R0QlFVTkJSQ3h0UWtGQlR5eERRVUZETzBGQlFVTXNaVUZCUXpSQ0xFZEJRVVFzUjBGQlQzQkNPMEZCUVZJc1lVRkJSQ3hEUVVGUU8wRkJRMGc3UVVGRFNpeFRRVkpFTzBGQlUwZ3NUMEZXVFN4RFFVRlFPMEZCVjBnN08wRkJSMFFzVlVGQlRXZERMRTlCUVU0c1EwRkJZMW9zUjBGQlpDeEZRVUZ0UW5CQ0xFbEJRVzVDTEVWQlFYZENPMEZCUlhCQ0xHRkJRVThzU1VGQlNWUXNUMEZCU2l4RFFVRlpMRU5CUVVORExFOUJRVVFzUlVGQlZVTXNUVUZCVml4TFFVRnRRanRCUVVOc1F6SkNMRmRCUVVjc1IwRkJSeXhMUVVGTFJDeGhRVUZNTEVOQlFXMUNReXhIUVVGdVFpeERRVUZPTzBGQlEwRXNZVUZCUzFRc1QwRkJUQ3hEUVVGaGMwSXNSMEZCWWl4RFFVRnBRbUlzUjBGQmFrSXNSVUZCYzBKd1FpeEpRVUYwUWl4RlFVRTJRa01zUjBGQlJDeEpRVUZQTzBGQlF5OUNMR05CUVVkQkxFZEJRVWdzUlVGQlR6dEJRVU5JUXl4dFFrRkJUeXhEUVVGRFF5eExRVUZTTEVOQlFXTTdRVUZCUTBZN1FVRkJSQ3hoUVVGa08wRkJRMEZTTEd0Q1FVRk5MRU5CUVVNc1lVRkJSQ3hEUVVGT08wRkJRMGdzVjBGSVJDeE5RVWxKTzBGQlEwRkVMRzFDUVVGUExFTkJRVU0wUWl4SFFVRkVMRU5CUVZBN1FVRkRTRHRCUVVOS0xGTkJVa1E3UVVGVFNDeFBRVmhOTEVOQlFWQTdRVUZaU0RzN1FVRkZSQ3hWUVVGTll5eFBRVUZPTEVOQlFXTmtMRWRCUVdRc1JVRkJhMEk3UVVGRFpDeGhRVUZQTEVsQlFVazNRaXhQUVVGS0xFTkJRVmtzUTBGQlEwTXNUMEZCUkN4RlFVRlZReXhOUVVGV0xFdEJRVzFDTzBGQlEyeERNa0lzVjBGQlJ5eEhRVUZITEV0QlFVdEVMR0ZCUVV3c1EwRkJiVUpETEVkQlFXNUNMRU5CUVU0N1FVRkRRU3hoUVVGTFZDeFBRVUZNTEVOQlFXRjNRaXhIUVVGaUxFTkJRV2xDWml4SFFVRnFRaXhGUVVGMVFtNUNMRWRCUVVRc1NVRkJUenRCUVVONlFpeGpRVUZIUVN4SFFVRklMRVZCUVU4N1FVRkRTRU1zYlVKQlFVOHNRMEZCUTBNc1MwRkJVaXhEUVVGak8wRkJRVU5HTzBGQlFVUXNZVUZCWkR0QlFVTkJVaXhyUWtGQlRTeERRVUZETEdGQlFVUXNRMEZCVGp0QlFVTklMRmRCU0VRc1RVRkpTVHRCUVVOQlJDeHRRa0ZCVHl4RFFVRkRORUlzUjBGQlJDeERRVUZRTzBGQlEwZzdRVUZEU2l4VFFWSkVPMEZCVTBnc1QwRllUU3hEUVVGUU8wRkJXVWc3TzBGQlJVUXNWVUZCVFdkQ0xFdEJRVTRzUTBGQldVTXNSMEZCV2l4RlFVRm5RanRCUVVOYUxHRkJRVThzU1VGQlNUbERMRTlCUVVvc1EwRkJXU3hEUVVGRFF5eFBRVUZFTEVWQlFWVkRMRTFCUVZZc1MwRkJiVUk3UVVGRGJFTXNZVUZCUzJ0Q0xFOUJRVXdzUTBGQllYbENMRXRCUVdJc1EwRkJiVUpETEVkQlFXNUNMRVZCUVhkQ0xFTkJRVU53UXl4SFFVRkVMRVZCUVUxRUxFbEJRVTRzUzBGQllUdEJRVU5xUXl4alFVRkhReXhIUVVGSUxFVkJRVTg3UVVGRFNFTXNiVUpCUVU4c1EwRkJRME1zUzBGQlVpeERRVUZqTzBGQlFVTkdPMEZCUVVRc1lVRkJaRHRCUVVOQlVpeHJRa0ZCVFN4RFFVRkRMRmRCUVVRc1EwRkJUanRCUVVOSUxGZEJTRVFzVFVGSlNUdEJRVU5CUkN4dFFrRkJUeXhEUVVGRE5rTXNSMEZCUkN4RFFVRlFPMEZCUTBnN1FVRkRTaXhUUVZKRU8wRkJVMGdzVDBGV1RTeERRVUZRTzBGQlYwZzdPMEZCUjBRc1ZVRkJUVU1zVlVGQlRpeERRVUZwUW5SRUxGRkJRV3BDTEVWQlFUQkNPMEZCUTNSQ0xHRkJRVThzU1VGQlNVOHNUMEZCU2l4RFFVRlpMRU5CUVVORExFOUJRVVFzUlVGQlZVTXNUVUZCVml4TFFVRnRRanRCUVVOc1F5eGhRVUZMYTBJc1QwRkJUQ3hEUVVGaGQwSXNSMEZCWWl4RFFVRnBRbTVFTEZGQlFXcENMRVZCUVRSQ2FVSXNSMEZCUkN4SlFVRlBPMEZCUXpsQ0xHTkJRVWRCTEVkQlFVZ3NSVUZCVHp0QlFVTklReXh0UWtGQlR5eERRVUZEUXl4TFFVRlNMRU5CUVdNN1FVRkJRMFk3UVVGQlJDeGhRVUZrTzBGQlEwRlNMR3RDUVVGTkxFTkJRVU1zVjBGQlJDeERRVUZPTzBGQlEwZ3NWMEZJUkN4TlFVbEpPMEZCUTBGRUxHMUNRVUZQTEVOQlFVTTJReXhIUVVGRUxFTkJRVkE3UVVGRFNEdEJRVU5LTEZOQlVrUTdRVUZUU0N4UFFWWk5MRU5CUVZBN1FVRlhTRHM3UVVGRlJDeFZRVUZOUlN4clFrRkJUaXhEUVVGNVFuWkVMRkZCUVhwQ0xFVkJRV3RETzBGQlF6bENMRmxCUVUxM1JDeExRVUZMTEVkQlFVbHdRaXhIUVVGRUxFdEJRVkU3UVVGQlEzRkNMRmxCUVVrc1JVRkJSU3hMUVVGUU8wRkJRV055UWl4WFFVRkhMRVZCUVVWQk8wRkJRVzVDTEU5QlFWSXNRMEZCWkRzN1FVRkRRU3hWUVVGSmMwSXNVVUZCVVN4SFFVRkhMRTFCUVUwc1MwRkJTME1zVjBGQlRDeERRVUZwUWpORUxGRkJRV3BDTEVOQlFYSkNPMEZCUTBFc1ZVRkJTVFJFTEZWQlFWVXNSMEZCUjBZc1VVRkJVU3hEUVVGRFJ5eEhRVUZVTEVOQlFXRkRMRU5CUVVNc1NVRkJSVTRzUzBGQlN5eERRVUZEVFN4RFFVRkVMRU5CUVhKQ0xFTkJRV3BDTzBGQlEwRXNZVUZCVHl4TlFVRk5MRXRCUVV0V0xFdEJRVXdzUTBGQlYxRXNWVUZCV0N4RFFVRmlPMEZCUTBnN08wRkJSVVFzVlVGQlRVUXNWMEZCVGl4RFFVRnJRak5FTEZGQlFWRXNSMEZCUXl4SFFVRXpRaXhGUVVFclFqdEJRVU16UWl4WlFVRk5LMFFzVlVGQlZTeEhRVUZITEV0QlFVdDZRaXh4UWtGQlRDeERRVUV5UW5SRExGRkJRVE5DTEVOQlFXNUNPMEZCUTBFc1lVRkJUeXhKUVVGSlR5eFBRVUZLTEVOQlFWa3NRMEZCUTBNc1QwRkJSQ3hGUVVGVlF5eE5RVUZXTEV0QlFXMUNPMEZCUTJ4RExGbEJRVWxwUkN4UlFVRlJMRWRCUVVjc1JVRkJaanRCUVVOQkxHRkJRVXN2UWl4UFFVRk1MRU5CUVdGeFF5eGxRVUZpTEVkQlEwdHFSQ3hGUVVSTUxFTkJRMUVzVFVGRVVpeEZRVU5wUW5GQ0xFZEJRVVFzU1VGQlVUdEJRVU5vUWtFc1lVRkJSeXhIUVVGSFFTeEhRVUZITEVOQlFVTTJRaXhSUVVGS0xFTkJRV0VzVFVGQllpeERRVUZPT3p0QlFVTkJMR05CUVVkR0xGVkJRVlVzUTBGQlF6TkNMRWRCUVVRc1EwRkJWaXhEUVVGblFqaENMRTFCUVdoQ0xFdEJRWGxDTEVOQlFUVkNMRVZCUVRoQ08wRkJRekZDVWl4dlFrRkJVU3hEUVVGRFV5eEpRVUZVTEVOQlFXTXZRaXhIUVVGa08wRkJRMGc3UVVGRFNpeFRRVTVNTEVWQlQwdHlRaXhGUVZCTUxFTkJUMUVzVDBGUVVpeEZRVTlwUWl4TlFVRk5VQ3hQUVVGUExFTkJRVU5yUkN4UlFVRkVMRU5CVURsQ0xFVkJVVXN6UXl4RlFWSk1MRU5CVVZFc1MwRlNVaXhGUVZGblFpeE5RVUZOVUN4UFFVRlBMRU5CUVVOclJDeFJRVUZFTEVOQlVqZENMRVZCVTBzelF5eEZRVlJNTEVOQlUxRXNUMEZVVWl4RlFWTnJRa1VzUjBGQlJDeEpRVUZSTzBGQlEycENReXhwUWtGQlR5eERRVUZEUXl4TFFVRlNMRU5CUVdOR0xFZEJRV1E3UVVGRFFWSXNaMEpCUVUwc1EwRkJReXh0UWtGQlJDeERRVUZPTzBGQlEwZ3NVMEZhVER0QlFXRklMRTlCWmswc1EwRkJVRHRCUVdkQ1NEdEJRVU5FT3pzN096czdRVUZKUVN4VlFVRk5VaXhSUVVGT0xFTkJRV1ZFTEZGQlFXWXNSVUZCZDBJN1FVRkRjRUlzVlVGQlNXOUZMRWxCUVVrc1IwRkJSeXhOUVVGTkxFdEJRVXQyUWl4UFFVRk1MRU5CUVdFM1F5eFJRVUZpTEVOQlFXcENPMEZCUTBFc1lVRkJUMjlGTEVsQlFVa3NRMEZCUTNCRkxGRkJRVVFzUTBGQldEdEJRVU5JTzBGQlEwUTdPenM3T3p0QlFVbEJMRlZCUVUxSkxGTkJRVTRzUTBGQlowSktMRkZCUVdoQ0xFVkJRVEJDWjBJc1NVRkJNVUlzUlVGQkswSTdRVUZETTBJc1lVRkJUeXhOUVVGTkxFdEJRVXRuUXl4UFFVRk1MRU5CUVdGb1JDeFJRVUZpTEVWQlFYVkNaMElzU1VGQmRrSXNRMEZCWWp0QlFVTklPenRCUVVWRUxGVkJRVTF4UkN4VlFVRk9MRU5CUVdsQ2NrVXNVVUZCYWtJc1JVRkJNRUk3UVVGRGRFSXNZVUZCVHl4TlFVRk5MRXRCUVV0clJDeFBRVUZNTEVOQlFXRnNSQ3hSUVVGaUxFTkJRV0k3UVVGRFNEczdRVUZGUkN4VlFVRk5jMFVzVTBGQlRpeERRVUZuUW1oRkxFZEJRV2hDTEVWQlFYRkNUaXhSUVVGeVFpeEZRVUU0UWp0QlFVTXhRaXhWUVVGSmRVVXNVVUZCVVN4SFFVRkhMRTFCUVUwMVJDeHBRa0ZCVFRaRUxGTkJRVTRzUTBGQlowSnNSU3hIUVVGb1FpeERRVUZ5UWp0QlFVTkJMR0ZCUVU4c1RVRkJUU3hMUVVGTFJpeFRRVUZNTEVOQlFXVktMRkZCUVdZc1JVRkJlVUoxUlN4UlFVRjZRaXhEUVVGaU8wRkJRMGc3TzBGQlJVUXNWVUZCVFVVc1ZVRkJUaXhEUVVGcFFtNUZMRWRCUVdwQ0xFVkJRWE5DVGl4UlFVRjBRaXhGUVVGblF6QkZMRmRCUVZjc1IwRkJReXhKUVVFMVF5eEZRVUZwUkR0QlFVTTNReXhaUVVGTmJFUXNTMEZCU3l4RFFVRkRMRzlDUVVGRUxFTkJRVmc3UVVGRFNEczdRVUZzU2pKRU96dHBRa0Z4U21wRUxFbEJRVWxMTEdOQlFVb3NSVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTNTbVlzVVVGQlRVa3NaVUZCWlN4SFFVRkpia01zV1VGQlJDeEpRVUZwUWl4alFVRmpRU3haUVVGa0xFTkJRVEJDTzBGQlF5OUVORUlzWlVGQlZ5eEhRVUZGTzBGQlExUXNWVUZCU1dsRUxGTkJRVk1zUjBGQlIwTXNiVUpCUVU4c1EwRkJReXcwUWtGQlJDeERRVUYyUWpzN1FVRkRRU3haUVVGTkxITkNRVUZSUkN4VFFVRlRMRU5CUVVNc1RVRkJSQ3hEUVVGcVFpeERRVUZPTzBGQlEwZzdPMEZCU2poRUxFZEJRVzVGT3p0cFFrRk5aVEZETEdVN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5NWml4UlFVRk5ReXhoUVVGaExFZEJRVWx3UXl4WlFVRkVMRWxCUVdsQ0xHTkJRV05CTEZsQlFXUXNRMEZCTUVJN1FVRkROMFEwUWl4bFFVRlhMRWRCUVVVN1FVRkRWQ3hWUVVGSmJVUXNUMEZCVHl4SFFVRkhSQ3h0UWtGQlR5eERRVUZETEhORVFVRkVMRU5CUVhKQ096dEJRVU5CTEZsQlFVMHNjMEpCUVZGRExFOUJRVThzUTBGQlF5eE5RVUZFTEVOQlFXWXNRMEZCVGp0QlFVTklPenRCUVVvMFJDeEhRVUZxUlRzN2FVSkJUV1V6UXl4aE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRVbVlzVVVGQlRUUkRMR0ZCUVdFc1IwRkJTVU1zVTBGQlJDeEpRVUZqTEdOQlFXTkJMRk5CUVdRc1EwRkJkVUk3UVVGRGRrUXNWVUZCVFVNc1kwRkJUaXhIUVVGelFqdEJRVU5zUWl4aFFVRlBMRTFCUVUwc1MwRkJTM0pFTEU5QlFVd3NRMEZCWVdkRExGZEJRV0lzUlVGQllqdEJRVU5JT3p0QlFVTkVMRkZCUVVselFpeFBRVUZLTEVOQlFWbDBSQ3hQUVVGYUxFVkJRVzlDTzBGQlEyaENMRmRCUVV0QkxFOUJRVXdzUjBGQlpVRXNUMEZCWmp0QlFVTklPenRCUVVWRUxGRkJRVWx6UkN4UFFVRktMRWRCUVdFN1FVRkRWQ3hoUVVGUExFdEJRVXQwUkN4UFFVRmFPMEZCUTBnN08wRkJWbk5FTEVkQlFUTkVPenRwUWtGWlpXMUVMR0U3T3pzN096czdPenM3T3pzN1FVTmFaaXhsT3pzN096czdPenM3T3p0QlEwRkJMR1U3T3pzN096czdPenM3TzBGRFFVRXNPRVE3T3pzN096czdPenM3TzBGRFFVRXNkVVFpTENKbWFXeGxJam9pUUdOaGRYTmhiRTVsZEM5emRHOXlZV2RsTG5kbFlpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWlobWRXNWpkR2x2YmlCM1pXSndZV05yVlc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaWh5YjI5MExDQm1ZV04wYjNKNUtTQjdYRzVjZEdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWmhZM1J2Y25rb2NtVnhkV2x5WlNoY0ltTmhkWE5oYkMxdVpYUXVkWFJwYkhOY0lpa3NJSEpsY1hWcGNtVW9YQ0pzWlhabGJDMXFjMXdpS1NrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHUmxabWx1WlNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlCa1pXWnBibVV1WVcxa0tWeHVYSFJjZEdSbFptbHVaU2hiWENKallYVnpZV3d0Ym1WMExuVjBhV3h6WENJc0lGd2liR1YyWld3dGFuTmNJbDBzSUdaaFkzUnZjbmtwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCbGVIQnZjblJ6SUQwOVBTQW5iMkpxWldOMEp5bGNibHgwWEhSbGVIQnZjblJ6VzF3aVFHTmhkWE5oYkU1bGRDOXpkRzl5WVdkbFhDSmRJRDBnWm1GamRHOXllU2h5WlhGMWFYSmxLRndpWTJGMWMyRnNMVzVsZEM1MWRHbHNjMXdpS1N3Z2NtVnhkV2x5WlNoY0lteGxkbVZzTFdwelhDSXBLVHRjYmx4MFpXeHpaVnh1WEhSY2RISnZiM1JiWENKQVkyRjFjMkZzVG1WMEwzTjBiM0poWjJWY0lsMGdQU0JtWVdOMGIzSjVLSEp2YjNSYlhDSmpZWFZ6WVd3dGJtVjBMblYwYVd4elhDSmRMQ0J5YjI5MFcxd2liR1YyWld3dGFuTmNJbDBwTzF4dWZTa29kR2hwY3l3Z1puVnVZM1JwYjI0b1gxOVhSVUpRUVVOTFgwVllWRVZTVGtGTVgwMVBSRlZNUlY5allYVnpZV3hmYm1WMFgzVjBhV3h6WDE4c0lGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZmJHVjJaV3hrYjNkdVgxOHBJSHRjYm5KbGRIVnliaUFpTENJZ1hIUXZMeUJVYUdVZ2JXOWtkV3hsSUdOaFkyaGxYRzRnWEhSMllYSWdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN5QTlJSHQ5TzF4dVhHNGdYSFF2THlCVWFHVWdjbVZ4ZFdseVpTQm1kVzVqZEdsdmJseHVJRngwWm5WdVkzUnBiMjRnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHlodGIyUjFiR1ZKWkNrZ2UxeHVYRzRnWEhSY2RDOHZJRU5vWldOcklHbG1JRzF2WkhWc1pTQnBjeUJwYmlCallXTm9aVnh1SUZ4MFhIUnBaaWhwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU2tnZTF4dUlGeDBYSFJjZEhKbGRIVnliaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYUzVsZUhCdmNuUnpPMXh1SUZ4MFhIUjlYRzRnWEhSY2RDOHZJRU55WldGMFpTQmhJRzVsZHlCdGIyUjFiR1VnS0dGdVpDQndkWFFnYVhRZ2FXNTBieUIwYUdVZ1kyRmphR1VwWEc0Z1hIUmNkSFpoY2lCdGIyUjFiR1VnUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNBOUlIdGNiaUJjZEZ4MFhIUnBPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzT2lCbVlXeHpaU3hjYmlCY2RGeDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dUlGeDBYSFI5TzF4dVhHNGdYSFJjZEM4dklFVjRaV04xZEdVZ2RHaGxJRzF2WkhWc1pTQm1kVzVqZEdsdmJseHVJRngwWEhSdGIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1allXeHNLRzF2WkhWc1pTNWxlSEJ2Y25SekxDQnRiMlIxYkdVc0lHMXZaSFZzWlM1bGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktUdGNibHh1SUZ4MFhIUXZMeUJHYkdGbklIUm9aU0J0YjJSMWJHVWdZWE1nYkc5aFpHVmtYRzRnWEhSY2RHMXZaSFZzWlM1c0lEMGdkSEoxWlR0Y2JseHVJRngwWEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dUlGeDBYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNGdYSFI5WEc1Y2JseHVJRngwTHk4Z1pYaHdiM05sSUhSb1pTQnRiMlIxYkdWeklHOWlhbVZqZENBb1gxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlh5bGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJTQTlJRzF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxJR05oWTJobFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1NZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWek8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1oyVjBkR1Z5SUdaMWJtTjBhVzl1SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNBOUlHWjFibU4wYVc5dUtHVjRjRzl5ZEhNc0lHNWhiV1VzSUdkbGRIUmxjaWtnZTF4dUlGeDBYSFJwWmlnaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJRzVoYldVcEtTQjdYRzRnWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUc1aGJXVXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQm5aWFIwWlhJZ2ZTazdYRzRnWEhSY2RIMWNiaUJjZEgwN1hHNWNiaUJjZEM4dklHUmxabWx1WlNCZlgyVnpUVzlrZFd4bElHOXVJR1Y0Y0c5eWRITmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNpQTlJR1oxYm1OMGFXOXVLR1Y0Y0c5eWRITXBJSHRjYmlCY2RGeDBhV1lvZEhsd1pXOW1JRk41YldKdmJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5LU0I3WEc0Z1hIUmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dKMDF2WkhWc1pTY2dmU2s3WEc0Z1hIUmNkSDFjYmlCY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUNkZlgyVnpUVzlrZFd4bEp5d2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNiaUJjZEgwN1hHNWNiaUJjZEM4dklHTnlaV0YwWlNCaElHWmhhMlVnYm1GdFpYTndZV05sSUc5aWFtVmpkRnh1SUZ4MEx5OGdiVzlrWlNBbUlERTZJSFpoYkhWbElHbHpJR0VnYlc5a2RXeGxJR2xrTENCeVpYRjFhWEpsSUdsMFhHNGdYSFF2THlCdGIyUmxJQ1lnTWpvZ2JXVnlaMlVnWVd4c0lIQnliM0JsY25ScFpYTWdiMllnZG1Gc2RXVWdhVzUwYnlCMGFHVWdibk5jYmlCY2RDOHZJRzF2WkdVZ0ppQTBPaUJ5WlhSMWNtNGdkbUZzZFdVZ2QyaGxiaUJoYkhKbFlXUjVJRzV6SUc5aWFtVmpkRnh1SUZ4MEx5OGdiVzlrWlNBbUlEaDhNVG9nWW1Wb1lYWmxJR3hwYTJVZ2NtVnhkV2x5WlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTUwSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VzSUcxdlpHVXBJSHRjYmlCY2RGeDBhV1lvYlc5a1pTQW1JREVwSUhaaGJIVmxJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHloMllXeDFaU2s3WEc0Z1hIUmNkR2xtS0cxdlpHVWdKaUE0S1NCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnWEhSY2RHbG1LQ2h0YjJSbElDWWdOQ2tnSmlZZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlBbUppQjJZV3gxWlNBbUppQjJZV3gxWlM1ZlgyVnpUVzlrZFd4bEtTQnlaWFIxY200Z2RtRnNkV1U3WEc0Z1hIUmNkSFpoY2lCdWN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z1hIUmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y2lodWN5azdYRzRnWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h1Y3l3Z0oyUmxabUYxYkhRbkxDQjdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQjJZV3gxWlNCOUtUdGNiaUJjZEZ4MGFXWW9iVzlrWlNBbUlESWdKaVlnZEhsd1pXOW1JSFpoYkhWbElDRTlJQ2R6ZEhKcGJtY25LU0JtYjNJb2RtRnlJR3RsZVNCcGJpQjJZV3gxWlNrZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLRzV6TENCclpYa3NJR1oxYm1OMGFXOXVLR3RsZVNrZ2V5QnlaWFIxY200Z2RtRnNkV1ZiYTJWNVhUc2dmUzVpYVc1a0tHNTFiR3dzSUd0bGVTa3BPMXh1SUZ4MFhIUnlaWFIxY200Z2JuTTdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5Qm5aWFJFWldaaGRXeDBSWGh3YjNKMElHWjFibU4wYVc5dUlHWnZjaUJqYjIxd1lYUnBZbWxzYVhSNUlIZHBkR2dnYm05dUxXaGhjbTF2Ym5rZ2JXOWtkV3hsYzF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV1SUQwZ1puVnVZM1JwYjI0b2JXOWtkV3hsS1NCN1hHNGdYSFJjZEhaaGNpQm5aWFIwWlhJZ1BTQnRiMlIxYkdVZ0ppWWdiVzlrZFd4bExsOWZaWE5OYjJSMWJHVWdQMXh1SUZ4MFhIUmNkR1oxYm1OMGFXOXVJR2RsZEVSbFptRjFiSFFvS1NCN0lISmxkSFZ5YmlCdGIyUjFiR1ZiSjJSbFptRjFiSFFuWFRzZ2ZTQTZYRzRnWEhSY2RGeDBablZ1WTNScGIyNGdaMlYwVFc5a2RXeGxSWGh3YjNKMGN5Z3BJSHNnY21WMGRYSnVJRzF2WkhWc1pUc2dmVHRjYmlCY2RGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrS0dkbGRIUmxjaXdnSjJFbkxDQm5aWFIwWlhJcE8xeHVJRngwWEhSeVpYUjFjbTRnWjJWMGRHVnlPMXh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOGdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNJSEJ5YjNCbGNuUjVLU0I3SUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2s3SUgwN1hHNWNiaUJjZEM4dklGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbkFnUFNCY0lsd2lPMXh1WEc1Y2JpQmNkQzh2SUV4dllXUWdaVzUwY25rZ2JXOWtkV3hsSUdGdVpDQnlaWFIxY200Z1pYaHdiM0owYzF4dUlGeDBjbVYwZFhKdUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOG9YMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV6SUQwZ1hDSXVMM055WXk5cGJtUmxlQzVxYzF3aUtUdGNiaUlzSW1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN1hHNGdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3WEc0Z0lDQWdaR1ZtWVhWc2REb2diMkpxWEc0Z0lIMDdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkRHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYmk4dklHTnZiWEJoY21VZ1lXNWtJR2x6UW5WbVptVnlJSFJoYTJWdUlHWnliMjBnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJabGNtOXpjeTlpZFdabVpYSXZZbXh2WWk4Mk9EQmxPV1UxWlRRNE9HWXlNbUZoWXpJM05UazVZVFUzWkdNNE5EUmhOak14TlRreU9HUmtMMmx1WkdWNExtcHpYRzR2THlCdmNtbG5hVzVoYkNCdWIzUnBZMlU2WEc1Y2JpOHFJVnh1SUNvZ1ZHaGxJR0oxWm1abGNpQnRiMlIxYkdVZ1puSnZiU0J1YjJSbExtcHpMQ0JtYjNJZ2RHaGxJR0p5YjNkelpYSXVYRzRnS2x4dUlDb2dRR0YxZEdodmNpQWdJRVpsY205emN5QkJZbTkxYTJoaFpHbHFaV2dnUEdabGNtOXpjMEJtWlhKdmMzTXViM0puUGlBOGFIUjBjRG92TDJabGNtOXpjeTV2Y21jK1hHNGdLaUJBYkdsalpXNXpaU0FnVFVsVVhHNGdLaTljYm1aMWJtTjBhVzl1SUdOdmJYQmhjbVVvWVN3Z1lpa2dlMXh1SUNCcFppQW9ZU0E5UFQwZ1lpa2dlMXh1SUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0I5WEc1Y2JpQWdkbUZ5SUhnZ1BTQmhMbXhsYm1kMGFEdGNiaUFnZG1GeUlIa2dQU0JpTG14bGJtZDBhRHRjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVJRDBnVFdGMGFDNXRhVzRvZUN3Z2VTazdJR2tnUENCc1pXNDdJQ3NyYVNrZ2UxeHVJQ0FnSUdsbUlDaGhXMmxkSUNFOVBTQmlXMmxkS1NCN1hHNGdJQ0FnSUNCNElEMGdZVnRwWFR0Y2JpQWdJQ0FnSUhrZ1BTQmlXMmxkTzF4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hnZ1BDQjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDMHhPMXh1SUNCOVhHNGdJR2xtSUNoNUlEd2dlQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQXhPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQXdPMXh1ZlZ4dVpuVnVZM1JwYjI0Z2FYTkNkV1ptWlhJb1lpa2dlMXh1SUNCcFppQW9aMnh2WW1Gc0xrSjFabVpsY2lBbUppQjBlWEJsYjJZZ1oyeHZZbUZzTGtKMVptWmxjaTVwYzBKMVptWmxjaUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbmJHOWlZV3d1UW5WbVptVnlMbWx6UW5WbVptVnlLR0lwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUFoSVNoaUlDRTlJRzUxYkd3Z0ppWWdZaTVmYVhOQ2RXWm1aWElwTzF4dWZWeHVYRzR2THlCaVlYTmxaQ0J2YmlCdWIyUmxJR0Z6YzJWeWRDd2diM0pwWjJsdVlXd2dibTkwYVdObE9seHVYRzR2THlCb2RIUndPaTh2ZDJscmFTNWpiMjF0YjI1cWN5NXZjbWN2ZDJscmFTOVZibWwwWDFSbGMzUnBibWN2TVM0d1hHNHZMMXh1THk4Z1ZFaEpVeUJKVXlCT1QxUWdWRVZUVkVWRUlFNVBVaUJNU1V0RlRGa2dWRThnVjA5U1N5QlBWVlJUU1VSRklGWTRJVnh1THk5Y2JpOHZJRTl5YVdkcGJtRnNiSGtnWm5KdmJTQnVZWEozYUdGc0xtcHpJQ2hvZEhSd09pOHZibUZ5ZDJoaGJHcHpMbTl5WnlsY2JpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXdPU0JVYUc5dFlYTWdVbTlpYVc1emIyNGdQREk0TUc1dmNuUm9MbU52YlQ1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYRzR2THlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pTQW5VMjltZEhkaGNtVW5LU3dnZEc5Y2JpOHZJR1JsWVd3Z2FXNGdkR2hsSUZOdlpuUjNZWEpsSUhkcGRHaHZkWFFnY21WemRISnBZM1JwYjI0c0lHbHVZMngxWkdsdVp5QjNhWFJvYjNWMElHeHBiV2wwWVhScGIyNGdkR2hsWEc0dkx5QnlhV2RvZEhNZ2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0pjYmk4dklITmxiR3dnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZENCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpYRzR2THlCbWRYSnVhWE5vWldRZ2RHOGdaRzhnYzI4c0lITjFZbXBsWTNRZ2RHOGdkR2hsSUdadmJHeHZkMmx1WnlCamIyNWthWFJwYjI1ek9seHVMeTljYmk4dklGUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUWdibTkwYVdObElHRnVaQ0IwYUdseklIQmxjbTFwYzNOcGIyNGdibTkwYVdObElITm9ZV3hzSUdKbElHbHVZMngxWkdWa0lHbHVYRzR2THlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmk4dlhHNHZMeUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdKMEZUSUVsVEp5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4dUx5OGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYRzR2THlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNiaTh2SUVGVlZFaFBVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSWdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT1hHNHZMeUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUlnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T1hHNHZMeUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVWdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT0lGUklSU0JUVDBaVVYwRlNSUzVjYmx4dWRtRnlJSFYwYVd3Z1BTQnlaWEYxYVhKbEtDZDFkR2xzTHljcE8xeHVkbUZ5SUdoaGMwOTNiaUE5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIazdYRzUyWVhJZ2NGTnNhV05sSUQwZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxPMXh1ZG1GeUlHWjFibU4wYVc5dWMwaGhkbVZPWVcxbGN5QTlJQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm1iMjhvS1NCN2ZTNXVZVzFsSUQwOVBTQW5abTl2Snp0Y2JuMG9LU2s3WEc1bWRXNWpkR2x2YmlCd1ZHOVRkSEpwYm1jZ0tHOWlhaWtnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1Wnk1allXeHNLRzlpYWlrN1hHNTlYRzVtZFc1amRHbHZiaUJwYzFacFpYY29ZWEp5WW5WbUtTQjdYRzRnSUdsbUlDaHBjMEoxWm1abGNpaGhjbkppZFdZcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNGdJR2xtSUNoMGVYQmxiMllnWjJ4dlltRnNMa0Z5Y21GNVFuVm1abVZ5SUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSXVhWE5XYVdWM0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRUZ5Y21GNVFuVm1abVZ5TG1selZtbGxkeWhoY25KaWRXWXBPMXh1SUNCOVhHNGdJR2xtSUNnaFlYSnlZblZtS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc0Z0lHbG1JQ2hoY25KaWRXWWdhVzV6ZEdGdVkyVnZaaUJFWVhSaFZtbGxkeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzRnSUdsbUlDaGhjbkppZFdZdVluVm1abVZ5SUNZbUlHRnljbUoxWmk1aWRXWm1aWElnYVc1emRHRnVZMlZ2WmlCQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMWNiaTh2SURFdUlGUm9aU0JoYzNObGNuUWdiVzlrZFd4bElIQnliM1pwWkdWeklHWjFibU4wYVc5dWN5QjBhR0YwSUhSb2NtOTNYRzR2THlCQmMzTmxjblJwYjI1RmNuSnZjaWR6SUhkb1pXNGdjR0Z5ZEdsamRXeGhjaUJqYjI1a2FYUnBiMjV6SUdGeVpTQnViM1FnYldWMExpQlVhR1ZjYmk4dklHRnpjMlZ5ZENCdGIyUjFiR1VnYlhWemRDQmpiMjVtYjNKdElIUnZJSFJvWlNCbWIyeHNiM2RwYm1jZ2FXNTBaWEptWVdObExseHVYRzUyWVhJZ1lYTnpaWEowSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCdmF6dGNibHh1THk4Z01pNGdWR2hsSUVGemMyVnlkR2x2YmtWeWNtOXlJR2x6SUdSbFptbHVaV1FnYVc0Z1lYTnpaWEowTGx4dUx5OGdibVYzSUdGemMyVnlkQzVCYzNObGNuUnBiMjVGY25KdmNpaDdJRzFsYzNOaFoyVTZJRzFsYzNOaFoyVXNYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBkV0ZzT2lCaFkzUjFZV3dzWEc0dkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWGh3WldOMFpXUTZJR1Y0Y0dWamRHVmtJSDBwWEc1Y2JuWmhjaUJ5WldkbGVDQTlJQzljWEhNcVpuVnVZM1JwYjI1Y1hITXJLRnRlWEZ3b1hGeHpYU29wWEZ4ektpODdYRzR2THlCaVlYTmxaQ0J2YmlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmJHcG9ZWEppTDJaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlM1dVlXMWxMMkpzYjJJdllXUmxaV1ZsWXpoaVptTmpOakEyT0dJeE9EZGtOMlE1Wm1JelpEVmlZakZrTTJFek1EZzVPUzlwYlhCc1pXMWxiblJoZEdsdmJpNXFjMXh1Wm5WdVkzUnBiMjRnWjJWMFRtRnRaU2htZFc1aktTQjdYRzRnSUdsbUlDZ2hkWFJwYkM1cGMwWjFibU4wYVc5dUtHWjFibU1wS1NCN1hHNGdJQ0FnY21WMGRYSnVPMXh1SUNCOVhHNGdJR2xtSUNobWRXNWpkR2x2Ym5OSVlYWmxUbUZ0WlhNcElIdGNiaUFnSUNCeVpYUjFjbTRnWm5WdVl5NXVZVzFsTzF4dUlDQjlYRzRnSUhaaGNpQnpkSElnUFNCbWRXNWpMblJ2VTNSeWFXNW5LQ2s3WEc0Z0lIWmhjaUJ0WVhSamFDQTlJSE4wY2k1dFlYUmphQ2h5WldkbGVDazdYRzRnSUhKbGRIVnliaUJ0WVhSamFDQW1KaUJ0WVhSamFGc3hYVHRjYm4xY2JtRnpjMlZ5ZEM1QmMzTmxjblJwYjI1RmNuSnZjaUE5SUdaMWJtTjBhVzl1SUVGemMyVnlkR2x2YmtWeWNtOXlLRzl3ZEdsdmJuTXBJSHRjYmlBZ2RHaHBjeTV1WVcxbElEMGdKMEZ6YzJWeWRHbHZia1Z5Y205eUp6dGNiaUFnZEdocGN5NWhZM1IxWVd3Z1BTQnZjSFJwYjI1ekxtRmpkSFZoYkR0Y2JpQWdkR2hwY3k1bGVIQmxZM1JsWkNBOUlHOXdkR2x2Ym5NdVpYaHdaV04wWldRN1hHNGdJSFJvYVhNdWIzQmxjbUYwYjNJZ1BTQnZjSFJwYjI1ekxtOXdaWEpoZEc5eU8xeHVJQ0JwWmlBb2IzQjBhVzl1Y3k1dFpYTnpZV2RsS1NCN1hHNGdJQ0FnZEdocGN5NXRaWE56WVdkbElEMGdiM0IwYVc5dWN5NXRaWE56WVdkbE8xeHVJQ0FnSUhSb2FYTXVaMlZ1WlhKaGRHVmtUV1Z6YzJGblpTQTlJR1poYkhObE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIUm9hWE11YldWemMyRm5aU0E5SUdkbGRFMWxjM05oWjJVb2RHaHBjeWs3WEc0Z0lDQWdkR2hwY3k1blpXNWxjbUYwWldSTlpYTnpZV2RsSUQwZ2RISjFaVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2MzUmhZMnRUZEdGeWRFWjFibU4wYVc5dUlEMGdiM0IwYVc5dWN5NXpkR0ZqYTFOMFlYSjBSblZ1WTNScGIyNGdmSHdnWm1GcGJEdGNiaUFnYVdZZ0tFVnljbTl5TG1OaGNIUjFjbVZUZEdGamExUnlZV05sS1NCN1hHNGdJQ0FnUlhKeWIzSXVZMkZ3ZEhWeVpWTjBZV05yVkhKaFkyVW9kR2hwY3l3Z2MzUmhZMnRUZEdGeWRFWjFibU4wYVc5dUtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJ1YjI0Z2RqZ2dZbkp2ZDNObGNuTWdjMjhnZDJVZ1kyRnVJR2hoZG1VZ1lTQnpkR0ZqYTNSeVlXTmxYRzRnSUNBZ2RtRnlJR1Z5Y2lBOUlHNWxkeUJGY25KdmNpZ3BPMXh1SUNBZ0lHbG1JQ2hsY25JdWMzUmhZMnNwSUh0Y2JpQWdJQ0FnSUhaaGNpQnZkWFFnUFNCbGNuSXVjM1JoWTJzN1hHNWNiaUFnSUNBZ0lDOHZJSFJ5ZVNCMGJ5QnpkSEpwY0NCMWMyVnNaWE56SUdaeVlXMWxjMXh1SUNBZ0lDQWdkbUZ5SUdadVgyNWhiV1VnUFNCblpYUk9ZVzFsS0hOMFlXTnJVM1JoY25SR2RXNWpkR2x2YmlrN1hHNGdJQ0FnSUNCMllYSWdhV1I0SUQwZ2IzVjBMbWx1WkdWNFQyWW9KMXhjYmljZ0t5Qm1ibDl1WVcxbEtUdGNiaUFnSUNBZ0lHbG1JQ2hwWkhnZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnZibU5sSUhkbElHaGhkbVVnYkc5allYUmxaQ0IwYUdVZ1puVnVZM1JwYjI0Z1puSmhiV1ZjYmlBZ0lDQWdJQ0FnTHk4Z2QyVWdibVZsWkNCMGJ5QnpkSEpwY0NCdmRYUWdaWFpsY25sMGFHbHVaeUJpWldadmNtVWdhWFFnS0dGdVpDQnBkSE1nYkdsdVpTbGNiaUFnSUNBZ0lDQWdkbUZ5SUc1bGVIUmZiR2x1WlNBOUlHOTFkQzVwYm1SbGVFOW1LQ2RjWEc0bkxDQnBaSGdnS3lBeEtUdGNiaUFnSUNBZ0lDQWdiM1YwSUQwZ2IzVjBMbk4xWW5OMGNtbHVaeWh1WlhoMFgyeHBibVVnS3lBeEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1emRHRmpheUE5SUc5MWREdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNWNiaTh2SUdGemMyVnlkQzVCYzNObGNuUnBiMjVGY25KdmNpQnBibk4wWVc1alpXOW1JRVZ5Y205eVhHNTFkR2xzTG1sdWFHVnlhWFJ6S0dGemMyVnlkQzVCYzNObGNuUnBiMjVGY25KdmNpd2dSWEp5YjNJcE8xeHVYRzVtZFc1amRHbHZiaUIwY25WdVkyRjBaU2h6TENCdUtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2N5QTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjeTVzWlc1bmRHZ2dQQ0J1SUQ4Z2N5QTZJSE11YzJ4cFkyVW9NQ3dnYmlrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUhNN1hHNGdJSDFjYm4xY2JtWjFibU4wYVc5dUlHbHVjM0JsWTNRb2MyOXRaWFJvYVc1bktTQjdYRzRnSUdsbUlDaG1kVzVqZEdsdmJuTklZWFpsVG1GdFpYTWdmSHdnSVhWMGFXd3VhWE5HZFc1amRHbHZiaWh6YjIxbGRHaHBibWNwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFYwYVd3dWFXNXpjR1ZqZENoemIyMWxkR2hwYm1jcE8xeHVJQ0I5WEc0Z0lIWmhjaUJ5WVhkdVlXMWxJRDBnWjJWMFRtRnRaU2h6YjIxbGRHaHBibWNwTzF4dUlDQjJZWElnYm1GdFpTQTlJSEpoZDI1aGJXVWdQeUFuT2lBbklDc2djbUYzYm1GdFpTQTZJQ2NuTzF4dUlDQnlaWFIxY200Z0oxdEdkVzVqZEdsdmJpY2dLeUFnYm1GdFpTQXJJQ2RkSnp0Y2JuMWNibVoxYm1OMGFXOXVJR2RsZEUxbGMzTmhaMlVvYzJWc1ppa2dlMXh1SUNCeVpYUjFjbTRnZEhKMWJtTmhkR1VvYVc1emNHVmpkQ2h6Wld4bUxtRmpkSFZoYkNrc0lERXlPQ2tnS3lBbklDY2dLMXh1SUNBZ0lDQWdJQ0FnYzJWc1ppNXZjR1Z5WVhSdmNpQXJJQ2NnSnlBclhHNGdJQ0FnSUNBZ0lDQjBjblZ1WTJGMFpTaHBibk53WldOMEtITmxiR1l1Wlhod1pXTjBaV1FwTENBeE1qZ3BPMXh1ZlZ4dVhHNHZMeUJCZENCd2NtVnpaVzUwSUc5dWJIa2dkR2hsSUhSb2NtVmxJR3RsZVhNZ2JXVnVkR2x2Ym1Wa0lHRmliM1psSUdGeVpTQjFjMlZrSUdGdVpGeHVMeThnZFc1a1pYSnpkRzl2WkNCaWVTQjBhR1VnYzNCbFl5NGdTVzF3YkdWdFpXNTBZWFJwYjI1eklHOXlJSE4xWWlCdGIyUjFiR1Z6SUdOaGJpQndZWE56WEc0dkx5QnZkR2hsY2lCclpYbHpJSFJ2SUhSb1pTQkJjM05sY25ScGIyNUZjbkp2Y2lkeklHTnZibk4wY25WamRHOXlJQzBnZEdobGVTQjNhV3hzSUdKbFhHNHZMeUJwWjI1dmNtVmtMbHh1WEc0dkx5QXpMaUJCYkd3Z2IyWWdkR2hsSUdadmJHeHZkMmx1WnlCbWRXNWpkR2x2Ym5NZ2JYVnpkQ0IwYUhKdmR5QmhiaUJCYzNObGNuUnBiMjVGY25KdmNseHVMeThnZDJobGJpQmhJR052Y25KbGMzQnZibVJwYm1jZ1kyOXVaR2wwYVc5dUlHbHpJRzV2ZENCdFpYUXNJSGRwZEdnZ1lTQnRaWE56WVdkbElIUm9ZWFJjYmk4dklHMWhlU0JpWlNCMWJtUmxabWx1WldRZ2FXWWdibTkwSUhCeWIzWnBaR1ZrTGlBZ1FXeHNJR0Z6YzJWeWRHbHZiaUJ0WlhSb2IyUnpJSEJ5YjNacFpHVmNiaTh2SUdKdmRHZ2dkR2hsSUdGamRIVmhiQ0JoYm1RZ1pYaHdaV04wWldRZ2RtRnNkV1Z6SUhSdklIUm9aU0JoYzNObGNuUnBiMjRnWlhKeWIzSWdabTl5WEc0dkx5QmthWE53YkdGNUlIQjFjbkJ2YzJWekxseHVYRzVtZFc1amRHbHZiaUJtWVdsc0tHRmpkSFZoYkN3Z1pYaHdaV04wWldRc0lHMWxjM05oWjJVc0lHOXdaWEpoZEc5eUxDQnpkR0ZqYTFOMFlYSjBSblZ1WTNScGIyNHBJSHRjYmlBZ2RHaHliM2NnYm1WM0lHRnpjMlZ5ZEM1QmMzTmxjblJwYjI1RmNuSnZjaWg3WEc0Z0lDQWdiV1Z6YzJGblpUb2diV1Z6YzJGblpTeGNiaUFnSUNCaFkzUjFZV3c2SUdGamRIVmhiQ3hjYmlBZ0lDQmxlSEJsWTNSbFpEb2daWGh3WldOMFpXUXNYRzRnSUNBZ2IzQmxjbUYwYjNJNklHOXdaWEpoZEc5eUxGeHVJQ0FnSUhOMFlXTnJVM1JoY25SR2RXNWpkR2x2YmpvZ2MzUmhZMnRUZEdGeWRFWjFibU4wYVc5dVhHNGdJSDBwTzF4dWZWeHVYRzR2THlCRldGUkZUbE5KVDA0aElHRnNiRzkzY3lCbWIzSWdkMlZzYkNCaVpXaGhkbVZrSUdWeWNtOXljeUJrWldacGJtVmtJR1ZzYzJWM2FHVnlaUzVjYm1GemMyVnlkQzVtWVdsc0lEMGdabUZwYkR0Y2JseHVMeThnTkM0Z1VIVnlaU0JoYzNObGNuUnBiMjRnZEdWemRITWdkMmhsZEdobGNpQmhJSFpoYkhWbElHbHpJSFJ5ZFhSb2VTd2dZWE1nWkdWMFpYSnRhVzVsWkZ4dUx5OGdZbmtnSVNGbmRXRnlaQzVjYmk4dklHRnpjMlZ5ZEM1dmF5aG5kV0Z5WkN3Z2JXVnpjMkZuWlY5dmNIUXBPMXh1THk4Z1ZHaHBjeUJ6ZEdGMFpXMWxiblFnYVhNZ1pYRjFhWFpoYkdWdWRDQjBieUJoYzNObGNuUXVaWEYxWVd3b2RISjFaU3dnSVNGbmRXRnlaQ3hjYmk4dklHMWxjM05oWjJWZmIzQjBLVHN1SUZSdklIUmxjM1FnYzNSeWFXTjBiSGtnWm05eUlIUm9aU0IyWVd4MVpTQjBjblZsTENCMWMyVmNiaTh2SUdGemMyVnlkQzV6ZEhKcFkzUkZjWFZoYkNoMGNuVmxMQ0JuZFdGeVpDd2diV1Z6YzJGblpWOXZjSFFwT3k1Y2JseHVablZ1WTNScGIyNGdiMnNvZG1Gc2RXVXNJRzFsYzNOaFoyVXBJSHRjYmlBZ2FXWWdLQ0YyWVd4MVpTa2dabUZwYkNoMllXeDFaU3dnZEhKMVpTd2diV1Z6YzJGblpTd2dKejA5Snl3Z1lYTnpaWEowTG05cktUdGNibjFjYm1GemMyVnlkQzV2YXlBOUlHOXJPMXh1WEc0dkx5QTFMaUJVYUdVZ1pYRjFZV3hwZEhrZ1lYTnpaWEowYVc5dUlIUmxjM1J6SUhOb1lXeHNiM2NzSUdOdlpYSmphWFpsSUdWeGRXRnNhWFI1SUhkcGRHaGNiaTh2SUQwOUxseHVMeThnWVhOelpYSjBMbVZ4ZFdGc0tHRmpkSFZoYkN3Z1pYaHdaV04wWldRc0lHMWxjM05oWjJWZmIzQjBLVHRjYmx4dVlYTnpaWEowTG1WeGRXRnNJRDBnWm5WdVkzUnBiMjRnWlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpTa2dlMXh1SUNCcFppQW9ZV04wZFdGc0lDRTlJR1Y0Y0dWamRHVmtLU0JtWVdsc0tHRmpkSFZoYkN3Z1pYaHdaV04wWldRc0lHMWxjM05oWjJVc0lDYzlQU2NzSUdGemMyVnlkQzVsY1hWaGJDazdYRzU5TzF4dVhHNHZMeUEyTGlCVWFHVWdibTl1TFdWeGRXRnNhWFI1SUdGemMyVnlkR2x2YmlCMFpYTjBjeUJtYjNJZ2QyaGxkR2hsY2lCMGQyOGdiMkpxWldOMGN5QmhjbVVnYm05MElHVnhkV0ZzWEc0dkx5QjNhWFJvSUNFOUlHRnpjMlZ5ZEM1dWIzUkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCdFpYTnpZV2RsWDI5d2RDazdYRzVjYm1GemMyVnlkQzV1YjNSRmNYVmhiQ0E5SUdaMWJtTjBhVzl1SUc1dmRFVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlVwSUh0Y2JpQWdhV1lnS0dGamRIVmhiQ0E5UFNCbGVIQmxZM1JsWkNrZ2UxeHVJQ0FnSUdaaGFXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpTd2dKeUU5Snl3Z1lYTnpaWEowTG01dmRFVnhkV0ZzS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnTnk0Z1ZHaGxJR1Z4ZFdsMllXeGxibU5sSUdGemMyVnlkR2x2YmlCMFpYTjBjeUJoSUdSbFpYQWdaWEYxWVd4cGRIa2djbVZzWVhScGIyNHVYRzR2THlCaGMzTmxjblF1WkdWbGNFVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlZmYjNCMEtUdGNibHh1WVhOelpYSjBMbVJsWlhCRmNYVmhiQ0E5SUdaMWJtTjBhVzl1SUdSbFpYQkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCdFpYTnpZV2RsS1NCN1hHNGdJR2xtSUNnaFgyUmxaWEJGY1hWaGJDaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0xDQm1ZV3h6WlNrcElIdGNiaUFnSUNCbVlXbHNLR0ZqZEhWaGJDd2daWGh3WldOMFpXUXNJRzFsYzNOaFoyVXNJQ2RrWldWd1JYRjFZV3duTENCaGMzTmxjblF1WkdWbGNFVnhkV0ZzS1R0Y2JpQWdmVnh1ZlR0Y2JseHVZWE56WlhKMExtUmxaWEJUZEhKcFkzUkZjWFZoYkNBOUlHWjFibU4wYVc5dUlHUmxaWEJUZEhKcFkzUkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCdFpYTnpZV2RsS1NCN1hHNGdJR2xtSUNnaFgyUmxaWEJGY1hWaGJDaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0xDQjBjblZsS1NrZ2UxeHVJQ0FnSUdaaGFXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpTd2dKMlJsWlhCVGRISnBZM1JGY1hWaGJDY3NJR0Z6YzJWeWRDNWtaV1Z3VTNSeWFXTjBSWEYxWVd3cE8xeHVJQ0I5WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJmWkdWbGNFVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUhOMGNtbGpkQ3dnYldWdGIzTXBJSHRjYmlBZ0x5OGdOeTR4TGlCQmJHd2dhV1JsYm5ScFkyRnNJSFpoYkhWbGN5QmhjbVVnWlhGMWFYWmhiR1Z1ZEN3Z1lYTWdaR1YwWlhKdGFXNWxaQ0JpZVNBOVBUMHVYRzRnSUdsbUlDaGhZM1IxWVd3Z1BUMDlJR1Y0Y0dWamRHVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5DZFdabVpYSW9ZV04wZFdGc0tTQW1KaUJwYzBKMVptWmxjaWhsZUhCbFkzUmxaQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZMjl0Y0dGeVpTaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0tTQTlQVDBnTUR0Y2JseHVJQ0F2THlBM0xqSXVJRWxtSUhSb1pTQmxlSEJsWTNSbFpDQjJZV3gxWlNCcGN5QmhJRVJoZEdVZ2IySnFaV04wTENCMGFHVWdZV04wZFdGc0lIWmhiSFZsSUdselhHNGdJQzh2SUdWeGRXbDJZV3hsYm5RZ2FXWWdhWFFnYVhNZ1lXeHpieUJoSUVSaGRHVWdiMkpxWldOMElIUm9ZWFFnY21WbVpYSnpJSFJ2SUhSb1pTQnpZVzFsSUhScGJXVXVYRzRnSUgwZ1pXeHpaU0JwWmlBb2RYUnBiQzVwYzBSaGRHVW9ZV04wZFdGc0tTQW1KaUIxZEdsc0xtbHpSR0YwWlNobGVIQmxZM1JsWkNrcElIdGNiaUFnSUNCeVpYUjFjbTRnWVdOMGRXRnNMbWRsZEZScGJXVW9LU0E5UFQwZ1pYaHdaV04wWldRdVoyVjBWR2x0WlNncE8xeHVYRzRnSUM4dklEY3VNeUJKWmlCMGFHVWdaWGh3WldOMFpXUWdkbUZzZFdVZ2FYTWdZU0JTWldkRmVIQWdiMkpxWldOMExDQjBhR1VnWVdOMGRXRnNJSFpoYkhWbElHbHpYRzRnSUM4dklHVnhkV2wyWVd4bGJuUWdhV1lnYVhRZ2FYTWdZV3h6YnlCaElGSmxaMFY0Y0NCdlltcGxZM1FnZDJsMGFDQjBhR1VnYzJGdFpTQnpiM1Z5WTJVZ1lXNWtYRzRnSUM4dklIQnliM0JsY25ScFpYTWdLR0JuYkc5aVlXeGdMQ0JnYlhWc2RHbHNhVzVsWUN3Z1lHeGhjM1JKYm1SbGVHQXNJR0JwWjI1dmNtVkRZWE5sWUNrdVhHNGdJSDBnWld4elpTQnBaaUFvZFhScGJDNXBjMUpsWjBWNGNDaGhZM1IxWVd3cElDWW1JSFYwYVd3dWFYTlNaV2RGZUhBb1pYaHdaV04wWldRcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdGamRIVmhiQzV6YjNWeVkyVWdQVDA5SUdWNGNHVmpkR1ZrTG5OdmRYSmpaU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQmhZM1IxWVd3dVoyeHZZbUZzSUQwOVBTQmxlSEJsWTNSbFpDNW5iRzlpWVd3Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FnWVdOMGRXRnNMbTExYkhScGJHbHVaU0E5UFQwZ1pYaHdaV04wWldRdWJYVnNkR2xzYVc1bElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUdGamRIVmhiQzVzWVhOMFNXNWtaWGdnUFQwOUlHVjRjR1ZqZEdWa0xteGhjM1JKYm1SbGVDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNCaFkzUjFZV3d1YVdkdWIzSmxRMkZ6WlNBOVBUMGdaWGh3WldOMFpXUXVhV2R1YjNKbFEyRnpaVHRjYmx4dUlDQXZMeUEzTGpRdUlFOTBhR1Z5SUhCaGFYSnpJSFJvWVhRZ1pHOGdibTkwSUdKdmRHZ2djR0Z6Y3lCMGVYQmxiMllnZG1Gc2RXVWdQVDBnSjI5aWFtVmpkQ2NzWEc0Z0lDOHZJR1Z4ZFdsMllXeGxibU5sSUdseklHUmxkR1Z5YldsdVpXUWdZbmtnUFQwdVhHNGdJSDBnWld4elpTQnBaaUFvS0dGamRIVmhiQ0E5UFQwZ2JuVnNiQ0I4ZkNCMGVYQmxiMllnWVdOMGRXRnNJQ0U5UFNBbmIySnFaV04wSnlrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBb1pYaHdaV04wWldRZ1BUMDlJRzUxYkd3Z2ZId2dkSGx3Wlc5bUlHVjRjR1ZqZEdWa0lDRTlQU0FuYjJKcVpXTjBKeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5YVdOMElEOGdZV04wZFdGc0lEMDlQU0JsZUhCbFkzUmxaQ0E2SUdGamRIVmhiQ0E5UFNCbGVIQmxZM1JsWkR0Y2JseHVJQ0F2THlCSlppQmliM1JvSUhaaGJIVmxjeUJoY21VZ2FXNXpkR0Z1WTJWeklHOW1JSFI1Y0dWa0lHRnljbUY1Y3l3Z2QzSmhjQ0IwYUdWcGNpQjFibVJsY214NWFXNW5YRzRnSUM4dklFRnljbUY1UW5WbVptVnljeUJwYmlCaElFSjFabVpsY2lCbFlXTm9JSFJ2SUdsdVkzSmxZWE5sSUhCbGNtWnZjbTFoYm1ObFhHNGdJQzh2SUZSb2FYTWdiM0IwYVcxcGVtRjBhVzl1SUhKbGNYVnBjbVZ6SUhSb1pTQmhjbkpoZVhNZ2RHOGdhR0YyWlNCMGFHVWdjMkZ0WlNCMGVYQmxJR0Z6SUdOb1pXTnJaV1FnWW5sY2JpQWdMeThnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUFvWVd0aElIQlViMU4wY21sdVp5a3VJRTVsZG1WeUlIQmxjbVp2Y20wZ1ltbHVZWEo1WEc0Z0lDOHZJR052YlhCaGNtbHpiMjV6SUdadmNpQkdiRzloZENwQmNuSmhlWE1zSUhSb2IzVm5hQ3dnYzJsdVkyVWdaUzVuTGlBck1DQTlQVDBnTFRBZ1luVjBJSFJvWldseVhHNGdJQzh2SUdKcGRDQndZWFIwWlhKdWN5QmhjbVVnYm05MElHbGtaVzUwYVdOaGJDNWNiaUFnZlNCbGJITmxJR2xtSUNocGMxWnBaWGNvWVdOMGRXRnNLU0FtSmlCcGMxWnBaWGNvWlhod1pXTjBaV1FwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnY0ZSdlUzUnlhVzVuS0dGamRIVmhiQ2tnUFQwOUlIQlViMU4wY21sdVp5aGxlSEJsWTNSbFpDa2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWhLR0ZqZEhWaGJDQnBibk4wWVc1alpXOW1JRVpzYjJGME16SkJjbkpoZVNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXTjBkV0ZzSUdsdWMzUmhibU5sYjJZZ1JteHZZWFEyTkVGeWNtRjVLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmpiMjF3WVhKbEtHNWxkeUJWYVc1ME9FRnljbUY1S0dGamRIVmhiQzVpZFdabVpYSXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlZhVzUwT0VGeWNtRjVLR1Y0Y0dWamRHVmtMbUoxWm1abGNpa3BJRDA5UFNBd08xeHVYRzRnSUM4dklEY3VOU0JHYjNJZ1lXeHNJRzkwYUdWeUlFOWlhbVZqZENCd1lXbHljeXdnYVc1amJIVmthVzVuSUVGeWNtRjVJRzlpYW1WamRITXNJR1Z4ZFdsMllXeGxibU5sSUdselhHNGdJQzh2SUdSbGRHVnliV2x1WldRZ1lua2dhR0YyYVc1bklIUm9aU0J6WVcxbElHNTFiV0psY2lCdlppQnZkMjVsWkNCd2NtOXdaWEowYVdWeklDaGhjeUIyWlhKcFptbGxaRnh1SUNBdkx5QjNhWFJvSUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNrc0lIUm9aU0J6WVcxbElITmxkQ0J2WmlCclpYbHpYRzRnSUM4dklDaGhiSFJvYjNWbmFDQnViM1FnYm1WalpYTnpZWEpwYkhrZ2RHaGxJSE5oYldVZ2IzSmtaWElwTENCbGNYVnBkbUZzWlc1MElIWmhiSFZsY3lCbWIzSWdaWFpsY25sY2JpQWdMeThnWTI5eWNtVnpjRzl1WkdsdVp5QnJaWGtzSUdGdVpDQmhiaUJwWkdWdWRHbGpZV3dnSjNCeWIzUnZkSGx3WlNjZ2NISnZjR1Z5ZEhrdUlFNXZkR1U2SUhSb2FYTmNiaUFnTHk4Z1lXTmpiM1Z1ZEhNZ1ptOXlJR0p2ZEdnZ2JtRnRaV1FnWVc1a0lHbHVaR1Y0WldRZ2NISnZjR1Z5ZEdsbGN5QnZiaUJCY25KaGVYTXVYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTkNkV1ptWlhJb1lXTjBkV0ZzS1NBaFBUMGdhWE5DZFdabVpYSW9aWGh3WldOMFpXUXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcxbGJXOXpJRDBnYldWdGIzTWdmSHdnZTJGamRIVmhiRG9nVzEwc0lHVjRjR1ZqZEdWa09pQmJYWDA3WEc1Y2JpQWdJQ0IyWVhJZ1lXTjBkV0ZzU1c1a1pYZ2dQU0J0WlcxdmN5NWhZM1IxWVd3dWFXNWtaWGhQWmloaFkzUjFZV3dwTzF4dUlDQWdJR2xtSUNoaFkzUjFZV3hKYm1SbGVDQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lHbG1JQ2hoWTNSMVlXeEpibVJsZUNBOVBUMGdiV1Z0YjNNdVpYaHdaV04wWldRdWFXNWtaWGhQWmlobGVIQmxZM1JsWkNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiV1Z0YjNNdVlXTjBkV0ZzTG5CMWMyZ29ZV04wZFdGc0tUdGNiaUFnSUNCdFpXMXZjeTVsZUhCbFkzUmxaQzV3ZFhOb0tHVjRjR1ZqZEdWa0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdlltcEZjWFZwZGloaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCemRISnBZM1FzSUcxbGJXOXpLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwRnlaM1Z0Wlc1MGN5aHZZbXBsWTNRcElIdGNiaUFnY21WMGRYSnVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNodlltcGxZM1FwSUQwOUlDZGJiMkpxWldOMElFRnlaM1Z0Wlc1MGMxMG5PMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZZbXBGY1hWcGRpaGhMQ0JpTENCemRISnBZM1FzSUdGamRIVmhiRlpwYzJsMFpXUlBZbXBsWTNSektTQjdYRzRnSUdsbUlDaGhJRDA5UFNCdWRXeHNJSHg4SUdFZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCaUlEMDlQU0J1ZFd4c0lIeDhJR0lnUFQwOUlIVnVaR1ZtYVc1bFpDbGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUM4dklHbG1JRzl1WlNCcGN5QmhJSEJ5YVcxcGRHbDJaU3dnZEdobElHOTBhR1Z5SUcxMWMzUWdZbVVnYzJGdFpWeHVJQ0JwWmlBb2RYUnBiQzVwYzFCeWFXMXBkR2wyWlNoaEtTQjhmQ0IxZEdsc0xtbHpVSEpwYldsMGFYWmxLR0lwS1Z4dUlDQWdJSEpsZEhWeWJpQmhJRDA5UFNCaU8xeHVJQ0JwWmlBb2MzUnlhV04wSUNZbUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaWhoS1NBaFBUMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0dJcEtWeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZG1GeUlHRkpjMEZ5WjNNZ1BTQnBjMEZ5WjNWdFpXNTBjeWhoS1R0Y2JpQWdkbUZ5SUdKSmMwRnlaM01nUFNCcGMwRnlaM1Z0Wlc1MGN5aGlLVHRjYmlBZ2FXWWdLQ2hoU1hOQmNtZHpJQ1ltSUNGaVNYTkJjbWR6S1NCOGZDQW9JV0ZKYzBGeVozTWdKaVlnWWtselFYSm5jeWtwWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQnBaaUFvWVVselFYSm5jeWtnZTF4dUlDQWdJR0VnUFNCd1UyeHBZMlV1WTJGc2JDaGhLVHRjYmlBZ0lDQmlJRDBnY0ZOc2FXTmxMbU5oYkd3b1lpazdYRzRnSUNBZ2NtVjBkWEp1SUY5a1pXVndSWEYxWVd3b1lTd2dZaXdnYzNSeWFXTjBLVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2EyRWdQU0J2WW1wbFkzUkxaWGx6S0dFcE8xeHVJQ0IyWVhJZ2EySWdQU0J2WW1wbFkzUkxaWGx6S0dJcE8xeHVJQ0IyWVhJZ2EyVjVMQ0JwTzF4dUlDQXZMeUJvWVhacGJtY2dkR2hsSUhOaGJXVWdiblZ0WW1WeUlHOW1JRzkzYm1Wa0lIQnliM0JsY25ScFpYTWdLR3RsZVhNZ2FXNWpiM0p3YjNKaGRHVnpYRzRnSUM4dklHaGhjMDkzYmxCeWIzQmxjblI1S1Z4dUlDQnBaaUFvYTJFdWJHVnVaM1JvSUNFOVBTQnJZaTVzWlc1bmRHZ3BYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBdkwzUm9aU0J6WVcxbElITmxkQ0J2WmlCclpYbHpJQ2hoYkhSb2IzVm5hQ0J1YjNRZ2JtVmpaWE56WVhKcGJIa2dkR2hsSUhOaGJXVWdiM0prWlhJcExGeHVJQ0JyWVM1emIzSjBLQ2s3WEc0Z0lHdGlMbk52Y25Rb0tUdGNiaUFnTHk5K2ZuNWphR1ZoY0NCclpYa2dkR1Z6ZEZ4dUlDQm1iM0lnS0drZ1BTQnJZUzVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lHbG1JQ2hyWVZ0cFhTQWhQVDBnYTJKYmFWMHBYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNiaUFnTHk5bGNYVnBkbUZzWlc1MElIWmhiSFZsY3lCbWIzSWdaWFpsY25rZ1kyOXljbVZ6Y0c5dVpHbHVaeUJyWlhrc0lHRnVaRnh1SUNBdkwzNStmbkJ2YzNOcFlteDVJR1Y0Y0dWdWMybDJaU0JrWldWd0lIUmxjM1JjYmlBZ1ptOXlJQ2hwSUQwZ2EyRXViR1Z1WjNSb0lDMGdNVHNnYVNBK1BTQXdPeUJwTFMwcElIdGNiaUFnSUNCclpYa2dQU0JyWVZ0cFhUdGNiaUFnSUNCcFppQW9JVjlrWldWd1JYRjFZV3dvWVZ0clpYbGRMQ0JpVzJ0bGVWMHNJSE4wY21samRDd2dZV04wZFdGc1ZtbHphWFJsWkU5aWFtVmpkSE1wS1Z4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGNuVmxPMXh1ZlZ4dVhHNHZMeUE0TGlCVWFHVWdibTl1TFdWeGRXbDJZV3hsYm1ObElHRnpjMlZ5ZEdsdmJpQjBaWE4wY3lCbWIzSWdZVzU1SUdSbFpYQWdhVzVsY1hWaGJHbDBlUzVjYmk4dklHRnpjMlZ5ZEM1dWIzUkVaV1Z3UlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpWOXZjSFFwTzF4dVhHNWhjM05sY25RdWJtOTBSR1ZsY0VWeGRXRnNJRDBnWm5WdVkzUnBiMjRnYm05MFJHVmxjRVZ4ZFdGc0tHRmpkSFZoYkN3Z1pYaHdaV04wWldRc0lHMWxjM05oWjJVcElIdGNiaUFnYVdZZ0tGOWtaV1Z3UlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2dabUZzYzJVcEtTQjdYRzRnSUNBZ1ptRnBiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxMQ0FuYm05MFJHVmxjRVZ4ZFdGc0p5d2dZWE56WlhKMExtNXZkRVJsWlhCRmNYVmhiQ2s3WEc0Z0lIMWNibjA3WEc1Y2JtRnpjMlZ5ZEM1dWIzUkVaV1Z3VTNSeWFXTjBSWEYxWVd3Z1BTQnViM1JFWldWd1UzUnlhV04wUlhGMVlXdzdYRzVtZFc1amRHbHZiaUJ1YjNSRVpXVndVM1J5YVdOMFJYRjFZV3dvWVdOMGRXRnNMQ0JsZUhCbFkzUmxaQ3dnYldWemMyRm5aU2tnZTF4dUlDQnBaaUFvWDJSbFpYQkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCMGNuVmxLU2tnZTF4dUlDQWdJR1poYVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlN3Z0oyNXZkRVJsWlhCVGRISnBZM1JGY1hWaGJDY3NJRzV2ZEVSbFpYQlRkSEpwWTNSRmNYVmhiQ2s3WEc0Z0lIMWNibjFjYmx4dVhHNHZMeUE1TGlCVWFHVWdjM1J5YVdOMElHVnhkV0ZzYVhSNUlHRnpjMlZ5ZEdsdmJpQjBaWE4wY3lCemRISnBZM1FnWlhGMVlXeHBkSGtzSUdGeklHUmxkR1Z5YldsdVpXUWdZbmtnUFQwOUxseHVMeThnWVhOelpYSjBMbk4wY21samRFVnhkV0ZzS0dGamRIVmhiQ3dnWlhod1pXTjBaV1FzSUcxbGMzTmhaMlZmYjNCMEtUdGNibHh1WVhOelpYSjBMbk4wY21samRFVnhkV0ZzSUQwZ1puVnVZM1JwYjI0Z2MzUnlhV04wUlhGMVlXd29ZV04wZFdGc0xDQmxlSEJsWTNSbFpDd2diV1Z6YzJGblpTa2dlMXh1SUNCcFppQW9ZV04wZFdGc0lDRTlQU0JsZUhCbFkzUmxaQ2tnZTF4dUlDQWdJR1poYVd3b1lXTjBkV0ZzTENCbGVIQmxZM1JsWkN3Z2JXVnpjMkZuWlN3Z0p6MDlQU2NzSUdGemMyVnlkQzV6ZEhKcFkzUkZjWFZoYkNrN1hHNGdJSDFjYm4wN1hHNWNiaTh2SURFd0xpQlVhR1VnYzNSeWFXTjBJRzV2YmkxbGNYVmhiR2wwZVNCaGMzTmxjblJwYjI0Z2RHVnpkSE1nWm05eUlITjBjbWxqZENCcGJtVnhkV0ZzYVhSNUxDQmhjMXh1THk4Z1pHVjBaWEp0YVc1bFpDQmllU0FoUFQwdUlDQmhjM05sY25RdWJtOTBVM1J5YVdOMFJYRjFZV3dvWVdOMGRXRnNMQ0JsZUhCbFkzUmxaQ3dnYldWemMyRm5aVjl2Y0hRcE8xeHVYRzVoYzNObGNuUXVibTkwVTNSeWFXTjBSWEYxWVd3Z1BTQm1kVzVqZEdsdmJpQnViM1JUZEhKcFkzUkZjWFZoYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENCdFpYTnpZV2RsS1NCN1hHNGdJR2xtSUNoaFkzUjFZV3dnUFQwOUlHVjRjR1ZqZEdWa0tTQjdYRzRnSUNBZ1ptRnBiQ2hoWTNSMVlXd3NJR1Y0Y0dWamRHVmtMQ0J0WlhOellXZGxMQ0FuSVQwOUp5d2dZWE56WlhKMExtNXZkRk4wY21samRFVnhkV0ZzS1R0Y2JpQWdmVnh1ZlR0Y2JseHVablZ1WTNScGIyNGdaWGh3WldOMFpXUkZlR05sY0hScGIyNG9ZV04wZFdGc0xDQmxlSEJsWTNSbFpDa2dlMXh1SUNCcFppQW9JV0ZqZEhWaGJDQjhmQ0FoWlhod1pXTjBaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQnBaaUFvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHVjRjR1ZqZEdWa0tTQTlQU0FuVzI5aWFtVmpkQ0JTWldkRmVIQmRKeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmxlSEJsWTNSbFpDNTBaWE4wS0dGamRIVmhiQ2s3WEc0Z0lIMWNibHh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2hoWTNSMVlXd2dhVzV6ZEdGdVkyVnZaaUJsZUhCbFkzUmxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdMeThnU1dkdWIzSmxMaUFnVkdobElHbHVjM1JoYm1ObGIyWWdZMmhsWTJzZ1pHOWxjMjRuZENCM2IzSnJJR1p2Y2lCaGNuSnZkeUJtZFc1amRHbHZibk11WEc0Z0lIMWNibHh1SUNCcFppQW9SWEp5YjNJdWFYTlFjbTkwYjNSNWNHVlBaaWhsZUhCbFkzUmxaQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1pYaHdaV04wWldRdVkyRnNiQ2g3ZlN3Z1lXTjBkV0ZzS1NBOVBUMGdkSEoxWlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNSeWVVSnNiMk5yS0dKc2IyTnJLU0I3WEc0Z0lIWmhjaUJsY25KdmNqdGNiaUFnZEhKNUlIdGNiaUFnSUNCaWJHOWpheWdwTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdaWEp5YjNJZ1BTQmxPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNSb2NtOTNjeWh6YUc5MWJHUlVhSEp2ZHl3Z1lteHZZMnNzSUdWNGNHVmpkR1ZrTENCdFpYTnpZV2RsS1NCN1hHNGdJSFpoY2lCaFkzUjFZV3c3WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJpYkc5amF5QWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2lZbXh2WTJ0Y0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1pYaHdaV04wWldRZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdiV1Z6YzJGblpTQTlJR1Y0Y0dWamRHVmtPMXh1SUNBZ0lHVjRjR1ZqZEdWa0lEMGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lHRmpkSFZoYkNBOUlGOTBjbmxDYkc5amF5aGliRzlqYXlrN1hHNWNiaUFnYldWemMyRm5aU0E5SUNobGVIQmxZM1JsWkNBbUppQmxlSEJsWTNSbFpDNXVZVzFsSUQ4Z0p5QW9KeUFySUdWNGNHVmpkR1ZrTG01aGJXVWdLeUFuS1M0bklEb2dKeTRuS1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FvYldWemMyRm5aU0EvSUNjZ0p5QXJJRzFsYzNOaFoyVWdPaUFuTGljcE8xeHVYRzRnSUdsbUlDaHphRzkxYkdSVWFISnZkeUFtSmlBaFlXTjBkV0ZzS1NCN1hHNGdJQ0FnWm1GcGJDaGhZM1IxWVd3c0lHVjRjR1ZqZEdWa0xDQW5UV2x6YzJsdVp5QmxlSEJsWTNSbFpDQmxlR05sY0hScGIyNG5JQ3NnYldWemMyRm5aU2s3WEc0Z0lIMWNibHh1SUNCMllYSWdkWE5sY2xCeWIzWnBaR1ZrVFdWemMyRm5aU0E5SUhSNWNHVnZaaUJ0WlhOellXZGxJRDA5UFNBbmMzUnlhVzVuSnp0Y2JpQWdkbUZ5SUdselZXNTNZVzUwWldSRmVHTmxjSFJwYjI0Z1BTQWhjMmh2ZFd4a1ZHaHliM2NnSmlZZ2RYUnBiQzVwYzBWeWNtOXlLR0ZqZEhWaGJDazdYRzRnSUhaaGNpQnBjMVZ1Wlhod1pXTjBaV1JGZUdObGNIUnBiMjRnUFNBaGMyaHZkV3hrVkdoeWIzY2dKaVlnWVdOMGRXRnNJQ1ltSUNGbGVIQmxZM1JsWkR0Y2JseHVJQ0JwWmlBb0tHbHpWVzUzWVc1MFpXUkZlR05sY0hScGIyNGdKaVpjYmlBZ0lDQWdJSFZ6WlhKUWNtOTJhV1JsWkUxbGMzTmhaMlVnSmlaY2JpQWdJQ0FnSUdWNGNHVmpkR1ZrUlhoalpYQjBhVzl1S0dGamRIVmhiQ3dnWlhod1pXTjBaV1FwS1NCOGZGeHVJQ0FnSUNBZ2FYTlZibVY0Y0dWamRHVmtSWGhqWlhCMGFXOXVLU0I3WEc0Z0lDQWdabUZwYkNoaFkzUjFZV3dzSUdWNGNHVmpkR1ZrTENBblIyOTBJSFZ1ZDJGdWRHVmtJR1Y0WTJWd2RHbHZiaWNnS3lCdFpYTnpZV2RsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2dvYzJodmRXeGtWR2h5YjNjZ0ppWWdZV04wZFdGc0lDWW1JR1Y0Y0dWamRHVmtJQ1ltWEc0Z0lDQWdJQ0FoWlhod1pXTjBaV1JGZUdObGNIUnBiMjRvWVdOMGRXRnNMQ0JsZUhCbFkzUmxaQ2twSUh4OElDZ2hjMmh2ZFd4a1ZHaHliM2NnSmlZZ1lXTjBkV0ZzS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJR0ZqZEhWaGJEdGNiaUFnZlZ4dWZWeHVYRzR2THlBeE1TNGdSWGh3WldOMFpXUWdkRzhnZEdoeWIzY2dZVzRnWlhKeWIzSTZYRzR2THlCaGMzTmxjblF1ZEdoeWIzZHpLR0pzYjJOckxDQkZjbkp2Y2w5dmNIUXNJRzFsYzNOaFoyVmZiM0IwS1R0Y2JseHVZWE56WlhKMExuUm9jbTkzY3lBOUlHWjFibU4wYVc5dUtHSnNiMk5yTENBdkttOXdkR2x2Ym1Gc0tpOWxjbkp2Y2l3Z0x5cHZjSFJwYjI1aGJDb3ZiV1Z6YzJGblpTa2dlMXh1SUNCZmRHaHliM2R6S0hSeWRXVXNJR0pzYjJOckxDQmxjbkp2Y2l3Z2JXVnpjMkZuWlNrN1hHNTlPMXh1WEc0dkx5QkZXRlJGVGxOSlQwNGhJRlJvYVhNZ2FYTWdZVzV1YjNscGJtY2dkRzhnZDNKcGRHVWdiM1YwYzJsa1pTQjBhR2x6SUcxdlpIVnNaUzVjYm1GemMyVnlkQzVrYjJWelRtOTBWR2h5YjNjZ1BTQm1kVzVqZEdsdmJpaGliRzlqYXl3Z0x5cHZjSFJwYjI1aGJDb3ZaWEp5YjNJc0lDOHFiM0IwYVc5dVlXd3FMMjFsYzNOaFoyVXBJSHRjYmlBZ1gzUm9jbTkzY3lobVlXeHpaU3dnWW14dlkyc3NJR1Z5Y205eUxDQnRaWE56WVdkbEtUdGNibjA3WEc1Y2JtRnpjMlZ5ZEM1cFprVnljbTl5SUQwZ1puVnVZM1JwYjI0b1pYSnlLU0I3SUdsbUlDaGxjbklwSUhSb2NtOTNJR1Z5Y2pzZ2ZUdGNibHh1ZG1GeUlHOWlhbVZqZEV0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3lCOGZDQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNGdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQnZZbW9wSUh0Y2JpQWdJQ0JwWmlBb2FHRnpUM2R1TG1OaGJHd29iMkpxTENCclpYa3BLU0JyWlhsekxuQjFjMmdvYTJWNUtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2EyVjVjenRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENkY2JseHVaWGh3YjNKMGN5NWllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUZ4dVpYaHdiM0owY3k1MGIwSjVkR1ZCY25KaGVTQTlJSFJ2UW5sMFpVRnljbUY1WEc1bGVIQnZjblJ6TG1aeWIyMUNlWFJsUVhKeVlYa2dQU0JtY205dFFubDBaVUZ5Y21GNVhHNWNiblpoY2lCc2IyOXJkWEFnUFNCYlhWeHVkbUZ5SUhKbGRreHZiMnQxY0NBOUlGdGRYRzUyWVhJZ1FYSnlJRDBnZEhsd1pXOW1JRlZwYm5RNFFYSnlZWGtnSVQwOUlDZDFibVJsWm1sdVpXUW5JRDhnVldsdWREaEJjbkpoZVNBNklFRnljbUY1WEc1Y2JuWmhjaUJqYjJSbElEMGdKMEZDUTBSRlJrZElTVXBMVEUxT1QxQlJVbE5VVlZaWFdGbGFZV0pqWkdWbVoyaHBhbXRzYlc1dmNIRnljM1IxZG5kNGVYb3dNVEl6TkRVMk56ZzVLeThuWEc1bWIzSWdLSFpoY2lCcElEMGdNQ3dnYkdWdUlEMGdZMjlrWlM1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNCc2IyOXJkWEJiYVYwZ1BTQmpiMlJsVzJsZFhHNGdJSEpsZGt4dmIydDFjRnRqYjJSbExtTm9ZWEpEYjJSbFFYUW9hU2xkSUQwZ2FWeHVmVnh1WEc0dkx5QlRkWEJ3YjNKMElHUmxZMjlrYVc1bklGVlNUQzF6WVdabElHSmhjMlUyTkNCemRISnBibWR6TENCaGN5Qk9iMlJsTG1weklHUnZaWE11WEc0dkx5QlRaV1U2SUdoMGRIQnpPaTh2Wlc0dWQybHJhWEJsWkdsaExtOXlaeTkzYVd0cEwwSmhjMlUyTkNOVlVreGZZWEJ3YkdsallYUnBiMjV6WEc1eVpYWk1iMjlyZFhCYkp5MG5MbU5vWVhKRGIyUmxRWFFvTUNsZElEMGdOakpjYm5KbGRreHZiMnQxY0Zzblh5Y3VZMmhoY2tOdlpHVkJkQ2d3S1YwZ1BTQTJNMXh1WEc1bWRXNWpkR2x2YmlCblpYUk1aVzV6SUNoaU5qUXBJSHRjYmlBZ2RtRnlJR3hsYmlBOUlHSTJOQzVzWlc1bmRHaGNibHh1SUNCcFppQW9iR1Z1SUNVZ05DQStJREFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdjM1J5YVc1bkxpQk1aVzVuZEdnZ2JYVnpkQ0JpWlNCaElHMTFiSFJwY0d4bElHOW1JRFFuS1Z4dUlDQjlYRzVjYmlBZ0x5OGdWSEpwYlNCdlptWWdaWGgwY21FZ1lubDBaWE1nWVdaMFpYSWdjR3hoWTJWb2IyeGtaWElnWW5sMFpYTWdZWEpsSUdadmRXNWtYRzRnSUM4dklGTmxaVG9nYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJKbFlYUm5ZVzF0YVhRdlltRnpaVFkwTFdwekwybHpjM1ZsY3k4ME1seHVJQ0IyWVhJZ2RtRnNhV1JNWlc0Z1BTQmlOalF1YVc1a1pYaFBaaWduUFNjcFhHNGdJR2xtSUNoMllXeHBaRXhsYmlBOVBUMGdMVEVwSUhaaGJHbGtUR1Z1SUQwZ2JHVnVYRzVjYmlBZ2RtRnlJSEJzWVdObFNHOXNaR1Z5YzB4bGJpQTlJSFpoYkdsa1RHVnVJRDA5UFNCc1pXNWNiaUFnSUNBL0lEQmNiaUFnSUNBNklEUWdMU0FvZG1Gc2FXUk1aVzRnSlNBMEtWeHVYRzRnSUhKbGRIVnliaUJiZG1Gc2FXUk1aVzRzSUhCc1lXTmxTRzlzWkdWeWMweGxibDFjYm4xY2JseHVMeThnWW1GelpUWTBJR2x6SURRdk15QXJJSFZ3SUhSdklIUjNieUJqYUdGeVlXTjBaWEp6SUc5bUlIUm9aU0J2Y21sbmFXNWhiQ0JrWVhSaFhHNW1kVzVqZEdsdmJpQmllWFJsVEdWdVozUm9JQ2hpTmpRcElIdGNiaUFnZG1GeUlHeGxibk1nUFNCblpYUk1aVzV6S0dJMk5DbGNiaUFnZG1GeUlIWmhiR2xrVEdWdUlEMGdiR1Z1YzFzd1hWeHVJQ0IyWVhJZ2NHeGhZMlZJYjJ4a1pYSnpUR1Z1SUQwZ2JHVnVjMXN4WFZ4dUlDQnlaWFIxY200Z0tDaDJZV3hwWkV4bGJpQXJJSEJzWVdObFNHOXNaR1Z5YzB4bGJpa2dLaUF6SUM4Z05Da2dMU0J3YkdGalpVaHZiR1JsY25OTVpXNWNibjFjYmx4dVpuVnVZM1JwYjI0Z1gySjVkR1ZNWlc1bmRHZ2dLR0kyTkN3Z2RtRnNhV1JNWlc0c0lIQnNZV05sU0c5c1pHVnljMHhsYmlrZ2UxeHVJQ0J5WlhSMWNtNGdLQ2gyWVd4cFpFeGxiaUFySUhCc1lXTmxTRzlzWkdWeWMweGxiaWtnS2lBeklDOGdOQ2tnTFNCd2JHRmpaVWh2YkdSbGNuTk1aVzVjYm4xY2JseHVablZ1WTNScGIyNGdkRzlDZVhSbFFYSnlZWGtnS0dJMk5Da2dlMXh1SUNCMllYSWdkRzF3WEc0Z0lIWmhjaUJzWlc1eklEMGdaMlYwVEdWdWN5aGlOalFwWEc0Z0lIWmhjaUIyWVd4cFpFeGxiaUE5SUd4bGJuTmJNRjFjYmlBZ2RtRnlJSEJzWVdObFNHOXNaR1Z5YzB4bGJpQTlJR3hsYm5OYk1WMWNibHh1SUNCMllYSWdZWEp5SUQwZ2JtVjNJRUZ5Y2loZllubDBaVXhsYm1kMGFDaGlOalFzSUhaaGJHbGtUR1Z1TENCd2JHRmpaVWh2YkdSbGNuTk1aVzRwS1Z4dVhHNGdJSFpoY2lCamRYSkNlWFJsSUQwZ01GeHVYRzRnSUM4dklHbG1JSFJvWlhKbElHRnlaU0J3YkdGalpXaHZiR1JsY25Nc0lHOXViSGtnWjJWMElIVndJSFJ2SUhSb1pTQnNZWE4wSUdOdmJYQnNaWFJsSURRZ1kyaGhjbk5jYmlBZ2RtRnlJR3hsYmlBOUlIQnNZV05sU0c5c1pHVnljMHhsYmlBK0lEQmNiaUFnSUNBL0lIWmhiR2xrVEdWdUlDMGdORnh1SUNBZ0lEb2dkbUZzYVdSTVpXNWNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnYVNBclBTQTBLU0I3WEc0Z0lDQWdkRzF3SUQxY2JpQWdJQ0FnSUNoeVpYWk1iMjlyZFhCYllqWTBMbU5vWVhKRGIyUmxRWFFvYVNsZElEdzhJREU0S1NCOFhHNGdJQ0FnSUNBb2NtVjJURzl2YTNWd1cySTJOQzVqYUdGeVEyOWtaVUYwS0drZ0t5QXhLVjBnUER3Z01USXBJSHhjYmlBZ0lDQWdJQ2h5WlhaTWIyOXJkWEJiWWpZMExtTm9ZWEpEYjJSbFFYUW9hU0FySURJcFhTQThQQ0EyS1NCOFhHNGdJQ0FnSUNCeVpYWk1iMjlyZFhCYllqWTBMbU5vWVhKRGIyUmxRWFFvYVNBcklETXBYVnh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ0tIUnRjQ0ErUGlBeE5pa2dKaUF3ZUVaR1hHNGdJQ0FnWVhKeVcyTjFja0o1ZEdVcksxMGdQU0FvZEcxd0lENCtJRGdwSUNZZ01IaEdSbHh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ2RHMXdJQ1lnTUhoR1JseHVJQ0I5WEc1Y2JpQWdhV1lnS0hCc1lXTmxTRzlzWkdWeWMweGxiaUE5UFQwZ01pa2dlMXh1SUNBZ0lIUnRjQ0E5WEc0Z0lDQWdJQ0FvY21WMlRHOXZhM1Z3VzJJMk5DNWphR0Z5UTI5a1pVRjBLR2twWFNBOFBDQXlLU0I4WEc0Z0lDQWdJQ0FvY21WMlRHOXZhM1Z3VzJJMk5DNWphR0Z5UTI5a1pVRjBLR2tnS3lBeEtWMGdQajRnTkNsY2JpQWdJQ0JoY25KYlkzVnlRbmwwWlNzclhTQTlJSFJ0Y0NBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUdsbUlDaHdiR0ZqWlVodmJHUmxjbk5NWlc0Z1BUMDlJREVwSUh0Y2JpQWdJQ0IwYlhBZ1BWeHVJQ0FnSUNBZ0tISmxka3h2YjJ0MWNGdGlOalF1WTJoaGNrTnZaR1ZCZENocEtWMGdQRHdnTVRBcElIeGNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTQXJJREVwWFNBOFBDQTBLU0I4WEc0Z0lDQWdJQ0FvY21WMlRHOXZhM1Z3VzJJMk5DNWphR0Z5UTI5a1pVRjBLR2tnS3lBeUtWMGdQajRnTWlsY2JpQWdJQ0JoY25KYlkzVnlRbmwwWlNzclhTQTlJQ2gwYlhBZ1BqNGdPQ2tnSmlBd2VFWkdYRzRnSUNBZ1lYSnlXMk4xY2tKNWRHVXJLMTBnUFNCMGJYQWdKaUF3ZUVaR1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1lYSnlYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUnlhWEJzWlhSVWIwSmhjMlUyTkNBb2JuVnRLU0I3WEc0Z0lISmxkSFZ5YmlCc2IyOXJkWEJiYm5WdElENCtJREU0SUNZZ01IZ3pSbDBnSzF4dUlDQWdJR3h2YjJ0MWNGdHVkVzBnUGo0Z01USWdKaUF3ZUROR1hTQXJYRzRnSUNBZ2JHOXZhM1Z3VzI1MWJTQStQaUEySUNZZ01IZ3pSbDBnSzF4dUlDQWdJR3h2YjJ0MWNGdHVkVzBnSmlBd2VETkdYVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxibU52WkdWRGFIVnVheUFvZFdsdWREZ3NJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdkbUZ5SUhSdGNGeHVJQ0IyWVhJZ2IzVjBjSFYwSUQwZ1cxMWNiaUFnWm05eUlDaDJZWElnYVNBOUlITjBZWEowT3lCcElEd2daVzVrT3lCcElDczlJRE1wSUh0Y2JpQWdJQ0IwYlhBZ1BWeHVJQ0FnSUNBZ0tDaDFhVzUwT0Z0cFhTQThQQ0F4TmlrZ0ppQXdlRVpHTURBd01Da2dLMXh1SUNBZ0lDQWdLQ2gxYVc1ME9GdHBJQ3NnTVYwZ1BEd2dPQ2tnSmlBd2VFWkdNREFwSUN0Y2JpQWdJQ0FnSUNoMWFXNTBPRnRwSUNzZ01sMGdKaUF3ZUVaR0tWeHVJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tIUnlhWEJzWlhSVWIwSmhjMlUyTkNoMGJYQXBLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZkWFJ3ZFhRdWFtOXBiaWduSnlsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWm5KdmJVSjVkR1ZCY25KaGVTQW9kV2x1ZERncElIdGNiaUFnZG1GeUlIUnRjRnh1SUNCMllYSWdiR1Z1SUQwZ2RXbHVkRGd1YkdWdVozUm9YRzRnSUhaaGNpQmxlSFJ5WVVKNWRHVnpJRDBnYkdWdUlDVWdNeUF2THlCcFppQjNaU0JvWVhabElERWdZbmwwWlNCc1pXWjBMQ0J3WVdRZ01pQmllWFJsYzF4dUlDQjJZWElnY0dGeWRITWdQU0JiWFZ4dUlDQjJZWElnYldGNFEyaDFibXRNWlc1bmRHZ2dQU0F4TmpNNE15QXZMeUJ0ZFhOMElHSmxJRzExYkhScGNHeGxJRzltSUROY2JseHVJQ0F2THlCbmJ5QjBhSEp2ZFdkb0lIUm9aU0JoY25KaGVTQmxkbVZ5ZVNCMGFISmxaU0JpZVhSbGN5d2dkMlVuYkd3Z1pHVmhiQ0IzYVhSb0lIUnlZV2xzYVc1bklITjBkV1ptSUd4aGRHVnlYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzWlc0eUlEMGdiR1Z1SUMwZ1pYaDBjbUZDZVhSbGN6c2dhU0E4SUd4bGJqSTdJR2tnS3owZ2JXRjRRMmgxYm10TVpXNW5kR2dwSUh0Y2JpQWdJQ0J3WVhKMGN5NXdkWE5vS0dWdVkyOWtaVU5vZFc1cktGeHVJQ0FnSUNBZ2RXbHVkRGdzSUdrc0lDaHBJQ3NnYldGNFEyaDFibXRNWlc1bmRHZ3BJRDRnYkdWdU1pQS9JR3hsYmpJZ09pQW9hU0FySUcxaGVFTm9kVzVyVEdWdVozUm9LVnh1SUNBZ0lDa3BYRzRnSUgxY2JseHVJQ0F2THlCd1lXUWdkR2hsSUdWdVpDQjNhWFJvSUhwbGNtOXpMQ0JpZFhRZ2JXRnJaU0J6ZFhKbElIUnZJRzV2ZENCbWIzSm5aWFFnZEdobElHVjRkSEpoSUdKNWRHVnpYRzRnSUdsbUlDaGxlSFJ5WVVKNWRHVnpJRDA5UFNBeEtTQjdYRzRnSUNBZ2RHMXdJRDBnZFdsdWREaGJiR1Z1SUMwZ01WMWNiaUFnSUNCd1lYSjBjeTV3ZFhOb0tGeHVJQ0FnSUNBZ2JHOXZhM1Z3VzNSdGNDQStQaUF5WFNBclhHNGdJQ0FnSUNCc2IyOXJkWEJiS0hSdGNDQThQQ0EwS1NBbUlEQjRNMFpkSUN0Y2JpQWdJQ0FnSUNjOVBTZGNiaUFnSUNBcFhHNGdJSDBnWld4elpTQnBaaUFvWlhoMGNtRkNlWFJsY3lBOVBUMGdNaWtnZTF4dUlDQWdJSFJ0Y0NBOUlDaDFhVzUwT0Z0c1pXNGdMU0F5WFNBOFBDQTRLU0FySUhWcGJuUTRXMnhsYmlBdElERmRYRzRnSUNBZ2NHRnlkSE11Y0hWemFDaGNiaUFnSUNBZ0lHeHZiMnQxY0Z0MGJYQWdQajRnTVRCZElDdGNiaUFnSUNBZ0lHeHZiMnQxY0Zzb2RHMXdJRDQrSURRcElDWWdNSGd6UmwwZ0sxeHVJQ0FnSUNBZ2JHOXZhM1Z3V3loMGJYQWdQRHdnTWlrZ0ppQXdlRE5HWFNBclhHNGdJQ0FnSUNBblBTZGNiaUFnSUNBcFhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NHRnlkSE11YW05cGJpZ25KeWxjYm4xY2JpSXNJaThxSVZ4dUlDb2dWR2hsSUdKMVptWmxjaUJ0YjJSMWJHVWdabkp2YlNCdWIyUmxMbXB6TENCbWIzSWdkR2hsSUdKeWIzZHpaWEl1WEc0Z0tseHVJQ29nUUdGMWRHaHZjaUFnSUVabGNtOXpjeUJCWW05MWEyaGhaR2xxWldnZ1BHWmxjbTl6YzBCbVpYSnZjM011YjNKblBpQThhSFIwY0RvdkwyWmxjbTl6Y3k1dmNtYytYRzRnS2lCQWJHbGpaVzV6WlNBZ1RVbFVYRzRnS2k5Y2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWEJ5YjNSdklDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEoxeHVYRzUyWVhJZ1ltRnpaVFkwSUQwZ2NtVnhkV2x5WlNnblltRnpaVFkwTFdwekp5bGNiblpoY2lCcFpXVmxOelUwSUQwZ2NtVnhkV2x5WlNnbmFXVmxaVGMxTkNjcFhHNTJZWElnYVhOQmNuSmhlU0E5SUhKbGNYVnBjbVVvSjJsellYSnlZWGtuS1Z4dVhHNWxlSEJ2Y25SekxrSjFabVpsY2lBOUlFSjFabVpsY2x4dVpYaHdiM0owY3k1VGJHOTNRblZtWm1WeUlEMGdVMnh2ZDBKMVptWmxjbHh1Wlhod2IzSjBjeTVKVGxOUVJVTlVYMDFCV0Y5Q1dWUkZVeUE5SURVd1hHNWNiaThxS2x4dUlDb2dTV1lnWUVKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVWURwY2JpQXFJQ0FnUFQwOUlIUnlkV1VnSUNBZ1ZYTmxJRlZwYm5RNFFYSnlZWGtnYVcxd2JHVnRaVzUwWVhScGIyNGdLR1poYzNSbGMzUXBYRzRnS2lBZ0lEMDlQU0JtWVd4elpTQWdJRlZ6WlNCUFltcGxZM1FnYVcxd2JHVnRaVzUwWVhScGIyNGdLRzF2YzNRZ1kyOXRjR0YwYVdKc1pTd2daWFpsYmlCSlJUWXBYRzRnS2x4dUlDb2dRbkp2ZDNObGNuTWdkR2hoZENCemRYQndiM0owSUhSNWNHVmtJR0Z5Y21GNWN5QmhjbVVnU1VVZ01UQXJMQ0JHYVhKbFptOTRJRFFyTENCRGFISnZiV1VnTnlzc0lGTmhabUZ5YVNBMUxqRXJMRnh1SUNvZ1QzQmxjbUVnTVRFdU5pc3NJR2xQVXlBMExqSXJMbHh1SUNwY2JpQXFJRVIxWlNCMGJ5QjJZWEpwYjNWeklHSnliM2R6WlhJZ1luVm5jeXdnYzI5dFpYUnBiV1Z6SUhSb1pTQlBZbXBsWTNRZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnZDJsc2JDQmlaU0IxYzJWa0lHVjJaVzVjYmlBcUlIZG9aVzRnZEdobElHSnliM2R6WlhJZ2MzVndjRzl5ZEhNZ2RIbHdaV1FnWVhKeVlYbHpMbHh1SUNwY2JpQXFJRTV2ZEdVNlhHNGdLbHh1SUNvZ0lDQXRJRVpwY21WbWIzZ2dOQzB5T1NCc1lXTnJjeUJ6ZFhCd2IzSjBJR1p2Y2lCaFpHUnBibWNnYm1WM0lIQnliM0JsY25ScFpYTWdkRzhnWUZWcGJuUTRRWEp5WVhsZ0lHbHVjM1JoYm1ObGN5eGNiaUFxSUNBZ0lDQlRaV1U2SUdoMGRIQnpPaTh2WW5WbmVtbHNiR0V1Ylc5NmFXeHNZUzV2Y21jdmMyaHZkMTlpZFdjdVkyZHBQMmxrUFRZNU5UUXpPQzVjYmlBcVhHNGdLaUFnSUMwZ1EyaHliMjFsSURrdE1UQWdhWE1nYldsemMybHVaeUIwYUdVZ1lGUjVjR1ZrUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk4xWW1GeWNtRjVZQ0JtZFc1amRHbHZiaTVjYmlBcVhHNGdLaUFnSUMwZ1NVVXhNQ0JvWVhNZ1lTQmljbTlyWlc0Z1lGUjVjR1ZrUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk4xWW1GeWNtRjVZQ0JtZFc1amRHbHZiaUIzYUdsamFDQnlaWFIxY201eklHRnljbUY1Y3lCdlpseHVJQ29nSUNBZ0lHbHVZMjl5Y21WamRDQnNaVzVuZEdnZ2FXNGdjMjl0WlNCemFYUjFZWFJwYjI1ekxseHVYRzRnS2lCWFpTQmtaWFJsWTNRZ2RHaGxjMlVnWW5Wbloza2dZbkp2ZDNObGNuTWdZVzVrSUhObGRDQmdRblZtWm1WeUxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUmdJSFJ2SUdCbVlXeHpaV0FnYzI4Z2RHaGxlVnh1SUNvZ1oyVjBJSFJvWlNCUFltcGxZM1FnYVcxd2JHVnRaVzUwWVhScGIyNHNJSGRvYVdOb0lHbHpJSE5zYjNkbGNpQmlkWFFnWW1Wb1lYWmxjeUJqYjNKeVpXTjBiSGt1WEc0Z0tpOWNia0oxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVJRDBnWjJ4dlltRnNMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFnSVQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0EvSUdkc2IySmhiQzVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVWEc0Z0lEb2dkSGx3WldSQmNuSmhlVk4xY0hCdmNuUW9LVnh1WEc0dktseHVJQ29nUlhod2IzSjBJR3ROWVhoTVpXNW5kR2dnWVdaMFpYSWdkSGx3WldRZ1lYSnlZWGtnYzNWd2NHOXlkQ0JwY3lCa1pYUmxjbTFwYm1Wa0xseHVJQ292WEc1bGVIQnZjblJ6TG10TllYaE1aVzVuZEdnZ1BTQnJUV0Y0VEdWdVozUm9LQ2xjYmx4dVpuVnVZM1JwYjI0Z2RIbHdaV1JCY25KaGVWTjFjSEJ2Y25RZ0tDa2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lIWmhjaUJoY25JZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNneEtWeHVJQ0FnSUdGeWNpNWZYM0J5YjNSdlgxOGdQU0I3WDE5d2NtOTBiMTlmT2lCVmFXNTBPRUZ5Y21GNUxuQnliM1J2ZEhsd1pTd2dabTl2T2lCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQTBNaUI5ZlZ4dUlDQWdJSEpsZEhWeWJpQmhjbkl1Wm05dktDa2dQVDA5SURReUlDWW1JQzh2SUhSNWNHVmtJR0Z5Y21GNUlHbHVjM1JoYm1ObGN5QmpZVzRnWW1VZ1lYVm5iV1Z1ZEdWa1hHNGdJQ0FnSUNBZ0lIUjVjR1Z2WmlCaGNuSXVjM1ZpWVhKeVlYa2dQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdMeThnWTJoeWIyMWxJRGt0TVRBZ2JHRmpheUJnYzNWaVlYSnlZWGxnWEc0Z0lDQWdJQ0FnSUdGeWNpNXpkV0poY25KaGVTZ3hMQ0F4S1M1aWVYUmxUR1Z1WjNSb0lEMDlQU0F3SUM4dklHbGxNVEFnYUdGeklHSnliMnRsYmlCZ2MzVmlZWEp5WVhsZ1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnJUV0Y0VEdWdVozUm9JQ2dwSUh0Y2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVVhHNGdJQ0FnUHlBd2VEZG1abVptWm1abVhHNGdJQ0FnT2lBd2VETm1abVptWm1abVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVUoxWm1abGNpQW9kR2hoZEN3Z2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNoclRXRjRUR1Z1WjNSb0tDa2dQQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduU1c1MllXeHBaQ0IwZVhCbFpDQmhjbkpoZVNCc1pXNW5kR2duS1Z4dUlDQjlYRzRnSUdsbUlDaENkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dlMXh1SUNBZ0lDOHZJRkpsZEhWeWJpQmhiaUJoZFdkdFpXNTBaV1FnWUZWcGJuUTRRWEp5WVhsZ0lHbHVjM1JoYm1ObExDQm1iM0lnWW1WemRDQndaWEptYjNKdFlXNWpaVnh1SUNBZ0lIUm9ZWFFnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hzWlc1bmRHZ3BYRzRnSUNBZ2RHaGhkQzVmWDNCeWIzUnZYMThnUFNCQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1JtRnNiR0poWTJzNklGSmxkSFZ5YmlCaGJpQnZZbXBsWTNRZ2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUVKMVptWmxjaUJqYkdGemMxeHVJQ0FnSUdsbUlDaDBhR0YwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCMGFHRjBJRDBnYm1WM0lFSjFabVpsY2loc1pXNW5kR2dwWEc0Z0lDQWdmVnh1SUNBZ0lIUm9ZWFF1YkdWdVozUm9JRDBnYkdWdVozUm9YRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdkR2hoZEZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJvWlNCQ2RXWm1aWElnWTI5dWMzUnlkV04wYjNJZ2NtVjBkWEp1Y3lCcGJuTjBZVzVqWlhNZ2IyWWdZRlZwYm5RNFFYSnlZWGxnSUhSb1lYUWdhR0YyWlNCMGFHVnBjbHh1SUNvZ2NISnZkRzkwZVhCbElHTm9ZVzVuWldRZ2RHOGdZRUoxWm1abGNpNXdjbTkwYjNSNWNHVmdMaUJHZFhKMGFHVnliVzl5WlN3Z1lFSjFabVpsY21BZ2FYTWdZU0J6ZFdKamJHRnpjeUJ2Wmx4dUlDb2dZRlZwYm5RNFFYSnlZWGxnTENCemJ5QjBhR1VnY21WMGRYSnVaV1FnYVc1emRHRnVZMlZ6SUhkcGJHd2dhR0YyWlNCaGJHd2dkR2hsSUc1dlpHVWdZRUoxWm1abGNtQWdiV1YwYUc5a2MxeHVJQ29nWVc1a0lIUm9aU0JnVldsdWREaEJjbkpoZVdBZ2JXVjBhRzlrY3k0Z1UzRjFZWEpsSUdKeVlXTnJaWFFnYm05MFlYUnBiMjRnZDI5eWEzTWdZWE1nWlhod1pXTjBaV1FnTFMwZ2FYUmNiaUFxSUhKbGRIVnlibk1nWVNCemFXNW5iR1VnYjJOMFpYUXVYRzRnS2x4dUlDb2dWR2hsSUdCVmFXNTBPRUZ5Y21GNVlDQndjbTkwYjNSNWNHVWdjbVZ0WVdsdWN5QjFibTF2WkdsbWFXVmtMbHh1SUNvdlhHNWNibVoxYm1OMGFXOXVJRUoxWm1abGNpQW9ZWEpuTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNBbUppQWhLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkNkV1ptWlhJcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkNkV1ptWlhJb1lYSm5MQ0JsYm1OdlpHbHVaMDl5VDJabWMyVjBMQ0JzWlc1bmRHZ3BYRzRnSUgxY2JseHVJQ0F2THlCRGIyMXRiMjRnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WjA5eVQyWm1jMlYwSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQW5TV1lnWlc1amIyUnBibWNnYVhNZ2MzQmxZMmxtYVdWa0lIUm9aVzRnZEdobElHWnBjbk4wSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCemRISnBibWNuWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaGJHeHZZMVZ1YzJGbVpTaDBhR2x6TENCaGNtY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWnliMjBvZEdocGN5d2dZWEpuTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNia0oxWm1abGNpNXdiMjlzVTJsNlpTQTlJRGd4T1RJZ0x5OGdibTkwSUhWelpXUWdZbmtnZEdocGN5QnBiWEJzWlcxbGJuUmhkR2x2Ymx4dVhHNHZMeUJVVDBSUE9pQk1aV2RoWTNrc0lHNXZkQ0J1WldWa1pXUWdZVzU1Ylc5eVpTNGdVbVZ0YjNabElHbHVJRzVsZUhRZ2JXRnFiM0lnZG1WeWMybHZiaTVjYmtKMVptWmxjaTVmWVhWbmJXVnVkQ0E5SUdaMWJtTjBhVzl1SUNoaGNuSXBJSHRjYmlBZ1lYSnlMbDlmY0hKdmRHOWZYeUE5SUVKMVptWmxjaTV3Y205MGIzUjVjR1ZjYmlBZ2NtVjBkWEp1SUdGeWNseHVmVnh1WEc1bWRXNWpkR2x2YmlCbWNtOXRJQ2gwYUdGMExDQjJZV3gxWlN3Z1pXNWpiMlJwYm1kUGNrOW1abk5sZEN3Z2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblhDSjJZV3gxWlZ3aUlHRnlaM1Z0Wlc1MElHMTFjM1FnYm05MElHSmxJR0VnYm5WdFltVnlKeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFpoYkhWbElHbHVjM1JoYm1ObGIyWWdRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdabkp2YlVGeWNtRjVRblZtWm1WeUtIUm9ZWFFzSUhaaGJIVmxMQ0JsYm1OdlpHbHVaMDl5VDJabWMyVjBMQ0JzWlc1bmRHZ3BYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtY205dFUzUnlhVzVuS0hSb1lYUXNJSFpoYkhWbExDQmxibU52WkdsdVowOXlUMlptYzJWMEtWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWnliMjFQWW1wbFkzUW9kR2hoZEN3Z2RtRnNkV1VwWEc1OVhHNWNiaThxS2x4dUlDb2dSblZ1WTNScGIyNWhiR3g1SUdWeGRXbDJZV3hsYm5RZ2RHOGdRblZtWm1WeUtHRnlaeXdnWlc1amIyUnBibWNwSUdKMWRDQjBhSEp2ZDNNZ1lTQlVlWEJsUlhKeWIzSmNiaUFxSUdsbUlIWmhiSFZsSUdseklHRWdiblZ0WW1WeUxseHVJQ29nUW5WbVptVnlMbVp5YjIwb2MzUnlXeXdnWlc1amIyUnBibWRkS1Z4dUlDb2dRblZtWm1WeUxtWnliMjBvWVhKeVlYa3BYRzRnS2lCQ2RXWm1aWEl1Wm5KdmJTaGlkV1ptWlhJcFhHNGdLaUJDZFdabVpYSXVabkp2YlNoaGNuSmhlVUoxWm1abGNsc3NJR0o1ZEdWUFptWnpaWFJiTENCc1pXNW5kR2hkWFNsY2JpQXFLaTljYmtKMVptWmxjaTVtY205dElEMGdablZ1WTNScGIyNGdLSFpoYkhWbExDQmxibU52WkdsdVowOXlUMlptYzJWMExDQnNaVzVuZEdncElIdGNiaUFnY21WMGRYSnVJR1p5YjIwb2JuVnNiQ3dnZG1Gc2RXVXNJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDbGNibjFjYmx4dWFXWWdLRUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVLU0I3WEc0Z0lFSjFabVpsY2k1d2NtOTBiM1I1Y0dVdVgxOXdjbTkwYjE5ZklEMGdWV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1ZjYmlBZ1FuVm1abVZ5TGw5ZmNISnZkRzlmWHlBOUlGVnBiblE0UVhKeVlYbGNiaUFnYVdZZ0tIUjVjR1Z2WmlCVGVXMWliMndnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUZONWJXSnZiQzV6Y0dWamFXVnpJQ1ltWEc0Z0lDQWdJQ0JDZFdabVpYSmJVM2x0WW05c0xuTndaV05wWlhOZElEMDlQU0JDZFdabVpYSXBJSHRjYmlBZ0lDQXZMeUJHYVhnZ2MzVmlZWEp5WVhrb0tTQnBiaUJGVXpJd01UWXVJRk5sWlRvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyWmxjbTl6Y3k5aWRXWm1aWEl2Y0hWc2JDODVOMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hDZFdabVpYSXNJRk41YldKdmJDNXpjR1ZqYVdWekxDQjdYRzRnSUNBZ0lDQjJZV3gxWlRvZ2JuVnNiQ3hjYmlBZ0lDQWdJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaVnh1SUNBZ0lIMHBYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVhOelpYSjBVMmw2WlNBb2MybDZaU2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSE5wZW1VZ0lUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWENKemFYcGxYQ0lnWVhKbmRXMWxiblFnYlhWemRDQmlaU0JoSUc1MWJXSmxjaWNwWEc0Z0lIMGdaV3h6WlNCcFppQW9jMmw2WlNBOElEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduWENKemFYcGxYQ0lnWVhKbmRXMWxiblFnYlhWemRDQnViM1FnWW1VZ2JtVm5ZWFJwZG1VbktWeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR0ZzYkc5aklDaDBhR0YwTENCemFYcGxMQ0JtYVd4c0xDQmxibU52WkdsdVp5a2dlMXh1SUNCaGMzTmxjblJUYVhwbEtITnBlbVVwWEc0Z0lHbG1JQ2h6YVhwbElEdzlJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFFuVm1abVZ5S0hSb1lYUXNJSE5wZW1VcFhHNGdJSDFjYmlBZ2FXWWdLR1pwYkd3Z0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQzh2SUU5dWJIa2djR0Y1SUdGMGRHVnVkR2x2YmlCMGJ5QmxibU52WkdsdVp5QnBaaUJwZENkeklHRWdjM1J5YVc1bkxpQlVhR2x6WEc0Z0lDQWdMeThnY0hKbGRtVnVkSE1nWVdOamFXUmxiblJoYkd4NUlITmxibVJwYm1jZ2FXNGdZU0J1ZFcxaVpYSWdkR2hoZENCM2IzVnNaRnh1SUNBZ0lDOHZJR0psSUdsdWRHVnljSEpsZEhSbFpDQmhjeUJoSUhOMFlYSjBJRzltWm5ObGRDNWNiaUFnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR1Z1WTI5a2FXNW5JRDA5UFNBbmMzUnlhVzVuSjF4dUlDQWdJQ0FnUHlCamNtVmhkR1ZDZFdabVpYSW9kR2hoZEN3Z2MybDZaU2t1Wm1sc2JDaG1hV3hzTENCbGJtTnZaR2x1WnlsY2JpQWdJQ0FnSURvZ1kzSmxZWFJsUW5WbVptVnlLSFJvWVhRc0lITnBlbVVwTG1acGJHd29abWxzYkNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWTNKbFlYUmxRblZtWm1WeUtIUm9ZWFFzSUhOcGVtVXBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EzSmxZWFJsY3lCaElHNWxkeUJtYVd4c1pXUWdRblZtWm1WeUlHbHVjM1JoYm1ObExseHVJQ29nWVd4c2IyTW9jMmw2WlZzc0lHWnBiR3hiTENCbGJtTnZaR2x1WjExZEtWeHVJQ29xTDF4dVFuVm1abVZ5TG1Gc2JHOWpJRDBnWm5WdVkzUnBiMjRnS0hOcGVtVXNJR1pwYkd3c0lHVnVZMjlrYVc1bktTQjdYRzRnSUhKbGRIVnliaUJoYkd4dll5aHVkV3hzTENCemFYcGxMQ0JtYVd4c0xDQmxibU52WkdsdVp5bGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXeHNiMk5WYm5OaFptVWdLSFJvWVhRc0lITnBlbVVwSUh0Y2JpQWdZWE56WlhKMFUybDZaU2h6YVhwbEtWeHVJQ0IwYUdGMElEMGdZM0psWVhSbFFuVm1abVZ5S0hSb1lYUXNJSE5wZW1VZ1BDQXdJRDhnTUNBNklHTm9aV05yWldRb2MybDZaU2tnZkNBd0tWeHVJQ0JwWmlBb0lVSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnphWHBsT3lBcksya3BJSHRjYmlBZ0lDQWdJSFJvWVhSYmFWMGdQU0F3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBhR0YwWEc1OVhHNWNiaThxS2x4dUlDb2dSWEYxYVhaaGJHVnVkQ0IwYnlCQ2RXWm1aWElvYm5WdEtTd2dZbmtnWkdWbVlYVnNkQ0JqY21WaGRHVnpJR0VnYm05dUxYcGxjbTh0Wm1sc2JHVmtJRUoxWm1abGNpQnBibk4wWVc1alpTNWNiaUFxSUNvdlhHNUNkV1ptWlhJdVlXeHNiMk5WYm5OaFptVWdQU0JtZFc1amRHbHZiaUFvYzJsNlpTa2dlMXh1SUNCeVpYUjFjbTRnWVd4c2IyTlZibk5oWm1Vb2JuVnNiQ3dnYzJsNlpTbGNibjFjYmk4cUtseHVJQ29nUlhGMWFYWmhiR1Z1ZENCMGJ5QlRiRzkzUW5WbVptVnlLRzUxYlNrc0lHSjVJR1JsWm1GMWJIUWdZM0psWVhSbGN5QmhJRzV2YmkxNlpYSnZMV1pwYkd4bFpDQkNkV1ptWlhJZ2FXNXpkR0Z1WTJVdVhHNGdLaTljYmtKMVptWmxjaTVoYkd4dlkxVnVjMkZtWlZOc2IzY2dQU0JtZFc1amRHbHZiaUFvYzJsNlpTa2dlMXh1SUNCeVpYUjFjbTRnWVd4c2IyTlZibk5oWm1Vb2JuVnNiQ3dnYzJsNlpTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1puSnZiVk4wY21sdVp5QW9kR2hoZEN3Z2MzUnlhVzVuTENCbGJtTnZaR2x1WnlrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUdWdVkyOWthVzVuSUNFOVBTQW5jM1J5YVc1bkp5QjhmQ0JsYm1OdlpHbHVaeUE5UFQwZ0p5Y3BJSHRjYmlBZ0lDQmxibU52WkdsdVp5QTlJQ2QxZEdZNEoxeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhORmJtTnZaR2x1WnlobGJtTnZaR2x1WnlrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGNJbVZ1WTI5a2FXNW5YQ0lnYlhWemRDQmlaU0JoSUhaaGJHbGtJSE4wY21sdVp5QmxibU52WkdsdVp5Y3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFDaHpkSEpwYm1jc0lHVnVZMjlrYVc1bktTQjhJREJjYmlBZ2RHaGhkQ0E5SUdOeVpXRjBaVUoxWm1abGNpaDBhR0YwTENCc1pXNW5kR2dwWEc1Y2JpQWdkbUZ5SUdGamRIVmhiQ0E5SUhSb1lYUXVkM0pwZEdVb2MzUnlhVzVuTENCbGJtTnZaR2x1WnlsY2JseHVJQ0JwWmlBb1lXTjBkV0ZzSUNFOVBTQnNaVzVuZEdncElIdGNiaUFnSUNBdkx5QlhjbWwwYVc1bklHRWdhR1Y0SUhOMGNtbHVaeXdnWm05eUlHVjRZVzF3YkdVc0lIUm9ZWFFnWTI5dWRHRnBibk1nYVc1MllXeHBaQ0JqYUdGeVlXTjBaWEp6SUhkcGJHeGNiaUFnSUNBdkx5QmpZWFZ6WlNCbGRtVnllWFJvYVc1bklHRm1kR1Z5SUhSb1pTQm1hWEp6ZENCcGJuWmhiR2xrSUdOb1lYSmhZM1JsY2lCMGJ5QmlaU0JwWjI1dmNtVmtMaUFvWlM1bkxseHVJQ0FnSUM4dklDZGhZbmg0WTJRbklIZHBiR3dnWW1VZ2RISmxZWFJsWkNCaGN5QW5ZV0luS1Z4dUlDQWdJSFJvWVhRZ1BTQjBhR0YwTG5Oc2FXTmxLREFzSUdGamRIVmhiQ2xjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIwYUdGMFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdaeWIyMUJjbkpoZVV4cGEyVWdLSFJvWVhRc0lHRnljbUY1S1NCN1hHNGdJSFpoY2lCc1pXNW5kR2dnUFNCaGNuSmhlUzVzWlc1bmRHZ2dQQ0F3SUQ4Z01DQTZJR05vWldOclpXUW9ZWEp5WVhrdWJHVnVaM1JvS1NCOElEQmNiaUFnZEdoaGRDQTlJR055WldGMFpVSjFabVpsY2loMGFHRjBMQ0JzWlc1bmRHZ3BYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcElDczlJREVwSUh0Y2JpQWdJQ0IwYUdGMFcybGRJRDBnWVhKeVlYbGJhVjBnSmlBeU5UVmNiaUFnZlZ4dUlDQnlaWFIxY200Z2RHaGhkRnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1jbTl0UVhKeVlYbENkV1ptWlhJZ0tIUm9ZWFFzSUdGeWNtRjVMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdZWEp5WVhrdVlubDBaVXhsYm1kMGFDQXZMeUIwYUdseklIUm9jbTkzY3lCcFppQmdZWEp5WVhsZ0lHbHpJRzV2ZENCaElIWmhiR2xrSUVGeWNtRjVRblZtWm1WeVhHNWNiaUFnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQQ0F3SUh4OElHRnljbUY1TG1KNWRHVk1aVzVuZEdnZ1BDQmllWFJsVDJabWMyVjBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjF4Y0oyOW1abk5sZEZ4Y0p5QnBjeUJ2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNiaUFnZlZ4dVhHNGdJR2xtSUNoaGNuSmhlUzVpZVhSbFRHVnVaM1JvSUR3Z1lubDBaVTltWm5ObGRDQXJJQ2hzWlc1bmRHZ2dmSHdnTUNrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25YRnduYkdWdVozUm9YRnduSUdseklHOTFkQ0J2WmlCaWIzVnVaSE1uS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLR0o1ZEdWUFptWnpaWFFnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJzWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUdGeWNtRjVJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29ZWEp5WVhrcFhHNGdJSDBnWld4elpTQnBaaUFvYkdWdVozUm9JRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCaGNuSmhlU0E5SUc1bGR5QlZhVzUwT0VGeWNtRjVLR0Z5Y21GNUxDQmllWFJsVDJabWMyVjBLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR0Z5Y21GNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1lYSnlZWGtzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsY2JpQWdmVnh1WEc0Z0lHbG1JQ2hDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZTF4dUlDQWdJQzh2SUZKbGRIVnliaUJoYmlCaGRXZHRaVzUwWldRZ1lGVnBiblE0UVhKeVlYbGdJR2x1YzNSaGJtTmxMQ0JtYjNJZ1ltVnpkQ0J3WlhKbWIzSnRZVzVqWlZ4dUlDQWdJSFJvWVhRZ1BTQmhjbkpoZVZ4dUlDQWdJSFJvWVhRdVgxOXdjbTkwYjE5ZklEMGdRblZtWm1WeUxuQnliM1J2ZEhsd1pWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRVpoYkd4aVlXTnJPaUJTWlhSMWNtNGdZVzRnYjJKcVpXTjBJR2x1YzNSaGJtTmxJRzltSUhSb1pTQkNkV1ptWlhJZ1kyeGhjM05jYmlBZ0lDQjBhR0YwSUQwZ1puSnZiVUZ5Y21GNVRHbHJaU2gwYUdGMExDQmhjbkpoZVNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnZEdoaGRGeHVmVnh1WEc1bWRXNWpkR2x2YmlCbWNtOXRUMkpxWldOMElDaDBhR0YwTENCdlltb3BJSHRjYmlBZ2FXWWdLRUoxWm1abGNpNXBjMEoxWm1abGNpaHZZbW9wS1NCN1hHNGdJQ0FnZG1GeUlHeGxiaUE5SUdOb1pXTnJaV1FvYjJKcUxteGxibWQwYUNrZ2ZDQXdYRzRnSUNBZ2RHaGhkQ0E5SUdOeVpXRjBaVUoxWm1abGNpaDBhR0YwTENCc1pXNHBYRzVjYmlBZ0lDQnBaaUFvZEdoaGRDNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdGMFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYjJKcUxtTnZjSGtvZEdoaGRDd2dNQ3dnTUN3Z2JHVnVLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHRjBYRzRnSUgxY2JseHVJQ0JwWmlBb2IySnFLU0I3WEc0Z0lDQWdhV1lnS0NoMGVYQmxiMllnUVhKeVlYbENkV1ptWlhJZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbVhHNGdJQ0FnSUNBZ0lHOWlhaTVpZFdabVpYSWdhVzV6ZEdGdVkyVnZaaUJCY25KaGVVSjFabVpsY2lrZ2ZId2dKMnhsYm1kMGFDY2dhVzRnYjJKcUtTQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzlpYWk1c1pXNW5kR2dnSVQwOUlDZHVkVzFpWlhJbklIeDhJR2x6Ym1GdUtHOWlhaTVzWlc1bmRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkNkV1ptWlhJb2RHaGhkQ3dnTUNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJtY205dFFYSnlZWGxNYVd0bEtIUm9ZWFFzSUc5aWFpbGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iMkpxTG5SNWNHVWdQVDA5SUNkQ2RXWm1aWEluSUNZbUlHbHpRWEp5WVhrb2IySnFMbVJoZEdFcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1puSnZiVUZ5Y21GNVRHbHJaU2gwYUdGMExDQnZZbW91WkdGMFlTbGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RHYVhKemRDQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdjM1J5YVc1bkxDQkNkV1ptWlhJc0lFRnljbUY1UW5WbVptVnlMQ0JCY25KaGVTd2diM0lnWVhKeVlYa3RiR2xyWlNCdlltcGxZM1F1SnlsY2JuMWNibHh1Wm5WdVkzUnBiMjRnWTJobFkydGxaQ0FvYkdWdVozUm9LU0I3WEc0Z0lDOHZJRTV2ZEdVNklHTmhibTV2ZENCMWMyVWdZR3hsYm1kMGFDQThJR3ROWVhoTVpXNW5kR2dvS1dBZ2FHVnlaU0JpWldOaGRYTmxJSFJvWVhRZ1ptRnBiSE1nZDJobGJseHVJQ0F2THlCc1pXNW5kR2dnYVhNZ1RtRk9JQ2gzYUdsamFDQnBjeUJ2ZEdobGNuZHBjMlVnWTI5bGNtTmxaQ0IwYnlCNlpYSnZMaWxjYmlBZ2FXWWdLR3hsYm1kMGFDQStQU0JyVFdGNFRHVnVaM1JvS0NrcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25RWFIwWlcxd2RDQjBieUJoYkd4dlkyRjBaU0JDZFdabVpYSWdiR0Z5WjJWeUlIUm9ZVzRnYldGNGFXMTFiU0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmMybDZaVG9nTUhnbklDc2dhMDFoZUV4bGJtZDBhQ2dwTG5SdlUzUnlhVzVuS0RFMktTQXJJQ2NnWW5sMFpYTW5LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnNaVzVuZEdnZ2ZDQXdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGTnNiM2RDZFdabVpYSWdLR3hsYm1kMGFDa2dlMXh1SUNCcFppQW9LMnhsYm1kMGFDQWhQU0JzWlc1bmRHZ3BJSHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQmxjV1Z4WlhGY2JpQWdJQ0JzWlc1bmRHZ2dQU0F3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRUoxWm1abGNpNWhiR3h2WXlncmJHVnVaM1JvS1Z4dWZWeHVYRzVDZFdabVpYSXVhWE5DZFdabVpYSWdQU0JtZFc1amRHbHZiaUJwYzBKMVptWmxjaUFvWWlrZ2UxeHVJQ0J5WlhSMWNtNGdJU0VvWWlBaFBTQnVkV3hzSUNZbUlHSXVYMmx6UW5WbVptVnlLVnh1ZlZ4dVhHNUNkV1ptWlhJdVkyOXRjR0Z5WlNBOUlHWjFibU4wYVc5dUlHTnZiWEJoY21VZ0tHRXNJR0lwSUh0Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvWVNrZ2ZId2dJVUoxWm1abGNpNXBjMEoxWm1abGNpaGlLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBGeVozVnRaVzUwY3lCdGRYTjBJR0psSUVKMVptWmxjbk1uS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLR0VnUFQwOUlHSXBJSEpsZEhWeWJpQXdYRzVjYmlBZ2RtRnlJSGdnUFNCaExteGxibWQwYUZ4dUlDQjJZWElnZVNBOUlHSXViR1Z1WjNSb1hHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlFMWhkR2d1YldsdUtIZ3NJSGtwT3lCcElEd2diR1Z1T3lBcksya3BJSHRjYmlBZ0lDQnBaaUFvWVZ0cFhTQWhQVDBnWWx0cFhTa2dlMXh1SUNBZ0lDQWdlQ0E5SUdGYmFWMWNiaUFnSUNBZ0lIa2dQU0JpVzJsZFhHNGdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2xtSUNoNElEd2dlU2tnY21WMGRYSnVJQzB4WEc0Z0lHbG1JQ2g1SUR3Z2VDa2djbVYwZFhKdUlERmNiaUFnY21WMGRYSnVJREJjYm4xY2JseHVRblZtWm1WeUxtbHpSVzVqYjJScGJtY2dQU0JtZFc1amRHbHZiaUJwYzBWdVkyOWthVzVuSUNobGJtTnZaR2x1WnlrZ2UxeHVJQ0J6ZDJsMFkyZ2dLRk4wY21sdVp5aGxibU52WkdsdVp5a3VkRzlNYjNkbGNrTmhjMlVvS1NrZ2UxeHVJQ0FnSUdOaGMyVWdKMmhsZUNjNlhHNGdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUdOaGMyVWdKMkZ6WTJscEp6cGNiaUFnSUNCallYTmxJQ2RzWVhScGJqRW5PbHh1SUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0JqWVhObElDZDFZM010TWljNlhHNGdJQ0FnWTJGelpTQW5kWFJtTVRac1pTYzZYRzRnSUNBZ1kyRnpaU0FuZFhSbUxURTJiR1VuT2x4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sWEc0Z0lIMWNibjFjYmx4dVFuVm1abVZ5TG1OdmJtTmhkQ0E5SUdaMWJtTjBhVzl1SUdOdmJtTmhkQ0FvYkdsemRDd2diR1Z1WjNSb0tTQjdYRzRnSUdsbUlDZ2hhWE5CY25KaGVTaHNhWE4wS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2liR2x6ZEZ3aUlHRnlaM1Z0Wlc1MElHMTFjM1FnWW1VZ1lXNGdRWEp5WVhrZ2IyWWdRblZtWm1WeWN5Y3BYRzRnSUgxY2JseHVJQ0JwWmlBb2JHbHpkQzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnUW5WbVptVnlMbUZzYkc5aktEQXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FWeHVJQ0JwWmlBb2JHVnVaM1JvSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQXdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4cGMzUXViR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0FnSUd4bGJtZDBhQ0FyUFNCc2FYTjBXMmxkTG14bGJtZDBhRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSFpoY2lCaWRXWm1aWElnUFNCQ2RXWm1aWEl1WVd4c2IyTlZibk5oWm1Vb2JHVnVaM1JvS1Z4dUlDQjJZWElnY0c5eklEMGdNRnh1SUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYkdsemRDNXNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJSFpoY2lCaWRXWWdQU0JzYVhOMFcybGRYRzRnSUNBZ2FXWWdLQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9ZblZtS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25YQ0pzYVhOMFhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhiaUJCY25KaGVTQnZaaUJDZFdabVpYSnpKeWxjYmlBZ0lDQjlYRzRnSUNBZ1luVm1MbU52Y0hrb1luVm1abVZ5TENCd2IzTXBYRzRnSUNBZ2NHOXpJQ3M5SUdKMVppNXNaVzVuZEdoY2JpQWdmVnh1SUNCeVpYUjFjbTRnWW5WbVptVnlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSjVkR1ZNWlc1bmRHZ2dLSE4wY21sdVp5d2daVzVqYjJScGJtY3BJSHRjYmlBZ2FXWWdLRUoxWm1abGNpNXBjMEoxWm1abGNpaHpkSEpwYm1jcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaeTVzWlc1bmRHaGNiaUFnZlZ4dUlDQnBaaUFvZEhsd1pXOW1JRUZ5Y21GNVFuVm1abVZ5SUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmlCMGVYQmxiMllnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltWEc0Z0lDQWdJQ0FvUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzS0hOMGNtbHVaeWtnZkh3Z2MzUnlhVzVuSUdsdWMzUmhibU5sYjJZZ1FYSnlZWGxDZFdabVpYSXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlITjBjbWx1Wnk1aWVYUmxUR1Z1WjNSb1hHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnpkSEpwYm1jZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjM1J5YVc1bklEMGdKeWNnS3lCemRISnBibWRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnNaVzRnUFNCemRISnBibWN1YkdWdVozUm9YRzRnSUdsbUlDaHNaVzRnUFQwOUlEQXBJSEpsZEhWeWJpQXdYRzVjYmlBZ0x5OGdWWE5sSUdFZ1ptOXlJR3h2YjNBZ2RHOGdZWFp2YVdRZ2NtVmpkWEp6YVc5dVhHNGdJSFpoY2lCc2IzZGxjbVZrUTJGelpTQTlJR1poYkhObFhHNGdJR1p2Y2lBb096c3BJSHRjYmlBZ0lDQnpkMmwwWTJnZ0tHVnVZMjlrYVc1bktTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkaGMyTnBhU2M2WEc0Z0lDQWdJQ0JqWVhObElDZHNZWFJwYmpFbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWW1sdVlYSjVKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hsYmx4dUlDQWdJQ0FnWTJGelpTQW5kWFJtT0NjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE9DYzZYRzRnSUNBZ0lDQmpZWE5sSUhWdVpHVm1hVzVsWkRwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWMFpqaFViMEo1ZEdWektITjBjbWx1WnlrdWJHVnVaM1JvWEc0Z0lDQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3kweUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNWMFpqRTJiR1VuT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRFMmJHVW5PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiR1Z1SUNvZ01seHVJQ0FnSUNBZ1kyRnpaU0FuYUdWNEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeGxiaUErUGo0Z01WeHVJQ0FnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0poYzJVMk5GUnZRbmwwWlhNb2MzUnlhVzVuS1M1c1pXNW5kR2hjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJR2xtSUNoc2IzZGxjbVZrUTJGelpTa2djbVYwZFhKdUlIVjBaamhVYjBKNWRHVnpLSE4wY21sdVp5a3ViR1Z1WjNSb0lDOHZJR0Z6YzNWdFpTQjFkR1k0WEc0Z0lDQWdJQ0FnSUdWdVkyOWthVzVuSUQwZ0tDY25JQ3NnWlc1amIyUnBibWNwTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnSUNBZ0lDQWdiRzkzWlhKbFpFTmhjMlVnUFNCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNUNkV1ptWlhJdVlubDBaVXhsYm1kMGFDQTlJR0o1ZEdWTVpXNW5kR2hjYmx4dVpuVnVZM1JwYjI0Z2MyeHZkMVJ2VTNSeWFXNW5JQ2hsYm1OdlpHbHVaeXdnYzNSaGNuUXNJR1Z1WkNrZ2UxeHVJQ0IyWVhJZ2JHOTNaWEpsWkVOaGMyVWdQU0JtWVd4elpWeHVYRzRnSUM4dklFNXZJRzVsWldRZ2RHOGdkbVZ5YVdaNUlIUm9ZWFFnWENKMGFHbHpMbXhsYm1kMGFDQThQU0JOUVZoZlZVbE9WRE15WENJZ2MybHVZMlVnYVhRbmN5QmhJSEpsWVdRdGIyNXNlVnh1SUNBdkx5QndjbTl3WlhKMGVTQnZaaUJoSUhSNWNHVmtJR0Z5Y21GNUxseHVYRzRnSUM4dklGUm9hWE1nWW1Wb1lYWmxjeUJ1WldsMGFHVnlJR3hwYTJVZ1UzUnlhVzVuSUc1dmNpQlZhVzUwT0VGeWNtRjVJR2x1SUhSb1lYUWdkMlVnYzJWMElITjBZWEowTDJWdVpGeHVJQ0F2THlCMGJ5QjBhR1ZwY2lCMWNIQmxjaTlzYjNkbGNpQmliM1Z1WkhNZ2FXWWdkR2hsSUhaaGJIVmxJSEJoYzNObFpDQnBjeUJ2ZFhRZ2IyWWdjbUZ1WjJVdVhHNGdJQzh2SUhWdVpHVm1hVzVsWkNCcGN5Qm9ZVzVrYkdWa0lITndaV05wWVd4c2VTQmhjeUJ3WlhJZ1JVTk5RUzB5TmpJZ05uUm9JRVZrYVhScGIyNHNYRzRnSUM4dklGTmxZM1JwYjI0Z01UTXVNeTR6TGpjZ1VuVnVkR2x0WlNCVFpXMWhiblJwWTNNNklFdGxlV1ZrUW1sdVpHbHVaMGx1YVhScFlXeHBlbUYwYVc5dUxseHVJQ0JwWmlBb2MzUmhjblFnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0J6ZEdGeWRDQThJREFwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJREJjYmlBZ2ZWeHVJQ0F2THlCU1pYUjFjbTRnWldGeWJIa2dhV1lnYzNSaGNuUWdQaUIwYUdsekxteGxibWQwYUM0Z1JHOXVaU0JvWlhKbElIUnZJSEJ5WlhabGJuUWdjRzkwWlc1MGFXRnNJSFZwYm5Rek1seHVJQ0F2THlCamIyVnlZMmx2YmlCbVlXbHNJR0psYkc5M0xseHVJQ0JwWmlBb2MzUmhjblFnUGlCMGFHbHpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBbkoxeHVJQ0I5WEc1Y2JpQWdhV1lnS0dWdVpDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElHVnVaQ0ErSUhSb2FYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ1pXNWtJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdmVnh1WEc0Z0lHbG1JQ2hsYm1RZ1BEMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW5KMXh1SUNCOVhHNWNiaUFnTHk4Z1JtOXlZMlVnWTI5bGNuTnBiMjRnZEc4Z2RXbHVkRE15TGlCVWFHbHpJSGRwYkd3Z1lXeHpieUJqYjJWeVkyVWdabUZzYzJWNUwwNWhUaUIyWVd4MVpYTWdkRzhnTUM1Y2JpQWdaVzVrSUQ0K1BqMGdNRnh1SUNCemRHRnlkQ0ErUGo0OUlEQmNibHh1SUNCcFppQW9aVzVrSUR3OUlITjBZWEowS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2NuWEc0Z0lIMWNibHh1SUNCcFppQW9JV1Z1WTI5a2FXNW5LU0JsYm1OdlpHbHVaeUE5SUNkMWRHWTRKMXh1WEc0Z0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdjM2RwZEdOb0lDaGxibU52WkdsdVp5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2hsZUZOc2FXTmxLSFJvYVhNc0lITjBZWEowTENCbGJtUXBYRzVjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaamduT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYUm1PRk5zYVdObEtIUm9hWE1zSUhOMFlYSjBMQ0JsYm1RcFhHNWNiaUFnSUNBZ0lHTmhjMlVnSjJGelkybHBKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z6WTJscFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5iR0YwYVc0eEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJKcGJtRnllU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJzWVhScGJqRlRiR2xqWlNoMGFHbHpMQ0J6ZEdGeWRDd2daVzVrS1Z4dVhHNGdJQ0FnSUNCallYTmxJQ2RpWVhObE5qUW5PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZbUZ6WlRZMFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5kV056TWljNlhHNGdJQ0FnSUNCallYTmxJQ2QxWTNNdE1pYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXhObXhsSnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmkweE5teGxKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFYwWmpFMmJHVlRiR2xqWlNoMGFHbHpMQ0J6ZEdGeWRDd2daVzVrS1Z4dVhHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCcFppQW9iRzkzWlhKbFpFTmhjMlVwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxVnVhMjV2ZDI0Z1pXNWpiMlJwYm1jNklDY2dLeUJsYm1OdlpHbHVaeWxjYmlBZ0lDQWdJQ0FnWlc1amIyUnBibWNnUFNBb1pXNWpiMlJwYm1jZ0t5QW5KeWt1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0FnSUNBZ0lDQnNiM2RsY21Wa1EyRnpaU0E5SUhSeWRXVmNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeThnVkdobElIQnliM0JsY25SNUlHbHpJSFZ6WldRZ1lua2dZRUoxWm1abGNpNXBjMEoxWm1abGNtQWdZVzVrSUdCcGN5MWlkV1ptWlhKZ0lDaHBiaUJUWVdaaGNta2dOUzAzS1NCMGJ5QmtaWFJsWTNSY2JpOHZJRUoxWm1abGNpQnBibk4wWVc1alpYTXVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbDlwYzBKMVptWmxjaUE5SUhSeWRXVmNibHh1Wm5WdVkzUnBiMjRnYzNkaGNDQW9ZaXdnYml3Z2JTa2dlMXh1SUNCMllYSWdhU0E5SUdKYmJsMWNiaUFnWWx0dVhTQTlJR0piYlYxY2JpQWdZbHR0WFNBOUlHbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1emQyRndNVFlnUFNCbWRXNWpkR2x2YmlCemQyRndNVFlnS0NrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnZEdocGN5NXNaVzVuZEdoY2JpQWdhV1lnS0d4bGJpQWxJRElnSVQwOUlEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduUW5WbVptVnlJSE5wZW1VZ2JYVnpkQ0JpWlNCaElHMTFiSFJwY0d4bElHOW1JREUyTFdKcGRITW5LVnh1SUNCOVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBJQ3M5SURJcElIdGNiaUFnSUNCemQyRndLSFJvYVhNc0lHa3NJR2tnS3lBeEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWMzZGhjRE15SUQwZ1puVnVZM1JwYjI0Z2MzZGhjRE15SUNncElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSb2FYTXViR1Z1WjNSb1hHNGdJR2xtSUNoc1pXNGdKU0EwSUNFOVBTQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBKMVptWmxjaUJ6YVhwbElHMTFjM1FnWW1VZ1lTQnRkV3gwYVhCc1pTQnZaaUF6TWkxaWFYUnpKeWxjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU0FyUFNBMEtTQjdYRzRnSUNBZ2MzZGhjQ2gwYUdsekxDQnBMQ0JwSUNzZ015bGNiaUFnSUNCemQyRndLSFJvYVhNc0lHa2dLeUF4TENCcElDc2dNaWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkR2hwYzF4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbk4zWVhBMk5DQTlJR1oxYm1OMGFXOXVJSE4zWVhBMk5DQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCcFppQW9iR1Z1SUNVZ09DQWhQVDBnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZENkV1ptWlhJZ2MybDZaU0J0ZFhOMElHSmxJR0VnYlhWc2RHbHdiR1VnYjJZZ05qUXRZbWwwY3ljcFhHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrZ0t6MGdPQ2tnZTF4dUlDQWdJSE4zWVhBb2RHaHBjeXdnYVN3Z2FTQXJJRGNwWEc0Z0lDQWdjM2RoY0NoMGFHbHpMQ0JwSUNzZ01Td2dhU0FySURZcFhHNGdJQ0FnYzNkaGNDaDBhR2x6TENCcElDc2dNaXdnYVNBcklEVXBYRzRnSUNBZ2MzZGhjQ2gwYUdsekxDQnBJQ3NnTXl3Z2FTQXJJRFFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUhSdlUzUnlhVzVuSUNncElIdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9JSHdnTUZ4dUlDQnBaaUFvYkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z0p5ZGNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnliaUIxZEdZNFUyeHBZMlVvZEdocGN5d2dNQ3dnYkdWdVozUm9LVnh1SUNCeVpYUjFjbTRnYzJ4dmQxUnZVM1J5YVc1bkxtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWxjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNWxjWFZoYkhNZ1BTQm1kVzVqZEdsdmJpQmxjWFZoYkhNZ0tHSXBJSHRjYmlBZ2FXWWdLQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9ZaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owRnlaM1Z0Wlc1MElHMTFjM1FnWW1VZ1lTQkNkV1ptWlhJbktWeHVJQ0JwWmlBb2RHaHBjeUE5UFQwZ1lpa2djbVYwZFhKdUlIUnlkV1ZjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaTVqYjIxd1lYSmxLSFJvYVhNc0lHSXBJRDA5UFNBd1hHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1YVc1emNHVmpkQ0E5SUdaMWJtTjBhVzl1SUdsdWMzQmxZM1FnS0NrZ2UxeHVJQ0IyWVhJZ2MzUnlJRDBnSnlkY2JpQWdkbUZ5SUcxaGVDQTlJR1Y0Y0c5eWRITXVTVTVUVUVWRFZGOU5RVmhmUWxsVVJWTmNiaUFnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUhOMGNpQTlJSFJvYVhNdWRHOVRkSEpwYm1jb0oyaGxlQ2NzSURBc0lHMWhlQ2t1YldGMFkyZ29MeTU3TW4wdlp5a3VhbTlwYmlnbklDY3BYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQ0Z2JXRjRLU0J6ZEhJZ0t6MGdKeUF1TGk0Z0oxeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBblBFSjFabVpsY2lBbklDc2djM1J5SUNzZ0p6NG5YRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdVkyOXRjR0Z5WlNBOUlHWjFibU4wYVc5dUlHTnZiWEJoY21VZ0tIUmhjbWRsZEN3Z2MzUmhjblFzSUdWdVpDd2dkR2hwYzFOMFlYSjBMQ0IwYUdselJXNWtLU0I3WEc0Z0lHbG1JQ2doUW5WbVptVnlMbWx6UW5WbVptVnlLSFJoY21kbGRDa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RCY21kMWJXVnVkQ0J0ZFhOMElHSmxJR0VnUW5WbVptVnlKeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpkR0Z5ZENBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdjM1JoY25RZ1BTQXdYRzRnSUgxY2JpQWdhV1lnS0dWdVpDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnWlc1a0lEMGdkR0Z5WjJWMElEOGdkR0Z5WjJWMExteGxibWQwYUNBNklEQmNiaUFnZlZ4dUlDQnBaaUFvZEdocGMxTjBZWEowSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQjBhR2x6VTNSaGNuUWdQU0F3WEc0Z0lIMWNiaUFnYVdZZ0tIUm9hWE5GYm1RZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJSFJvYVhORmJtUWdQU0IwYUdsekxteGxibWQwYUZ4dUlDQjlYRzVjYmlBZ2FXWWdLSE4wWVhKMElEd2dNQ0I4ZkNCbGJtUWdQaUIwWVhKblpYUXViR1Z1WjNSb0lIeDhJSFJvYVhOVGRHRnlkQ0E4SURBZ2ZId2dkR2hwYzBWdVpDQStJSFJvYVhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0oyOTFkQ0J2WmlCeVlXNW5aU0JwYm1SbGVDY3BYRzRnSUgxY2JseHVJQ0JwWmlBb2RHaHBjMU4wWVhKMElENDlJSFJvYVhORmJtUWdKaVlnYzNSaGNuUWdQajBnWlc1a0tTQjdYRzRnSUNBZ2NtVjBkWEp1SURCY2JpQWdmVnh1SUNCcFppQW9kR2hwYzFOMFlYSjBJRDQ5SUhSb2FYTkZibVFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdMVEZjYmlBZ2ZWeHVJQ0JwWmlBb2MzUmhjblFnUGowZ1pXNWtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlERmNiaUFnZlZ4dVhHNGdJSE4wWVhKMElENCtQajBnTUZ4dUlDQmxibVFnUGo0K1BTQXdYRzRnSUhSb2FYTlRkR0Z5ZENBK1BqNDlJREJjYmlBZ2RHaHBjMFZ1WkNBK1BqNDlJREJjYmx4dUlDQnBaaUFvZEdocGN5QTlQVDBnZEdGeVoyVjBLU0J5WlhSMWNtNGdNRnh1WEc0Z0lIWmhjaUI0SUQwZ2RHaHBjMFZ1WkNBdElIUm9hWE5UZEdGeWRGeHVJQ0IyWVhJZ2VTQTlJR1Z1WkNBdElITjBZWEowWEc0Z0lIWmhjaUJzWlc0Z1BTQk5ZWFJvTG0xcGJpaDRMQ0I1S1Z4dVhHNGdJSFpoY2lCMGFHbHpRMjl3ZVNBOUlIUm9hWE11YzJ4cFkyVW9kR2hwYzFOMFlYSjBMQ0IwYUdselJXNWtLVnh1SUNCMllYSWdkR0Z5WjJWMFEyOXdlU0E5SUhSaGNtZGxkQzV6YkdsalpTaHpkR0Z5ZEN3Z1pXNWtLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1T3lBcksya3BJSHRjYmlBZ0lDQnBaaUFvZEdocGMwTnZjSGxiYVYwZ0lUMDlJSFJoY21kbGRFTnZjSGxiYVYwcElIdGNiaUFnSUNBZ0lIZ2dQU0IwYUdselEyOXdlVnRwWFZ4dUlDQWdJQ0FnZVNBOUlIUmhjbWRsZEVOdmNIbGJhVjFjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLSGdnUENCNUtTQnlaWFIxY200Z0xURmNiaUFnYVdZZ0tIa2dQQ0I0S1NCeVpYUjFjbTRnTVZ4dUlDQnlaWFIxY200Z01GeHVmVnh1WEc0dkx5QkdhVzVrY3lCbGFYUm9aWElnZEdobElHWnBjbk4wSUdsdVpHVjRJRzltSUdCMllXeGdJR2x1SUdCaWRXWm1aWEpnSUdGMElHOW1abk5sZENBK1BTQmdZbmwwWlU5bVpuTmxkR0FzWEc0dkx5QlBVaUIwYUdVZ2JHRnpkQ0JwYm1SbGVDQnZaaUJnZG1Gc1lDQnBiaUJnWW5WbVptVnlZQ0JoZENCdlptWnpaWFFnUEQwZ1lHSjVkR1ZQWm1aelpYUmdMbHh1THk5Y2JpOHZJRUZ5WjNWdFpXNTBjenBjYmk4dklDMGdZblZtWm1WeUlDMGdZU0JDZFdabVpYSWdkRzhnYzJWaGNtTm9YRzR2THlBdElIWmhiQ0F0SUdFZ2MzUnlhVzVuTENCQ2RXWm1aWElzSUc5eUlHNTFiV0psY2x4dUx5OGdMU0JpZVhSbFQyWm1jMlYwSUMwZ1lXNGdhVzVrWlhnZ2FXNTBieUJnWW5WbVptVnlZRHNnZDJsc2JDQmlaU0JqYkdGdGNHVmtJSFJ2SUdGdUlHbHVkRE15WEc0dkx5QXRJR1Z1WTI5a2FXNW5JQzBnWVc0Z2IzQjBhVzl1WVd3Z1pXNWpiMlJwYm1jc0lISmxiR1YyWVc1MElHbHpJSFpoYkNCcGN5QmhJSE4wY21sdVoxeHVMeThnTFNCa2FYSWdMU0IwY25WbElHWnZjaUJwYm1SbGVFOW1MQ0JtWVd4elpTQm1iM0lnYkdGemRFbHVaR1Y0VDJaY2JtWjFibU4wYVc5dUlHSnBaR2x5WldOMGFXOXVZV3hKYm1SbGVFOW1JQ2hpZFdabVpYSXNJSFpoYkN3Z1lubDBaVTltWm5ObGRDd2daVzVqYjJScGJtY3NJR1JwY2lrZ2UxeHVJQ0F2THlCRmJYQjBlU0JpZFdabVpYSWdiV1ZoYm5NZ2JtOGdiV0YwWTJoY2JpQWdhV1lnS0dKMVptWmxjaTVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5YmlBdE1WeHVYRzRnSUM4dklFNXZjbTFoYkdsNlpTQmllWFJsVDJabWMyVjBYRzRnSUdsbUlDaDBlWEJsYjJZZ1lubDBaVTltWm5ObGRDQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUdKNWRHVlBabVp6WlhSY2JpQWdJQ0JpZVhSbFQyWm1jMlYwSUQwZ01GeHVJQ0I5SUdWc2MyVWdhV1lnS0dKNWRHVlBabVp6WlhRZ1BpQXdlRGRtWm1abVptWm1LU0I3WEc0Z0lDQWdZbmwwWlU5bVpuTmxkQ0E5SURCNE4yWm1abVptWm1aY2JpQWdmU0JsYkhObElHbG1JQ2hpZVhSbFQyWm1jMlYwSUR3Z0xUQjRPREF3TURBd01EQXBJSHRjYmlBZ0lDQmllWFJsVDJabWMyVjBJRDBnTFRCNE9EQXdNREF3TURCY2JpQWdmVnh1SUNCaWVYUmxUMlptYzJWMElEMGdLMko1ZEdWUFptWnpaWFFnSUM4dklFTnZaWEpqWlNCMGJ5Qk9kVzFpWlhJdVhHNGdJR2xtSUNocGMwNWhUaWhpZVhSbFQyWm1jMlYwS1NrZ2UxeHVJQ0FnSUM4dklHSjVkR1ZQWm1aelpYUTZJR2wwSUdsMEozTWdkVzVrWldacGJtVmtMQ0J1ZFd4c0xDQk9ZVTRzSUZ3aVptOXZYQ0lzSUdWMFl5d2djMlZoY21Ob0lIZG9iMnhsSUdKMVptWmxjbHh1SUNBZ0lHSjVkR1ZQWm1aelpYUWdQU0JrYVhJZ1B5QXdJRG9nS0dKMVptWmxjaTVzWlc1bmRHZ2dMU0F4S1Z4dUlDQjlYRzVjYmlBZ0x5OGdUbTl5YldGc2FYcGxJR0o1ZEdWUFptWnpaWFE2SUc1bFoyRjBhWFpsSUc5bVpuTmxkSE1nYzNSaGNuUWdabkp2YlNCMGFHVWdaVzVrSUc5bUlIUm9aU0JpZFdabVpYSmNiaUFnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQQ0F3S1NCaWVYUmxUMlptYzJWMElEMGdZblZtWm1WeUxteGxibWQwYUNBcklHSjVkR1ZQWm1aelpYUmNiaUFnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQajBnWW5WbVptVnlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHbG1JQ2hrYVhJcElISmxkSFZ5YmlBdE1WeHVJQ0FnSUdWc2MyVWdZbmwwWlU5bVpuTmxkQ0E5SUdKMVptWmxjaTVzWlc1bmRHZ2dMU0F4WEc0Z0lIMGdaV3h6WlNCcFppQW9ZbmwwWlU5bVpuTmxkQ0E4SURBcElIdGNiaUFnSUNCcFppQW9aR2x5S1NCaWVYUmxUMlptYzJWMElEMGdNRnh1SUNBZ0lHVnNjMlVnY21WMGRYSnVJQzB4WEc0Z0lIMWNibHh1SUNBdkx5Qk9iM0p0WVd4cGVtVWdkbUZzWEc0Z0lHbG1JQ2gwZVhCbGIyWWdkbUZzSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lIWmhiQ0E5SUVKMVptWmxjaTVtY205dEtIWmhiQ3dnWlc1amIyUnBibWNwWEc0Z0lIMWNibHh1SUNBdkx5QkdhVzVoYkd4NUxDQnpaV0Z5WTJnZ1pXbDBhR1Z5SUdsdVpHVjRUMllnS0dsbUlHUnBjaUJwY3lCMGNuVmxLU0J2Y2lCc1lYTjBTVzVrWlhoUFpseHVJQ0JwWmlBb1FuVm1abVZ5TG1selFuVm1abVZ5S0haaGJDa3BJSHRjYmlBZ0lDQXZMeUJUY0dWamFXRnNJR05oYzJVNklHeHZiMnRwYm1jZ1ptOXlJR1Z0Y0hSNUlITjBjbWx1Wnk5aWRXWm1aWElnWVd4M1lYbHpJR1poYVd4elhHNGdJQ0FnYVdZZ0tIWmhiQzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBdE1WeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZWEp5WVhsSmJtUmxlRTltS0dKMVptWmxjaXdnZG1Gc0xDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeXdnWkdseUtWeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdkbUZzSUQwZ2RtRnNJQ1lnTUhoR1JpQXZMeUJUWldGeVkyZ2dabTl5SUdFZ1lubDBaU0IyWVd4MVpTQmJNQzB5TlRWZFhHNGdJQ0FnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUlDWW1YRzRnSUNBZ0lDQWdJSFI1Y0dWdlppQlZhVzUwT0VGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1SbGVFOW1JRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQnBaaUFvWkdseUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwT0VGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1SbGVFOW1MbU5oYkd3b1luVm1abVZ5TENCMllXd3NJR0o1ZEdWUFptWnpaWFFwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdWV2x1ZERoQmNuSmhlUzV3Y205MGIzUjVjR1V1YkdGemRFbHVaR1Y0VDJZdVkyRnNiQ2hpZFdabVpYSXNJSFpoYkN3Z1lubDBaVTltWm5ObGRDbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0Z5Y21GNVNXNWtaWGhQWmloaWRXWm1aWElzSUZzZ2RtRnNJRjBzSUdKNWRHVlBabVp6WlhRc0lHVnVZMjlrYVc1bkxDQmthWElwWEc0Z0lIMWNibHh1SUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZDJZV3dnYlhWemRDQmlaU0J6ZEhKcGJtY3NJRzUxYldKbGNpQnZjaUJDZFdabVpYSW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjbkpoZVVsdVpHVjRUMllnS0dGeWNpd2dkbUZzTENCaWVYUmxUMlptYzJWMExDQmxibU52WkdsdVp5d2daR2x5S1NCN1hHNGdJSFpoY2lCcGJtUmxlRk5wZW1VZ1BTQXhYRzRnSUhaaGNpQmhjbkpNWlc1bmRHZ2dQU0JoY25JdWJHVnVaM1JvWEc0Z0lIWmhjaUIyWVd4TVpXNW5kR2dnUFNCMllXd3ViR1Z1WjNSb1hHNWNiaUFnYVdZZ0tHVnVZMjlrYVc1bklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUZOMGNtbHVaeWhsYm1OdlpHbHVaeWt1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0FnSUdsbUlDaGxibU52WkdsdVp5QTlQVDBnSjNWamN6SW5JSHg4SUdWdVkyOWthVzVuSUQwOVBTQW5kV056TFRJbklIeDhYRzRnSUNBZ0lDQWdJR1Z1WTI5a2FXNW5JRDA5UFNBbmRYUm1NVFpzWlNjZ2ZId2daVzVqYjJScGJtY2dQVDA5SUNkMWRHWXRNVFpzWlNjcElIdGNiaUFnSUNBZ0lHbG1JQ2hoY25JdWJHVnVaM1JvSUR3Z01pQjhmQ0IyWVd3dWJHVnVaM1JvSUR3Z01pa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEZjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2x1WkdWNFUybDZaU0E5SURKY2JpQWdJQ0FnSUdGeWNreGxibWQwYUNBdlBTQXlYRzRnSUNBZ0lDQjJZV3hNWlc1bmRHZ2dMejBnTWx4dUlDQWdJQ0FnWW5sMFpVOW1abk5sZENBdlBTQXlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZoWkNBb1luVm1MQ0JwS1NCN1hHNGdJQ0FnYVdZZ0tHbHVaR1Y0VTJsNlpTQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdKMVpsdHBYVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWW5WbUxuSmxZV1JWU1c1ME1UWkNSU2hwSUNvZ2FXNWtaWGhUYVhwbEtWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIWmhjaUJwWEc0Z0lHbG1JQ2hrYVhJcElIdGNiaUFnSUNCMllYSWdabTkxYm1SSmJtUmxlQ0E5SUMweFhHNGdJQ0FnWm05eUlDaHBJRDBnWW5sMFpVOW1abk5sZERzZ2FTQThJR0Z5Y2t4bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnBaaUFvY21WaFpDaGhjbklzSUdrcElEMDlQU0J5WldGa0tIWmhiQ3dnWm05MWJtUkpibVJsZUNBOVBUMGdMVEVnUHlBd0lEb2dhU0F0SUdadmRXNWtTVzVrWlhncEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNobWIzVnVaRWx1WkdWNElEMDlQU0F0TVNrZ1ptOTFibVJKYm1SbGVDQTlJR2xjYmlBZ0lDQWdJQ0FnYVdZZ0tHa2dMU0JtYjNWdVpFbHVaR1Y0SUNzZ01TQTlQVDBnZG1Gc1RHVnVaM1JvS1NCeVpYUjFjbTRnWm05MWJtUkpibVJsZUNBcUlHbHVaR1Y0VTJsNlpWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1p2ZFc1a1NXNWtaWGdnSVQwOUlDMHhLU0JwSUMwOUlHa2dMU0JtYjNWdVpFbHVaR1Y0WEc0Z0lDQWdJQ0FnSUdadmRXNWtTVzVrWlhnZ1BTQXRNVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnBaaUFvWW5sMFpVOW1abk5sZENBcklIWmhiRXhsYm1kMGFDQStJR0Z5Y2t4bGJtZDBhQ2tnWW5sMFpVOW1abk5sZENBOUlHRnlja3hsYm1kMGFDQXRJSFpoYkV4bGJtZDBhRnh1SUNBZ0lHWnZjaUFvYVNBOUlHSjVkR1ZQWm1aelpYUTdJR2tnUGowZ01Ec2dhUzB0S1NCN1hHNGdJQ0FnSUNCMllYSWdabTkxYm1RZ1BTQjBjblZsWEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUhaaGJFeGxibWQwYURzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV0ZrS0dGeWNpd2dhU0FySUdvcElDRTlQU0J5WldGa0tIWmhiQ3dnYWlrcElIdGNiaUFnSUNBZ0lDQWdJQ0JtYjNWdVpDQTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR1p2ZFc1a0tTQnlaWFIxY200Z2FWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlBdE1WeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1sdVkyeDFaR1Z6SUQwZ1puVnVZM1JwYjI0Z2FXNWpiSFZrWlhNZ0tIWmhiQ3dnWW5sMFpVOW1abk5sZEN3Z1pXNWpiMlJwYm1jcElIdGNiaUFnY21WMGRYSnVJSFJvYVhNdWFXNWtaWGhQWmloMllXd3NJR0o1ZEdWUFptWnpaWFFzSUdWdVkyOWthVzVuS1NBaFBUMGdMVEZjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXBibVJsZUU5bUlEMGdablZ1WTNScGIyNGdhVzVrWlhoUFppQW9kbUZzTENCaWVYUmxUMlptYzJWMExDQmxibU52WkdsdVp5a2dlMXh1SUNCeVpYUjFjbTRnWW1sa2FYSmxZM1JwYjI1aGJFbHVaR1Y0VDJZb2RHaHBjeXdnZG1Gc0xDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeXdnZEhKMVpTbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1c1lYTjBTVzVrWlhoUFppQTlJR1oxYm1OMGFXOXVJR3hoYzNSSmJtUmxlRTltSUNoMllXd3NJR0o1ZEdWUFptWnpaWFFzSUdWdVkyOWthVzVuS1NCN1hHNGdJSEpsZEhWeWJpQmlhV1JwY21WamRHbHZibUZzU1c1a1pYaFBaaWgwYUdsekxDQjJZV3dzSUdKNWRHVlBabVp6WlhRc0lHVnVZMjlrYVc1bkxDQm1ZV3h6WlNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnYUdWNFYzSnBkR1VnS0dKMVppd2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0J2Wm1aelpYUWdQU0JPZFcxaVpYSW9iMlptYzJWMEtTQjhmQ0F3WEc0Z0lIWmhjaUJ5WlcxaGFXNXBibWNnUFNCaWRXWXViR1Z1WjNSb0lDMGdiMlptYzJWMFhHNGdJR2xtSUNnaGJHVnVaM1JvS1NCN1hHNGdJQ0FnYkdWdVozUm9JRDBnY21WdFlXbHVhVzVuWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYkdWdVozUm9JRDBnVG5WdFltVnlLR3hsYm1kMGFDbGNiaUFnSUNCcFppQW9iR1Z1WjNSb0lENGdjbVZ0WVdsdWFXNW5LU0I3WEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0J5WlcxaGFXNXBibWRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2THlCdGRYTjBJR0psSUdGdUlHVjJaVzRnYm5WdFltVnlJRzltSUdScFoybDBjMXh1SUNCMllYSWdjM1J5VEdWdUlEMGdjM1J5YVc1bkxteGxibWQwYUZ4dUlDQnBaaUFvYzNSeVRHVnVJQ1VnTWlBaFBUMGdNQ2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblNXNTJZV3hwWkNCb1pYZ2djM1J5YVc1bkp5bGNibHh1SUNCcFppQW9iR1Z1WjNSb0lENGdjM1J5VEdWdUlDOGdNaWtnZTF4dUlDQWdJR3hsYm1kMGFDQTlJSE4wY2t4bGJpQXZJREpjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ2RtRnlJSEJoY25ObFpDQTlJSEJoY25ObFNXNTBLSE4wY21sdVp5NXpkV0p6ZEhJb2FTQXFJRElzSURJcExDQXhOaWxjYmlBZ0lDQnBaaUFvYVhOT1lVNG9jR0Z5YzJWa0tTa2djbVYwZFhKdUlHbGNiaUFnSUNCaWRXWmJiMlptYzJWMElDc2dhVjBnUFNCd1lYSnpaV1JjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdhVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFkR1k0VjNKcGRHVWdLR0oxWml3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQnlaWFIxY200Z1lteHBkRUoxWm1abGNpaDFkR1k0Vkc5Q2VYUmxjeWh6ZEhKcGJtY3NJR0oxWmk1c1pXNW5kR2dnTFNCdlptWnpaWFFwTENCaWRXWXNJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGMyTnBhVmR5YVhSbElDaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2NtVjBkWEp1SUdKc2FYUkNkV1ptWlhJb1lYTmphV2xVYjBKNWRHVnpLSE4wY21sdVp5a3NJR0oxWml3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNibVoxYm1OMGFXOXVJR3hoZEdsdU1WZHlhWFJsSUNoaWRXWXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncElIdGNiaUFnY21WMGRYSnVJR0Z6WTJscFYzSnBkR1VvWW5WbUxDQnpkSEpwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJpWVhObE5qUlhjbWwwWlNBb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhKbGRIVnliaUJpYkdsMFFuVm1abVZ5S0dKaGMyVTJORlJ2UW5sMFpYTW9jM1J5YVc1bktTd2dZblZtTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYm4xY2JseHVablZ1WTNScGIyNGdkV056TWxkeWFYUmxJQ2hpZFdZc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdjbVYwZFhKdUlHSnNhWFJDZFdabVpYSW9kWFJtTVRac1pWUnZRbmwwWlhNb2MzUnlhVzVuTENCaWRXWXViR1Z1WjNSb0lDMGdiMlptYzJWMEtTd2dZblZtTENCdlptWnpaWFFzSUd4bGJtZDBhQ2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNTNjbWwwWlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsSUNoemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9MQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQXZMeUJDZFdabVpYSWpkM0pwZEdVb2MzUnlhVzVuS1Z4dUlDQnBaaUFvYjJabWMyVjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlDZDFkR1k0SjF4dUlDQWdJR3hsYm1kMGFDQTlJSFJvYVhNdWJHVnVaM1JvWEc0Z0lDQWdiMlptYzJWMElEMGdNRnh1SUNBdkx5QkNkV1ptWlhJamQzSnBkR1VvYzNSeWFXNW5MQ0JsYm1OdlpHbHVaeWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaHNaVzVuZEdnZ1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCMGVYQmxiMllnYjJabWMyVjBJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUdWdVkyOWthVzVuSUQwZ2IyWm1jMlYwWEc0Z0lDQWdiR1Z1WjNSb0lEMGdkR2hwY3k1c1pXNW5kR2hjYmlBZ0lDQnZabVp6WlhRZ1BTQXdYRzRnSUM4dklFSjFabVpsY2lOM2NtbDBaU2h6ZEhKcGJtY3NJRzltWm5ObGRGc3NJR3hsYm1kMGFGMWJMQ0JsYm1OdlpHbHVaMTBwWEc0Z0lIMGdaV3h6WlNCcFppQW9hWE5HYVc1cGRHVW9iMlptYzJWMEtTa2dlMXh1SUNBZ0lHOW1abk5sZENBOUlHOW1abk5sZENCOElEQmNiaUFnSUNCcFppQW9hWE5HYVc1cGRHVW9iR1Z1WjNSb0tTa2dlMXh1SUNBZ0lDQWdiR1Z1WjNSb0lEMGdiR1Z1WjNSb0lId2dNRnh1SUNBZ0lDQWdhV1lnS0dWdVkyOWthVzVuSUQwOVBTQjFibVJsWm1sdVpXUXBJR1Z1WTI5a2FXNW5JRDBnSjNWMFpqZ25YRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdWdVkyOWthVzVuSUQwZ2JHVnVaM1JvWEc0Z0lDQWdJQ0JzWlc1bmRHZ2dQU0IxYm1SbFptbHVaV1JjYmlBZ0lDQjlYRzRnSUM4dklHeGxaMkZqZVNCM2NtbDBaU2h6ZEhKcGJtY3NJR1Z1WTI5a2FXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dMU0J5WlcxdmRtVWdhVzRnZGpBdU1UTmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBblFuVm1abVZ5TG5keWFYUmxLSE4wY21sdVp5d2daVzVqYjJScGJtY3NJRzltWm5ObGRGc3NJR3hsYm1kMGFGMHBJR2x6SUc1dklHeHZibWRsY2lCemRYQndiM0owWldRblhHNGdJQ0FnS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJSEpsYldGcGJtbHVaeUE5SUhSb2FYTXViR1Z1WjNSb0lDMGdiMlptYzJWMFhHNGdJR2xtSUNoc1pXNW5kR2dnUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0JzWlc1bmRHZ2dQaUJ5WlcxaGFXNXBibWNwSUd4bGJtZDBhQ0E5SUhKbGJXRnBibWx1WjF4dVhHNGdJR2xtSUNnb2MzUnlhVzVuTG14bGJtZDBhQ0ErSURBZ0ppWWdLR3hsYm1kMGFDQThJREFnZkh3Z2IyWm1jMlYwSUR3Z01Da3BJSHg4SUc5bVpuTmxkQ0ErSUhSb2FYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGSmhibWRsUlhKeWIzSW9KMEYwZEdWdGNIUWdkRzhnZDNKcGRHVWdiM1YwYzJsa1pTQmlkV1ptWlhJZ1ltOTFibVJ6SnlsY2JpQWdmVnh1WEc0Z0lHbG1JQ2doWlc1amIyUnBibWNwSUdWdVkyOWthVzVuSUQwZ0ozVjBaamduWEc1Y2JpQWdkbUZ5SUd4dmQyVnlaV1JEWVhObElEMGdabUZzYzJWY2JpQWdabTl5SUNnN095a2dlMXh1SUNBZ0lITjNhWFJqYUNBb1pXNWpiMlJwYm1jcElIdGNiaUFnSUNBZ0lHTmhjMlVnSjJobGVDYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm9aWGhYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1WEc0Z0lDQWdJQ0JqWVhObElDZDFkR1k0SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmkwNEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVjBaamhYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1WEc0Z0lDQWdJQ0JqWVhObElDZGhjMk5wYVNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGMyTnBhVmR5YVhSbEtIUm9hWE1zSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzVjYmlBZ0lDQWdJR05oYzJVZ0oyeGhkR2x1TVNjNlhHNGdJQ0FnSUNCallYTmxJQ2RpYVc1aGNua25PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiR0YwYVc0eFYzSnBkR1VvZEdocGN5d2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JseHVJQ0FnSUNBZ1kyRnpaU0FuWW1GelpUWTBKenBjYmlBZ0lDQWdJQ0FnTHk4Z1YyRnlibWx1WnpvZ2JXRjRUR1Z1WjNSb0lHNXZkQ0IwWVd0bGJpQnBiblJ2SUdGalkyOTFiblFnYVc0Z1ltRnpaVFkwVjNKcGRHVmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHSmhjMlUyTkZkeWFYUmxLSFJvYVhNc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1Y2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3pJbk9seHVJQ0FnSUNBZ1kyRnpaU0FuZFdOekxUSW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE1UWnNaU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxWTNNeVYzSnBkR1VvZEdocGN5d2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JseHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ2FXWWdLR3h2ZDJWeVpXUkRZWE5sS1NCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZFZibXR1YjNkdUlHVnVZMjlrYVc1bk9pQW5JQ3NnWlc1amIyUnBibWNwWEc0Z0lDQWdJQ0FnSUdWdVkyOWthVzVuSUQwZ0tDY25JQ3NnWlc1amIyUnBibWNwTG5SdlRHOTNaWEpEWVhObEtDbGNiaUFnSUNBZ0lDQWdiRzkzWlhKbFpFTmhjMlVnUFNCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkRzlLVTA5T0lEMGdablZ1WTNScGIyNGdkRzlLVTA5T0lDZ3BJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0IwZVhCbE9pQW5RblZtWm1WeUp5eGNiaUFnSUNCa1lYUmhPaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2gwYUdsekxsOWhjbklnZkh3Z2RHaHBjeXdnTUNsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmlZWE5sTmpSVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lHbG1JQ2h6ZEdGeWRDQTlQVDBnTUNBbUppQmxibVFnUFQwOUlHSjFaaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ltRnpaVFkwTG1aeWIyMUNlWFJsUVhKeVlYa29ZblZtS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJpWVhObE5qUXVabkp2YlVKNWRHVkJjbkpoZVNoaWRXWXVjMnhwWTJVb2MzUmhjblFzSUdWdVpDa3BYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhSbU9GTnNhV05sSUNoaWRXWXNJSE4wWVhKMExDQmxibVFwSUh0Y2JpQWdaVzVrSUQwZ1RXRjBhQzV0YVc0b1luVm1MbXhsYm1kMGFDd2daVzVrS1Z4dUlDQjJZWElnY21WeklEMGdXMTFjYmx4dUlDQjJZWElnYVNBOUlITjBZWEowWEc0Z0lIZG9hV3hsSUNocElEd2daVzVrS1NCN1hHNGdJQ0FnZG1GeUlHWnBjbk4wUW5sMFpTQTlJR0oxWmx0cFhWeHVJQ0FnSUhaaGNpQmpiMlJsVUc5cGJuUWdQU0J1ZFd4c1hHNGdJQ0FnZG1GeUlHSjVkR1Z6VUdWeVUyVnhkV1Z1WTJVZ1BTQW9abWx5YzNSQ2VYUmxJRDRnTUhoRlJpa2dQeUEwWEc0Z0lDQWdJQ0E2SUNobWFYSnpkRUo1ZEdVZ1BpQXdlRVJHS1NBL0lETmNiaUFnSUNBZ0lEb2dLR1pwY25OMFFubDBaU0ErSURCNFFrWXBJRDhnTWx4dUlDQWdJQ0FnT2lBeFhHNWNiaUFnSUNCcFppQW9hU0FySUdKNWRHVnpVR1Z5VTJWeGRXVnVZMlVnUEQwZ1pXNWtLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2MyVmpiMjVrUW5sMFpTd2dkR2hwY21SQ2VYUmxMQ0JtYjNWeWRHaENlWFJsTENCMFpXMXdRMjlrWlZCdmFXNTBYRzVjYmlBZ0lDQWdJSE4zYVhSamFDQW9ZbmwwWlhOUVpYSlRaWEYxWlc1alpTa2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElERTZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBjbk4wUW5sMFpTQThJREI0T0RBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdlpHVlFiMmx1ZENBOUlHWnBjbk4wUW5sMFpWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0JqWVhObElESTZYRzRnSUNBZ0lDQWdJQ0FnYzJWamIyNWtRbmwwWlNBOUlHSjFabHRwSUNzZ01WMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tITmxZMjl1WkVKNWRHVWdKaUF3ZUVNd0tTQTlQVDBnTUhnNE1Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVnRjRU52WkdWUWIybHVkQ0E5SUNobWFYSnpkRUo1ZEdVZ0ppQXdlREZHS1NBOFBDQXdlRFlnZkNBb2MyVmpiMjVrUW5sMFpTQW1JREI0TTBZcFhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHVnRjRU52WkdWUWIybHVkQ0ErSURCNE4wWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnZEdWdGNFTnZaR1ZRYjJsdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQmpZWE5sSURNNlhHNGdJQ0FnSUNBZ0lDQWdjMlZqYjI1a1FubDBaU0E5SUdKMVpsdHBJQ3NnTVYxY2JpQWdJQ0FnSUNBZ0lDQjBhR2x5WkVKNWRHVWdQU0JpZFdaYmFTQXJJREpkWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ2h6WldOdmJtUkNlWFJsSUNZZ01IaERNQ2tnUFQwOUlEQjRPREFnSmlZZ0tIUm9hWEprUW5sMFpTQW1JREI0UXpBcElEMDlQU0F3ZURnd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdRMjlrWlZCdmFXNTBJRDBnS0dacGNuTjBRbmwwWlNBbUlEQjRSaWtnUER3Z01IaERJSHdnS0hObFkyOXVaRUo1ZEdVZ0ppQXdlRE5HS1NBOFBDQXdlRFlnZkNBb2RHaHBjbVJDZVhSbElDWWdNSGd6UmlsY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMFpXMXdRMjlrWlZCdmFXNTBJRDRnTUhnM1JrWWdKaVlnS0hSbGJYQkRiMlJsVUc5cGJuUWdQQ0F3ZUVRNE1EQWdmSHdnZEdWdGNFTnZaR1ZRYjJsdWRDQStJREI0UkVaR1Jpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnZEdWdGNFTnZaR1ZRYjJsdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQmpZWE5sSURRNlhHNGdJQ0FnSUNBZ0lDQWdjMlZqYjI1a1FubDBaU0E5SUdKMVpsdHBJQ3NnTVYxY2JpQWdJQ0FnSUNBZ0lDQjBhR2x5WkVKNWRHVWdQU0JpZFdaYmFTQXJJREpkWEc0Z0lDQWdJQ0FnSUNBZ1ptOTFjblJvUW5sMFpTQTlJR0oxWmx0cElDc2dNMTFjYmlBZ0lDQWdJQ0FnSUNCcFppQW9LSE5sWTI5dVpFSjVkR1VnSmlBd2VFTXdLU0E5UFQwZ01IZzRNQ0FtSmlBb2RHaHBjbVJDZVhSbElDWWdNSGhETUNrZ1BUMDlJREI0T0RBZ0ppWWdLR1p2ZFhKMGFFSjVkR1VnSmlBd2VFTXdLU0E5UFQwZ01IZzRNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0VOdlpHVlFiMmx1ZENBOUlDaG1hWEp6ZEVKNWRHVWdKaUF3ZUVZcElEdzhJREI0TVRJZ2ZDQW9jMlZqYjI1a1FubDBaU0FtSURCNE0wWXBJRHc4SURCNFF5QjhJQ2gwYUdseVpFSjVkR1VnSmlBd2VETkdLU0E4UENBd2VEWWdmQ0FvWm05MWNuUm9RbmwwWlNBbUlEQjRNMFlwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdWdGNFTnZaR1ZRYjJsdWRDQStJREI0UmtaR1JpQW1KaUIwWlcxd1EyOWtaVkJ2YVc1MElEd2dNSGd4TVRBd01EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnZEdWdGNFTnZaR1ZRYjJsdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZMjlrWlZCdmFXNTBJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0F2THlCM1pTQmthV1FnYm05MElHZGxibVZ5WVhSbElHRWdkbUZzYVdRZ1kyOWtaVkJ2YVc1MElITnZJR2x1YzJWeWRDQmhYRzRnSUNBZ0lDQXZMeUJ5WlhCc1lXTmxiV1Z1ZENCamFHRnlJQ2hWSzBaR1JrUXBJR0Z1WkNCaFpIWmhibU5sSUc5dWJIa2dNU0JpZVhSbFhHNGdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQXdlRVpHUmtSY2JpQWdJQ0FnSUdKNWRHVnpVR1Z5VTJWeGRXVnVZMlVnUFNBeFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyUmxVRzlwYm5RZ1BpQXdlRVpHUmtZcElIdGNiaUFnSUNBZ0lDOHZJR1Z1WTI5a1pTQjBieUIxZEdZeE5pQW9jM1Z5Y205bllYUmxJSEJoYVhJZ1pHRnVZMlVwWEc0Z0lDQWdJQ0JqYjJSbFVHOXBiblFnTFQwZ01IZ3hNREF3TUZ4dUlDQWdJQ0FnY21WekxuQjFjMmdvWTI5a1pWQnZhVzUwSUQ0K1BpQXhNQ0FtSURCNE0wWkdJSHdnTUhoRU9EQXdLVnh1SUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnTUhoRVF6QXdJSHdnWTI5a1pWQnZhVzUwSUNZZ01IZ3pSa1pjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWE11Y0hWemFDaGpiMlJsVUc5cGJuUXBYRzRnSUNBZ2FTQXJQU0JpZVhSbGMxQmxjbE5sY1hWbGJtTmxYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaR1ZqYjJSbFEyOWtaVkJ2YVc1MGMwRnljbUY1S0hKbGN5bGNibjFjYmx4dUx5OGdRbUZ6WldRZ2IyNGdhSFIwY0RvdkwzTjBZV05yYjNabGNtWnNiM2N1WTI5dEwyRXZNakkzTkRjeU56SXZOamd3TnpReUxDQjBhR1VnWW5KdmQzTmxjaUIzYVhSb1hHNHZMeUIwYUdVZ2JHOTNaWE4wSUd4cGJXbDBJR2x6SUVOb2NtOXRaU3dnZDJsMGFDQXdlREV3TURBd0lHRnlaM011WEc0dkx5QlhaU0JuYnlBeElHMWhaMjVwZEhWa1pTQnNaWE56TENCbWIzSWdjMkZtWlhSNVhHNTJZWElnVFVGWVgwRlNSMVZOUlU1VVUxOU1SVTVIVkVnZ1BTQXdlREV3TURCY2JseHVablZ1WTNScGIyNGdaR1ZqYjJSbFEyOWtaVkJ2YVc1MGMwRnljbUY1SUNoamIyUmxVRzlwYm5SektTQjdYRzRnSUhaaGNpQnNaVzRnUFNCamIyUmxVRzlwYm5SekxteGxibWQwYUZ4dUlDQnBaaUFvYkdWdUlEdzlJRTFCV0Y5QlVrZFZUVVZPVkZOZlRFVk9SMVJJS1NCN1hHNGdJQ0FnY21WMGRYSnVJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1V1WVhCd2JIa29VM1J5YVc1bkxDQmpiMlJsVUc5cGJuUnpLU0F2THlCaGRtOXBaQ0JsZUhSeVlTQnpiR2xqWlNncFhHNGdJSDFjYmx4dUlDQXZMeUJFWldOdlpHVWdhVzRnWTJoMWJtdHpJSFJ2SUdGMmIybGtJRndpWTJGc2JDQnpkR0ZqYXlCemFYcGxJR1Y0WTJWbFpHVmtYQ0l1WEc0Z0lIWmhjaUJ5WlhNZ1BTQW5KMXh1SUNCMllYSWdhU0E5SURCY2JpQWdkMmhwYkdVZ0tHa2dQQ0JzWlc0cElIdGNiaUFnSUNCeVpYTWdLejBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlM1aGNIQnNlU2hjYmlBZ0lDQWdJRk4wY21sdVp5eGNiaUFnSUNBZ0lHTnZaR1ZRYjJsdWRITXVjMnhwWTJVb2FTd2dhU0FyUFNCTlFWaGZRVkpIVlUxRlRsUlRYMHhGVGtkVVNDbGNiaUFnSUNBcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMxeHVmVnh1WEc1bWRXNWpkR2x2YmlCaGMyTnBhVk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlISmxkQ0E5SUNjblhHNGdJR1Z1WkNBOUlFMWhkR2d1YldsdUtHSjFaaTVzWlc1bmRHZ3NJR1Z1WkNsY2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2MzUmhjblE3SUdrZ1BDQmxibVE3SUNzcmFTa2dlMXh1SUNBZ0lISmxkQ0FyUFNCVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtHSjFabHRwWFNBbUlEQjROMFlwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVYRzVtZFc1amRHbHZiaUJzWVhScGJqRlRiR2xqWlNBb1luVm1MQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJSFpoY2lCeVpYUWdQU0FuSjF4dUlDQmxibVFnUFNCTllYUm9MbTFwYmloaWRXWXViR1Z1WjNSb0xDQmxibVFwWEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBPeUJwSUR3Z1pXNWtPeUFySzJrcElIdGNiaUFnSUNCeVpYUWdLejBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoaWRXWmJhVjBwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsZEZ4dWZWeHVYRzVtZFc1amRHbHZiaUJvWlhoVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQmlkV1l1YkdWdVozUm9YRzVjYmlBZ2FXWWdLQ0Z6ZEdGeWRDQjhmQ0J6ZEdGeWRDQThJREFwSUhOMFlYSjBJRDBnTUZ4dUlDQnBaaUFvSVdWdVpDQjhmQ0JsYm1RZ1BDQXdJSHg4SUdWdVpDQStJR3hsYmlrZ1pXNWtJRDBnYkdWdVhHNWNiaUFnZG1GeUlHOTFkQ0E5SUNjblhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRHNnYVNBOElHVnVaRHNnS3l0cEtTQjdYRzRnSUNBZ2IzVjBJQ3M5SUhSdlNHVjRLR0oxWmx0cFhTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVjBaakUyYkdWVGJHbGpaU0FvWW5WbUxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJpZVhSbGN5QTlJR0oxWmk1emJHbGpaU2h6ZEdGeWRDd2daVzVrS1Z4dUlDQjJZWElnY21WeklEMGdKeWRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmllWFJsY3k1c1pXNW5kR2c3SUdrZ0t6MGdNaWtnZTF4dUlDQWdJSEpsY3lBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0o1ZEdWelcybGRJQ3NnWW5sMFpYTmJhU0FySURGZElDb2dNalUyS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ5WlhOY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV6YkdsalpTQTlJR1oxYm1OMGFXOXVJSE5zYVdObElDaHpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCemRHRnlkQ0E5SUg1K2MzUmhjblJjYmlBZ1pXNWtJRDBnWlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNGdPaUIrZm1WdVpGeHVYRzRnSUdsbUlDaHpkR0Z5ZENBOElEQXBJSHRjYmlBZ0lDQnpkR0Z5ZENBclBTQnNaVzVjYmlBZ0lDQnBaaUFvYzNSaGNuUWdQQ0F3S1NCemRHRnlkQ0E5SURCY2JpQWdmU0JsYkhObElHbG1JQ2h6ZEdGeWRDQStJR3hsYmlrZ2UxeHVJQ0FnSUhOMFlYSjBJRDBnYkdWdVhHNGdJSDFjYmx4dUlDQnBaaUFvWlc1a0lEd2dNQ2tnZTF4dUlDQWdJR1Z1WkNBclBTQnNaVzVjYmlBZ0lDQnBaaUFvWlc1a0lEd2dNQ2tnWlc1a0lEMGdNRnh1SUNCOUlHVnNjMlVnYVdZZ0tHVnVaQ0ErSUd4bGJpa2dlMXh1SUNBZ0lHVnVaQ0E5SUd4bGJseHVJQ0I5WEc1Y2JpQWdhV1lnS0dWdVpDQThJSE4wWVhKMEtTQmxibVFnUFNCemRHRnlkRnh1WEc0Z0lIWmhjaUJ1WlhkQ2RXWmNiaUFnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ2JtVjNRblZtSUQwZ2RHaHBjeTV6ZFdKaGNuSmhlU2h6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJRzVsZDBKMVppNWZYM0J5YjNSdlgxOGdQU0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkbUZ5SUhOc2FXTmxUR1Z1SUQwZ1pXNWtJQzBnYzNSaGNuUmNiaUFnSUNCdVpYZENkV1lnUFNCdVpYY2dRblZtWm1WeUtITnNhV05sVEdWdUxDQjFibVJsWm1sdVpXUXBYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpiR2xqWlV4bGJqc2dLeXRwS1NCN1hHNGdJQ0FnSUNCdVpYZENkV1piYVYwZ1BTQjBhR2x6VzJrZ0t5QnpkR0Z5ZEYxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm1WM1FuVm1YRzU5WEc1Y2JpOHFYRzRnS2lCT1pXVmtJSFJ2SUcxaGEyVWdjM1Z5WlNCMGFHRjBJR0oxWm1abGNpQnBjMjRuZENCMGNubHBibWNnZEc4Z2QzSnBkR1VnYjNWMElHOW1JR0p2ZFc1a2N5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyaGxZMnRQWm1aelpYUWdLRzltWm5ObGRDd2daWGgwTENCc1pXNW5kR2dwSUh0Y2JpQWdhV1lnS0NodlptWnpaWFFnSlNBeEtTQWhQVDBnTUNCOGZDQnZabVp6WlhRZ1BDQXdLU0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnbmIyWm1jMlYwSUdseklHNXZkQ0IxYVc1MEp5bGNiaUFnYVdZZ0tHOW1abk5sZENBcklHVjRkQ0ErSUd4bGJtZDBhQ2tnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0oxUnllV2x1WnlCMGJ5QmhZMk5sYzNNZ1ltVjViMjVrSUdKMVptWmxjaUJzWlc1bmRHZ25LVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JWU1c1MFRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkRXhGSUNodlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lHNXZRWE56WlhKMEtTQjdYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0I4SURCY2JpQWdZbmwwWlV4bGJtZDBhQ0E5SUdKNWRHVk1aVzVuZEdnZ2ZDQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2RHaHBjeTVzWlc1bmRHZ3BYRzVjYmlBZ2RtRnlJSFpoYkNBOUlIUm9hWE5iYjJabWMyVjBYVnh1SUNCMllYSWdiWFZzSUQwZ01WeHVJQ0IyWVhJZ2FTQTlJREJjYmlBZ2QyaHBiR1VnS0NzcmFTQThJR0o1ZEdWTVpXNW5kR2dnSmlZZ0tHMTFiQ0FxUFNBd2VERXdNQ2twSUh0Y2JpQWdJQ0IyWVd3Z0t6MGdkR2hwYzF0dlptWnpaWFFnS3lCcFhTQXFJRzExYkZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhaaGJGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwUWtVZ1BTQm1kVzVqZEdsdmJpQnlaV0ZrVlVsdWRFSkZJQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ1lubDBaVXhsYm1kMGFDQTlJR0o1ZEdWTVpXNW5kR2dnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElIdGNiaUFnSUNCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lHSjVkR1ZNWlc1bmRHZ3NJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQjlYRzVjYmlBZ2RtRnlJSFpoYkNBOUlIUm9hWE5iYjJabWMyVjBJQ3NnTFMxaWVYUmxUR1Z1WjNSb1hWeHVJQ0IyWVhJZ2JYVnNJRDBnTVZ4dUlDQjNhR2xzWlNBb1lubDBaVXhsYm1kMGFDQStJREFnSmlZZ0tHMTFiQ0FxUFNBd2VERXdNQ2twSUh0Y2JpQWdJQ0IyWVd3Z0t6MGdkR2hwYzF0dlptWnpaWFFnS3lBdExXSjVkR1ZNWlc1bmRHaGRJQ29nYlhWc1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RtRnNYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRlZKYm5RNElEMGdablZ1WTNScGIyNGdjbVZoWkZWSmJuUTRJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z01Td2dkR2hwY3k1c1pXNW5kR2dwWEc0Z0lISmxkSFZ5YmlCMGFHbHpXMjltWm5ObGRGMWNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERFMlRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkREUyVEVVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0F5TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSFJvYVhOYmIyWm1jMlYwWFNCOElDaDBhR2x6VzI5bVpuTmxkQ0FySURGZElEdzhJRGdwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkZWSmJuUXhOa0pGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRlZKYm5ReE5rSkZJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z01pd2dkR2hwY3k1c1pXNW5kR2dwWEc0Z0lISmxkSFZ5YmlBb2RHaHBjMXR2Wm1aelpYUmRJRHc4SURncElId2dkR2hwYzF0dlptWnpaWFFnS3lBeFhWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUlZTVzUwTXpKTVJTQTlJR1oxYm1OMGFXOXVJSEpsWVdSVlNXNTBNekpNUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJRFFzSUhSb2FYTXViR1Z1WjNSb0tWeHVYRzRnSUhKbGRIVnliaUFvS0hSb2FYTmJiMlptYzJWMFhTa2dmRnh1SUNBZ0lDQWdLSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQRHdnT0NrZ2ZGeHVJQ0FnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTWwwZ1BEd2dNVFlwS1NBclhHNGdJQ0FnSUNBb2RHaHBjMXR2Wm1aelpYUWdLeUF6WFNBcUlEQjRNVEF3TURBd01DbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkRE15UWtVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0EwTENCMGFHbHpMbXhsYm1kMGFDbGNibHh1SUNCeVpYUjFjbTRnS0hSb2FYTmJiMlptYzJWMFhTQXFJREI0TVRBd01EQXdNQ2tnSzF4dUlDQWdJQ2dvZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E4UENBeE5pa2dmRnh1SUNBZ0lDaDBhR2x6VzI5bVpuTmxkQ0FySURKZElEdzhJRGdwSUh4Y2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklETmRLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JKYm5STVJTQTlJR1oxYm1OMGFXOXVJSEpsWVdSSmJuUk1SU0FvYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHSjVkR1ZNWlc1bmRHZ2dQU0JpZVhSbFRHVnVaM1JvSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUhSb2FYTXViR1Z1WjNSb0tWeHVYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRGMWNiaUFnZG1GeUlHMTFiQ0E5SURGY2JpQWdkbUZ5SUdrZ1BTQXdYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmllWFJsVEdWdVozUm9JQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdkbUZzSUNzOUlIUm9hWE5iYjJabWMyVjBJQ3NnYVYwZ0tpQnRkV3hjYmlBZ2ZWeHVJQ0J0ZFd3Z0tqMGdNSGc0TUZ4dVhHNGdJR2xtSUNoMllXd2dQajBnYlhWc0tTQjJZV3dnTFQwZ1RXRjBhQzV3YjNjb01pd2dPQ0FxSUdKNWRHVk1aVzVuZEdncFhHNWNiaUFnY21WMGRYSnVJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUkNSU0E5SUdaMWJtTjBhVzl1SUhKbFlXUkpiblJDUlNBb2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQnViMEZ6YzJWeWRDa2dlMXh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkNBd1hHNGdJR0o1ZEdWTVpXNW5kR2dnUFNCaWVYUmxUR1Z1WjNSb0lId2dNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lIUm9hWE11YkdWdVozUm9LVnh1WEc0Z0lIWmhjaUJwSUQwZ1lubDBaVXhsYm1kMGFGeHVJQ0IyWVhJZ2JYVnNJRDBnTVZ4dUlDQjJZWElnZG1Gc0lEMGdkR2hwYzF0dlptWnpaWFFnS3lBdExXbGRYRzRnSUhkb2FXeGxJQ2hwSUQ0Z01DQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIWmhiQ0FyUFNCMGFHbHpXMjltWm5ObGRDQXJJQzB0YVYwZ0tpQnRkV3hjYmlBZ2ZWeHVJQ0J0ZFd3Z0tqMGdNSGc0TUZ4dVhHNGdJR2xtSUNoMllXd2dQajBnYlhWc0tTQjJZV3dnTFQwZ1RXRjBhQzV3YjNjb01pd2dPQ0FxSUdKNWRHVk1aVzVuZEdncFhHNWNiaUFnY21WMGRYSnVJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUTRJRDBnWm5WdVkzUnBiMjRnY21WaFpFbHVkRGdnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQXhMQ0IwYUdsekxteGxibWQwYUNsY2JpQWdhV1lnS0NFb2RHaHBjMXR2Wm1aelpYUmRJQ1lnTUhnNE1Da3BJSEpsZEhWeWJpQW9kR2hwYzF0dlptWnpaWFJkS1Z4dUlDQnlaWFIxY200Z0tDZ3dlR1ptSUMwZ2RHaHBjMXR2Wm1aelpYUmRJQ3NnTVNrZ0tpQXRNU2xjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXlaV0ZrU1c1ME1UWk1SU0E5SUdaMWJtTjBhVzl1SUhKbFlXUkpiblF4Tmt4RklDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnTWl3Z2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRGMGdmQ0FvZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E4UENBNEtWeHVJQ0J5WlhSMWNtNGdLSFpoYkNBbUlEQjRPREF3TUNrZ1B5QjJZV3dnZkNBd2VFWkdSa1l3TURBd0lEb2dkbUZzWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVsdWRERTJRa1VnUFNCbWRXNWpkR2x2YmlCeVpXRmtTVzUwTVRaQ1JTQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURJc0lIUm9hWE11YkdWdVozUm9LVnh1SUNCMllYSWdkbUZzSUQwZ2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNCOElDaDBhR2x6VzI5bVpuTmxkRjBnUER3Z09DbGNiaUFnY21WMGRYSnVJQ2gyWVd3Z0ppQXdlRGd3TURBcElEOGdkbUZzSUh3Z01IaEdSa1pHTURBd01DQTZJSFpoYkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRWx1ZERNeVRFVWdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydFBabVp6WlhRb2IyWm1jMlYwTENBMExDQjBhR2x6TG14bGJtZDBhQ2xjYmx4dUlDQnlaWFIxY200Z0tIUm9hWE5iYjJabWMyVjBYU2tnZkZ4dUlDQWdJQ2gwYUdselcyOW1abk5sZENBcklERmRJRHc4SURncElIeGNiaUFnSUNBb2RHaHBjMXR2Wm1aelpYUWdLeUF5WFNBOFBDQXhOaWtnZkZ4dUlDQWdJQ2gwYUdselcyOW1abk5sZENBcklETmRJRHc4SURJMEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblF6TWtKRklEMGdablZ1WTNScGIyNGdjbVZoWkVsdWRETXlRa1VnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQTBMQ0IwYUdsekxteGxibWQwYUNsY2JseHVJQ0J5WlhSMWNtNGdLSFJvYVhOYmIyWm1jMlYwWFNBOFBDQXlOQ2tnZkZ4dUlDQWdJQ2gwYUdselcyOW1abk5sZENBcklERmRJRHc4SURFMktTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTWwwZ1BEd2dPQ2tnZkZ4dUlDQWdJQ2gwYUdselcyOW1abk5sZENBcklETmRLVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuSmxZV1JHYkc5aGRFeEZJRDBnWm5WdVkzUnBiMjRnY21WaFpFWnNiMkYwVEVVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0EwTENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJR2xsWldVM05UUXVjbVZoWkNoMGFHbHpMQ0J2Wm1aelpYUXNJSFJ5ZFdVc0lESXpMQ0EwS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSR2JHOWhkRUpGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRVpzYjJGMFFrVWdLRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydFBabVp6WlhRb2IyWm1jMlYwTENBMExDQjBhR2x6TG14bGJtZDBhQ2xjYmlBZ2NtVjBkWEp1SUdsbFpXVTNOVFF1Y21WaFpDaDBhR2x6TENCdlptWnpaWFFzSUdaaGJITmxMQ0F5TXl3Z05DbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtSRzkxWW14bFRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1JHOTFZbXhsVEVVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0E0TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJR2xsWldVM05UUXVjbVZoWkNoMGFHbHpMQ0J2Wm1aelpYUXNJSFJ5ZFdVc0lEVXlMQ0E0S1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSRWIzVmliR1ZDUlNBOUlHWjFibU4wYVc5dUlISmxZV1JFYjNWaWJHVkNSU0FvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEZ3NJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLSFJvYVhNc0lHOW1abk5sZEN3Z1ptRnNjMlVzSURVeUxDQTRLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTBsdWRDQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JsZUhRc0lHMWhlQ3dnYldsdUtTQjdYRzRnSUdsbUlDZ2hRblZtWm1WeUxtbHpRblZtWm1WeUtHSjFaaWtwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0oxd2lZblZtWm1WeVhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJRUoxWm1abGNpQnBibk4wWVc1alpTY3BYRzRnSUdsbUlDaDJZV3gxWlNBK0lHMWhlQ0I4ZkNCMllXeDFaU0E4SUcxcGJpa2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjF3aWRtRnNkV1ZjSWlCaGNtZDFiV1Z1ZENCcGN5QnZkWFFnYjJZZ1ltOTFibVJ6SnlsY2JpQWdhV1lnS0c5bVpuTmxkQ0FySUdWNGRDQStJR0oxWmk1c1pXNW5kR2dwSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZEpibVJsZUNCdmRYUWdiMllnY21GdVoyVW5LVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWRFeEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVlZTVzUwVEVVZ0tIWmhiSFZsTENCdlptWnpaWFFzSUdKNWRHVk1aVzVuZEdnc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0I4SURCY2JpQWdZbmwwWlV4bGJtZDBhQ0E5SUdKNWRHVk1aVzVuZEdnZ2ZDQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJSHRjYmlBZ0lDQjJZWElnYldGNFFubDBaWE1nUFNCTllYUm9MbkJ2ZHlneUxDQTRJQ29nWW5sMFpVeGxibWQwYUNrZ0xTQXhYRzRnSUNBZ1kyaGxZMnRKYm5Rb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYldGNFFubDBaWE1zSURBcFhHNGdJSDFjYmx4dUlDQjJZWElnYlhWc0lEMGdNVnh1SUNCMllYSWdhU0E5SURCY2JpQWdkR2hwYzF0dlptWnpaWFJkSUQwZ2RtRnNkV1VnSmlBd2VFWkdYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmllWFJsVEdWdVozUm9JQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lCcFhTQTlJQ2gyWVd4MVpTQXZJRzExYkNrZ0ppQXdlRVpHWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnWW5sMFpVeGxibWQwYUZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFZVbHVkRUpGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZWU1c1MFFrVWdLSFpoYkhWbExDQnZabVp6WlhRc0lHSjVkR1ZNWlc1bmRHZ3NJRzV2UVhOelpYSjBLU0I3WEc0Z0lIWmhiSFZsSUQwZ0szWmhiSFZsWEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENCOElEQmNiaUFnWW5sMFpVeGxibWQwYUNBOUlHSjVkR1ZNWlc1bmRHZ2dmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0IyWVhJZ2JXRjRRbmwwWlhNZ1BTQk5ZWFJvTG5CdmR5Z3lMQ0E0SUNvZ1lubDBaVXhsYm1kMGFDa2dMU0F4WEc0Z0lDQWdZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2JXRjRRbmwwWlhNc0lEQXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FTQTlJR0o1ZEdWTVpXNW5kR2dnTFNBeFhHNGdJSFpoY2lCdGRXd2dQU0F4WEc0Z0lIUm9hWE5iYjJabWMyVjBJQ3NnYVYwZ1BTQjJZV3gxWlNBbUlEQjRSa1pjYmlBZ2QyaHBiR1VnS0MwdGFTQStQU0F3SUNZbUlDaHRkV3dnS2owZ01IZ3hNREFwS1NCN1hHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QnBYU0E5SUNoMllXeDFaU0F2SUcxMWJDa2dKaUF3ZUVaR1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ1lubDBaVXhsYm1kMGFGeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxWVWx1ZERnZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlZWSmJuUTRJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yU1c1MEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJREVzSURCNFptWXNJREFwWEc0Z0lHbG1JQ2doUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUhaaGJIVmxJRDBnVFdGMGFDNW1iRzl2Y2loMllXeDFaU2xjYmlBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJQ1lnTUhobVppbGNiaUFnY21WMGRYSnVJRzltWm5ObGRDQXJJREZjYm4xY2JseHVablZ1WTNScGIyNGdiMkpxWldOMFYzSnBkR1ZWU1c1ME1UWWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUtTQjdYRzRnSUdsbUlDaDJZV3gxWlNBOElEQXBJSFpoYkhWbElEMGdNSGhtWm1abUlDc2dkbUZzZFdVZ0t5QXhYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JxSUQwZ1RXRjBhQzV0YVc0b1luVm1MbXhsYm1kMGFDQXRJRzltWm5ObGRDd2dNaWs3SUdrZ1BDQnFPeUFySzJrcElIdGNiaUFnSUNCaWRXWmJiMlptYzJWMElDc2dhVjBnUFNBb2RtRnNkV1VnSmlBb01IaG1aaUE4UENBb09DQXFJQ2hzYVhSMGJHVkZibVJwWVc0Z1B5QnBJRG9nTVNBdElHa3BLU2twSUQ0K1BseHVJQ0FnSUNBZ0tHeHBkSFJzWlVWdVpHbGhiaUEvSUdrZ09pQXhJQzBnYVNrZ0tpQTRYRzRnSUgxY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVkpiblF4Tmt4RklEMGdablZ1WTNScGIyNGdkM0pwZEdWVlNXNTBNVFpNUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdkbUZzZFdVZ1BTQXJkbUZzZFdWY2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwbHVkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENBeUxDQXdlR1ptWm1Zc0lEQXBYRzRnSUdsbUlDaENkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dlMXh1SUNBZ0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2WW1wbFkzUlhjbWwwWlZWSmJuUXhOaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCMGNuVmxLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QXlYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1ME1UWkNSU0E5SUdaMWJtTjBhVzl1SUhkeWFYUmxWVWx1ZERFMlFrVWdLSFpoYkhWbExDQnZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUhaaGJIVmxJRDBnSzNaaGJIVmxYRzRnSUc5bVpuTmxkQ0E5SUc5bVpuTmxkQ0I4SURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRKYm5Rb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dNaXdnTUhobVptWm1MQ0F3S1Z4dUlDQnBaaUFvUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUh0Y2JpQWdJQ0IwYUdselcyOW1abk5sZEYwZ1BTQW9kbUZzZFdVZ1BqNCtJRGdwWEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBeFhTQTlJQ2gyWVd4MVpTQW1JREI0Wm1ZcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnFaV04wVjNKcGRHVlZTVzUwTVRZb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dabUZzYzJVcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURKY2JuMWNibHh1Wm5WdVkzUnBiMjRnYjJKcVpXTjBWM0pwZEdWVlNXNTBNeklnS0dKMVppd2dkbUZzZFdVc0lHOW1abk5sZEN3Z2JHbDBkR3hsUlc1a2FXRnVLU0I3WEc0Z0lHbG1JQ2gyWVd4MVpTQThJREFwSUhaaGJIVmxJRDBnTUhobVptWm1abVptWmlBcklIWmhiSFZsSUNzZ01WeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2dhaUE5SUUxaGRHZ3ViV2x1S0dKMVppNXNaVzVuZEdnZ0xTQnZabVp6WlhRc0lEUXBPeUJwSUR3Z2Fqc2dLeXRwS1NCN1hHNGdJQ0FnWW5WbVcyOW1abk5sZENBcklHbGRJRDBnS0haaGJIVmxJRDQrUGlBb2JHbDBkR3hsUlc1a2FXRnVJRDhnYVNBNklETWdMU0JwS1NBcUlEZ3BJQ1lnTUhobVpseHVJQ0I5WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWVlNXNTBNekpNUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsVlVsdWRETXlURVVnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lIWmhiSFZsSUQwZ0szWmhiSFZsWEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENCOElEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTkN3Z01IaG1abVptWm1abVppd2dNQ2xjYmlBZ2FXWWdLRUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVLU0I3WEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBelhTQTlJQ2gyWVd4MVpTQStQajRnTWpRcFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXlYU0E5SUNoMllXeDFaU0ErUGo0Z01UWXBYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkRjBnUFNBb2RtRnNkV1VnSmlBd2VHWm1LVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGZHlhWFJsVlVsdWRETXlLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklEUmNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5Rek1rSkZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVlZTVzUwTXpKQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMGx1ZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQTBMQ0F3ZUdabVptWm1abVptTENBd0tWeHVJQ0JwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcElIdGNiaUFnSUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdQajQrSURJMEtWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dNVjBnUFNBb2RtRnNkV1VnUGo0K0lERTJLVnh1SUNBZ0lIUm9hWE5iYjJabWMyVjBJQ3NnTWwwZ1BTQW9kbUZzZFdVZ1BqNCtJRGdwWEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBelhTQTlJQ2gyWVd4MVpTQW1JREI0Wm1ZcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnFaV04wVjNKcGRHVlZTVzUwTXpJb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dabUZzYzJVcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURSY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRXhGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5STVJTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ2RtRnlJR3hwYldsMElEMGdUV0YwYUM1d2IzY29NaXdnT0NBcUlHSjVkR1ZNWlc1bmRHZ2dMU0F4S1Z4dVhHNGdJQ0FnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2diR2x0YVhRZ0xTQXhMQ0F0YkdsdGFYUXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FTQTlJREJjYmlBZ2RtRnlJRzExYkNBOUlERmNiaUFnZG1GeUlITjFZaUE5SURCY2JpQWdkR2hwYzF0dlptWnpaWFJkSUQwZ2RtRnNkV1VnSmlBd2VFWkdYRzRnSUhkb2FXeGxJQ2dySzJrZ1BDQmllWFJsVEdWdVozUm9JQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdhV1lnS0haaGJIVmxJRHdnTUNBbUppQnpkV0lnUFQwOUlEQWdKaVlnZEdocGMxdHZabVp6WlhRZ0t5QnBJQzBnTVYwZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhOMVlpQTlJREZjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUJwWFNBOUlDZ29kbUZzZFdVZ0x5QnRkV3dwSUQ0K0lEQXBJQzBnYzNWaUlDWWdNSGhHUmx4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySUdKNWRHVk1aVzVuZEdoY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRUpGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5SQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ2RtRnlJR3hwYldsMElEMGdUV0YwYUM1d2IzY29NaXdnT0NBcUlHSjVkR1ZNWlc1bmRHZ2dMU0F4S1Z4dVhHNGdJQ0FnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2diR2x0YVhRZ0xTQXhMQ0F0YkdsdGFYUXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2FTQTlJR0o1ZEdWTVpXNW5kR2dnTFNBeFhHNGdJSFpoY2lCdGRXd2dQU0F4WEc0Z0lIWmhjaUJ6ZFdJZ1BTQXdYRzRnSUhSb2FYTmJiMlptYzJWMElDc2dhVjBnUFNCMllXeDFaU0FtSURCNFJrWmNiaUFnZDJocGJHVWdLQzB0YVNBK1BTQXdJQ1ltSUNodGRXd2dLajBnTUhneE1EQXBLU0I3WEc0Z0lDQWdhV1lnS0haaGJIVmxJRHdnTUNBbUppQnpkV0lnUFQwOUlEQWdKaVlnZEdocGMxdHZabVp6WlhRZ0t5QnBJQ3NnTVYwZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhOMVlpQTlJREZjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUWdLeUJwWFNBOUlDZ29kbUZzZFdVZ0x5QnRkV3dwSUQ0K0lEQXBJQzBnYzNWaUlDWWdNSGhHUmx4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySUdKNWRHVk1aVzVuZEdoY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkRGdnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVWx1ZERnZ0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSFpoYkhWbElEMGdLM1poYkhWbFhHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z01Td2dNSGczWml3Z0xUQjRPREFwWEc0Z0lHbG1JQ2doUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUhaaGJIVmxJRDBnVFdGMGFDNW1iRzl2Y2loMllXeDFaU2xjYmlBZ2FXWWdLSFpoYkhWbElEd2dNQ2tnZG1Gc2RXVWdQU0F3ZUdabUlDc2dkbUZzZFdVZ0t5QXhYRzRnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQW1JREI0Wm1ZcFhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QXhYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZKYm5ReE5reEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkpiblF4Tmt4RklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJTVzUwS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lESXNJREI0TjJabVppd2dMVEI0T0RBd01DbGNiaUFnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ2RHaHBjMXR2Wm1aelpYUmRJRDBnS0haaGJIVmxJQ1lnTUhobVppbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREZkSUQwZ0tIWmhiSFZsSUQ0K1BpQTRLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGZHlhWFJsVlVsdWRERTJLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklESmNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZERFMlFrVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVbHVkREUyUWtVZ0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSFpoYkhWbElEMGdLM1poYkhWbFhHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z01pd2dNSGczWm1abUxDQXRNSGc0TURBd0tWeHVJQ0JwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcElIdGNiaUFnSUNCMGFHbHpXMjltWm5ObGRGMGdQU0FvZG1Gc2RXVWdQajQrSURncFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiMkpxWldOMFYzSnBkR1ZWU1c1ME1UWW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWm1Gc2MyVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklESmNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZERNeVRFVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVbHVkRE15VEVVZ0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSFpoYkhWbElEMGdLM1poYkhWbFhHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z05Dd2dNSGczWm1abVptWm1aaXdnTFRCNE9EQXdNREF3TURBcFhHNGdJR2xtSUNoQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkNrZ2UxeHVJQ0FnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQW1JREI0Wm1ZcFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXhYU0E5SUNoMllXeDFaU0ErUGo0Z09DbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREpkSUQwZ0tIWmhiSFZsSUQ0K1BpQXhOaWxjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUROZElEMGdLSFpoYkhWbElENCtQaUF5TkNsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlltcGxZM1JYY21sMFpWVkpiblF6TWloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQjBjblZsS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUEwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWSmJuUXpNa0pGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZKYm5Rek1rSkZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yU1c1MEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJRFFzSURCNE4yWm1abVptWm1Zc0lDMHdlRGd3TURBd01EQXdLVnh1SUNCcFppQW9kbUZzZFdVZ1BDQXdLU0IyWVd4MVpTQTlJREI0Wm1abVptWm1abVlnS3lCMllXeDFaU0FySURGY2JpQWdhV1lnS0VKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVS1NCN1hHNGdJQ0FnZEdocGMxdHZabVp6WlhSZElEMGdLSFpoYkhWbElENCtQaUF5TkNsY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklERmRJRDBnS0haaGJIVmxJRDQrUGlBeE5pbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREpkSUQwZ0tIWmhiSFZsSUQ0K1BpQTRLVnh1SUNBZ0lIUm9hWE5iYjJabWMyVjBJQ3NnTTEwZ1BTQW9kbUZzZFdVZ0ppQXdlR1ptS1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUc5aWFtVmpkRmR5YVhSbFZVbHVkRE15S0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lHWmhiSE5sS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUEwWEc1OVhHNWNibVoxYm1OMGFXOXVJR05vWldOclNVVkZSVGMxTkNBb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQmxlSFFzSUcxaGVDd2diV2x1S1NCN1hHNGdJR2xtSUNodlptWnpaWFFnS3lCbGVIUWdQaUJpZFdZdWJHVnVaM1JvS1NCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25TVzVrWlhnZ2IzVjBJRzltSUhKaGJtZGxKeWxjYmlBZ2FXWWdLRzltWm5ObGRDQThJREFwSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZEpibVJsZUNCdmRYUWdiMllnY21GdVoyVW5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjNjbWwwWlVac2IyRjBJQ2hpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSUd4cGRIUnNaVVZ1WkdsaGJpd2dibTlCYzNObGNuUXBJSHRjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR05vWldOclNVVkZSVGMxTkNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lEUXNJRE11TkRBeU9ESXpORFkyTXpnMU1qZzRObVVyTXpnc0lDMHpMalF3TWpneU16UTJOak00TlRJNE9EWmxLek00S1Z4dUlDQjlYRzRnSUdsbFpXVTNOVFF1ZDNKcGRHVW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0c0lESXpMQ0EwS1Z4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ05GeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxSbXh2WVhSTVJTQTlJR1oxYm1OMGFXOXVJSGR5YVhSbFJteHZZWFJNUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdjbVYwZFhKdUlIZHlhWFJsUm14dllYUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnZEhKMVpTd2dibTlCYzNObGNuUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZHYkc5aGRFSkZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkdiRzloZEVKRklDaDJZV3gxWlN3Z2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0J5WlhSMWNtNGdkM0pwZEdWR2JHOWhkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCbVlXeHpaU3dnYm05QmMzTmxjblFwWEc1OVhHNWNibVoxYm1OMGFXOXVJSGR5YVhSbFJHOTFZbXhsSUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUdOb1pXTnJTVVZGUlRjMU5DaGlkV1lzSUhaaGJIVmxMQ0J2Wm1aelpYUXNJRGdzSURFdU56azNOamt6TVRNME9EWXlNekUxTjBVck16QTRMQ0F0TVM0M09UYzJPVE14TXpRNE5qSXpNVFUzUlNzek1EZ3BYRzRnSUgxY2JpQWdhV1ZsWlRjMU5DNTNjbWwwWlNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnTlRJc0lEZ3BYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUE0WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWRWIzVmliR1ZNUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsUkc5MVlteGxURVVnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCM2NtbDBaVVJ2ZFdKc1pTaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0IwY25WbExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVVJ2ZFdKc1pVSkZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkViM1ZpYkdWQ1JTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJSGR5YVhSbFJHOTFZbXhsS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lHWmhiSE5sTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1THk4Z1kyOXdlU2gwWVhKblpYUkNkV1ptWlhJc0lIUmhjbWRsZEZOMFlYSjBQVEFzSUhOdmRYSmpaVk4wWVhKMFBUQXNJSE52ZFhKalpVVnVaRDFpZFdabVpYSXViR1Z1WjNSb0tWeHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNWpiM0I1SUQwZ1puVnVZM1JwYjI0Z1kyOXdlU0FvZEdGeVoyVjBMQ0IwWVhKblpYUlRkR0Z5ZEN3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCcFppQW9JWE4wWVhKMEtTQnpkR0Z5ZENBOUlEQmNiaUFnYVdZZ0tDRmxibVFnSmlZZ1pXNWtJQ0U5UFNBd0tTQmxibVFnUFNCMGFHbHpMbXhsYm1kMGFGeHVJQ0JwWmlBb2RHRnlaMlYwVTNSaGNuUWdQajBnZEdGeVoyVjBMbXhsYm1kMGFDa2dkR0Z5WjJWMFUzUmhjblFnUFNCMFlYSm5aWFF1YkdWdVozUm9YRzRnSUdsbUlDZ2hkR0Z5WjJWMFUzUmhjblFwSUhSaGNtZGxkRk4wWVhKMElEMGdNRnh1SUNCcFppQW9aVzVrSUQ0Z01DQW1KaUJsYm1RZ1BDQnpkR0Z5ZENrZ1pXNWtJRDBnYzNSaGNuUmNibHh1SUNBdkx5QkRiM0I1SURBZ1lubDBaWE03SUhkbEozSmxJR1J2Ym1WY2JpQWdhV1lnS0dWdVpDQTlQVDBnYzNSaGNuUXBJSEpsZEhWeWJpQXdYRzRnSUdsbUlDaDBZWEpuWlhRdWJHVnVaM1JvSUQwOVBTQXdJSHg4SUhSb2FYTXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnTUZ4dVhHNGdJQzh2SUVaaGRHRnNJR1Z5Y205eUlHTnZibVJwZEdsdmJuTmNiaUFnYVdZZ0tIUmhjbWRsZEZOMFlYSjBJRHdnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZDBZWEpuWlhSVGRHRnlkQ0J2ZFhRZ2IyWWdZbTkxYm1Sekp5bGNiaUFnZlZ4dUlDQnBaaUFvYzNSaGNuUWdQQ0F3SUh4OElITjBZWEowSUQ0OUlIUm9hWE11YkdWdVozUm9LU0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnbmMyOTFjbU5sVTNSaGNuUWdiM1YwSUc5bUlHSnZkVzVrY3ljcFhHNGdJR2xtSUNobGJtUWdQQ0F3S1NCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25jMjkxY21ObFJXNWtJRzkxZENCdlppQmliM1Z1WkhNbktWeHVYRzRnSUM4dklFRnlaU0IzWlNCdmIySS9YRzRnSUdsbUlDaGxibVFnUGlCMGFHbHpMbXhsYm1kMGFDa2daVzVrSUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnYVdZZ0tIUmhjbWRsZEM1c1pXNW5kR2dnTFNCMFlYSm5aWFJUZEdGeWRDQThJR1Z1WkNBdElITjBZWEowS1NCN1hHNGdJQ0FnWlc1a0lEMGdkR0Z5WjJWMExteGxibWQwYUNBdElIUmhjbWRsZEZOMFlYSjBJQ3NnYzNSaGNuUmNiaUFnZlZ4dVhHNGdJSFpoY2lCc1pXNGdQU0JsYm1RZ0xTQnpkR0Z5ZEZ4dUlDQjJZWElnYVZ4dVhHNGdJR2xtSUNoMGFHbHpJRDA5UFNCMFlYSm5aWFFnSmlZZ2MzUmhjblFnUENCMFlYSm5aWFJUZEdGeWRDQW1KaUIwWVhKblpYUlRkR0Z5ZENBOElHVnVaQ2tnZTF4dUlDQWdJQzh2SUdSbGMyTmxibVJwYm1jZ1kyOXdlU0JtY205dElHVnVaRnh1SUNBZ0lHWnZjaUFvYVNBOUlHeGxiaUF0SURFN0lHa2dQajBnTURzZ0xTMXBLU0I3WEc0Z0lDQWdJQ0IwWVhKblpYUmJhU0FySUhSaGNtZGxkRk4wWVhKMFhTQTlJSFJvYVhOYmFTQXJJSE4wWVhKMFhWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hzWlc0Z1BDQXhNREF3SUh4OElDRkNkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dlMXh1SUNBZ0lDOHZJR0Z6WTJWdVpHbHVaeUJqYjNCNUlHWnliMjBnYzNSaGNuUmNiaUFnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYkdWdU95QXJLMmtwSUh0Y2JpQWdJQ0FnSUhSaGNtZGxkRnRwSUNzZ2RHRnlaMlYwVTNSaGNuUmRJRDBnZEdocGMxdHBJQ3NnYzNSaGNuUmRYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lGVnBiblE0UVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5sZEM1allXeHNLRnh1SUNBZ0lDQWdkR0Z5WjJWMExGeHVJQ0FnSUNBZ2RHaHBjeTV6ZFdKaGNuSmhlU2h6ZEdGeWRDd2djM1JoY25RZ0t5QnNaVzRwTEZ4dUlDQWdJQ0FnZEdGeVoyVjBVM1JoY25SY2JpQWdJQ0FwWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYkdWdVhHNTlYRzVjYmk4dklGVnpZV2RsT2x4dUx5OGdJQ0FnWW5WbVptVnlMbVpwYkd3b2JuVnRZbVZ5V3l3Z2IyWm1jMlYwV3l3Z1pXNWtYVjBwWEc0dkx5QWdJQ0JpZFdabVpYSXVabWxzYkNoaWRXWm1aWEpiTENCdlptWnpaWFJiTENCbGJtUmRYU2xjYmk4dklDQWdJR0oxWm1abGNpNW1hV3hzS0hOMGNtbHVaMXNzSUc5bVpuTmxkRnNzSUdWdVpGMWRXeXdnWlc1amIyUnBibWRkS1Z4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1bWFXeHNJRDBnWm5WdVkzUnBiMjRnWm1sc2JDQW9kbUZzTENCemRHRnlkQ3dnWlc1a0xDQmxibU52WkdsdVp5a2dlMXh1SUNBdkx5QklZVzVrYkdVZ2MzUnlhVzVuSUdOaGMyVnpPbHh1SUNCcFppQW9kSGx3Wlc5bUlIWmhiQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITjBZWEowSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdaVzVqYjJScGJtY2dQU0J6ZEdGeWRGeHVJQ0FnSUNBZ2MzUmhjblFnUFNBd1hHNGdJQ0FnSUNCbGJtUWdQU0IwYUdsekxteGxibWQwYUZ4dUlDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR1Z1WkNBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJR1Z1WTI5a2FXNW5JRDBnWlc1a1hHNGdJQ0FnSUNCbGJtUWdQU0IwYUdsekxteGxibWQwYUZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZG1Gc0xteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnZG1GeUlHTnZaR1VnUFNCMllXd3VZMmhoY2tOdlpHVkJkQ2d3S1Z4dUlDQWdJQ0FnYVdZZ0tHTnZaR1VnUENBeU5UWXBJSHRjYmlBZ0lDQWdJQ0FnZG1Gc0lEMGdZMjlrWlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWlc1amIyUnBibWNnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwZVhCbGIyWWdaVzVqYjJScGJtY2dJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGxibU52WkdsdVp5QnRkWE4wSUdKbElHRWdjM1J5YVc1bkp5bGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBOVBUMGdKM04wY21sdVp5Y2dKaVlnSVVKMVptWmxjaTVwYzBWdVkyOWthVzVuS0dWdVkyOWthVzVuS1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25WVzVyYm05M2JpQmxibU52WkdsdVp6b2dKeUFySUdWdVkyOWthVzVuS1Z4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2RtRnNJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhaaGJDQTlJSFpoYkNBbUlESTFOVnh1SUNCOVhHNWNiaUFnTHk4Z1NXNTJZV3hwWkNCeVlXNW5aWE1nWVhKbElHNXZkQ0J6WlhRZ2RHOGdZU0JrWldaaGRXeDBMQ0J6YnlCallXNGdjbUZ1WjJVZ1kyaGxZMnNnWldGeWJIa3VYRzRnSUdsbUlDaHpkR0Z5ZENBOElEQWdmSHdnZEdocGN5NXNaVzVuZEdnZ1BDQnpkR0Z5ZENCOGZDQjBhR2x6TG14bGJtZDBhQ0E4SUdWdVpDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2RQZFhRZ2IyWWdjbUZ1WjJVZ2FXNWtaWGduS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLR1Z1WkNBOFBTQnpkR0Z5ZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmx4dUlDQnpkR0Z5ZENBOUlITjBZWEowSUQ0K1BpQXdYRzRnSUdWdVpDQTlJR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnZEdocGN5NXNaVzVuZEdnZ09pQmxibVFnUGo0K0lEQmNibHh1SUNCcFppQW9JWFpoYkNrZ2RtRnNJRDBnTUZ4dVhHNGdJSFpoY2lCcFhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJR1p2Y2lBb2FTQTlJSE4wWVhKME95QnBJRHdnWlc1a095QXJLMmtwSUh0Y2JpQWdJQ0FnSUhSb2FYTmJhVjBnUFNCMllXeGNiaUFnSUNCOVhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJR0o1ZEdWeklEMGdRblZtWm1WeUxtbHpRblZtWm1WeUtIWmhiQ2xjYmlBZ0lDQWdJRDhnZG1Gc1hHNGdJQ0FnSUNBNklIVjBaamhVYjBKNWRHVnpLRzVsZHlCQ2RXWm1aWElvZG1Gc0xDQmxibU52WkdsdVp5a3VkRzlUZEhKcGJtY29LU2xjYmlBZ0lDQjJZWElnYkdWdUlEMGdZbmwwWlhNdWJHVnVaM1JvWEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHVnVaQ0F0SUhOMFlYSjBPeUFySzJrcElIdGNiaUFnSUNBZ0lIUm9hWE5iYVNBcklITjBZWEowWFNBOUlHSjVkR1Z6VzJrZ0pTQnNaVzVkWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1THk4Z1NFVk1VRVZTSUVaVlRrTlVTVTlPVTF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzUyWVhJZ1NVNVdRVXhKUkY5Q1FWTkZOalJmVWtVZ1BTQXZXMTRyWEZ3dk1DMDVRUzFhWVMxNkxWOWRMMmRjYmx4dVpuVnVZM1JwYjI0Z1ltRnpaVFkwWTJ4bFlXNGdLSE4wY2lrZ2UxeHVJQ0F2THlCT2IyUmxJSE4wY21sd2N5QnZkWFFnYVc1MllXeHBaQ0JqYUdGeVlXTjBaWEp6SUd4cGEyVWdYRnh1SUdGdVpDQmNYSFFnWm5KdmJTQjBhR1VnYzNSeWFXNW5MQ0JpWVhObE5qUXRhbk1nWkc5bGN5QnViM1JjYmlBZ2MzUnlJRDBnYzNSeWFXNW5kSEpwYlNoemRISXBMbkpsY0d4aFkyVW9TVTVXUVV4SlJGOUNRVk5GTmpSZlVrVXNJQ2NuS1Z4dUlDQXZMeUJPYjJSbElHTnZiblpsY25SeklITjBjbWx1WjNNZ2QybDBhQ0JzWlc1bmRHZ2dQQ0F5SUhSdklDY25YRzRnSUdsbUlDaHpkSEl1YkdWdVozUm9JRHdnTWlrZ2NtVjBkWEp1SUNjblhHNGdJQzh2SUU1dlpHVWdZV3hzYjNkeklHWnZjaUJ1YjI0dGNHRmtaR1ZrSUdKaGMyVTJOQ0J6ZEhKcGJtZHpJQ2h0YVhOemFXNW5JSFJ5WVdsc2FXNW5JRDA5UFNrc0lHSmhjMlUyTkMxcWN5QmtiMlZ6SUc1dmRGeHVJQ0IzYUdsc1pTQW9jM1J5TG14bGJtZDBhQ0FsSURRZ0lUMDlJREFwSUh0Y2JpQWdJQ0J6ZEhJZ1BTQnpkSElnS3lBblBTZGNiaUFnZlZ4dUlDQnlaWFIxY200Z2MzUnlYRzU5WEc1Y2JtWjFibU4wYVc5dUlITjBjbWx1WjNSeWFXMGdLSE4wY2lrZ2UxeHVJQ0JwWmlBb2MzUnlMblJ5YVcwcElISmxkSFZ5YmlCemRISXVkSEpwYlNncFhHNGdJSEpsZEhWeWJpQnpkSEl1Y21Wd2JHRmpaU2d2WGx4Y2N5dDhYRnh6S3lRdlp5d2dKeWNwWEc1OVhHNWNibVoxYm1OMGFXOXVJSFJ2U0dWNElDaHVLU0I3WEc0Z0lHbG1JQ2h1SUR3Z01UWXBJSEpsZEhWeWJpQW5NQ2NnS3lCdUxuUnZVM1J5YVc1bktERTJLVnh1SUNCeVpYUjFjbTRnYmk1MGIxTjBjbWx1WnlneE5pbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RYUm1PRlJ2UW5sMFpYTWdLSE4wY21sdVp5d2dkVzVwZEhNcElIdGNiaUFnZFc1cGRITWdQU0IxYm1sMGN5QjhmQ0JKYm1acGJtbDBlVnh1SUNCMllYSWdZMjlrWlZCdmFXNTBYRzRnSUhaaGNpQnNaVzVuZEdnZ1BTQnpkSEpwYm1jdWJHVnVaM1JvWEc0Z0lIWmhjaUJzWldGa1UzVnljbTluWVhSbElEMGdiblZzYkZ4dUlDQjJZWElnWW5sMFpYTWdQU0JiWFZ4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdVozUm9PeUFySzJrcElIdGNiaUFnSUNCamIyUmxVRzlwYm5RZ1BTQnpkSEpwYm1jdVkyaGhja052WkdWQmRDaHBLVnh1WEc0Z0lDQWdMeThnYVhNZ2MzVnljbTluWVhSbElHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUdsbUlDaGpiMlJsVUc5cGJuUWdQaUF3ZUVRM1JrWWdKaVlnWTI5a1pWQnZhVzUwSUR3Z01IaEZNREF3S1NCN1hHNGdJQ0FnSUNBdkx5QnNZWE4wSUdOb1lYSWdkMkZ6SUdFZ2JHVmhaRnh1SUNBZ0lDQWdhV1lnS0NGc1pXRmtVM1Z5Y205bllYUmxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklHNXZJR3hsWVdRZ2VXVjBYRzRnSUNBZ0lDQWdJR2xtSUNoamIyUmxVRzlwYm5RZ1BpQXdlRVJDUmtZcElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCMWJtVjRjR1ZqZEdWa0lIUnlZV2xzWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ2gxYm1sMGN5QXRQU0F6S1NBK0lDMHhLU0JpZVhSbGN5NXdkWE5vS0RCNFJVWXNJREI0UWtZc0lEQjRRa1FwWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdWY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBJQ3NnTVNBOVBUMGdiR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2RXNXdZV2x5WldRZ2JHVmhaRnh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNeWtnUGlBdE1Ta2dZbmwwWlhNdWNIVnphQ2d3ZUVWR0xDQXdlRUpHTENBd2VFSkVLVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUIyWVd4cFpDQnNaV0ZrWEc0Z0lDQWdJQ0FnSUd4bFlXUlRkWEp5YjJkaGRHVWdQU0JqYjJSbFVHOXBiblJjYmx4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QXlJR3hsWVdSeklHbHVJR0VnY205M1hHNGdJQ0FnSUNCcFppQW9ZMjlrWlZCdmFXNTBJRHdnTUhoRVF6QXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNeWtnUGlBdE1Ta2dZbmwwWlhNdWNIVnphQ2d3ZUVWR0xDQXdlRUpHTENBd2VFSkVLVnh1SUNBZ0lDQWdJQ0JzWldGa1UzVnljbTluWVhSbElEMGdZMjlrWlZCdmFXNTBYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUhaaGJHbGtJSE4xY25KdloyRjBaU0J3WVdseVhHNGdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQW9iR1ZoWkZOMWNuSnZaMkYwWlNBdElEQjRSRGd3TUNBOFBDQXhNQ0I4SUdOdlpHVlFiMmx1ZENBdElEQjRSRU13TUNrZ0t5QXdlREV3TURBd1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoc1pXRmtVM1Z5Y205bllYUmxLU0I3WEc0Z0lDQWdJQ0F2THlCMllXeHBaQ0JpYlhBZ1kyaGhjaXdnWW5WMElHeGhjM1FnWTJoaGNpQjNZWE1nWVNCc1pXRmtYRzRnSUNBZ0lDQnBaaUFvS0hWdWFYUnpJQzA5SURNcElENGdMVEVwSUdKNWRHVnpMbkIxYzJnb01IaEZSaXdnTUhoQ1Jpd2dNSGhDUkNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWldGa1UzVnljbTluWVhSbElEMGdiblZzYkZ4dVhHNGdJQ0FnTHk4Z1pXNWpiMlJsSUhWMFpqaGNiaUFnSUNCcFppQW9ZMjlrWlZCdmFXNTBJRHdnTUhnNE1Da2dlMXh1SUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBeEtTQThJREFwSUdKeVpXRnJYRzRnSUNBZ0lDQmllWFJsY3k1d2RYTm9LR052WkdWUWIybHVkQ2xjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052WkdWUWIybHVkQ0E4SURCNE9EQXdLU0I3WEc0Z0lDQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlESXBJRHdnTUNrZ1luSmxZV3RjYmlBZ0lDQWdJR0o1ZEdWekxuQjFjMmdvWEc0Z0lDQWdJQ0FnSUdOdlpHVlFiMmx1ZENBK1BpQXdlRFlnZkNBd2VFTXdMRnh1SUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnSmlBd2VETkdJSHdnTUhnNE1GeHVJQ0FnSUNBZ0tWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOWtaVkJ2YVc1MElEd2dNSGd4TURBd01Da2dlMXh1SUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBektTQThJREFwSUdKeVpXRnJYRzRnSUNBZ0lDQmllWFJsY3k1d2RYTm9LRnh1SUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnUGo0Z01IaERJSHdnTUhoRk1DeGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDQrSURCNE5pQW1JREI0TTBZZ2ZDQXdlRGd3TEZ4dUlDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ0ppQXdlRE5HSUh3Z01IZzRNRnh1SUNBZ0lDQWdLVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjlrWlZCdmFXNTBJRHdnTUhneE1UQXdNREFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdOQ2tnUENBd0tTQmljbVZoYTF4dUlDQWdJQ0FnWW5sMFpYTXVjSFZ6YUNoY2JpQWdJQ0FnSUNBZ1kyOWtaVkJ2YVc1MElENCtJREI0TVRJZ2ZDQXdlRVl3TEZ4dUlDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BqNGdNSGhESUNZZ01IZ3pSaUI4SURCNE9EQXNYRzRnSUNBZ0lDQWdJR052WkdWUWIybHVkQ0ErUGlBd2VEWWdKaUF3ZUROR0lId2dNSGc0TUN4Y2JpQWdJQ0FnSUNBZ1kyOWtaVkJ2YVc1MElDWWdNSGd6UmlCOElEQjRPREJjYmlBZ0lDQWdJQ2xjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkSmJuWmhiR2xrSUdOdlpHVWdjRzlwYm5RbktWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCaWVYUmxjMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjMk5wYVZSdlFubDBaWE1nS0hOMGNpa2dlMXh1SUNCMllYSWdZbmwwWlVGeWNtRjVJRDBnVzExY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6ZEhJdWJHVnVaM1JvT3lBcksya3BJSHRjYmlBZ0lDQXZMeUJPYjJSbEozTWdZMjlrWlNCelpXVnRjeUIwYnlCaVpTQmtiMmx1WnlCMGFHbHpJR0Z1WkNCdWIzUWdKaUF3ZURkR0xpNWNiaUFnSUNCaWVYUmxRWEp5WVhrdWNIVnphQ2h6ZEhJdVkyaGhja052WkdWQmRDaHBLU0FtSURCNFJrWXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHSjVkR1ZCY25KaGVWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMWRHWXhObXhsVkc5Q2VYUmxjeUFvYzNSeUxDQjFibWwwY3lrZ2UxeHVJQ0IyWVhJZ1l5d2dhR2tzSUd4dlhHNGdJSFpoY2lCaWVYUmxRWEp5WVhrZ1BTQmJYVnh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjBjaTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNaWtnUENBd0tTQmljbVZoYTF4dVhHNGdJQ0FnWXlBOUlITjBjaTVqYUdGeVEyOWtaVUYwS0drcFhHNGdJQ0FnYUdrZ1BTQmpJRDQrSURoY2JpQWdJQ0JzYnlBOUlHTWdKU0F5TlRaY2JpQWdJQ0JpZVhSbFFYSnlZWGt1Y0hWemFDaHNieWxjYmlBZ0lDQmllWFJsUVhKeVlYa3VjSFZ6YUNob2FTbGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmllWFJsUVhKeVlYbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1ltRnpaVFkwVkc5Q2VYUmxjeUFvYzNSeUtTQjdYRzRnSUhKbGRIVnliaUJpWVhObE5qUXVkRzlDZVhSbFFYSnlZWGtvWW1GelpUWTBZMnhsWVc0b2MzUnlLU2xjYm4xY2JseHVablZ1WTNScGIyNGdZbXhwZEVKMVptWmxjaUFvYzNKakxDQmtjM1FzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0JwWmlBb0tHa2dLeUJ2Wm1aelpYUWdQajBnWkhOMExteGxibWQwYUNrZ2ZId2dLR2tnUGowZ2MzSmpMbXhsYm1kMGFDa3BJR0p5WldGclhHNGdJQ0FnWkhOMFcya2dLeUJ2Wm1aelpYUmRJRDBnYzNKalcybGRYRzRnSUgxY2JpQWdjbVYwZFhKdUlHbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTnVZVzRnS0haaGJDa2dlMXh1SUNCeVpYUjFjbTRnZG1Gc0lDRTlQU0IyWVd3Z0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxelpXeG1MV052YlhCaGNtVmNibjFjYmlJc0luWmhjaUJCWW5OMGNtRmpkRWwwWlhKaGRHOXlJRDBnY21WeGRXbHlaU2duWVdKemRISmhZM1F0YkdWMlpXeGtiM2R1SnlrdVFXSnpkSEpoWTNSSmRHVnlZWFJ2Y2x4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dVhHNW1kVzVqZEdsdmJpQkVaV1psY25KbFpFbDBaWEpoZEc5eUlDaHZjSFJwYjI1ektTQjdYRzRnSUVGaWMzUnlZV04wU1hSbGNtRjBiM0l1WTJGc2JDaDBhR2x6TENCdmNIUnBiMjV6S1Z4dVhHNGdJSFJvYVhNdVgyOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1elhHNGdJSFJvYVhNdVgybDBaWEpoZEc5eUlEMGdiblZzYkZ4dUlDQjBhR2x6TGw5dmNHVnlZWFJwYjI1eklEMGdXMTFjYm4xY2JseHVhVzVvWlhKcGRITW9SR1ZtWlhKeVpXUkpkR1Z5WVhSdmNpd2dRV0p6ZEhKaFkzUkpkR1Z5WVhSdmNpbGNibHh1UkdWbVpYSnlaV1JKZEdWeVlYUnZjaTV3Y205MGIzUjVjR1V1YzJWMFJHSWdQU0JtZFc1amRHbHZiaUFvWkdJcElIdGNiaUFnZG1GeUlHbDBJRDBnZEdocGN5NWZhWFJsY21GMGIzSWdQU0JrWWk1cGRHVnlZWFJ2Y2loMGFHbHpMbDl2Y0hScGIyNXpLVnh1SUNCMGFHbHpMbDl2Y0dWeVlYUnBiMjV6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0c5d0tTQjdYRzRnSUNBZ2FYUmJiM0F1YldWMGFHOWtYUzVoY0hCc2VTaHBkQ3dnYjNBdVlYSm5jeWxjYmlBZ2ZTbGNibjFjYmx4dVJHVm1aWEp5WldSSmRHVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVgyOXdaWEpoZEdsdmJpQTlJR1oxYm1OMGFXOXVJQ2h0WlhSb2IyUXNJR0Z5WjNNcElIdGNiaUFnYVdZZ0tIUm9hWE11WDJsMFpYSmhkRzl5S1NCeVpYUjFjbTRnZEdocGN5NWZhWFJsY21GMGIzSmJiV1YwYUc5a1hTNWhjSEJzZVNoMGFHbHpMbDlwZEdWeVlYUnZjaXdnWVhKbmN5bGNiaUFnZEdocGN5NWZiM0JsY21GMGFXOXVjeTV3ZFhOb0tIc2diV1YwYUc5a09pQnRaWFJvYjJRc0lHRnlaM002SUdGeVozTWdmU2xjYm4xY2JseHVKMjVsZUhRZ1pXNWtKeTV6Y0d4cGRDZ25JQ2NwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0cwcElIdGNiaUFnUkdWbVpYSnlaV1JKZEdWeVlYUnZjaTV3Y205MGIzUjVjR1ZiSjE4bklDc2diVjBnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTVmYjNCbGNtRjBhVzl1S0cwc0lHRnlaM1Z0Wlc1MGN5bGNiaUFnZlZ4dWZTbGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JFWldabGNuSmxaRWwwWlhKaGRHOXlYRzRpTENKMllYSWdRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNGdQU0J5WlhGMWFYSmxLQ2RoWW5OMGNtRmpkQzFzWlhabGJHUnZkMjRuS1M1QlluTjBjbUZqZEV4bGRtVnNSRTlYVGx4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duYVc1b1pYSnBkSE1uS1Z4dWRtRnlJRVJsWm1WeWNtVmtTWFJsY21GMGIzSWdQU0J5WlhGMWFYSmxLQ2N1TDJSbFptVnljbVZrTFdsMFpYSmhkRzl5SnlsY2JuWmhjaUJrWldabGNuSmhZbXhsY3lBOUlDZHdkWFFnWjJWMElHUmxiQ0JpWVhSamFDY3VjM0JzYVhRb0p5QW5LVnh1WEc1bWRXNWpkR2x2YmlCRVpXWmxjbkpsWkV4bGRtVnNSRTlYVGlBb1pHSXBJSHRjYmlBZ1FXSnpkSEpoWTNSTVpYWmxiRVJQVjA0dVkyRnNiQ2gwYUdsekxDQW5KeWxjYmlBZ2RHaHBjeTVmWkdJZ1BTQmtZbHh1SUNCMGFHbHpMbDl2Y0dWeVlYUnBiMjV6SUQwZ1cxMWNiaUFnZEdocGN5NWZhWFJsY21GMGIzSnpJRDBnVzExY2JpQWdZMnh2YzJWa0tIUm9hWE1wWEc1OVhHNWNibWx1YUdWeWFYUnpLRVJsWm1WeWNtVmtUR1YyWld4RVQxZE9MQ0JCWW5OMGNtRmpkRXhsZG1Wc1JFOVhUaWxjYmx4dVJHVm1aWEp5WldSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExsOXZjR1Z1SUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5Nc0lHTmhiR3hpWVdOcktTQjdYRzRnSUhaaGNpQnpaV3htSUQwZ2RHaHBjMXh1WEc0Z0lIUm9hWE11WDJSaUxtOXdaVzRvYjNCMGFXOXVjeXdnWm5WdVkzUnBiMjRnS0dWeWNpa2dlMXh1SUNBZ0lHbG1JQ2hsY25JcElISmxkSFZ5YmlCallXeHNZbUZqYXlobGNuSXBYRzVjYmlBZ0lDQnpaV3htTGw5dmNHVnlZWFJwYjI1ekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHOXdLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxsOWtZbHR2Y0M1dFpYUm9iMlJkTG1Gd2NHeDVLSE5sYkdZdVgyUmlMQ0J2Y0M1aGNtZHpLVnh1SUNBZ0lIMHBYRzRnSUNBZ2MyVnNaaTVmYjNCbGNtRjBhVzl1Y3lBOUlGdGRYRzRnSUNBZ2MyVnNaaTVmYVhSbGNtRjBiM0p6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0dsMEtTQjdYRzRnSUNBZ0lDQnBkQzV6WlhSRVlpaHpaV3htTGw5a1lpbGNiaUFnSUNCOUtWeHVJQ0FnSUhObGJHWXVYMmwwWlhKaGRHOXljeUE5SUZ0ZFhHNGdJQ0FnYjNCbGJpaHpaV3htS1Z4dUlDQWdJR05oYkd4aVlXTnJLQ2xjYmlBZ2ZTbGNibjFjYmx4dVJHVm1aWEp5WldSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExsOWpiRzl6WlNBOUlHWjFibU4wYVc5dUlDaGpZV3hzWW1GamF5a2dlMXh1SUNCMllYSWdjMlZzWmlBOUlIUm9hWE5jYmx4dUlDQjBhR2x6TGw5a1lpNWpiRzl6WlNobWRXNWpkR2x2YmlBb1pYSnlLU0I3WEc0Z0lDQWdhV1lnS0dWeWNpa2djbVYwZFhKdUlHTmhiR3hpWVdOcktHVnljaWxjYmlBZ0lDQmpiRzl6WldRb2MyVnNaaWxjYmlBZ0lDQmpZV3hzWW1GamF5Z3BYRzRnSUgwcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUc5d1pXNGdLSE5sYkdZcElIdGNiaUFnWkdWbVpYSnlZV0pzWlhNdVkyOXVZMkYwS0NkcGRHVnlZWFJ2Y2ljcExtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHMHBJSHRjYmlBZ0lDQnpaV3htV3lkZkp5QXJJRzFkSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJSaVcyMWRMbUZ3Y0d4NUtIUm9hWE11WDJSaUxDQmhjbWQxYldWdWRITXBYRzRnSUNBZ2ZWeHVJQ0I5S1Z4dUlDQnBaaUFvYzJWc1ppNWZaR0l1WVhCd2NtOTRhVzFoZEdWVGFYcGxLU0I3WEc0Z0lDQWdjMlZzWmk1aGNIQnliM2hwYldGMFpWTnBlbVVnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWkdJdVlYQndjbTk0YVcxaGRHVlRhWHBsTG1Gd2NHeDVLSFJvYVhNdVgyUmlMQ0JoY21kMWJXVnVkSE1wWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOc2IzTmxaQ0FvYzJWc1ppa2dlMXh1SUNCa1pXWmxjbkpoWW14bGN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHRLU0I3WEc0Z0lDQWdjMlZzWmxzblh5Y2dLeUJ0WFNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyOXdaWEpoZEdsdmJuTXVjSFZ6YUNoN0lHMWxkR2h2WkRvZ2JTd2dZWEpuY3pvZ1lYSm5kVzFsYm5SeklIMHBYRzRnSUNBZ2ZWeHVJQ0I5S1Z4dUlDQnBaaUFvZEhsd1pXOW1JSE5sYkdZdVgyUmlMbUZ3Y0hKdmVHbHRZWFJsVTJsNlpTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhObGJHWXVZWEJ3Y205NGFXMWhkR1ZUYVhwbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZiM0JsY21GMGFXOXVjeTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdiV1YwYUc5a09pQW5ZWEJ3Y205NGFXMWhkR1ZUYVhwbEp5eGNiaUFnSUNBZ0lDQWdZWEpuY3pvZ1lYSm5kVzFsYm5SelhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCelpXeG1MbDlwZEdWeVlYUnZjaUE5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6S1NCN1hHNGdJQ0FnZG1GeUlHbDBJRDBnYm1WM0lFUmxabVZ5Y21Wa1NYUmxjbUYwYjNJb2IzQjBhVzl1Y3lsY2JpQWdJQ0IwYUdsekxsOXBkR1Z5WVhSdmNuTXVjSFZ6YUNocGRDbGNiaUFnSUNCeVpYUjFjbTRnYVhSY2JpQWdmVnh1ZlZ4dVhHNUVaV1psY25KbFpFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVYM05sY21saGJHbDZaVXRsZVNBOUlHWjFibU4wYVc5dUlDaHJaWGtwSUh0Y2JpQWdjbVYwZFhKdUlHdGxlVnh1ZlZ4dVhHNUVaV1psY25KbFpFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVYM05sY21saGJHbDZaVlpoYkhWbElEMGdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUhKbGRIVnliaUIyWVd4MVpWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVSbFptVnljbVZrVEdWMlpXeEVUMWRPWEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVFWldabGNuSmxaRWwwWlhKaGRHOXlJRDBnUkdWbVpYSnlaV1JKZEdWeVlYUnZjbHh1SWl3aVpuVnVZM1JwYjI0Z1FXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ2dLR1JpS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWkdJZ0lUMDlJQ2R2WW1wbFkzUW5JSHg4SUdSaUlEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25SbWx5YzNRZ1lYSm5kVzFsYm5RZ2JYVnpkQ0JpWlNCaGJpQmhZbk4wY21GamRDMXNaWFpsYkdSdmQyNGdZMjl0Y0d4cFlXNTBJSE4wYjNKbEp5bGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVpHSWdQU0JrWWx4dUlDQjBhR2x6TGw5dmNHVnlZWFJwYjI1eklEMGdXMTFjYmlBZ2RHaHBjeTVmZDNKcGRIUmxiaUE5SUdaaGJITmxYRzU5WEc1Y2JrRmljM1J5WVdOMFEyaGhhVzVsWkVKaGRHTm9MbkJ5YjNSdmRIbHdaUzVmWTJobFkydFhjbWwwZEdWdUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnBaaUFvZEdocGN5NWZkM0pwZEhSbGJpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmQzSnBkR1VvS1NCaGJISmxZV1I1SUdOaGJHeGxaQ0J2YmlCMGFHbHpJR0poZEdOb0p5bGNiaUFnZlZ4dWZWeHVYRzVCWW5OMGNtRmpkRU5vWVdsdVpXUkNZWFJqYUM1d2NtOTBiM1I1Y0dVdWNIVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnZEdocGN5NWZZMmhsWTJ0WGNtbDBkR1Z1S0NsY2JseHVJQ0IyWVhJZ1pYSnlJRDBnZEdocGN5NWtZaTVmWTJobFkydExaWGtvYTJWNUtTQjhmQ0IwYUdsekxtUmlMbDlqYUdWamExWmhiSFZsS0haaGJIVmxLVnh1SUNCcFppQW9aWEp5S1NCMGFISnZkeUJsY25KY2JseHVJQ0JyWlhrZ1BTQjBhR2x6TG1SaUxsOXpaWEpwWVd4cGVtVkxaWGtvYTJWNUtWeHVJQ0IyWVd4MVpTQTlJSFJvYVhNdVpHSXVYM05sY21saGJHbDZaVlpoYkhWbEtIWmhiSFZsS1Z4dVhHNGdJSFJvYVhNdVgzQjFkQ2hyWlhrc0lIWmhiSFZsS1Z4dVhHNGdJSEpsZEhWeWJpQjBhR2x6WEc1OVhHNWNia0ZpYzNSeVlXTjBRMmhoYVc1bFpFSmhkR05vTG5CeWIzUnZkSGx3WlM1ZmNIVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2dkbUZzZFdVcElIdGNiaUFnZEdocGN5NWZiM0JsY21GMGFXOXVjeTV3ZFhOb0tIc2dkSGx3WlRvZ0ozQjFkQ2NzSUd0bGVUb2dhMlY1TENCMllXeDFaVG9nZG1Gc2RXVWdmU2xjYm4xY2JseHVRV0p6ZEhKaFkzUkRhR0ZwYm1Wa1FtRjBZMmd1Y0hKdmRHOTBlWEJsTG1SbGJDQTlJR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnZEdocGN5NWZZMmhsWTJ0WGNtbDBkR1Z1S0NsY2JseHVJQ0IyWVhJZ1pYSnlJRDBnZEdocGN5NWtZaTVmWTJobFkydExaWGtvYTJWNUtWeHVJQ0JwWmlBb1pYSnlLU0IwYUhKdmR5QmxjbkpjYmx4dUlDQnJaWGtnUFNCMGFHbHpMbVJpTGw5elpYSnBZV3hwZW1WTFpYa29hMlY1S1Z4dUlDQjBhR2x6TGw5a1pXd29hMlY1S1Z4dVhHNGdJSEpsZEhWeWJpQjBhR2x6WEc1OVhHNWNia0ZpYzNSeVlXTjBRMmhoYVc1bFpFSmhkR05vTG5CeWIzUnZkSGx3WlM1ZlpHVnNJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNCMGFHbHpMbDl2Y0dWeVlYUnBiMjV6TG5CMWMyZ29leUIwZVhCbE9pQW5aR1ZzSnl3Z2EyVjVPaUJyWlhrZ2ZTbGNibjFjYmx4dVFXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ3VjSEp2ZEc5MGVYQmxMbU5zWldGeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhR2x6TGw5amFHVmphMWR5YVhSMFpXNG9LVnh1SUNCMGFHbHpMbDlqYkdWaGNpZ3BYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTmNibjFjYmx4dVFXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ3VjSEp2ZEc5MGVYQmxMbDlqYkdWaGNpQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkR2hwY3k1ZmIzQmxjbUYwYVc5dWN5QTlJRnRkWEc1OVhHNWNia0ZpYzNSeVlXTjBRMmhoYVc1bFpFSmhkR05vTG5CeWIzUnZkSGx3WlM1M2NtbDBaU0E5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6TENCallXeHNZbUZqYXlrZ2UxeHVJQ0IwYUdsekxsOWphR1ZqYTFkeWFYUjBaVzRvS1Z4dVhHNGdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dleUJqWVd4c1ltRmpheUE5SUc5d2RHbHZibk1nZlZ4dUlDQnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkM2NtbDBaU2dwSUhKbGNYVnBjbVZ6SUdFZ1kyRnNiR0poWTJzZ1lYSm5kVzFsYm5RbktWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2IzQjBhVzl1Y3lBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUc5d2RHbHZibk1nUFNCN2ZWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1ZmQzSnBkSFJsYmlBOUlIUnlkV1ZjYmlBZ2RHaHBjeTVmZDNKcGRHVW9iM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BYRzU5WEc1Y2JrRmljM1J5WVdOMFEyaGhhVzVsWkVKaGRHTm9MbkJ5YjNSdmRIbHdaUzVmZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkR2hwY3k1a1lpNWZZbUYwWTJnb2RHaHBjeTVmYjNCbGNtRjBhVzl1Y3l3Z2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcFhHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnUVdKemRISmhZM1JEYUdGcGJtVmtRbUYwWTJoY2JpSXNJbVoxYm1OMGFXOXVJRUZpYzNSeVlXTjBTWFJsY21GMGIzSWdLR1JpS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWkdJZ0lUMDlJQ2R2WW1wbFkzUW5JSHg4SUdSaUlEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25SbWx5YzNRZ1lYSm5kVzFsYm5RZ2JYVnpkQ0JpWlNCaGJpQmhZbk4wY21GamRDMXNaWFpsYkdSdmQyNGdZMjl0Y0d4cFlXNTBJSE4wYjNKbEp5bGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVpHSWdQU0JrWWx4dUlDQjBhR2x6TGw5bGJtUmxaQ0E5SUdaaGJITmxYRzRnSUhSb2FYTXVYMjVsZUhScGJtY2dQU0JtWVd4elpWeHVmVnh1WEc1QlluTjBjbUZqZEVsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1dVpYaDBJRDBnWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yS1NCN1hHNGdJSFpoY2lCelpXeG1JRDBnZEdocGMxeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMjVsZUhRb0tTQnlaWEYxYVhKbGN5QmhJR05oYkd4aVlXTnJJR0Z5WjNWdFpXNTBKeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaHpaV3htTGw5bGJtUmxaQ2tnZTF4dUlDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMkZzYkdKaFkyc3NJRzVsZHlCRmNuSnZjaWduWTJGdWJtOTBJR05oYkd3Z2JtVjRkQ2dwSUdGbWRHVnlJR1Z1WkNncEp5a3BYRzRnSUNBZ2NtVjBkWEp1SUhObGJHWmNiaUFnZlZ4dVhHNGdJR2xtSUNoelpXeG1MbDl1WlhoMGFXNW5LU0I3WEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpZV3hzWW1GamF5d2dibVYzSUVWeWNtOXlLQ2RqWVc1dWIzUWdZMkZzYkNCdVpYaDBLQ2tnWW1WbWIzSmxJSEJ5WlhacGIzVnpJRzVsZUhRb0tTQm9ZWE1nWTI5dGNHeGxkR1ZrSnlrcFhHNGdJQ0FnY21WMGRYSnVJSE5sYkdaY2JpQWdmVnh1WEc0Z0lITmxiR1l1WDI1bGVIUnBibWNnUFNCMGNuVmxYRzRnSUhObGJHWXVYMjVsZUhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lITmxiR1l1WDI1bGVIUnBibWNnUFNCbVlXeHpaVnh1SUNBZ0lHTmhiR3hpWVdOckxtRndjR3g1S0c1MWJHd3NJR0Z5WjNWdFpXNTBjeWxjYmlBZ2ZTbGNibHh1SUNCeVpYUjFjbTRnYzJWc1pseHVmVnh1WEc1QlluTjBjbUZqZEVsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1ZmJtVjRkQ0E5SUdaMWJtTjBhVzl1SUNoallXeHNZbUZqYXlrZ2UxeHVJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJLVnh1ZlZ4dVhHNUJZbk4wY21GamRFbDBaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNXpaV1ZySUQwZ1puVnVZM1JwYjI0Z0tIUmhjbWRsZENrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmWlc1a1pXUXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTmhibTV2ZENCallXeHNJSE5sWldzb0tTQmhablJsY2lCbGJtUW9LU2NwWEc0Z0lIMWNiaUFnYVdZZ0tIUm9hWE11WDI1bGVIUnBibWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk5oYm01dmRDQmpZV3hzSUhObFpXc29LU0JpWldadmNtVWdibVY0ZENncElHaGhjeUJqYjIxd2JHVjBaV1FuS1Z4dUlDQjlYRzVjYmlBZ2RHRnlaMlYwSUQwZ2RHaHBjeTVrWWk1ZmMyVnlhV0ZzYVhwbFMyVjVLSFJoY21kbGRDbGNiaUFnZEdocGN5NWZjMlZsYXloMFlYSm5aWFFwWEc1OVhHNWNia0ZpYzNSeVlXTjBTWFJsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbDl6WldWcklEMGdablZ1WTNScGIyNGdLSFJoY21kbGRDa2dlMzFjYmx4dVFXSnpkSEpoWTNSSmRHVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVpXNWtJRDBnWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWTJGc2JHSmhZMnNnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyVnVaQ2dwSUhKbGNYVnBjbVZ6SUdFZ1kyRnNiR0poWTJzZ1lYSm5kVzFsYm5RbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hSb2FYTXVYMlZ1WkdWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTJGc2JHSmhZMnNzSUc1bGR5QkZjbkp2Y2lnblpXNWtLQ2tnWVd4eVpXRmtlU0JqWVd4c1pXUWdiMjRnYVhSbGNtRjBiM0luS1NsY2JpQWdmVnh1WEc0Z0lIUm9hWE11WDJWdVpHVmtJRDBnZEhKMVpWeHVJQ0IwYUdsekxsOWxibVFvWTJGc2JHSmhZMnNwWEc1OVhHNWNia0ZpYzNSeVlXTjBTWFJsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbDlsYm1RZ1BTQm1kVzVqZEdsdmJpQW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXlsY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCWW5OMGNtRmpkRWwwWlhKaGRHOXlYRzRpTENKMllYSWdlSFJsYm1RZ1BTQnlaWEYxYVhKbEtDZDRkR1Z1WkNjcFhHNTJZWElnUVdKemRISmhZM1JKZEdWeVlYUnZjaUE5SUhKbGNYVnBjbVVvSnk0dllXSnpkSEpoWTNRdGFYUmxjbUYwYjNJbktWeHVkbUZ5SUVGaWMzUnlZV04wUTJoaGFXNWxaRUpoZEdOb0lEMGdjbVZ4ZFdseVpTZ25MaTloWW5OMGNtRmpkQzFqYUdGcGJtVmtMV0poZEdOb0p5bGNiblpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIbGNiblpoY2lCeVlXNW5aVTl3ZEdsdmJuTWdQU0FuYzNSaGNuUWdaVzVrSUdkMElHZDBaU0JzZENCc2RHVW5Mbk53YkdsMEtDY2dKeWxjYmx4dVpuVnVZM1JwYjI0Z1FXSnpkSEpoWTNSTVpYWmxiRVJQVjA0Z0tDa2dlMXh1SUNCMGFHbHpMbk4wWVhSMWN5QTlJQ2R1WlhjblhHNTlYRzVjYmtGaWMzUnlZV04wVEdWMlpXeEVUMWRPTG5CeWIzUnZkSGx3WlM1dmNHVnVJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1zSUdOaGJHeGlZV05yS1NCN1hHNGdJSFpoY2lCelpXeG1JRDBnZEdocGMxeHVJQ0IyWVhJZ2IyeGtVM1JoZEhWeklEMGdkR2hwY3k1emRHRjBkWE5jYmx4dUlDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdQVDA5SUNkbWRXNWpkR2x2YmljcElHTmhiR3hpWVdOcklEMGdiM0IwYVc5dWMxeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMjl3Wlc0b0tTQnlaWEYxYVhKbGN5QmhJR05oYkd4aVlXTnJJR0Z5WjNWdFpXNTBKeWxjYmlBZ2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3lBaFBUMGdKMjlpYW1WamRDY2dmSHdnYjNCMGFXOXVjeUE5UFQwZ2JuVnNiQ2tnYjNCMGFXOXVjeUE5SUh0OVhHNWNiaUFnYjNCMGFXOXVjeTVqY21WaGRHVkpaazFwYzNOcGJtY2dQU0J2Y0hScGIyNXpMbU55WldGMFpVbG1UV2x6YzJsdVp5QWhQVDBnWm1Gc2MyVmNiaUFnYjNCMGFXOXVjeTVsY25KdmNrbG1SWGhwYzNSeklEMGdJU0Z2Y0hScGIyNXpMbVZ5Y205eVNXWkZlR2x6ZEhOY2JseHVJQ0IwYUdsekxuTjBZWFIxY3lBOUlDZHZjR1Z1YVc1bkoxeHVJQ0IwYUdsekxsOXZjR1Z1S0c5d2RHbHZibk1zSUdaMWJtTjBhVzl1SUNobGNuSXBJSHRjYmlBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQnpaV3htTG5OMFlYUjFjeUE5SUc5c1pGTjBZWFIxYzF4dUlDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR1Z5Y2lsY2JpQWdJQ0I5WEc0Z0lDQWdjMlZzWmk1emRHRjBkWE1nUFNBbmIzQmxiaWRjYmlBZ0lDQmpZV3hzWW1GamF5Z3BYRzRnSUgwcFhHNTlYRzVjYmtGaWMzUnlZV04wVEdWMlpXeEVUMWRPTG5CeWIzUnZkSGx3WlM1ZmIzQmxiaUE5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6TENCallXeHNZbUZqYXlrZ2UxeHVJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJLVnh1ZlZ4dVhHNUJZbk4wY21GamRFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVZMnh2YzJVZ1BTQm1kVzVqZEdsdmJpQW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6WEc0Z0lIWmhjaUJ2YkdSVGRHRjBkWE1nUFNCMGFHbHpMbk4wWVhSMWMxeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMk5zYjNObEtDa2djbVZ4ZFdseVpYTWdZU0JqWVd4c1ltRmpheUJoY21kMWJXVnVkQ2NwWEc0Z0lIMWNibHh1SUNCMGFHbHpMbk4wWVhSMWN5QTlJQ2RqYkc5emFXNW5KMXh1SUNCMGFHbHpMbDlqYkc5elpTaG1kVzVqZEdsdmJpQW9aWEp5S1NCN1hHNGdJQ0FnYVdZZ0tHVnljaWtnZTF4dUlDQWdJQ0FnYzJWc1ppNXpkR0YwZFhNZ1BTQnZiR1JUZEdGMGRYTmNiaUFnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXlobGNuSXBYRzRnSUNBZ2ZWeHVJQ0FnSUhObGJHWXVjM1JoZEhWeklEMGdKMk5zYjNObFpDZGNiaUFnSUNCallXeHNZbUZqYXlncFhHNGdJSDBwWEc1OVhHNWNia0ZpYzNSeVlXTjBUR1YyWld4RVQxZE9MbkJ5YjNSdmRIbHdaUzVmWTJ4dmMyVWdQU0JtZFc1amRHbHZiaUFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpZV3hzWW1GamF5bGNibjFjYmx4dVFXSnpkSEpoWTNSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExtZGxkQ0E5SUdaMWJtTjBhVzl1SUNoclpYa3NJRzl3ZEdsdmJuTXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQnZjSFJwYjI1elhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25aMlYwS0NrZ2NtVnhkV2x5WlhNZ1lTQmpZV3hzWW1GamF5QmhjbWQxYldWdWRDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ1pYSnlJRDBnZEdocGN5NWZZMmhsWTJ0TFpYa29hMlY1S1Z4dUlDQnBaaUFvWlhKeUtTQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z1pYSnlLVnh1WEc0Z0lHdGxlU0E5SUhSb2FYTXVYM05sY21saGJHbDZaVXRsZVNoclpYa3BYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCdmNIUnBiMjV6SUQwOVBTQnVkV3hzS1NCdmNIUnBiMjV6SUQwZ2UzMWNibHh1SUNCdmNIUnBiMjV6TG1GelFuVm1abVZ5SUQwZ2IzQjBhVzl1Y3k1aGMwSjFabVpsY2lBaFBUMGdabUZzYzJWY2JseHVJQ0IwYUdsekxsOW5aWFFvYTJWNUxDQnZjSFJwYjI1ekxDQmpZV3hzWW1GamF5bGNibjFjYmx4dVFXSnpkSEpoWTNSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExsOW5aWFFnUFNCbWRXNWpkR2x2YmlBb2EyVjVMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWjFibU4wYVc5dUlDZ3BJSHNnWTJGc2JHSmhZMnNvYm1WM0lFVnljbTl5S0NkT2IzUkdiM1Z1WkNjcEtTQjlLVnh1ZlZ4dVhHNUJZbk4wY21GamRFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVjSFYwSUQwZ1puVnVZM1JwYjI0Z0tHdGxlU3dnZG1Gc2RXVXNJRzl3ZEdsdmJuTXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQnZjSFJwYjI1elhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSFYwS0NrZ2NtVnhkV2x5WlhNZ1lTQmpZV3hzWW1GamF5QmhjbWQxYldWdWRDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ1pYSnlJRDBnZEdocGN5NWZZMmhsWTJ0TFpYa29hMlY1S1NCOGZDQjBhR2x6TGw5amFHVmphMVpoYkhWbEtIWmhiSFZsS1Z4dUlDQnBaaUFvWlhKeUtTQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z1pYSnlLVnh1WEc0Z0lHdGxlU0E5SUhSb2FYTXVYM05sY21saGJHbDZaVXRsZVNoclpYa3BYRzRnSUhaaGJIVmxJRDBnZEdocGN5NWZjMlZ5YVdGc2FYcGxWbUZzZFdVb2RtRnNkV1VwWEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJQ0U5UFNBbmIySnFaV04wSnlCOGZDQnZjSFJwYjI1eklEMDlQU0J1ZFd4c0tTQnZjSFJwYjI1eklEMGdlMzFjYmx4dUlDQjBhR2x6TGw5d2RYUW9hMlY1TENCMllXeDFaU3dnYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwWEc1OVhHNWNia0ZpYzNSeVlXTjBUR1YyWld4RVQxZE9MbkJ5YjNSdmRIbHdaUzVmY0hWMElEMGdablZ1WTNScGIyNGdLR3RsZVN3Z2RtRnNkV1VzSUc5d2RHbHZibk1zSUdOaGJHeGlZV05yS1NCN1hHNGdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMkZzYkdKaFkyc3BYRzU5WEc1Y2JrRmljM1J5WVdOMFRHVjJaV3hFVDFkT0xuQnliM1J2ZEhsd1pTNWtaV3dnUFNCbWRXNWpkR2x2YmlBb2EyVjVMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdQVDA5SUNkbWRXNWpkR2x2YmljcElHTmhiR3hpWVdOcklEMGdiM0IwYVc5dWMxeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMlJsYkNncElISmxjWFZwY21WeklHRWdZMkZzYkdKaFkyc2dZWEpuZFcxbGJuUW5LVnh1SUNCOVhHNWNiaUFnZG1GeUlHVnljaUE5SUhSb2FYTXVYMk5vWldOclMyVjVLR3RsZVNsY2JpQWdhV1lnS0dWeWNpa2djbVYwZFhKdUlIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1kyRnNiR0poWTJzc0lHVnljaWxjYmx4dUlDQnJaWGtnUFNCMGFHbHpMbDl6WlhKcFlXeHBlbVZMWlhrb2EyVjVLVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2IzQjBhVzl1Y3lBOVBUMGdiblZzYkNrZ2IzQjBhVzl1Y3lBOUlIdDlYRzVjYmlBZ2RHaHBjeTVmWkdWc0tHdGxlU3dnYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwWEc1OVhHNWNia0ZpYzNSeVlXTjBUR1YyWld4RVQxZE9MbkJ5YjNSdmRIbHdaUzVmWkdWc0lEMGdablZ1WTNScGIyNGdLR3RsZVN3Z2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcElIdGNiaUFnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWVd4c1ltRmpheWxjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbUpoZEdOb0lEMGdablZ1WTNScGIyNGdLR0Z5Y21GNUxDQnZjSFJwYjI1ekxDQmpZV3hzWW1GamF5a2dlMXh1SUNCcFppQW9JV0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BJSEpsZEhWeWJpQjBhR2x6TGw5amFHRnBibVZrUW1GMFkyZ29LVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQnZjSFJwYjI1elhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaGNuSmhlU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dZMkZzYkdKaFkyc2dQU0JoY25KaGVWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ1kyRnNiR0poWTJzZ0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMkpoZEdOb0tHRnljbUY1S1NCeVpYRjFhWEpsY3lCaElHTmhiR3hpWVdOcklHRnlaM1Z0Wlc1MEp5bGNiaUFnZlZ4dVhHNGdJR2xtSUNnaFFYSnlZWGt1YVhOQmNuSmhlU2hoY25KaGVTa3BJSHRjYmlBZ0lDQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z2JtVjNJRVZ5Y205eUtDZGlZWFJqYUNoaGNuSmhlU2tnY21WeGRXbHlaWE1nWVc0Z1lYSnlZWGtnWVhKbmRXMWxiblFuS1NsY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2IzQjBhVzl1Y3lBOVBUMGdiblZzYkNrZ2IzQjBhVzl1Y3lBOUlIdDlYRzVjYmlBZ2RtRnlJSE5sY21saGJHbDZaV1FnUFNCdVpYY2dRWEp5WVhrb1lYSnlZWGt1YkdWdVozUm9LVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dZWEp5WVhrdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR0Z5Y21GNVcybGRJQ0U5UFNBbmIySnFaV04wSnlCOGZDQmhjbkpoZVZ0cFhTQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1kyRnNiR0poWTJzc0lHNWxkeUJGY25KdmNpZ25ZbUYwWTJnb1lYSnlZWGtwSUdWc1pXMWxiblFnYlhWemRDQmlaU0JoYmlCdlltcGxZM1FnWVc1a0lHNXZkQ0JnYm5Wc2JHQW5LU2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQjJZWElnWlNBOUlIaDBaVzVrS0dGeWNtRjVXMmxkS1Z4dVhHNGdJQ0FnYVdZZ0tHVXVkSGx3WlNBaFBUMGdKM0IxZENjZ0ppWWdaUzUwZVhCbElDRTlQU0FuWkdWc0p5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1kyRnNiR0poWTJzc0lHNWxkeUJGY25KdmNpaGNJbUIwZVhCbFlDQnRkWE4wSUdKbElDZHdkWFFuSUc5eUlDZGtaV3duWENJcEtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQmxjbklnUFNCMGFHbHpMbDlqYUdWamEwdGxlU2hsTG10bGVTbGNiaUFnSUNCcFppQW9aWEp5S1NCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWVd4c1ltRmpheXdnWlhKeUtWeHVYRzRnSUNBZ1pTNXJaWGtnUFNCMGFHbHpMbDl6WlhKcFlXeHBlbVZMWlhrb1pTNXJaWGtwWEc1Y2JpQWdJQ0JwWmlBb1pTNTBlWEJsSUQwOVBTQW5jSFYwSnlrZ2UxeHVJQ0FnSUNBZ2RtRnlJSFpoYkhWbFJYSnlJRDBnZEdocGN5NWZZMmhsWTJ0V1lXeDFaU2hsTG5aaGJIVmxLVnh1SUNBZ0lDQWdhV1lnS0haaGJIVmxSWEp5S1NCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWVd4c1ltRmpheXdnZG1Gc2RXVkZjbklwWEc1Y2JpQWdJQ0FnSUdVdWRtRnNkV1VnUFNCMGFHbHpMbDl6WlhKcFlXeHBlbVZXWVd4MVpTaGxMblpoYkhWbEtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGNtbGhiR2w2WldSYmFWMGdQU0JsWEc0Z0lIMWNibHh1SUNCMGFHbHpMbDlpWVhSamFDaHpaWEpwWVd4cGVtVmtMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWxjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbDlpWVhSamFDQTlJR1oxYm1OMGFXOXVJQ2hoY25KaGVTd2diM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXlsY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTGw5elpYUjFjRWwwWlhKaGRHOXlUM0IwYVc5dWN5QTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lHOXdkR2x2Ym5NZ1BTQmpiR1ZoYmxKaGJtZGxUM0IwYVc5dWN5aDBhR2x6TENCdmNIUnBiMjV6S1Z4dVhHNGdJRzl3ZEdsdmJuTXVjbVYyWlhKelpTQTlJQ0VoYjNCMGFXOXVjeTV5WlhabGNuTmxYRzRnSUc5d2RHbHZibk11YTJWNWN5QTlJRzl3ZEdsdmJuTXVhMlY1Y3lBaFBUMGdabUZzYzJWY2JpQWdiM0IwYVc5dWN5NTJZV3gxWlhNZ1BTQnZjSFJwYjI1ekxuWmhiSFZsY3lBaFBUMGdabUZzYzJWY2JpQWdiM0IwYVc5dWN5NXNhVzFwZENBOUlDZHNhVzFwZENjZ2FXNGdiM0IwYVc5dWN5QS9JRzl3ZEdsdmJuTXViR2x0YVhRZ09pQXRNVnh1SUNCdmNIUnBiMjV6TG10bGVVRnpRblZtWm1WeUlEMGdiM0IwYVc5dWN5NXJaWGxCYzBKMVptWmxjaUFoUFQwZ1ptRnNjMlZjYmlBZ2IzQjBhVzl1Y3k1MllXeDFaVUZ6UW5WbVptVnlJRDBnYjNCMGFXOXVjeTUyWVd4MVpVRnpRblZtWm1WeUlDRTlQU0JtWVd4elpWeHVYRzRnSUhKbGRIVnliaUJ2Y0hScGIyNXpYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTnNaV0Z1VW1GdVoyVlBjSFJwYjI1eklDaGtZaXdnYjNCMGFXOXVjeWtnZTF4dUlDQjJZWElnY21WemRXeDBJRDBnZTMxY2JseHVJQ0JtYjNJZ0tIWmhjaUJySUdsdUlHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9JV2hoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjNCMGFXOXVjeXdnYXlrcElHTnZiblJwYm5WbFhHNWNiaUFnSUNCMllYSWdiM0IwSUQwZ2IzQjBhVzl1YzF0clhWeHVYRzRnSUNBZ2FXWWdLR2x6VW1GdVoyVlBjSFJwYjI0b2F5a3BJSHRjYmlBZ0lDQWdJQzh2SUU1dmRHVWdkR2hoZENCM1pTQmtiMjRuZENCeVpXcGxZM1FnYm5Wc2JHbHphQ0JoYm1RZ1pXMXdkSGtnYjNCMGFXOXVjeUJvWlhKbExpQlhhR2xzWlZ4dUlDQWdJQ0FnTHk4Z2RHaHZjMlVnZEhsd1pYTWdZWEpsSUdsdWRtRnNhV1FnWVhNZ2EyVjVjeXdnZEdobGVTQmhjbVVnZG1Gc2FXUWdZWE1nY21GdVoyVWdiM0IwYVc5dWN5NWNiaUFnSUNBZ0lHOXdkQ0E5SUdSaUxsOXpaWEpwWVd4cGVtVkxaWGtvYjNCMEtWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGMzVnNkRnRyWFNBOUlHOXdkRnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSEpsYzNWc2RGeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxSmhibWRsVDNCMGFXOXVJQ2hyS1NCN1hHNGdJSEpsZEhWeWJpQnlZVzVuWlU5d2RHbHZibk11YVc1a1pYaFBaaWhyS1NBaFBUMGdMVEZjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbWwwWlhKaGRHOXlJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJQ0U5UFNBbmIySnFaV04wSnlCOGZDQnZjSFJwYjI1eklEMDlQU0J1ZFd4c0tTQnZjSFJwYjI1eklEMGdlMzFjYmlBZ2IzQjBhVzl1Y3lBOUlIUm9hWE11WDNObGRIVndTWFJsY21GMGIzSlBjSFJwYjI1ektHOXdkR2x2Ym5NcFhHNGdJSEpsZEhWeWJpQjBhR2x6TGw5cGRHVnlZWFJ2Y2lodmNIUnBiMjV6S1Z4dWZWeHVYRzVCWW5OMGNtRmpkRXhsZG1Wc1JFOVhUaTV3Y205MGIzUjVjR1V1WDJsMFpYSmhkRzl5SUQwZ1puVnVZM1JwYjI0Z0tHOXdkR2x2Ym5NcElIdGNiaUFnY21WMGRYSnVJRzVsZHlCQlluTjBjbUZqZEVsMFpYSmhkRzl5S0hSb2FYTXBYRzU5WEc1Y2JrRmljM1J5WVdOMFRHVjJaV3hFVDFkT0xuQnliM1J2ZEhsd1pTNWZZMmhoYVc1bFpFSmhkR05vSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCeVpYUjFjbTRnYm1WM0lFRmljM1J5WVdOMFEyaGhhVzVsWkVKaGRHTm9LSFJvYVhNcFhHNTlYRzVjYmtGaWMzUnlZV04wVEdWMlpXeEVUMWRPTG5CeWIzUnZkSGx3WlM1ZmMyVnlhV0ZzYVhwbFMyVjVJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNCeVpYUjFjbTRnYTJWNVhHNTlYRzVjYmtGaWMzUnlZV04wVEdWMlpXeEVUMWRPTG5CeWIzUnZkSGx3WlM1ZmMyVnlhV0ZzYVhwbFZtRnNkV1VnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdjbVYwZFhKdUlIWmhiSFZsWEc1OVhHNWNia0ZpYzNSeVlXTjBUR1YyWld4RVQxZE9MbkJ5YjNSdmRIbHdaUzVmWTJobFkydExaWGtnUFNCbWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc0Z0lHbG1JQ2hyWlhrZ1BUMDlJRzUxYkd3Z2ZId2dhMlY1SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRVZ5Y205eUtDZHJaWGtnWTJGdWJtOTBJR0psSUdCdWRXeHNZQ0J2Y2lCZ2RXNWtaV1pwYm1Wa1lDY3BYRzRnSUgwZ1pXeHpaU0JwWmlBb1FuVm1abVZ5TG1selFuVm1abVZ5S0d0bGVTa2dKaVlnYTJWNUxteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnUlhKeWIzSW9KMnRsZVNCallXNXViM1FnWW1VZ1lXNGdaVzF3ZEhrZ1FuVm1abVZ5SnlsY2JpQWdmU0JsYkhObElHbG1JQ2hyWlhrZ1BUMDlJQ2NuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCRmNuSnZjaWduYTJWNUlHTmhibTV2ZENCaVpTQmhiaUJsYlhCMGVTQlRkSEpwYm1jbktWeHVJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29hMlY1S1NBbUppQnJaWGt1YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QkZjbkp2Y2lnbmEyVjVJR05oYm01dmRDQmlaU0JoYmlCbGJYQjBlU0JCY25KaGVTY3BYRzRnSUgxY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTGw5amFHVmphMVpoYkhWbElEMGdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUdsbUlDaDJZV3gxWlNBOVBUMGdiblZzYkNCOGZDQjJZV3gxWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJGY25KdmNpZ25kbUZzZFdVZ1kyRnVibTkwSUdKbElHQnVkV3hzWUNCdmNpQmdkVzVrWldacGJtVmtZQ2NwWEc0Z0lIMWNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQlluTjBjbUZqZEV4bGRtVnNSRTlYVGx4dUlpd2laWGh3YjNKMGN5NUJZbk4wY21GamRFeGxkbVZzUkU5WFRpQTlJSEpsY1hWcGNtVW9KeTR2WVdKemRISmhZM1F0YkdWMlpXeGtiM2R1SnlsY2JtVjRjRzl5ZEhNdVFXSnpkSEpoWTNSSmRHVnlZWFJ2Y2lBOUlISmxjWFZwY21Vb0p5NHZZV0p6ZEhKaFkzUXRhWFJsY21GMGIzSW5LVnh1Wlhod2IzSjBjeTVCWW5OMGNtRmpkRU5vWVdsdVpXUkNZWFJqYUNBOUlISmxjWFZwY21Vb0p5NHZZV0p6ZEhKaFkzUXRZMmhoYVc1bFpDMWlZWFJqYUNjcFhHNGlMQ0oyWVhJZ2NISnlJRDBnY21WeGRXbHlaU2duY0hKeUp5bGNibHh1Wm5WdVkzUnBiMjRnYVc1cGRDQW9kSGx3WlN3Z2JXVnpjMkZuWlN3Z1kyRjFjMlVwSUh0Y2JpQWdhV1lnS0NFaGJXVnpjMkZuWlNBbUppQjBlWEJsYjJZZ2JXVnpjMkZuWlNBaFBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHMWxjM05oWjJVZ1BTQnRaWE56WVdkbExtMWxjM05oWjJVZ2ZId2diV1Z6YzJGblpTNXVZVzFsWEc0Z0lIMWNiaUFnY0hKeUtIUm9hWE1zSUh0Y2JpQWdJQ0FnSUhSNWNHVWdJQ0FnT2lCMGVYQmxYRzRnSUNBZ0xDQnVZVzFsSUNBZ0lEb2dkSGx3WlZ4dUlDQWdJQ0FnTHk4Z1kyRnVJR0psSUhCaGMzTmxaQ0JxZFhOMElHRWdKMk5oZFhObEoxeHVJQ0FnSUN3Z1kyRjFjMlVnSUNBNklIUjVjR1Z2WmlCdFpYTnpZV2RsSUNFOUlDZHpkSEpwYm1jbklEOGdiV1Z6YzJGblpTQTZJR05oZFhObFhHNGdJQ0FnTENCdFpYTnpZV2RsSURvZ2JXVnpjMkZuWlZ4dUlDQjlMQ0FuWlhkeUp5bGNibjFjYmx4dUx5OGdaMlZ1WlhKcFl5QndjbTkwYjNSNWNHVXNJRzV2ZENCcGJuUmxibVJsWkNCMGJ5QmlaU0JoWTNSMVlXeHNlU0IxYzJWa0lDMGdhR1ZzY0daMWJDQm1iM0lnWUdsdWMzUmhibU5sYjJaZ1hHNW1kVzVqZEdsdmJpQkRkWE4wYjIxRmNuSnZjaUFvYldWemMyRm5aU3dnWTJGMWMyVXBJSHRjYmlBZ1JYSnliM0l1WTJGc2JDaDBhR2x6S1Z4dUlDQnBaaUFvUlhKeWIzSXVZMkZ3ZEhWeVpWTjBZV05yVkhKaFkyVXBYRzRnSUNBZ1JYSnliM0l1WTJGd2RIVnlaVk4wWVdOclZISmhZMlVvZEdocGN5d2dkR2hwY3k1amIyNXpkSEoxWTNSdmNpbGNiaUFnYVc1cGRDNWpZV3hzS0hSb2FYTXNJQ2REZFhOMGIyMUZjbkp2Y2ljc0lHMWxjM05oWjJVc0lHTmhkWE5sS1Z4dWZWeHVYRzVEZFhOMGIyMUZjbkp2Y2k1d2NtOTBiM1I1Y0dVZ1BTQnVaWGNnUlhKeWIzSW9LVnh1WEc1bWRXNWpkR2x2YmlCamNtVmhkR1ZGY25KdmNpQW9aWEp5Ym04c0lIUjVjR1VzSUhCeWIzUnZLU0I3WEc0Z0lIWmhjaUJsY25JZ1BTQm1kVzVqZEdsdmJpQW9iV1Z6YzJGblpTd2dZMkYxYzJVcElIdGNiaUFnSUNCcGJtbDBMbU5oYkd3b2RHaHBjeXdnZEhsd1pTd2diV1Z6YzJGblpTd2dZMkYxYzJVcFhHNGdJQ0FnTHk5VVQwUlBPaUIwYUdVZ2MzQmxZMmxtYVdOcGRIa2dhR1Z5WlNCcGN5QnpkSFZ3YVdRc0lHVnljbTV2SUhOb2IzVnNaQ0JpWlNCaGRtRnBiR0ZpYkdVZ1pYWmxjbmwzYUdWeVpWeHVJQ0FnSUdsbUlDaDBlWEJsSUQwOUlDZEdhV3hsYzNsemRHVnRSWEp5YjNJbktTQjdYRzRnSUNBZ0lDQjBhR2x6TG1OdlpHVWdJQ0FnUFNCMGFHbHpMbU5oZFhObExtTnZaR1ZjYmlBZ0lDQWdJSFJvYVhNdWNHRjBhQ0FnSUNBOUlIUm9hWE11WTJGMWMyVXVjR0YwYUZ4dUlDQWdJQ0FnZEdocGN5NWxjbkp1YnlBZ0lEMGdkR2hwY3k1allYVnpaUzVsY25KdWIxeHVJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxJRDFjYmlBZ0lDQWdJQ0FnS0dWeWNtNXZMbVZ5Y201dlczUm9hWE11WTJGMWMyVXVaWEp5Ym05ZFhHNGdJQ0FnSUNBZ0lDQWdQeUJsY25KdWJ5NWxjbkp1YjF0MGFHbHpMbU5oZFhObExtVnljbTV2WFM1a1pYTmpjbWx3ZEdsdmJseHVJQ0FnSUNBZ0lDQWdJRG9nZEdocGN5NWpZWFZ6WlM1dFpYTnpZV2RsS1Z4dUlDQWdJQ0FnSUNBcklDaDBhR2x6TG1OaGRYTmxMbkJoZEdnZ1B5QW5JRnNuSUNzZ2RHaHBjeTVqWVhWelpTNXdZWFJvSUNzZ0oxMG5JRG9nSnljcFhHNGdJQ0FnZlZ4dUlDQWdJRVZ5Y205eUxtTmhiR3dvZEdocGN5bGNiaUFnSUNCcFppQW9SWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVcFhHNGdJQ0FnSUNCRmNuSnZjaTVqWVhCMGRYSmxVM1JoWTJ0VWNtRmpaU2gwYUdsekxDQmxjbklwWEc0Z0lIMWNiaUFnWlhKeUxuQnliM1J2ZEhsd1pTQTlJQ0VoY0hKdmRHOGdQeUJ1WlhjZ2NISnZkRzhvS1NBNklHNWxkeUJEZFhOMGIyMUZjbkp2Y2lncFhHNGdJSEpsZEhWeWJpQmxjbkpjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9aWEp5Ym04cElIdGNiaUFnZG1GeUlHTmxJRDBnWm5WdVkzUnBiMjRnS0hSNWNHVXNJSEJ5YjNSdktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVVZ5Y205eUtHVnljbTV2TENCMGVYQmxMQ0J3Y205MGJ5bGNiaUFnZlZ4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ1EzVnpkRzl0UlhKeWIzSWdJQ0FnSURvZ1EzVnpkRzl0UlhKeWIzSmNiaUFnSUNBc0lFWnBiR1Z6ZVhOMFpXMUZjbkp2Y2lBNklHTmxLQ2RHYVd4bGMzbHpkR1Z0UlhKeWIzSW5LVnh1SUNBZ0lDd2dZM0psWVhSbFJYSnliM0lnSUNBZ0lEb2dZMlZjYmlBZ2ZWeHVmVnh1SWl3aWRtRnlJR0ZzYkNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6TG1Gc2JDQTlJRnRjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF0TWl4Y2JpQWdJQ0JqYjJSbE9pQW5SVTVQUlU1VUp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjV2SUhOMVkyZ2dabWxzWlNCdmNpQmthWEpsWTNSdmNua25YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ0xURXNYRzRnSUNBZ1kyOWtaVG9nSjFWT1MwNVBWMDRuTEZ4dUlDQWdJR1JsYzJOeWFYQjBhVzl1T2lBbmRXNXJibTkzYmlCbGNuSnZjaWRjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR1Z5Y201dk9pQXdMRnh1SUNBZ0lHTnZaR1U2SUNkUFN5Y3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2R6ZFdOalpYTnpKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklERXNYRzRnSUNBZ1kyOWtaVG9nSjBWUFJpY3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2RsYm1RZ2IyWWdabWxzWlNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF5TEZ4dUlDQWdJR052WkdVNklDZEZRVVJFVWtsT1JrOG5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuWjJWMFlXUmtjbWx1Wm04Z1pYSnliM0luWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dNeXhjYmlBZ0lDQmpiMlJsT2lBblJVRkRRMFZUSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0ozQmxjbTFwYzNOcGIyNGdaR1Z1YVdWa0oxeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1pYSnlibTg2SURRc1hHNGdJQ0FnWTI5a1pUb2dKMFZCUjBGSlRpY3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2R5WlhOdmRYSmpaU0IwWlcxd2IzSmhjbWxzZVNCMWJtRjJZV2xzWVdKc1pTZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBMUxGeHVJQ0FnSUdOdlpHVTZJQ2RGUVVSRVVrbE9WVk5GSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0oyRmtaSEpsYzNNZ1lXeHlaV0ZrZVNCcGJpQjFjMlVuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dOaXhjYmlBZ0lDQmpiMlJsT2lBblJVRkVSRkpPVDFSQlZrRkpUQ2NzWEc0Z0lDQWdaR1Z6WTNKcGNIUnBiMjQ2SUNkaFpHUnlaWE56SUc1dmRDQmhkbUZwYkdGaWJHVW5YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ055eGNiaUFnSUNCamIyUmxPaUFuUlVGR1RrOVRWVkJRVDFKVUp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMkZrWkhKbGMzTWdabUZ0YVd4NUlHNXZkQ0J6ZFhCd2IzSjBaV1FuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dPQ3hjYmlBZ0lDQmpiMlJsT2lBblJVRk1Va1ZCUkZrbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5ZMjl1Ym1WamRHbHZiaUJoYkhKbFlXUjVJR2x1SUhCeWIyZHlaWE56SjF4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWlhKeWJtODZJRGtzWEc0Z0lDQWdZMjlrWlRvZ0owVkNRVVJHSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0oySmhaQ0JtYVd4bElHUmxjMk55YVhCMGIzSW5YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ01UQXNYRzRnSUNBZ1kyOWtaVG9nSjBWQ1ZWTlpKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjNKbGMyOTFjbU5sSUdKMWMza2diM0lnYkc5amEyVmtKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklERXhMRnh1SUNBZ0lHTnZaR1U2SUNkRlEwOU9Ua0ZDVDFKVVJVUW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuYzI5bWRIZGhjbVVnWTJGMWMyVmtJR052Ym01bFkzUnBiMjRnWVdKdmNuUW5YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ01USXNYRzRnSUNBZ1kyOWtaVG9nSjBWRFQwNU9Va1ZHVlZORlJDY3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2RqYjI1dVpXTjBhVzl1SUhKbFpuVnpaV1FuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dNVE1zWEc0Z0lDQWdZMjlrWlRvZ0owVkRUMDVPVWtWVFJWUW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuWTI5dWJtVmpkR2x2YmlCeVpYTmxkQ0JpZVNCd1pXVnlKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklERTBMRnh1SUNBZ0lHTnZaR1U2SUNkRlJFVlRWRUZFUkZKU1JWRW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuWkdWemRHbHVZWFJwYjI0Z1lXUmtjbVZ6Y3lCeVpYRjFhWEpsWkNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF4TlN4Y2JpQWdJQ0JqYjJSbE9pQW5SVVpCVlV4VUp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMkpoWkNCaFpHUnlaWE56SUdsdUlITjVjM1JsYlNCallXeHNJR0Z5WjNWdFpXNTBKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklERTJMRnh1SUNBZ0lHTnZaR1U2SUNkRlNFOVRWRlZPVWtWQlEwZ25MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuYUc5emRDQnBjeUIxYm5KbFlXTm9ZV0pzWlNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF4Tnl4Y2JpQWdJQ0JqYjJSbE9pQW5SVWxPVkZJbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5hVzUwWlhKeWRYQjBaV1FnYzNsemRHVnRJR05oYkd3blhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTVRnc1hHNGdJQ0FnWTI5a1pUb2dKMFZKVGxaQlRDY3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2RwYm5aaGJHbGtJR0Z5WjNWdFpXNTBKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklERTVMRnh1SUNBZ0lHTnZaR1U2SUNkRlNWTkRUMDVPSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0ozTnZZMnRsZENCcGN5QmhiSEpsWVdSNUlHTnZibTVsWTNSbFpDZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBeU1DeGNiaUFnSUNCamIyUmxPaUFuUlUxR1NVeEZKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjNSdmJ5QnRZVzU1SUc5d1pXNGdabWxzWlhNblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTWpFc1hHNGdJQ0FnWTI5a1pUb2dKMFZOVTBkVFNWcEZKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjIxbGMzTmhaMlVnZEc5dklHeHZibWNuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dNaklzWEc0Z0lDQWdZMjlrWlRvZ0owVk9SVlJFVDFkT0p5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjVsZEhkdmNtc2dhWE1nWkc5M2JpZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBeU15eGNiaUFnSUNCamIyUmxPaUFuUlU1RlZGVk9Va1ZCUTBnbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5ibVYwZDI5eWF5QnBjeUIxYm5KbFlXTm9ZV0pzWlNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF5TkN4Y2JpQWdJQ0JqYjJSbE9pQW5SVTVHU1V4Rkp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMlpwYkdVZ2RHRmliR1VnYjNabGNtWnNiM2NuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dNalVzWEc0Z0lDQWdZMjlrWlRvZ0owVk9UMEpWUmxNbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5ibThnWW5WbVptVnlJSE53WVdObElHRjJZV2xzWVdKc1pTZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBeU5peGNiaUFnSUNCamIyUmxPaUFuUlU1UFRVVk5KeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjI1dmRDQmxibTkxWjJnZ2JXVnRiM0o1SjF4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWlhKeWJtODZJREkzTEZ4dUlDQWdJR052WkdVNklDZEZUazlVUkVsU0p5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjV2ZENCaElHUnBjbVZqZEc5eWVTZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBeU9DeGNiaUFnSUNCamIyUmxPaUFuUlVsVFJFbFNKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjJsc2JHVm5ZV3dnYjNCbGNtRjBhVzl1SUc5dUlHRWdaR2x5WldOMGIzSjVKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklESTVMRnh1SUNBZ0lHTnZaR1U2SUNkRlRrOU9SVlFuTEZ4dUlDQWdJR1JsYzJOeWFYQjBhVzl1T2lBbmJXRmphR2x1WlNCcGN5QnViM1FnYjI0Z2RHaGxJRzVsZEhkdmNtc25YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ016RXNYRzRnSUNBZ1kyOWtaVG9nSjBWT1QxUkRUMDVPSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0ozTnZZMnRsZENCcGN5QnViM1FnWTI5dWJtVmpkR1ZrSjF4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWlhKeWJtODZJRE15TEZ4dUlDQWdJR052WkdVNklDZEZUazlVVTA5RFN5Y3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2R6YjJOclpYUWdiM0JsY21GMGFXOXVJRzl1SUc1dmJpMXpiMk5yWlhRblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTXpNc1hHNGdJQ0FnWTI5a1pUb2dKMFZPVDFSVFZWQW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuYjNCbGNtRjBhVzl1SUc1dmRDQnpkWEJ3YjNKMFpXUWdiMjRnYzI5amEyVjBKMXh1SUNCOUxGeHVJQ0I3WEc0Z0lDQWdaWEp5Ym04NklETTBMRnh1SUNBZ0lHTnZaR1U2SUNkRlRrOUZUbFFuTEZ4dUlDQWdJR1JsYzJOeWFYQjBhVzl1T2lBbmJtOGdjM1ZqYUNCbWFXeGxJRzl5SUdScGNtVmpkRzl5ZVNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUF6TlN4Y2JpQWdJQ0JqYjJSbE9pQW5SVTVQVTFsVEp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMloxYm1OMGFXOXVJRzV2ZENCcGJYQnNaVzFsYm5SbFpDZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBek5peGNiaUFnSUNCamIyUmxPaUFuUlZCSlVFVW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuWW5KdmEyVnVJSEJwY0dVblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTXpjc1hHNGdJQ0FnWTI5a1pUb2dKMFZRVWs5VVR5Y3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2R3Y205MGIyTnZiQ0JsY25KdmNpZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBek9DeGNiaUFnSUNCamIyUmxPaUFuUlZCU1QxUlBUazlUVlZCUVQxSlVKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjNCeWIzUnZZMjlzSUc1dmRDQnpkWEJ3YjNKMFpXUW5YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ016a3NYRzRnSUNBZ1kyOWtaVG9nSjBWUVVrOVVUMVJaVUVVbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5jSEp2ZEc5amIyd2dkM0p2Ym1jZ2RIbHdaU0JtYjNJZ2MyOWphMlYwSjF4dUlDQjlMRnh1SUNCN1hHNGdJQ0FnWlhKeWJtODZJRFF3TEZ4dUlDQWdJR052WkdVNklDZEZWRWxOUlVSUFZWUW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuWTI5dWJtVmpkR2x2YmlCMGFXMWxaQ0J2ZFhRblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTkRFc1hHNGdJQ0FnWTI5a1pUb2dKMFZEU0VGU1UwVlVKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjJsdWRtRnNhV1FnVlc1cFkyOWtaU0JqYUdGeVlXTjBaWEluWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dORElzWEc0Z0lDQWdZMjlrWlRvZ0owVkJTVVpCVFU1UFUxVlFVRTlTVkNjc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0NklDZGhaR1J5WlhOeklHWmhiV2xzZVNCbWIzSWdhRzl6ZEc1aGJXVWdibTkwSUhOMWNIQnZjblJsWkNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUEwTkN4Y2JpQWdJQ0JqYjJSbE9pQW5SVUZKVTBWU1ZrbERSU2NzWEc0Z0lDQWdaR1Z6WTNKcGNIUnBiMjQ2SUNkelpYSjJibUZ0WlNCdWIzUWdjM1Z3Y0c5eWRHVmtJR1p2Y2lCaGFWOXpiMk5yZEhsd1pTZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBME5TeGNiaUFnSUNCamIyUmxPaUFuUlVGSlUwOURTMVJaVUVVbkxGeHVJQ0FnSUdSbGMyTnlhWEIwYVc5dU9pQW5ZV2xmYzI5amEzUjVjR1VnYm05MElITjFjSEJ2Y25SbFpDZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBME5peGNiaUFnSUNCamIyUmxPaUFuUlZOSVZWUkVUMWRPSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0oyTmhibTV2ZENCelpXNWtJR0ZtZEdWeUlIUnlZVzV6Y0c5eWRDQmxibVJ3YjJsdWRDQnphSFYwWkc5M2JpZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBME55eGNiaUFnSUNCamIyUmxPaUFuUlVWWVNWTlVKeXhjYmlBZ0lDQmtaWE5qY21sd2RHbHZiam9nSjJacGJHVWdZV3h5WldGa2VTQmxlR2x6ZEhNblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTkRnc1hHNGdJQ0FnWTI5a1pUb2dKMFZUVWtOSUp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjV2SUhOMVkyZ2djSEp2WTJWemN5ZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBME9TeGNiaUFnSUNCamIyUmxPaUFuUlU1QlRVVlVUMDlNVDA1SEp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjVoYldVZ2RHOXZJR3h2Ym1jblhHNGdJSDBzWEc0Z0lIdGNiaUFnSUNCbGNuSnViem9nTlRBc1hHNGdJQ0FnWTI5a1pUb2dKMFZRUlZKTkp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMjl3WlhKaGRHbHZiaUJ1YjNRZ2NHVnliV2wwZEdWa0oxeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1pYSnlibTg2SURVeExGeHVJQ0FnSUdOdlpHVTZJQ2RGVEU5UFVDY3NYRzRnSUNBZ1pHVnpZM0pwY0hScGIyNDZJQ2QwYjI4Z2JXRnVlU0J6ZVcxaWIyeHBZeUJzYVc1cmN5QmxibU52ZFc1MFpYSmxaQ2RjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR1Z5Y201dk9pQTFNaXhjYmlBZ0lDQmpiMlJsT2lBblJWaEVSVlluTEZ4dUlDQWdJR1JsYzJOeWFYQjBhVzl1T2lBblkzSnZjM010WkdWMmFXTmxJR3hwYm1zZ2JtOTBJSEJsY20xcGRIUmxaQ2RjYmlBZ2ZTeGNiaUFnZTF4dUlDQWdJR1Z5Y201dk9pQTFNeXhjYmlBZ0lDQmpiMlJsT2lBblJVNVBWRVZOVUZSWkp5eGNiaUFnSUNCa1pYTmpjbWx3ZEdsdmJqb2dKMlJwY21WamRHOXllU0J1YjNRZ1pXMXdkSGtuWEc0Z0lIMHNYRzRnSUh0Y2JpQWdJQ0JsY25KdWJ6b2dOVFFzWEc0Z0lDQWdZMjlrWlRvZ0owVk9UMU5RUXljc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0NklDZHVieUJ6Y0dGalpTQnNaV1owSUc5dUlHUmxkbWxqWlNkY2JpQWdmU3hjYmlBZ2UxeHVJQ0FnSUdWeWNtNXZPaUExTlN4Y2JpQWdJQ0JqYjJSbE9pQW5SVWxQSnl4Y2JpQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0oya3ZieUJsY25KdmNpZGNiaUFnZlN4Y2JpQWdlMXh1SUNBZ0lHVnljbTV2T2lBMU5peGNiaUFnSUNCamIyUmxPaUFuUlZKUFJsTW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuY21WaFpDMXZibXg1SUdacGJHVWdjM2x6ZEdWdEoxeHVJQ0I5TEZ4dUlDQjdYRzRnSUNBZ1pYSnlibTg2SURVM0xGeHVJQ0FnSUdOdlpHVTZJQ2RGVGs5RVJWWW5MRnh1SUNBZ0lHUmxjMk55YVhCMGFXOXVPaUFuYm04Z2MzVmphQ0JrWlhacFkyVW5YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ05UZ3NYRzRnSUNBZ1kyOWtaVG9nSjBWVFVFbFFSU2NzWEc0Z0lDQWdaR1Z6WTNKcGNIUnBiMjQ2SUNkcGJuWmhiR2xrSUhObFpXc25YRzRnSUgwc1hHNGdJSHRjYmlBZ0lDQmxjbkp1YnpvZ05Ua3NYRzRnSUNBZ1kyOWtaVG9nSjBWRFFVNURSVXhGUkNjc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0NklDZHZjR1Z5WVhScGIyNGdZMkZ1WTJWc1pXUW5YRzRnSUgxY2JsMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVaWEp5Ym04Z1BTQjdmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITXVZMjlrWlNBOUlIdDlYRzVjYm1Gc2JDNW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5NWxjbkp1YjF0bGNuSnZjaTVsY25KdWIxMGdQU0JsY25KdmNseHVJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5NWpiMlJsVzJWeWNtOXlMbU52WkdWZElEMGdaWEp5YjNKY2JuMHBYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpMbU4xYzNSdmJTQTlJSEpsY1hWcGNtVW9KeTR2WTNWemRHOXRKeWtvYlc5a2RXeGxMbVY0Y0c5eWRITXBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5NWpjbVZoZEdVZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3k1amRYTjBiMjB1WTNKbFlYUmxSWEp5YjNKY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNW1kVzVqZEdsdmJpQkZkbVZ1ZEVWdGFYUjBaWElvS1NCN1hHNGdJSFJvYVhNdVgyVjJaVzUwY3lBOUlIUm9hWE11WDJWMlpXNTBjeUI4ZkNCN2ZUdGNiaUFnZEdocGN5NWZiV0Y0VEdsemRHVnVaWEp6SUQwZ2RHaHBjeTVmYldGNFRHbHpkR1Z1WlhKeklIeDhJSFZ1WkdWbWFXNWxaRHRjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JYWmxiblJGYldsMGRHVnlPMXh1WEc0dkx5QkNZV05yZDJGeVpITXRZMjl0Y0dGMElIZHBkR2dnYm05a1pTQXdMakV3TG5oY2JrVjJaVzUwUlcxcGRIUmxjaTVGZG1WdWRFVnRhWFIwWlhJZ1BTQkZkbVZ1ZEVWdGFYUjBaWEk3WEc1Y2JrVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1WDJWMlpXNTBjeUE5SUhWdVpHVm1hVzVsWkR0Y2JrVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1WDIxaGVFeHBjM1JsYm1WeWN5QTlJSFZ1WkdWbWFXNWxaRHRjYmx4dUx5OGdRbmtnWkdWbVlYVnNkQ0JGZG1WdWRFVnRhWFIwWlhKeklIZHBiR3dnY0hKcGJuUWdZU0IzWVhKdWFXNW5JR2xtSUcxdmNtVWdkR2hoYmlBeE1DQnNhWE4wWlc1bGNuTWdZWEpsWEc0dkx5QmhaR1JsWkNCMGJ5QnBkQzRnVkdocGN5QnBjeUJoSUhWelpXWjFiQ0JrWldaaGRXeDBJSGRvYVdOb0lHaGxiSEJ6SUdacGJtUnBibWNnYldWdGIzSjVJR3hsWVd0ekxseHVSWFpsYm5SRmJXbDBkR1Z5TG1SbFptRjFiSFJOWVhoTWFYTjBaVzVsY25NZ1BTQXhNRHRjYmx4dUx5OGdUMkoyYVc5MWMyeDVJRzV2ZENCaGJHd2dSVzFwZEhSbGNuTWdjMmh2ZFd4a0lHSmxJR3hwYldsMFpXUWdkRzhnTVRBdUlGUm9hWE1nWm5WdVkzUnBiMjRnWVd4c2IzZHpYRzR2THlCMGFHRjBJSFJ2SUdKbElHbHVZM0psWVhObFpDNGdVMlYwSUhSdklIcGxjbThnWm05eUlIVnViR2x0YVhSbFpDNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdWMyVjBUV0Y0VEdsemRHVnVaWEp6SUQwZ1puVnVZM1JwYjI0b2Jpa2dlMXh1SUNCcFppQW9JV2x6VG5WdFltVnlLRzRwSUh4OElHNGdQQ0F3SUh4OElHbHpUbUZPS0c0cEtWeHVJQ0FnSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWduYmlCdGRYTjBJR0psSUdFZ2NHOXphWFJwZG1VZ2JuVnRZbVZ5SnlrN1hHNGdJSFJvYVhNdVgyMWhlRXhwYzNSbGJtVnljeUE5SUc0N1hHNGdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNWxiV2wwSUQwZ1puVnVZM1JwYjI0b2RIbHdaU2tnZTF4dUlDQjJZWElnWlhJc0lHaGhibVJzWlhJc0lHeGxiaXdnWVhKbmN5d2dhU3dnYkdsemRHVnVaWEp6TzF4dVhHNGdJR2xtSUNnaGRHaHBjeTVmWlhabGJuUnpLVnh1SUNBZ0lIUm9hWE11WDJWMlpXNTBjeUE5SUh0OU8xeHVYRzRnSUM4dklFbG1JSFJvWlhKbElHbHpJRzV2SUNkbGNuSnZjaWNnWlhabGJuUWdiR2x6ZEdWdVpYSWdkR2hsYmlCMGFISnZkeTVjYmlBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RsY25KdmNpY3BJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYMlYyWlc1MGN5NWxjbkp2Y2lCOGZGeHVJQ0FnSUNBZ0lDQW9hWE5QWW1wbFkzUW9kR2hwY3k1ZlpYWmxiblJ6TG1WeWNtOXlLU0FtSmlBaGRHaHBjeTVmWlhabGJuUnpMbVZ5Y205eUxteGxibWQwYUNrcElIdGNiaUFnSUNBZ0lHVnlJRDBnWVhKbmRXMWxiblJ6V3pGZE8xeHVJQ0FnSUNBZ2FXWWdLR1Z5SUdsdWMzUmhibU5sYjJZZ1JYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnWlhJN0lDOHZJRlZ1YUdGdVpHeGxaQ0FuWlhKeWIzSW5JR1YyWlc1MFhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBdkx5QkJkQ0JzWldGemRDQm5hWFpsSUhOdmJXVWdhMmx1WkNCdlppQmpiMjUwWlhoMElIUnZJSFJvWlNCMWMyVnlYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSWdQU0J1WlhjZ1JYSnliM0lvSjFWdVkyRjFaMmgwTENCMWJuTndaV05wWm1sbFpDQmNJbVZ5Y205eVhDSWdaWFpsYm5RdUlDZ25JQ3NnWlhJZ0t5QW5LU2NwTzF4dUlDQWdJQ0FnSUNCbGNuSXVZMjl1ZEdWNGRDQTlJR1Z5TzF4dUlDQWdJQ0FnSUNCMGFISnZkeUJsY25JN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FHRnVaR3hsY2lBOUlIUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhUdGNibHh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvYUdGdVpHeGxjaWtwWEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJR2xtSUNocGMwWjFibU4wYVc5dUtHaGhibVJzWlhJcEtTQjdYRzRnSUNBZ2MzZHBkR05vSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBdkx5Qm1ZWE4wSUdOaGMyVnpYRzRnSUNBZ0lDQmpZWE5sSURFNlhHNGdJQ0FnSUNBZ0lHaGhibVJzWlhJdVkyRnNiQ2gwYUdsektUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJREk2WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaWEl1WTJGc2JDaDBhR2x6TENCaGNtZDFiV1Z1ZEhOYk1WMHBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnTXpwY2JpQWdJQ0FnSUNBZ2FHRnVaR3hsY2k1allXeHNLSFJvYVhNc0lHRnlaM1Z0Wlc1MGMxc3hYU3dnWVhKbmRXMWxiblJ6V3pKZEtUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBdkx5QnpiRzkzWlhKY2JpQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUdGeVozTWdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2hoY21kMWJXVnVkSE1zSURFcE8xeHVJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUxtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hwYzA5aWFtVmpkQ2hvWVc1a2JHVnlLU2tnZTF4dUlDQWdJR0Z5WjNNZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaGhjbWQxYldWdWRITXNJREVwTzF4dUlDQWdJR3hwYzNSbGJtVnljeUE5SUdoaGJtUnNaWEl1YzJ4cFkyVW9LVHRjYmlBZ0lDQnNaVzRnUFNCc2FYTjBaVzVsY25NdWJHVnVaM1JvTzF4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5bGNiaUFnSUNBZ0lHeHBjM1JsYm1WeWMxdHBYUzVoY0hCc2VTaDBhR2x6TENCaGNtZHpLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIwY25WbE8xeHVmVHRjYmx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzVoWkdSTWFYTjBaVzVsY2lBOUlHWjFibU4wYVc5dUtIUjVjR1VzSUd4cGMzUmxibVZ5S1NCN1hHNGdJSFpoY2lCdE8xeHVYRzRnSUdsbUlDZ2hhWE5HZFc1amRHbHZiaWhzYVhOMFpXNWxjaWtwWEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZHNhWE4wWlc1bGNpQnRkWE4wSUdKbElHRWdablZ1WTNScGIyNG5LVHRjYmx4dUlDQnBaaUFvSVhSb2FYTXVYMlYyWlc1MGN5bGNiaUFnSUNCMGFHbHpMbDlsZG1WdWRITWdQU0I3ZlR0Y2JseHVJQ0F2THlCVWJ5QmhkbTlwWkNCeVpXTjFjbk5wYjI0Z2FXNGdkR2hsSUdOaGMyVWdkR2hoZENCMGVYQmxJRDA5UFNCY0ltNWxkMHhwYzNSbGJtVnlYQ0loSUVKbFptOXlaVnh1SUNBdkx5QmhaR1JwYm1jZ2FYUWdkRzhnZEdobElHeHBjM1JsYm1WeWN5d2dabWx5YzNRZ1pXMXBkQ0JjSW01bGQweHBjM1JsYm1WeVhDSXVYRzRnSUdsbUlDaDBhR2x6TGw5bGRtVnVkSE11Ym1WM1RHbHpkR1Z1WlhJcFhHNGdJQ0FnZEdocGN5NWxiV2wwS0NkdVpYZE1hWE4wWlc1bGNpY3NJSFI1Y0dVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdselJuVnVZM1JwYjI0b2JHbHpkR1Z1WlhJdWJHbHpkR1Z1WlhJcElEOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHpkR1Z1WlhJdWJHbHpkR1Z1WlhJZ09pQnNhWE4wWlc1bGNpazdYRzVjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjBwWEc0Z0lDQWdMeThnVDNCMGFXMXBlbVVnZEdobElHTmhjMlVnYjJZZ2IyNWxJR3hwYzNSbGJtVnlMaUJFYjI0bmRDQnVaV1ZrSUhSb1pTQmxlSFJ5WVNCaGNuSmhlU0J2WW1wbFkzUXVYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZElEMGdiR2x6ZEdWdVpYSTdYRzRnSUdWc2MyVWdhV1lnS0dselQySnFaV04wS0hSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFNrcFhHNGdJQ0FnTHk4Z1NXWWdkMlVuZG1VZ1lXeHlaV0ZrZVNCbmIzUWdZVzRnWVhKeVlYa3NJR3AxYzNRZ1lYQndaVzVrTGx4dUlDQWdJSFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYUzV3ZFhOb0tHeHBjM1JsYm1WeUtUdGNiaUFnWld4elpWeHVJQ0FnSUM4dklFRmtaR2x1WnlCMGFHVWdjMlZqYjI1a0lHVnNaVzFsYm5Rc0lHNWxaV1FnZEc4Z1kyaGhibWRsSUhSdklHRnljbUY1TGx4dUlDQWdJSFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU0E5SUZ0MGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwc0lHeHBjM1JsYm1WeVhUdGNibHh1SUNBdkx5QkRhR1ZqYXlCbWIzSWdiR2x6ZEdWdVpYSWdiR1ZoYTF4dUlDQnBaaUFvYVhOUFltcGxZM1FvZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkS1NBbUppQWhkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRMbmRoY201bFpDa2dlMXh1SUNBZ0lHbG1JQ2doYVhOVmJtUmxabWx1WldRb2RHaHBjeTVmYldGNFRHbHpkR1Z1WlhKektTa2dlMXh1SUNBZ0lDQWdiU0E5SUhSb2FYTXVYMjFoZUV4cGMzUmxibVZ5Y3p0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdiU0E5SUVWMlpXNTBSVzFwZEhSbGNpNWtaV1poZFd4MFRXRjRUR2x6ZEdWdVpYSnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h0SUNZbUlHMGdQaUF3SUNZbUlIUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhTNXNaVzVuZEdnZ1BpQnRLU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjB1ZDJGeWJtVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSnlodWIyUmxLU0IzWVhKdWFXNW5PaUJ3YjNOemFXSnNaU0JGZG1WdWRFVnRhWFIwWlhJZ2JXVnRiM0o1SUNjZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYkdWaGF5QmtaWFJsWTNSbFpDNGdKV1FnYkdsemRHVnVaWEp6SUdGa1pHVmtMaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVZ6WlNCbGJXbDBkR1Z5TG5ObGRFMWhlRXhwYzNSbGJtVnljeWdwSUhSdklHbHVZM0psWVhObElHeHBiV2wwTGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYUzVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjI1emIyeGxMblJ5WVdObElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRzV2ZENCemRYQndiM0owWldRZ2FXNGdTVVVnTVRCY2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1MGNtRmpaU2dwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzV2YmlBOUlFVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1WVdSa1RHbHpkR1Z1WlhJN1hHNWNia1YyWlc1MFJXMXBkSFJsY2k1d2NtOTBiM1I1Y0dVdWIyNWpaU0E5SUdaMWJtTjBhVzl1S0hSNWNHVXNJR3hwYzNSbGJtVnlLU0I3WEc0Z0lHbG1JQ2doYVhOR2RXNWpkR2x2Ymloc2FYTjBaVzVsY2lrcFhHNGdJQ0FnZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RzYVhOMFpXNWxjaUJ0ZFhOMElHSmxJR0VnWm5WdVkzUnBiMjRuS1R0Y2JseHVJQ0IyWVhJZ1ptbHlaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQm1kVzVqZEdsdmJpQm5LQ2tnZTF4dUlDQWdJSFJvYVhNdWNtVnRiM1psVEdsemRHVnVaWElvZEhsd1pTd2daeWs3WEc1Y2JpQWdJQ0JwWmlBb0lXWnBjbVZrS1NCN1hHNGdJQ0FnSUNCbWFYSmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQnNhWE4wWlc1bGNpNWhjSEJzZVNoMGFHbHpMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUdjdWJHbHpkR1Z1WlhJZ1BTQnNhWE4wWlc1bGNqdGNiaUFnZEdocGN5NXZiaWgwZVhCbExDQm5LVHRjYmx4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNiaTh2SUdWdGFYUnpJR0VnSjNKbGJXOTJaVXhwYzNSbGJtVnlKeUJsZG1WdWRDQnBabVlnZEdobElHeHBjM1JsYm1WeUlIZGhjeUJ5WlcxdmRtVmtYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ1puVnVZM1JwYjI0b2RIbHdaU3dnYkdsemRHVnVaWElwSUh0Y2JpQWdkbUZ5SUd4cGMzUXNJSEJ2YzJsMGFXOXVMQ0JzWlc1bmRHZ3NJR2s3WEc1Y2JpQWdhV1lnS0NGcGMwWjFibU4wYVc5dUtHeHBjM1JsYm1WeUtTbGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvSjJ4cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVYRzRnSUdsbUlDZ2hkR2hwY3k1ZlpYWmxiblJ6SUh4OElDRjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMHBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzVjYmlBZ2JHbHpkQ0E5SUhSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFR0Y2JpQWdiR1Z1WjNSb0lEMGdiR2x6ZEM1c1pXNW5kR2c3WEc0Z0lIQnZjMmwwYVc5dUlEMGdMVEU3WEc1Y2JpQWdhV1lnS0d4cGMzUWdQVDA5SUd4cGMzUmxibVZ5SUh4OFhHNGdJQ0FnSUNBb2FYTkdkVzVqZEdsdmJpaHNhWE4wTG14cGMzUmxibVZ5S1NBbUppQnNhWE4wTG14cGMzUmxibVZ5SUQwOVBTQnNhWE4wWlc1bGNpa3BJSHRjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZE8xeHVJQ0FnSUdsbUlDaDBhR2x6TGw5bGRtVnVkSE11Y21WdGIzWmxUR2x6ZEdWdVpYSXBYRzRnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KM0psYlc5MlpVeHBjM1JsYm1WeUp5d2dkSGx3WlN3Z2JHbHpkR1Z1WlhJcE8xeHVYRzRnSUgwZ1pXeHpaU0JwWmlBb2FYTlBZbXBsWTNRb2JHbHpkQ2twSUh0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0JzWlc1bmRHZzdJR2t0TFNBK0lEQTdLU0I3WEc0Z0lDQWdJQ0JwWmlBb2JHbHpkRnRwWFNBOVBUMGdiR2x6ZEdWdVpYSWdmSHhjYmlBZ0lDQWdJQ0FnSUNBb2JHbHpkRnRwWFM1c2FYTjBaVzVsY2lBbUppQnNhWE4wVzJsZExteHBjM1JsYm1WeUlEMDlQU0JzYVhOMFpXNWxjaWtwSUh0Y2JpQWdJQ0FnSUNBZ2NHOXphWFJwYjI0Z1BTQnBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jRzl6YVhScGIyNGdQQ0F3S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNWNiaUFnSUNCcFppQW9iR2x6ZEM1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmlBZ0lDQWdJR3hwYzNRdWJHVnVaM1JvSUQwZ01EdGNiaUFnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR3hwYzNRdWMzQnNhV05sS0hCdmMybDBhVzl1TENBeEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZlpYWmxiblJ6TG5KbGJXOTJaVXhwYzNSbGJtVnlLVnh1SUNBZ0lDQWdkR2hwY3k1bGJXbDBLQ2R5WlcxdmRtVk1hWE4wWlc1bGNpY3NJSFI1Y0dVc0lHeHBjM1JsYm1WeUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaWgwZVhCbEtTQjdYRzRnSUhaaGNpQnJaWGtzSUd4cGMzUmxibVZ5Y3p0Y2JseHVJQ0JwWmlBb0lYUm9hWE11WDJWMlpXNTBjeWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQXZMeUJ1YjNRZ2JHbHpkR1Z1YVc1bklHWnZjaUJ5WlcxdmRtVk1hWE4wWlc1bGNpd2dibThnYm1WbFpDQjBieUJsYldsMFhHNGdJR2xtSUNnaGRHaHBjeTVmWlhabGJuUnpMbkpsYlc5MlpVeHBjM1JsYm1WeUtTQjdYRzRnSUNBZ2FXWWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQVDA5SURBcFhHNGdJQ0FnSUNCMGFHbHpMbDlsZG1WdWRITWdQU0I3ZlR0Y2JpQWdJQ0JsYkhObElHbG1JQ2gwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjBwWEc0Z0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnTHk4Z1pXMXBkQ0J5WlcxdmRtVk1hWE4wWlc1bGNpQm1iM0lnWVd4c0lHeHBjM1JsYm1WeWN5QnZiaUJoYkd3Z1pYWmxiblJ6WEc0Z0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ1ptOXlJQ2hyWlhrZ2FXNGdkR2hwY3k1ZlpYWmxiblJ6S1NCN1hHNGdJQ0FnSUNCcFppQW9hMlY1SUQwOVBTQW5jbVZ0YjNabFRHbHpkR1Z1WlhJbktTQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIUm9hWE11Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6S0d0bGVTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVjbVZ0YjNabFFXeHNUR2x6ZEdWdVpYSnpLQ2R5WlcxdmRtVk1hWE4wWlc1bGNpY3BPMXh1SUNBZ0lIUm9hWE11WDJWMlpXNTBjeUE5SUh0OU8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdiR2x6ZEdWdVpYSnpJRDBnZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkTzF4dVhHNGdJR2xtSUNocGMwWjFibU4wYVc5dUtHeHBjM1JsYm1WeWN5a3BJSHRjYmlBZ0lDQjBhR2x6TG5KbGJXOTJaVXhwYzNSbGJtVnlLSFI1Y0dVc0lHeHBjM1JsYm1WeWN5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2JHbHpkR1Z1WlhKektTQjdYRzRnSUNBZ0x5OGdURWxHVHlCdmNtUmxjbHh1SUNBZ0lIZG9hV3hsSUNoc2FYTjBaVzVsY25NdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2loMGVYQmxMQ0JzYVhOMFpXNWxjbk5iYkdsemRHVnVaWEp6TG14bGJtZDBhQ0F0SURGZEtUdGNiaUFnZlZ4dUlDQmtaV3hsZEdVZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZE8xeHVYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzVzYVhOMFpXNWxjbk1nUFNCbWRXNWpkR2x2YmloMGVYQmxLU0I3WEc0Z0lIWmhjaUJ5WlhRN1hHNGdJR2xtSUNnaGRHaHBjeTVmWlhabGJuUnpJSHg4SUNGMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwcFhHNGdJQ0FnY21WMElEMGdXMTA3WEc0Z0lHVnNjMlVnYVdZZ0tHbHpSblZ1WTNScGIyNG9kR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRLU2xjYmlBZ0lDQnlaWFFnUFNCYmRHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZFhUdGNiaUFnWld4elpWeHVJQ0FnSUhKbGRDQTlJSFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYUzV6YkdsalpTZ3BPMXh1SUNCeVpYUjFjbTRnY21WME8xeHVmVHRjYmx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzVzYVhOMFpXNWxja052ZFc1MElEMGdablZ1WTNScGIyNG9kSGx3WlNrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmWlhabGJuUnpLU0I3WEc0Z0lDQWdkbUZ5SUdWMmJHbHpkR1Z1WlhJZ1BTQjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMDdYRzVjYmlBZ0lDQnBaaUFvYVhOR2RXNWpkR2x2YmlobGRteHBjM1JsYm1WeUtTbGNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0FnSUdWc2MyVWdhV1lnS0dWMmJHbHpkR1Z1WlhJcFhHNGdJQ0FnSUNCeVpYUjFjbTRnWlhac2FYTjBaVzVsY2k1c1pXNW5kR2c3WEc0Z0lIMWNiaUFnY21WMGRYSnVJREE3WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWJHbHpkR1Z1WlhKRGIzVnVkQ0E5SUdaMWJtTjBhVzl1S0dWdGFYUjBaWElzSUhSNWNHVXBJSHRjYmlBZ2NtVjBkWEp1SUdWdGFYUjBaWEl1YkdsemRHVnVaWEpEYjNWdWRDaDBlWEJsS1R0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdselJuVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuWm5WdVkzUnBiMjRuTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzA1MWJXSmxjaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHVkVzFpWlhJbk8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwOWlhbVZqZENoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUdGeVp5QWhQVDBnYm5Wc2JEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTlZibVJsWm1sdVpXUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnUFQwOUlIWnZhV1FnTUR0Y2JuMWNiaUlzSW1WNGNHOXlkSE11Y21WaFpDQTlJR1oxYm1OMGFXOXVJQ2hpZFdabVpYSXNJRzltWm5ObGRDd2dhWE5NUlN3Z2JVeGxiaXdnYmtKNWRHVnpLU0I3WEc0Z0lIWmhjaUJsTENCdFhHNGdJSFpoY2lCbFRHVnVJRDBnS0c1Q2VYUmxjeUFxSURncElDMGdiVXhsYmlBdElERmNiaUFnZG1GeUlHVk5ZWGdnUFNBb01TQThQQ0JsVEdWdUtTQXRJREZjYmlBZ2RtRnlJR1ZDYVdGeklEMGdaVTFoZUNBK1BpQXhYRzRnSUhaaGNpQnVRbWwwY3lBOUlDMDNYRzRnSUhaaGNpQnBJRDBnYVhOTVJTQS9JQ2h1UW5sMFpYTWdMU0F4S1NBNklEQmNiaUFnZG1GeUlHUWdQU0JwYzB4RklEOGdMVEVnT2lBeFhHNGdJSFpoY2lCeklEMGdZblZtWm1WeVcyOW1abk5sZENBcklHbGRYRzVjYmlBZ2FTQXJQU0JrWEc1Y2JpQWdaU0E5SUhNZ0ppQW9LREVnUER3Z0tDMXVRbWwwY3lrcElDMGdNU2xjYmlBZ2N5QStQajBnS0MxdVFtbDBjeWxjYmlBZ2JrSnBkSE1nS3owZ1pVeGxibHh1SUNCbWIzSWdLRHNnYmtKcGRITWdQaUF3T3lCbElEMGdLR1VnS2lBeU5UWXBJQ3NnWW5WbVptVnlXMjltWm5ObGRDQXJJR2xkTENCcElDczlJR1FzSUc1Q2FYUnpJQzA5SURncElIdDlYRzVjYmlBZ2JTQTlJR1VnSmlBb0tERWdQRHdnS0MxdVFtbDBjeWtwSUMwZ01TbGNiaUFnWlNBK1BqMGdLQzF1UW1sMGN5bGNiaUFnYmtKcGRITWdLejBnYlV4bGJseHVJQ0JtYjNJZ0tEc2dia0pwZEhNZ1BpQXdPeUJ0SUQwZ0tHMGdLaUF5TlRZcElDc2dZblZtWm1WeVcyOW1abk5sZENBcklHbGRMQ0JwSUNzOUlHUXNJRzVDYVhSeklDMDlJRGdwSUh0OVhHNWNiaUFnYVdZZ0tHVWdQVDA5SURBcElIdGNiaUFnSUNCbElEMGdNU0F0SUdWQ2FXRnpYRzRnSUgwZ1pXeHpaU0JwWmlBb1pTQTlQVDBnWlUxaGVDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdElEOGdUbUZPSURvZ0tDaHpJRDhnTFRFZ09pQXhLU0FxSUVsdVptbHVhWFI1S1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUcwZ1BTQnRJQ3NnVFdGMGFDNXdiM2NvTWl3Z2JVeGxiaWxjYmlBZ0lDQmxJRDBnWlNBdElHVkNhV0Z6WEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2h6SUQ4Z0xURWdPaUF4S1NBcUlHMGdLaUJOWVhSb0xuQnZkeWd5TENCbElDMGdiVXhsYmlsY2JuMWNibHh1Wlhod2IzSjBjeTUzY21sMFpTQTlJR1oxYm1OMGFXOXVJQ2hpZFdabVpYSXNJSFpoYkhWbExDQnZabVp6WlhRc0lHbHpURVVzSUcxTVpXNHNJRzVDZVhSbGN5a2dlMXh1SUNCMllYSWdaU3dnYlN3Z1kxeHVJQ0IyWVhJZ1pVeGxiaUE5SUNodVFubDBaWE1nS2lBNEtTQXRJRzFNWlc0Z0xTQXhYRzRnSUhaaGNpQmxUV0Y0SUQwZ0tERWdQRHdnWlV4bGJpa2dMU0F4WEc0Z0lIWmhjaUJsUW1saGN5QTlJR1ZOWVhnZ1BqNGdNVnh1SUNCMllYSWdjblFnUFNBb2JVeGxiaUE5UFQwZ01qTWdQeUJOWVhSb0xuQnZkeWd5TENBdE1qUXBJQzBnVFdGMGFDNXdiM2NvTWl3Z0xUYzNLU0E2SURBcFhHNGdJSFpoY2lCcElEMGdhWE5NUlNBL0lEQWdPaUFvYmtKNWRHVnpJQzBnTVNsY2JpQWdkbUZ5SUdRZ1BTQnBjMHhGSUQ4Z01TQTZJQzB4WEc0Z0lIWmhjaUJ6SUQwZ2RtRnNkV1VnUENBd0lIeDhJQ2gyWVd4MVpTQTlQVDBnTUNBbUppQXhJQzhnZG1Gc2RXVWdQQ0F3S1NBL0lERWdPaUF3WEc1Y2JpQWdkbUZzZFdVZ1BTQk5ZWFJvTG1GaWN5aDJZV3gxWlNsY2JseHVJQ0JwWmlBb2FYTk9ZVTRvZG1Gc2RXVXBJSHg4SUhaaGJIVmxJRDA5UFNCSmJtWnBibWwwZVNrZ2UxeHVJQ0FnSUcwZ1BTQnBjMDVoVGloMllXeDFaU2tnUHlBeElEb2dNRnh1SUNBZ0lHVWdQU0JsVFdGNFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1pTQTlJRTFoZEdndVpteHZiM0lvVFdGMGFDNXNiMmNvZG1Gc2RXVXBJQzhnVFdGMGFDNU1UaklwWEc0Z0lDQWdhV1lnS0haaGJIVmxJQ29nS0dNZ1BTQk5ZWFJvTG5CdmR5Z3lMQ0F0WlNrcElEd2dNU2tnZTF4dUlDQWdJQ0FnWlMwdFhHNGdJQ0FnSUNCaklDbzlJREpjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR1VnS3lCbFFtbGhjeUErUFNBeEtTQjdYRzRnSUNBZ0lDQjJZV3gxWlNBclBTQnlkQ0F2SUdOY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdkbUZzZFdVZ0t6MGdjblFnS2lCTllYUm9MbkJ2ZHlneUxDQXhJQzBnWlVKcFlYTXBYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJZV3gxWlNBcUlHTWdQajBnTWlrZ2UxeHVJQ0FnSUNBZ1pTc3JYRzRnSUNBZ0lDQmpJQzg5SURKY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1pTQXJJR1ZDYVdGeklENDlJR1ZOWVhncElIdGNiaUFnSUNBZ0lHMGdQU0F3WEc0Z0lDQWdJQ0JsSUQwZ1pVMWhlRnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aU0FySUdWQ2FXRnpJRDQ5SURFcElIdGNiaUFnSUNBZ0lHMGdQU0FvS0haaGJIVmxJQ29nWXlrZ0xTQXhLU0FxSUUxaGRHZ3VjRzkzS0RJc0lHMU1aVzRwWEc0Z0lDQWdJQ0JsSUQwZ1pTQXJJR1ZDYVdGelhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRzBnUFNCMllXeDFaU0FxSUUxaGRHZ3VjRzkzS0RJc0lHVkNhV0Z6SUMwZ01Ta2dLaUJOWVhSb0xuQnZkeWd5TENCdFRHVnVLVnh1SUNBZ0lDQWdaU0E5SURCY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWIzSWdLRHNnYlV4bGJpQStQU0E0T3lCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYwZ1BTQnRJQ1lnTUhobVppd2dhU0FyUFNCa0xDQnRJQzg5SURJMU5pd2diVXhsYmlBdFBTQTRLU0I3ZlZ4dVhHNGdJR1VnUFNBb1pTQThQQ0J0VEdWdUtTQjhJRzFjYmlBZ1pVeGxiaUFyUFNCdFRHVnVYRzRnSUdadmNpQW9PeUJsVEdWdUlENGdNRHNnWW5WbVptVnlXMjltWm5ObGRDQXJJR2xkSUQwZ1pTQW1JREI0Wm1Zc0lHa2dLejBnWkN3Z1pTQXZQU0F5TlRZc0lHVk1aVzRnTFQwZ09Da2dlMzFjYmx4dUlDQmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FTQXRJR1JkSUh3OUlITWdLaUF4TWpoY2JuMWNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCMGVYQmxjeUE5SUZ0Y2JpQWdjbVZ4ZFdseVpTZ25MaTl1WlhoMFZHbGpheWNwTEZ4dUlDQnlaWEYxYVhKbEtDY3VMMjExZEdGMGFXOXVMbXB6Snlrc1hHNGdJSEpsY1hWcGNtVW9KeTR2YldWemMyRm5aVU5vWVc1dVpXd25LU3hjYmlBZ2NtVnhkV2x5WlNnbkxpOXpkR0YwWlVOb1lXNW5aU2NwTEZ4dUlDQnlaWEYxYVhKbEtDY3VMM1JwYldWdmRYUW5LVnh1WFR0Y2JuWmhjaUJrY21GcGJtbHVaenRjYm5aaGNpQmpkWEp5Wlc1MFVYVmxkV1U3WEc1MllYSWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVkbUZ5SUhGMVpYVmxJRDBnVzEwN1hHNTJZWElnYzJOb1pXUjFiR1ZrSUQwZ1ptRnNjMlU3WEc1bWRXNWpkR2x2YmlCamJHVmhibFZ3VG1WNGRGUnBZMnNvS1NCN1hHNGdJR2xtSUNnaFpISmhhVzVwYm1jZ2ZId2dJV04xY25KbGJuUlJkV1YxWlNrZ2UxeHVJQ0FnSUhKbGRIVnlianRjYmlBZ2ZWeHVJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNCcFppQW9ZM1Z5Y21WdWRGRjFaWFZsTG14bGJtZDBhQ2tnZTF4dUlDQWdJSEYxWlhWbElEMGdZM1Z5Y21WdWRGRjFaWFZsTG1OdmJtTmhkQ2h4ZFdWMVpTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVJQ0I5WEc0Z0lHbG1JQ2h4ZFdWMVpTNXNaVzVuZEdncElIdGNiaUFnSUNCdVpYaDBWR2xqYXlncE8xeHVJQ0I5WEc1OVhHNWNiaTh2Ym1GdFpXUWdibVY0ZEZScFkyc2dabTl5SUd4bGMzTWdZMjl1Wm5WemFXNW5JSE4wWVdOcklIUnlZV05sYzF4dVpuVnVZM1JwYjI0Z2JtVjRkRlJwWTJzb0tTQjdYRzRnSUdsbUlDaGtjbUZwYm1sdVp5a2dlMXh1SUNBZ0lISmxkSFZ5Ymp0Y2JpQWdmVnh1SUNCelkyaGxaSFZzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdaSEpoYVc1cGJtY2dQU0IwY25WbE8xeHVJQ0IyWVhJZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0IyWVhJZ2RHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUW9ZMnhsWVc1VmNFNWxlSFJVYVdOcktUdGNiaUFnZDJocGJHVWdLR3hsYmlrZ2UxeHVJQ0FnSUdOMWNuSmxiblJSZFdWMVpTQTlJSEYxWlhWbE8xeHVJQ0FnSUhGMVpYVmxJRDBnVzEwN1hHNGdJQ0FnZDJocGJHVWdLR04xY25KbGJuUlJkV1YxWlNBbUppQXJLM0YxWlhWbFNXNWtaWGdnUENCc1pXNHBJSHRjYmlBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlZ0eGRXVjFaVWx1WkdWNFhTNXlkVzRvS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjWFZsZFdWSmJtUmxlQ0E5SUMweE8xeHVJQ0FnSUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdmVnh1SUNCamRYSnlaVzUwVVhWbGRXVWdQU0J1ZFd4c08xeHVJQ0J4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzRnSUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYVcxbGIzVjBLVHRjYm4xY2JuWmhjaUJ6WTJobFpIVnNaVVJ5WVdsdU8xeHVkbUZ5SUdrZ1BTQXRNVHRjYm5aaGNpQnNaVzRnUFNCMGVYQmxjeTVzWlc1bmRHZzdYRzUzYUdsc1pTQW9LeXRwSUR3Z2JHVnVLU0I3WEc0Z0lHbG1JQ2gwZVhCbGMxdHBYU0FtSmlCMGVYQmxjMXRwWFM1MFpYTjBJQ1ltSUhSNWNHVnpXMmxkTG5SbGMzUW9LU2tnZTF4dUlDQWdJSE5qYUdWa2RXeGxSSEpoYVc0Z1BTQjBlWEJsYzF0cFhTNXBibk4wWVd4c0tHNWxlSFJVYVdOcktUdGNiaUFnSUNCaWNtVmhhenRjYmlBZ2ZWeHVmVnh1THk4Z2RqZ2diR2xyWlhNZ2NISmxaR2xqZEdsaWJHVWdiMkpxWldOMGMxeHVablZ1WTNScGIyNGdTWFJsYlNobWRXNHNJR0Z5Y21GNUtTQjdYRzRnSUhSb2FYTXVablZ1SUQwZ1puVnVPMXh1SUNCMGFHbHpMbUZ5Y21GNUlEMGdZWEp5WVhrN1hHNTlYRzVKZEdWdExuQnliM1J2ZEhsd1pTNXlkVzRnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhaaGNpQm1kVzRnUFNCMGFHbHpMbVoxYmp0Y2JpQWdkbUZ5SUdGeWNtRjVJRDBnZEdocGN5NWhjbkpoZVR0Y2JpQWdjM2RwZEdOb0lDaGhjbkpoZVM1c1pXNW5kR2dwSUh0Y2JpQWdZMkZ6WlNBd09seHVJQ0FnSUhKbGRIVnliaUJtZFc0b0tUdGNiaUFnWTJGelpTQXhPbHh1SUNBZ0lISmxkSFZ5YmlCbWRXNG9ZWEp5WVhsYk1GMHBPMXh1SUNCallYTmxJREk2WEc0Z0lDQWdjbVYwZFhKdUlHWjFiaWhoY25KaGVWc3dYU3dnWVhKeVlYbGJNVjBwTzF4dUlDQmpZWE5sSURNNlhHNGdJQ0FnY21WMGRYSnVJR1oxYmloaGNuSmhlVnN3WFN3Z1lYSnlZWGxiTVYwc0lHRnljbUY1V3pKZEtUdGNiaUFnWkdWbVlYVnNkRHBjYmlBZ0lDQnlaWFIxY200Z1puVnVMbUZ3Y0d4NUtHNTFiR3dzSUdGeWNtRjVLVHRjYmlBZ2ZWeHVYRzU5TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCcGJXMWxaR2xoZEdVN1hHNW1kVzVqZEdsdmJpQnBiVzFsWkdsaGRHVW9kR0Z6YXlrZ2UxeHVJQ0IyWVhJZ1lYSm5jeUE5SUc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01TazdYRzRnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBeE95QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmhjbWR6VzJrZ0xTQXhYU0E5SUdGeVozVnRaVzUwYzF0cFhUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NYVmxkV1V1Y0hWemFDaHVaWGNnU1hSbGJTaDBZWE5yTENCaGNtZHpLU2s3WEc0Z0lHbG1JQ2doYzJOb1pXUjFiR1ZrSUNZbUlDRmtjbUZwYm1sdVp5a2dlMXh1SUNBZ0lITmphR1ZrZFd4bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnYzJOb1pXUjFiR1ZFY21GcGJpZ3BPMXh1SUNCOVhHNTlYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1WNGNHOXlkSE11ZEdWemRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdhV1lnS0dkc2IySmhiQzV6WlhSSmJXMWxaR2xoZEdVcElIdGNiaUFnSUNBdkx5QjNaU0JqWVc0Z2IyNXNlU0JuWlhRZ2FHVnlaU0JwYmlCSlJURXdYRzRnSUNBZ0x5OGdkMmhwWTJnZ1pHOWxjMjRuZENCb1lXNWtaV3dnY0c5emRFMWxjM05oWjJVZ2QyVnNiRnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHZHNiMkpoYkM1TlpYTnpZV2RsUTJoaGJtNWxiQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDYzdYRzU5TzF4dVhHNWxlSEJ2Y25SekxtbHVjM1JoYkd3Z1BTQm1kVzVqZEdsdmJpQW9ablZ1WXlrZ2UxeHVJQ0IyWVhJZ1kyaGhibTVsYkNBOUlHNWxkeUJuYkc5aVlXd3VUV1Z6YzJGblpVTm9ZVzV1Wld3b0tUdGNiaUFnWTJoaGJtNWxiQzV3YjNKME1TNXZibTFsYzNOaFoyVWdQU0JtZFc1ak8xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR05vWVc1dVpXd3VjRzl5ZERJdWNHOXpkRTFsYzNOaFoyVW9NQ2s3WEc0Z0lIMDdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dlltRnpaV1FnYjJabUlISnpkbkFnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNScGJHUmxhVzh2Y25OMmNDNXFjMXh1THk5c2FXTmxibk5sSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MGFXeGtaV2x2TDNKemRuQXVhbk12WW14dllpOXRZWE4wWlhJdlRFbERSVTVUUlZ4dUx5OW9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZkR2xzWkdWcGJ5OXljM1p3TG1wekwySnNiMkl2YldGemRHVnlMMnhwWWk5eWMzWndMMkZ6WVhBdWFuTmNibHh1ZG1GeUlFMTFkR0YwYVc5dUlEMGdaMnh2WW1Gc0xrMTFkR0YwYVc5dVQySnpaWEoyWlhJZ2ZId2daMnh2WW1Gc0xsZGxZa3RwZEUxMWRHRjBhVzl1VDJKelpYSjJaWEk3WEc1Y2JtVjRjRzl5ZEhNdWRHVnpkQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnY21WMGRYSnVJRTExZEdGMGFXOXVPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NXBibk4wWVd4c0lEMGdablZ1WTNScGIyNGdLR2hoYm1Sc1pTa2dlMXh1SUNCMllYSWdZMkZzYkdWa0lEMGdNRHRjYmlBZ2RtRnlJRzlpYzJWeWRtVnlJRDBnYm1WM0lFMTFkR0YwYVc5dUtHaGhibVJzWlNrN1hHNGdJSFpoY2lCbGJHVnRaVzUwSUQwZ1oyeHZZbUZzTG1SdlkzVnRaVzUwTG1OeVpXRjBaVlJsZUhST2IyUmxLQ2NuS1R0Y2JpQWdiMkp6WlhKMlpYSXViMkp6WlhKMlpTaGxiR1Z0Wlc1MExDQjdYRzRnSUNBZ1kyaGhjbUZqZEdWeVJHRjBZVG9nZEhKMVpWeHVJQ0I5S1R0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmxiR1Z0Wlc1MExtUmhkR0VnUFNBb1kyRnNiR1ZrSUQwZ0t5dGpZV3hzWldRZ0pTQXlLVHRjYmlBZ2ZUdGNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1Wlhod2IzSjBjeTUwWlhOMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQXZMeUJFYjI0bmRDQm5aWFFnWm05dmJHVmtJR0o1SUdVdVp5NGdZbkp2ZDNObGNtbG1lU0JsYm5acGNtOXViV1Z1ZEhNdVhHNGdJSEpsZEhWeWJpQW9kSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NBbUppQWhjSEp2WTJWemN5NWljbTkzYzJWeU8xeHVmVHRjYmx4dVpYaHdiM0owY3k1cGJuTjBZV3hzSUQwZ1puVnVZM1JwYjI0Z0tHWjFibU1wSUh0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWjFibU1wTzF4dUlDQjlPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVaWGh3YjNKMGN5NTBaWE4wSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCeVpYUjFjbTRnSjJSdlkzVnRaVzUwSnlCcGJpQm5iRzlpWVd3Z0ppWWdKMjl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU2NnYVc0Z1oyeHZZbUZzTG1SdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KM05qY21sd2RDY3BPMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NXBibk4wWVd4c0lEMGdablZ1WTNScGIyNGdLR2hoYm1Sc1pTa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHVYRzRnSUNBZ0x5OGdRM0psWVhSbElHRWdQSE5qY21sd2RENGdaV3hsYldWdWREc2dhWFJ6SUhKbFlXUjVjM1JoZEdWamFHRnVaMlVnWlhabGJuUWdkMmxzYkNCaVpTQm1hWEpsWkNCaGMzbHVZMmh5YjI1dmRYTnNlU0J2Ym1ObElHbDBJR2x6SUdsdWMyVnlkR1ZrWEc0Z0lDQWdMeThnYVc1MGJ5QjBhR1VnWkc5amRXMWxiblF1SUVSdklITnZMQ0IwYUhWeklIRjFaWFZwYm1jZ2RYQWdkR2hsSUhSaGMyc3VJRkpsYldWdFltVnlJSFJ2SUdOc1pXRnVJSFZ3SUc5dVkyVWdhWFFuY3lCaVpXVnVJR05oYkd4bFpDNWNiaUFnSUNCMllYSWdjMk55YVhCMFJXd2dQU0JuYkc5aVlXd3VaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmMyTnlhWEIwSnlrN1hHNGdJQ0FnYzJOeWFYQjBSV3d1YjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdhR0Z1Wkd4bEtDazdYRzVjYmlBZ0lDQWdJSE5qY21sd2RFVnNMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQnpZM0pwY0hSRmJDNXdZWEpsYm5ST2IyUmxMbkpsYlc5MlpVTm9hV3hrS0hOamNtbHdkRVZzS1R0Y2JpQWdJQ0FnSUhOamNtbHdkRVZzSUQwZ2JuVnNiRHRjYmlBZ0lDQjlPMXh1SUNBZ0lHZHNiMkpoYkM1a2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1WVhCd1pXNWtRMmhwYkdRb2MyTnlhWEIwUld3cE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaVHRjYmlBZ2ZUdGNibjA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1Wlhod2IzSjBjeTUwWlhOMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnlaWFIxY200Z2RISjFaVHRjYm4wN1hHNWNibVY0Y0c5eWRITXVhVzV6ZEdGc2JDQTlJR1oxYm1OMGFXOXVJQ2gwS1NCN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjMlYwVkdsdFpXOTFkQ2gwTENBd0tUdGNiaUFnZlR0Y2JuMDdJaXdpYVdZZ0tIUjVjR1Z2WmlCUFltcGxZM1F1WTNKbFlYUmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUM4dklHbHRjR3hsYldWdWRHRjBhVzl1SUdaeWIyMGdjM1JoYm1SaGNtUWdibTlrWlM1cWN5QW5kWFJwYkNjZ2JXOWtkV3hsWEc0Z0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2FXNW9aWEpwZEhNb1kzUnZjaXdnYzNWd1pYSkRkRzl5S1NCN1hHNGdJQ0FnWTNSdmNpNXpkWEJsY2w4Z1BTQnpkWEJsY2tOMGIzSmNiaUFnSUNCamRHOXlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9jM1Z3WlhKRGRHOXlMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQ0FnWTI5dWMzUnlkV04wYjNJNklIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklHTjBiM0lzWEc0Z0lDQWdJQ0FnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ0lDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMDdYRzU5SUdWc2MyVWdlMXh1SUNBdkx5QnZiR1FnYzJOb2IyOXNJSE5vYVcwZ1ptOXlJRzlzWkNCaWNtOTNjMlZ5YzF4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlHbHVhR1Z5YVhSektHTjBiM0lzSUhOMWNHVnlRM1J2Y2lrZ2UxeHVJQ0FnSUdOMGIzSXVjM1Z3WlhKZklEMGdjM1Z3WlhKRGRHOXlYRzRnSUNBZ2RtRnlJRlJsYlhCRGRHOXlJRDBnWm5WdVkzUnBiMjRnS0NrZ2UzMWNiaUFnSUNCVVpXMXdRM1J2Y2k1d2NtOTBiM1I1Y0dVZ1BTQnpkWEJsY2tOMGIzSXVjSEp2ZEc5MGVYQmxYRzRnSUNBZ1kzUnZjaTV3Y205MGIzUjVjR1VnUFNCdVpYY2dWR1Z0Y0VOMGIzSW9LVnh1SUNBZ0lHTjBiM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdZM1J2Y2x4dUlDQjlYRzU5WEc0aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBZ0lDQWdJRDBnYVhOVWVYQmxaRUZ5Y21GNVhHNXBjMVI1Y0dWa1FYSnlZWGt1YzNSeWFXTjBJRDBnYVhOVGRISnBZM1JVZVhCbFpFRnljbUY1WEc1cGMxUjVjR1ZrUVhKeVlYa3ViRzl2YzJVZ0lEMGdhWE5NYjI5elpWUjVjR1ZrUVhKeVlYbGNibHh1ZG1GeUlIUnZVM1J5YVc1bklEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVoxeHVkbUZ5SUc1aGJXVnpJRDBnZTF4dUlDQWdJQ2RiYjJKcVpXTjBJRWx1ZERoQmNuSmhlVjBuT2lCMGNuVmxYRzRnSUN3Z0oxdHZZbXBsWTNRZ1NXNTBNVFpCY25KaGVWMG5PaUIwY25WbFhHNGdJQ3dnSjF0dlltcGxZM1FnU1c1ME16SkJjbkpoZVYwbk9pQjBjblZsWEc0Z0lDd2dKMXR2WW1wbFkzUWdWV2x1ZERoQmNuSmhlVjBuT2lCMGNuVmxYRzRnSUN3Z0oxdHZZbXBsWTNRZ1ZXbHVkRGhEYkdGdGNHVmtRWEp5WVhsZEp6b2dkSEoxWlZ4dUlDQXNJQ2RiYjJKcVpXTjBJRlZwYm5ReE5rRnljbUY1WFNjNklIUnlkV1ZjYmlBZ0xDQW5XMjlpYW1WamRDQlZhVzUwTXpKQmNuSmhlVjBuT2lCMGNuVmxYRzRnSUN3Z0oxdHZZbXBsWTNRZ1JteHZZWFF6TWtGeWNtRjVYU2M2SUhSeWRXVmNiaUFnTENBblcyOWlhbVZqZENCR2JHOWhkRFkwUVhKeVlYbGRKem9nZEhKMVpWeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxUjVjR1ZrUVhKeVlYa29ZWEp5S1NCN1hHNGdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdhWE5UZEhKcFkzUlVlWEJsWkVGeWNtRjVLR0Z5Y2lsY2JpQWdJQ0I4ZkNCcGMweHZiM05sVkhsd1pXUkJjbkpoZVNoaGNuSXBYRzRnSUNsY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVhOVGRISnBZM1JVZVhCbFpFRnljbUY1S0dGeWNpa2dlMXh1SUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUdGeWNpQnBibk4wWVc1alpXOW1JRWx1ZERoQmNuSmhlVnh1SUNBZ0lIeDhJR0Z5Y2lCcGJuTjBZVzVqWlc5bUlFbHVkREUyUVhKeVlYbGNiaUFnSUNCOGZDQmhjbklnYVc1emRHRnVZMlZ2WmlCSmJuUXpNa0Z5Y21GNVhHNGdJQ0FnZkh3Z1lYSnlJR2x1YzNSaGJtTmxiMllnVldsdWREaEJjbkpoZVZ4dUlDQWdJSHg4SUdGeWNpQnBibk4wWVc1alpXOW1JRlZwYm5RNFEyeGhiWEJsWkVGeWNtRjVYRzRnSUNBZ2ZId2dZWEp5SUdsdWMzUmhibU5sYjJZZ1ZXbHVkREUyUVhKeVlYbGNiaUFnSUNCOGZDQmhjbklnYVc1emRHRnVZMlZ2WmlCVmFXNTBNekpCY25KaGVWeHVJQ0FnSUh4OElHRnljaUJwYm5OMFlXNWpaVzltSUVac2IyRjBNekpCY25KaGVWeHVJQ0FnSUh4OElHRnljaUJwYm5OMFlXNWpaVzltSUVac2IyRjBOalJCY25KaGVWeHVJQ0FwWEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6VEc5dmMyVlVlWEJsWkVGeWNtRjVLR0Z5Y2lrZ2UxeHVJQ0J5WlhSMWNtNGdibUZ0WlhOYmRHOVRkSEpwYm1jdVkyRnNiQ2hoY25JcFhWeHVmVnh1SWl3aWRtRnlJSFJ2VTNSeWFXNW5JRDBnZTMwdWRHOVRkSEpwYm1jN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRWEp5WVhrdWFYTkJjbkpoZVNCOGZDQm1kVzVqZEdsdmJpQW9ZWEp5S1NCN1hHNGdJSEpsZEhWeWJpQjBiMU4wY21sdVp5NWpZV3hzS0dGeWNpa2dQVDBnSjF0dlltcGxZM1FnUVhKeVlYbGRKenRjYm4wN1hHNGlMQ0l2S2lCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRJdE1qQXhOeUJNWlhabGJGVlFJR052Ym5SeWFXSjFkRzl5YzF4dUlDb2dVMlZsSUd4cGMzUWdZWFFnUEdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eWRtRm5aeTl1YjJSbExXeGxkbVZzZFhBalkyOXVkSEpwWW5WMGFXNW5QbHh1SUNvZ1RVbFVJRXhwWTJWdWMyVmNiaUFxSUR4b2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNuWmhaMmN2Ym05a1pTMXNaWFpsYkhWd0wySnNiMkl2YldGemRHVnlMMHhKUTBWT1UwVXViV1ErWEc0Z0tpOWNibHh1ZG1GeUlHTnlaV0YwWlVWeWNtOXlJRDBnY21WeGRXbHlaU2duWlhKeWJtOG5LUzVqY21WaGRHVmNiblpoY2lCTVpYWmxiRlZRUlhKeWIzSWdQU0JqY21WaGRHVkZjbkp2Y2lnblRHVjJaV3hWVUVWeWNtOXlKeWxjYm5aaGNpQk9iM1JHYjNWdVpFVnljbTl5SUQwZ1kzSmxZWFJsUlhKeWIzSW9KMDV2ZEVadmRXNWtSWEp5YjNJbkxDQk1aWFpsYkZWUVJYSnliM0lwWEc1Y2JrNXZkRVp2ZFc1a1JYSnliM0l1Y0hKdmRHOTBlWEJsTG01dmRFWnZkVzVrSUQwZ2RISjFaVnh1VG05MFJtOTFibVJGY25KdmNpNXdjbTkwYjNSNWNHVXVjM1JoZEhWeklEMGdOREEwWEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JNWlhabGJGVlFSWEp5YjNJNklFeGxkbVZzVlZCRmNuSnZjaXhjYmlBZ1NXNXBkR2xoYkdsNllYUnBiMjVGY25KdmNqb2dZM0psWVhSbFJYSnliM0lvSjBsdWFYUnBZV3hwZW1GMGFXOXVSWEp5YjNJbkxDQk1aWFpsYkZWUVJYSnliM0lwTEZ4dUlDQlBjR1Z1UlhKeWIzSTZJR055WldGMFpVVnljbTl5S0NkUGNHVnVSWEp5YjNJbkxDQk1aWFpsYkZWUVJYSnliM0lwTEZ4dUlDQlNaV0ZrUlhKeWIzSTZJR055WldGMFpVVnljbTl5S0NkU1pXRmtSWEp5YjNJbkxDQk1aWFpsYkZWUVJYSnliM0lwTEZ4dUlDQlhjbWwwWlVWeWNtOXlPaUJqY21WaGRHVkZjbkp2Y2lnblYzSnBkR1ZGY25KdmNpY3NJRXhsZG1Wc1ZWQkZjbkp2Y2lrc1hHNGdJRTV2ZEVadmRXNWtSWEp5YjNJNklFNXZkRVp2ZFc1a1JYSnliM0lzWEc0Z0lFVnVZMjlrYVc1blJYSnliM0k2SUdOeVpXRjBaVVZ5Y205eUtDZEZibU52WkdsdVowVnljbTl5Snl3Z1RHVjJaV3hWVUVWeWNtOXlLVnh1ZlZ4dUlpd2lkbUZ5SUdsdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktWeHVkbUZ5SUZKbFlXUmhZbXhsSUQwZ2NtVnhkV2x5WlNnbmNtVmhaR0ZpYkdVdGMzUnlaV0Z0SnlrdVVtVmhaR0ZpYkdWY2JuWmhjaUJsZUhSbGJtUWdQU0J5WlhGMWFYSmxLQ2Q0ZEdWdVpDY3BYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFpGTjBjbVZoYlZ4dWFXNW9aWEpwZEhNb1VtVmhaRk4wY21WaGJTd2dVbVZoWkdGaWJHVXBYRzVjYm1aMWJtTjBhVzl1SUZKbFlXUlRkSEpsWVcwZ0tHbDBaWEpoZEc5eUxDQnZjSFJwYjI1ektTQjdYRzRnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQlNaV0ZrVTNSeVpXRnRLU2tnY21WMGRYSnVJRzVsZHlCU1pXRmtVM1J5WldGdEtHbDBaWEpoZEc5eUxDQnZjSFJwYjI1ektWeHVJQ0J2Y0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZWeHVJQ0JTWldGa1lXSnNaUzVqWVd4c0tIUm9hWE1zSUdWNGRHVnVaQ2h2Y0hScGIyNXpMQ0I3WEc0Z0lDQWdiMkpxWldOMFRXOWtaVG9nZEhKMVpWeHVJQ0I5S1NsY2JpQWdkR2hwY3k1ZmFYUmxjbUYwYjNJZ1BTQnBkR1Z5WVhSdmNseHVJQ0IwYUdsekxsOXZjSFJwYjI1eklEMGdiM0IwYVc5dWMxeHVJQ0IwYUdsekxtOXVLQ2RsYm1RbkxDQjBhR2x6TG1SbGMzUnliM2t1WW1sdVpDaDBhR2x6TENCdWRXeHNMQ0J1ZFd4c0tTbGNibjFjYmx4dVVtVmhaRk4wY21WaGJTNXdjbTkwYjNSNWNHVXVYM0psWVdRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJ6Wld4bUlEMGdkR2hwYzF4dUlDQjJZWElnYjNCMGFXOXVjeUE5SUhSb2FYTXVYMjl3ZEdsdmJuTmNiaUFnYVdZZ0tIUm9hWE11WkdWemRISnZlV1ZrS1NCeVpYUjFjbTVjYmx4dUlDQjBhR2x6TGw5cGRHVnlZWFJ2Y2k1dVpYaDBLR1oxYm1OMGFXOXVJQ2hsY25Jc0lHdGxlU3dnZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvYzJWc1ppNWtaWE4wY205NVpXUXBJSEpsZEhWeWJseHVJQ0FnSUdsbUlDaGxjbklwSUhKbGRIVnliaUJ6Wld4bUxtUmxjM1J5YjNrb1pYSnlLVnh1WEc0Z0lDQWdhV1lnS0d0bGVTQTlQVDBnZFc1a1pXWnBibVZrSUNZbUlIWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSE5sYkdZdWNIVnphQ2h1ZFd4c0tWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2IzQjBhVzl1Y3k1clpYbHpJQ0U5UFNCbVlXeHpaU0FtSmlCdmNIUnBiMjV6TG5aaGJIVmxjeUE5UFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUhObGJHWXVjSFZ6YUNoclpYa3BYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHZjSFJwYjI1ekxtdGxlWE1nUFQwOUlHWmhiSE5sSUNZbUlHOXdkR2x2Ym5NdWRtRnNkV1Z6SUNFOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ2MyVnNaaTV3ZFhOb0tIWmhiSFZsS1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpaV3htTG5CMWMyZ29leUJyWlhrNklHdGxlU3dnZG1Gc2RXVTZJSFpoYkhWbElIMHBYRzRnSUNBZ2ZWeHVJQ0I5S1Z4dWZWeHVYRzVTWldGa1UzUnlaV0Z0TG5CeWIzUnZkSGx3WlM1ZlpHVnpkSEp2ZVNBOUlHWjFibU4wYVc5dUlDaGxjbklzSUdOaGJHeGlZV05yS1NCN1hHNGdJSFJvYVhNdVgybDBaWEpoZEc5eUxtVnVaQ2htZFc1amRHbHZiaUFvWlhKeU1pa2dlMXh1SUNBZ0lHTmhiR3hpWVdOcktHVnljaUI4ZkNCbGNuSXlLVnh1SUNCOUtWeHVmVnh1SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1bWRXNWpkR2x2YmlCZmFXNW9aWEpwZEhOTWIyOXpaU2h6ZFdKRGJHRnpjeXdnYzNWd1pYSkRiR0Z6Y3lrZ2V5QnpkV0pEYkdGemN5NXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtITjFjR1Z5UTJ4aGMzTXVjSEp2ZEc5MGVYQmxLVHNnYzNWaVEyeGhjM011Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdjM1ZpUTJ4aGMzTTdJSE4xWWtOc1lYTnpMbDlmY0hKdmRHOWZYeUE5SUhOMWNHVnlRMnhoYzNNN0lIMWNibHh1ZG1GeUlHTnZaR1Z6SUQwZ2UzMDdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVVZ5Y205eVZIbHdaU2hqYjJSbExDQnRaWE56WVdkbExDQkNZWE5sS1NCN1hHNGdJR2xtSUNnaFFtRnpaU2tnZTF4dUlDQWdJRUpoYzJVZ1BTQkZjbkp2Y2p0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHZGxkRTFsYzNOaFoyVW9ZWEpuTVN3Z1lYSm5NaXdnWVhKbk15a2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdiV1Z6YzJGblpTQTlQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WlhOellXZGxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYldWemMyRm5aU2hoY21jeExDQmhjbWN5TENCaGNtY3pLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ1RtOWtaVVZ5Y205eUlEMWNiaUFnTHlvalgxOVFWVkpGWDE4cUwxeHVJQ0JtZFc1amRHbHZiaUFvWDBKaGMyVXBJSHRjYmlBZ0lDQmZhVzVvWlhKcGRITk1iMjl6WlNoT2IyUmxSWEp5YjNJc0lGOUNZWE5sS1R0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUU1dlpHVkZjbkp2Y2loaGNtY3hMQ0JoY21jeUxDQmhjbWN6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWDBKaGMyVXVZMkZzYkNoMGFHbHpMQ0JuWlhSTlpYTnpZV2RsS0dGeVp6RXNJR0Z5WnpJc0lHRnlaek1wS1NCOGZDQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQk9iMlJsUlhKeWIzSTdYRzRnSUgwb1FtRnpaU2s3WEc1Y2JpQWdUbTlrWlVWeWNtOXlMbkJ5YjNSdmRIbHdaUzV1WVcxbElEMGdRbUZ6WlM1dVlXMWxPMXh1SUNCT2IyUmxSWEp5YjNJdWNISnZkRzkwZVhCbExtTnZaR1VnUFNCamIyUmxPMXh1SUNCamIyUmxjMXRqYjJSbFhTQTlJRTV2WkdWRmNuSnZjanRjYm4wZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMjV2WkdWcWN5OXViMlJsTDJKc2IySXZkakV3TGpndU1DOXNhV0l2YVc1MFpYSnVZV3d2WlhKeWIzSnpMbXB6WEc1Y2JseHVablZ1WTNScGIyNGdiMjVsVDJZb1pYaHdaV04wWldRc0lIUm9hVzVuS1NCN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1Y0Y0dWamRHVmtLU2tnZTF4dUlDQWdJSFpoY2lCc1pXNGdQU0JsZUhCbFkzUmxaQzVzWlc1bmRHZzdYRzRnSUNBZ1pYaHdaV04wWldRZ1BTQmxlSEJsWTNSbFpDNXRZWEFvWm5WdVkzUnBiMjRnS0drcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCVGRISnBibWNvYVNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCcFppQW9iR1Z1SUQ0Z01pa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGd2liMjVsSUc5bUlGd2lMbU52Ym1OaGRDaDBhR2x1Wnl3Z1hDSWdYQ0lwTG1OdmJtTmhkQ2hsZUhCbFkzUmxaQzV6YkdsalpTZ3dMQ0JzWlc0Z0xTQXhLUzVxYjJsdUtDY3NJQ2NwTENCY0lpd2diM0lnWENJcElDc2daWGh3WldOMFpXUmJiR1Z1SUMwZ01WMDdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHNaVzRnUFQwOUlESXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmNJbTl1WlNCdlppQmNJaTVqYjI1allYUW9kR2hwYm1jc0lGd2lJRndpS1M1amIyNWpZWFFvWlhod1pXTjBaV1JiTUYwc0lGd2lJRzl5SUZ3aUtTNWpiMjVqWVhRb1pYaHdaV04wWldSYk1WMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWENKdlppQmNJaTVqYjI1allYUW9kR2hwYm1jc0lGd2lJRndpS1M1amIyNWpZWFFvWlhod1pXTjBaV1JiTUYwcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCeVpYUjFjbTRnWENKdlppQmNJaTVqYjI1allYUW9kR2hwYm1jc0lGd2lJRndpS1M1amIyNWpZWFFvVTNSeWFXNW5LR1Y0Y0dWamRHVmtLU2s3WEc0Z0lIMWNibjBnTHk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlUzUnlhVzVuTDNOMFlYSjBjMWRwZEdoY2JseHVYRzVtZFc1amRHbHZiaUJ6ZEdGeWRITlhhWFJvS0hOMGNpd2djMlZoY21Ob0xDQndiM01wSUh0Y2JpQWdjbVYwZFhKdUlITjBjaTV6ZFdKemRISW9JWEJ2Y3lCOGZDQndiM01nUENBd0lEOGdNQ0E2SUN0d2IzTXNJSE5sWVhKamFDNXNaVzVuZEdncElEMDlQU0J6WldGeVkyZzdYRzU5SUM4dklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwcGhkbUZUWTNKcGNIUXZVbVZtWlhKbGJtTmxMMGRzYjJKaGJGOVBZbXBsWTNSekwxTjBjbWx1Wnk5bGJtUnpWMmwwYUZ4dVhHNWNibVoxYm1OMGFXOXVJR1Z1WkhOWGFYUm9LSE4wY2l3Z2MyVmhjbU5vTENCMGFHbHpYMnhsYmlrZ2UxeHVJQ0JwWmlBb2RHaHBjMTlzWlc0Z1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNCMGFHbHpYMnhsYmlBK0lITjBjaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQjBhR2x6WDJ4bGJpQTlJSE4wY2k1c1pXNW5kR2c3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYzNSeUxuTjFZbk4wY21sdVp5aDBhR2x6WDJ4bGJpQXRJSE5sWVhKamFDNXNaVzVuZEdnc0lIUm9hWE5mYkdWdUtTQTlQVDBnYzJWaGNtTm9PMXh1ZlNBdkx5Qm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUtZWFpoVTJOeWFYQjBMMUpsWm1WeVpXNWpaUzlIYkc5aVlXeGZUMkpxWldOMGN5OVRkSEpwYm1jdmFXNWpiSFZrWlhOY2JseHVYRzVtZFc1amRHbHZiaUJwYm1Oc2RXUmxjeWh6ZEhJc0lITmxZWEpqYUN3Z2MzUmhjblFwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ6ZEdGeWRDQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0J6ZEdGeWRDQTlJREE3WEc0Z0lIMWNibHh1SUNCcFppQW9jM1JoY25RZ0t5QnpaV0Z5WTJndWJHVnVaM1JvSUQ0Z2MzUnlMbXhsYm1kMGFDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5TG1sdVpHVjRUMllvYzJWaGNtTm9MQ0J6ZEdGeWRDa2dJVDA5SUMweE8xeHVJQ0I5WEc1OVhHNWNibU55WldGMFpVVnljbTl5Vkhsd1pTZ25SVkpTWDBsT1ZrRk1TVVJmVDFCVVgxWkJURlZGSnl3Z1puVnVZM1JwYjI0Z0tHNWhiV1VzSUhaaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlBblZHaGxJSFpoYkhWbElGd2lKeUFySUhaaGJIVmxJQ3NnSjF3aUlHbHpJR2x1ZG1Gc2FXUWdabTl5SUc5d2RHbHZiaUJjSWljZ0t5QnVZVzFsSUNzZ0oxd2lKenRjYm4wc0lGUjVjR1ZGY25KdmNpazdYRzVqY21WaGRHVkZjbkp2Y2xSNWNHVW9KMFZTVWw5SlRsWkJURWxFWDBGU1IxOVVXVkJGSnl3Z1puVnVZM1JwYjI0Z0tHNWhiV1VzSUdWNGNHVmpkR1ZrTENCaFkzUjFZV3dwSUh0Y2JpQWdMeThnWkdWMFpYSnRhVzVsY2pvZ0oyMTFjM1FnWW1VbklHOXlJQ2R0ZFhOMElHNXZkQ0JpWlNkY2JpQWdkbUZ5SUdSbGRHVnliV2x1WlhJN1hHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGVIQmxZM1JsWkNBOVBUMGdKM04wY21sdVp5Y2dKaVlnYzNSaGNuUnpWMmwwYUNobGVIQmxZM1JsWkN3Z0oyNXZkQ0FuS1NrZ2UxeHVJQ0FnSUdSbGRHVnliV2x1WlhJZ1BTQW5iWFZ6ZENCdWIzUWdZbVVuTzF4dUlDQWdJR1Y0Y0dWamRHVmtJRDBnWlhod1pXTjBaV1F1Y21Wd2JHRmpaU2d2WG01dmRDQXZMQ0FuSnlrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1pHVjBaWEp0YVc1bGNpQTlJQ2R0ZFhOMElHSmxKenRjYmlBZ2ZWeHVYRzRnSUhaaGNpQnRjMmM3WEc1Y2JpQWdhV1lnS0dWdVpITlhhWFJvS0c1aGJXVXNJQ2NnWVhKbmRXMWxiblFuS1NrZ2UxeHVJQ0FnSUM4dklFWnZjaUJqWVhObGN5QnNhV3RsSUNkbWFYSnpkQ0JoY21kMWJXVnVkQ2RjYmlBZ0lDQnRjMmNnUFNCY0lsUm9aU0JjSWk1amIyNWpZWFFvYm1GdFpTd2dYQ0lnWENJcExtTnZibU5oZENoa1pYUmxjbTFwYm1WeUxDQmNJaUJjSWlrdVkyOXVZMkYwS0c5dVpVOW1LR1Y0Y0dWamRHVmtMQ0FuZEhsd1pTY3BLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ2RIbHdaU0E5SUdsdVkyeDFaR1Z6S0c1aGJXVXNJQ2N1SnlrZ1B5QW5jSEp2Y0dWeWRIa25JRG9nSjJGeVozVnRaVzUwSnp0Y2JpQWdJQ0J0YzJjZ1BTQmNJbFJvWlNCY1hGd2lYQ0l1WTI5dVkyRjBLRzVoYldVc0lGd2lYRnhjSWlCY0lpa3VZMjl1WTJGMEtIUjVjR1VzSUZ3aUlGd2lLUzVqYjI1allYUW9aR1YwWlhKdGFXNWxjaXdnWENJZ1hDSXBMbU52Ym1OaGRDaHZibVZQWmlobGVIQmxZM1JsWkN3Z0ozUjVjR1VuS1NrN1hHNGdJSDFjYmx4dUlDQnRjMmNnS3owZ1hDSXVJRkpsWTJWcGRtVmtJSFI1Y0dVZ1hDSXVZMjl1WTJGMEtIUjVjR1Z2WmlCaFkzUjFZV3dwTzF4dUlDQnlaWFIxY200Z2JYTm5PMXh1ZlN3Z1ZIbHdaVVZ5Y205eUtUdGNibU55WldGMFpVVnljbTl5Vkhsd1pTZ25SVkpTWDFOVVVrVkJUVjlRVlZOSVgwRkdWRVZTWDBWUFJpY3NJQ2R6ZEhKbFlXMHVjSFZ6YUNncElHRm1kR1Z5SUVWUFJpY3BPMXh1WTNKbFlYUmxSWEp5YjNKVWVYQmxLQ2RGVWxKZlRVVlVTRTlFWDA1UFZGOUpUVkJNUlUxRlRsUkZSQ2NzSUdaMWJtTjBhVzl1SUNodVlXMWxLU0I3WEc0Z0lISmxkSFZ5YmlBblZHaGxJQ2NnS3lCdVlXMWxJQ3NnSnlCdFpYUm9iMlFnYVhNZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrSnp0Y2JuMHBPMXh1WTNKbFlYUmxSWEp5YjNKVWVYQmxLQ2RGVWxKZlUxUlNSVUZOWDFCU1JVMUJWRlZTUlY5RFRFOVRSU2NzSUNkUWNtVnRZWFIxY21VZ1kyeHZjMlVuS1R0Y2JtTnlaV0YwWlVWeWNtOXlWSGx3WlNnblJWSlNYMU5VVWtWQlRWOUVSVk5VVWs5WlJVUW5MQ0JtZFc1amRHbHZiaUFvYm1GdFpTa2dlMXh1SUNCeVpYUjFjbTRnSjBOaGJtNXZkQ0JqWVd4c0lDY2dLeUJ1WVcxbElDc2dKeUJoWm5SbGNpQmhJSE4wY21WaGJTQjNZWE1nWkdWemRISnZlV1ZrSnp0Y2JuMHBPMXh1WTNKbFlYUmxSWEp5YjNKVWVYQmxLQ2RGVWxKZlRWVk1WRWxRVEVWZlEwRk1URUpCUTBzbkxDQW5RMkZzYkdKaFkyc2dZMkZzYkdWa0lHMTFiSFJwY0d4bElIUnBiV1Z6SnlrN1hHNWpjbVZoZEdWRmNuSnZjbFI1Y0dVb0owVlNVbDlUVkZKRlFVMWZRMEZPVGs5VVgxQkpVRVVuTENBblEyRnVibTkwSUhCcGNHVXNJRzV2ZENCeVpXRmtZV0pzWlNjcE8xeHVZM0psWVhSbFJYSnliM0pVZVhCbEtDZEZVbEpmVTFSU1JVRk5YMWRTU1ZSRlgwRkdWRVZTWDBWT1JDY3NJQ2QzY21sMFpTQmhablJsY2lCbGJtUW5LVHRjYm1OeVpXRjBaVVZ5Y205eVZIbHdaU2duUlZKU1gxTlVVa1ZCVFY5T1ZVeE1YMVpCVEZWRlV5Y3NJQ2ROWVhrZ2JtOTBJSGR5YVhSbElHNTFiR3dnZG1Gc2RXVnpJSFJ2SUhOMGNtVmhiU2NzSUZSNWNHVkZjbkp2Y2lrN1hHNWpjbVZoZEdWRmNuSnZjbFI1Y0dVb0owVlNVbDlWVGt0T1QxZE9YMFZPUTA5RVNVNUhKeXdnWm5WdVkzUnBiMjRnS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnSjFWdWEyNXZkMjRnWlc1amIyUnBibWM2SUNjZ0t5QmhjbWM3WEc1OUxDQlVlWEJsUlhKeWIzSXBPMXh1WTNKbFlYUmxSWEp5YjNKVWVYQmxLQ2RGVWxKZlUxUlNSVUZOWDFWT1UwaEpSbFJmUVVaVVJWSmZSVTVFWDBWV1JVNVVKeXdnSjNOMGNtVmhiUzUxYm5Ob2FXWjBLQ2tnWVdaMFpYSWdaVzVrSUdWMlpXNTBKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVqYjJSbGN5QTlJR052WkdWek8xeHVJaXdpSjNWelpTQnpkSEpwWTNRblhHNWNiblpoY2lCbGVIQmxjbWx0Wlc1MFlXeFhZWEp1YVc1bmN5QTlJRzVsZHlCVFpYUW9LVHRjYmx4dVpuVnVZM1JwYjI0Z1pXMXBkRVY0Y0dWeWFXMWxiblJoYkZkaGNtNXBibWNvWm1WaGRIVnlaU2tnZTF4dUlDQnBaaUFvWlhod1pYSnBiV1Z1ZEdGc1YyRnlibWx1WjNNdWFHRnpLR1psWVhSMWNtVXBLU0J5WlhSMWNtNDdYRzRnSUhaaGNpQnRjMmNnUFNCbVpXRjBkWEpsSUNzZ0p5QnBjeUJoYmlCbGVIQmxjbWx0Wlc1MFlXd2dabVZoZEhWeVpTNGdWR2hwY3lCbVpXRjBkWEpsSUdOdmRXeGtJQ2NnSzF4dUlDQWdJQ0FnSUNkamFHRnVaMlVnWVhRZ1lXNTVJSFJwYldVbk8xeHVJQ0JsZUhCbGNtbHRaVzUwWVd4WFlYSnVhVzVuY3k1aFpHUW9abVZoZEhWeVpTazdYRzRnSUhCeWIyTmxjM011WlcxcGRGZGhjbTVwYm1jb2JYTm5MQ0FuUlhod1pYSnBiV1Z1ZEdGc1YyRnlibWx1WnljcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIyOXdLQ2tnZTMxY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNdVpXMXBkRVY0Y0dWeWFXMWxiblJoYkZkaGNtNXBibWNnUFNCd2NtOWpaWE56TG1WdGFYUlhZWEp1YVc1blhHNGdJRDhnWlcxcGRFVjRjR1Z5YVcxbGJuUmhiRmRoY201cGJtZGNiaUFnT2lCdWIyOXdPMXh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzR2THlCaElHUjFjR3hsZUNCemRISmxZVzBnYVhNZ2FuVnpkQ0JoSUhOMGNtVmhiU0IwYUdGMElHbHpJR0p2ZEdnZ2NtVmhaR0ZpYkdVZ1lXNWtJSGR5YVhSaFlteGxMbHh1THk4Z1UybHVZMlVnU2xNZ1pHOWxjMjRuZENCb1lYWmxJRzExYkhScGNHeGxJSEJ5YjNSdmRIbHdZV3dnYVc1b1pYSnBkR0Z1WTJVc0lIUm9hWE1nWTJ4aGMzTmNiaTh2SUhCeWIzUnZkSGx3WVd4c2VTQnBibWhsY21sMGN5Qm1jbTl0SUZKbFlXUmhZbXhsTENCaGJtUWdkR2hsYmlCd1lYSmhjMmwwYVdOaGJHeDVJR1p5YjIxY2JpOHZJRmR5YVhSaFlteGxMbHh1SjNWelpTQnpkSEpwWTNRbk8xeHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlHOWlhbVZqZEV0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3lCOGZDQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNWNiaUFnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYWlrZ2UxeHVJQ0FnSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR3RsZVhNN1hHNTlPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkVkWEJzWlhnN1hHNWNiblpoY2lCU1pXRmtZV0pzWlNBOUlISmxjWFZwY21Vb0p5NHZYM04wY21WaGJWOXlaV0ZrWVdKc1pTY3BPMXh1WEc1MllYSWdWM0pwZEdGaWJHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRISmxZVzFmZDNKcGRHRmliR1VuS1R0Y2JseHVjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LU2hFZFhCc1pYZ3NJRkpsWVdSaFlteGxLVHRjYmx4dWUxeHVJQ0F2THlCQmJHeHZkeUIwYUdVZ2EyVjVjeUJoY25KaGVTQjBieUJpWlNCSFF5ZGxaQzVjYmlBZ2RtRnlJR3RsZVhNZ1BTQnZZbXBsWTNSTFpYbHpLRmR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaU2s3WEc1Y2JpQWdabTl5SUNoMllYSWdkaUE5SURBN0lIWWdQQ0JyWlhsekxteGxibWQwYURzZ2Rpc3JLU0I3WEc0Z0lDQWdkbUZ5SUcxbGRHaHZaQ0E5SUd0bGVYTmJkbDA3WEc0Z0lDQWdhV1lnS0NGRWRYQnNaWGd1Y0hKdmRHOTBlWEJsVzIxbGRHaHZaRjBwSUVSMWNHeGxlQzV3Y205MGIzUjVjR1ZiYldWMGFHOWtYU0E5SUZkeWFYUmhZbXhsTG5CeWIzUnZkSGx3WlZ0dFpYUm9iMlJkTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlFUjFjR3hsZUNodmNIUnBiMjV6S1NCN1hHNGdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCRWRYQnNaWGdwS1NCeVpYUjFjbTRnYm1WM0lFUjFjR3hsZUNodmNIUnBiMjV6S1R0Y2JpQWdVbVZoWkdGaWJHVXVZMkZzYkNoMGFHbHpMQ0J2Y0hScGIyNXpLVHRjYmlBZ1YzSnBkR0ZpYkdVdVkyRnNiQ2gwYUdsekxDQnZjSFJwYjI1ektUdGNiaUFnZEdocGN5NWhiR3h2ZDBoaGJHWlBjR1Z1SUQwZ2RISjFaVHRjYmx4dUlDQnBaaUFvYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNodmNIUnBiMjV6TG5KbFlXUmhZbXhsSUQwOVBTQm1ZV3h6WlNrZ2RHaHBjeTV5WldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbmR5YVhSaFlteGxJRDA5UFNCbVlXeHpaU2tnZEdocGN5NTNjbWwwWVdKc1pTQTlJR1poYkhObE8xeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVZV3hzYjNkSVlXeG1UM0JsYmlBOVBUMGdabUZzYzJVcElIdGNiaUFnSUNBZ0lIUm9hWE11WVd4c2IzZElZV3htVDNCbGJpQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2RHaHBjeTV2Ym1ObEtDZGxibVFuTENCdmJtVnVaQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaEVkWEJzWlhndWNISnZkRzkwZVhCbExDQW5kM0pwZEdGaWJHVklhV2RvVjJGMFpYSk5ZWEpySnl3Z2UxeHVJQ0F2THlCdFlXdHBibWNnYVhRZ1pYaHdiR2xqYVhRZ2RHaHBjeUJ3Y205d1pYSjBlU0JwY3lCdWIzUWdaVzUxYldWeVlXSnNaVnh1SUNBdkx5QmlaV05oZFhObElHOTBhR1Z5ZDJselpTQnpiMjFsSUhCeWIzUnZkSGx3WlNCdFlXNXBjSFZzWVhScGIyNGdhVzVjYmlBZ0x5OGdkWE5sY214aGJtUWdkMmxzYkNCbVlXbHNYRzRnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQm5aWFE2SUdaMWJtTjBhVzl1SUdkbGRDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNW9hV2RvVjJGMFpYSk5ZWEpyTzF4dUlDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hFZFhCc1pYZ3VjSEp2ZEc5MGVYQmxMQ0FuZDNKcGRHRmliR1ZDZFdabVpYSW5MQ0I3WEc0Z0lDOHZJRzFoYTJsdVp5QnBkQ0JsZUhCc2FXTnBkQ0IwYUdseklIQnliM0JsY25SNUlHbHpJRzV2ZENCbGJuVnRaWEpoWW14bFhHNGdJQzh2SUdKbFkyRjFjMlVnYjNSb1pYSjNhWE5sSUhOdmJXVWdjSEp2ZEc5MGVYQmxJRzFoYm1sd2RXeGhkR2x2YmlCcGJseHVJQ0F2THlCMWMyVnliR0Z1WkNCM2FXeHNJR1poYVd4Y2JpQWdaVzUxYldWeVlXSnNaVG9nWm1Gc2MyVXNYRzRnSUdkbGREb2dablZ1WTNScGIyNGdaMlYwS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsSUNZbUlIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaMlYwUW5WbVptVnlLQ2s3WEc0Z0lIMWNibjBwTzF4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRVIxY0d4bGVDNXdjbTkwYjNSNWNHVXNJQ2QzY21sMFlXSnNaVXhsYm1kMGFDY3NJSHRjYmlBZ0x5OGdiV0ZyYVc1bklHbDBJR1Y0Y0d4cFkybDBJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FYTWdibTkwSUdWdWRXMWxjbUZpYkdWY2JpQWdMeThnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnYzI5dFpTQndjbTkwYjNSNWNHVWdiV0Z1YVhCMWJHRjBhVzl1SUdsdVhHNGdJQzh2SUhWelpYSnNZVzVrSUhkcGJHd2dabUZwYkZ4dUlDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQm5aWFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1V1YkdWdVozUm9PMXh1SUNCOVhHNTlLVHNnTHk4Z2RHaGxJRzV2TFdoaGJHWXRiM0JsYmlCbGJtWnZjbU5sY2x4dVhHNW1kVzVqZEdsdmJpQnZibVZ1WkNncElIdGNiaUFnTHk4Z1NXWWdkR2hsSUhkeWFYUmhZbXhsSUhOcFpHVWdaVzVrWldRc0lIUm9aVzRnZDJVbmNtVWdiMnN1WEc0Z0lHbG1JQ2gwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1WdVpHVmtLU0J5WlhSMWNtNDdJQzh2SUc1dklHMXZjbVVnWkdGMFlTQmpZVzRnWW1VZ2QzSnBkSFJsYmk1Y2JpQWdMeThnUW5WMElHRnNiRzkzSUcxdmNtVWdkM0pwZEdWeklIUnZJR2hoY0hCbGJpQnBiaUIwYUdseklIUnBZMnN1WEc1Y2JpQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aHZia1Z1WkU1VUxDQjBhR2x6S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYjI1RmJtUk9WQ2h6Wld4bUtTQjdYRzRnSUhObGJHWXVaVzVrS0NrN1hHNTlYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaEVkWEJzWlhndWNISnZkRzkwZVhCbExDQW5aR1Z6ZEhKdmVXVmtKeXdnZTF4dUlDQXZMeUJ0WVd0cGJtY2dhWFFnWlhod2JHbGphWFFnZEdocGN5QndjbTl3WlhKMGVTQnBjeUJ1YjNRZ1pXNTFiV1Z5WVdKc1pWeHVJQ0F2THlCaVpXTmhkWE5sSUc5MGFHVnlkMmx6WlNCemIyMWxJSEJ5YjNSdmRIbHdaU0J0WVc1cGNIVnNZWFJwYjI0Z2FXNWNiaUFnTHk4Z2RYTmxjbXhoYm1RZ2QybHNiQ0JtWVdsc1hHNGdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNCblpYUTZJR1oxYm1OMGFXOXVJR2RsZENncElIdGNiaUFnSUNCcFppQW9kR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaU0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0FtSmlCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpEdGNiaUFnZlN4Y2JpQWdjMlYwT2lCbWRXNWpkR2x2YmlCelpYUW9kbUZzZFdVcElIdGNiaUFnSUNBdkx5QjNaU0JwWjI1dmNtVWdkR2hsSUhaaGJIVmxJR2xtSUhSb1pTQnpkSEpsWVcxY2JpQWdJQ0F2THlCb1lYTWdibTkwSUdKbFpXNGdhVzVwZEdsaGJHbDZaV1FnZVdWMFhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5SUM4dklHSmhZMnQzWVhKa0lHTnZiWEJoZEdsaWFXeHBkSGtzSUhSb1pTQjFjMlZ5SUdseklHVjRjR3hwWTJsMGJIbGNiaUFnSUNBdkx5QnRZVzVoWjJsdVp5QmtaWE4wY205NVpXUmNibHh1WEc0Z0lDQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1FnUFNCMllXeDFaVHRjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUhaaGJIVmxPMXh1SUNCOVhHNTlLVHNpTENJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNiaTh2SUdFZ2NHRnpjM1JvY205MVoyZ2djM1J5WldGdExseHVMeThnWW1GemFXTmhiR3g1SUdwMWMzUWdkR2hsSUcxdmMzUWdiV2x1YVcxaGJDQnpiM0owSUc5bUlGUnlZVzV6Wm05eWJTQnpkSEpsWVcwdVhHNHZMeUJGZG1WeWVTQjNjbWwwZEdWdUlHTm9kVzVySUdkbGRITWdiM1YwY0hWMElHRnpMV2x6TGx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZCaGMzTlVhSEp2ZFdkb08xeHVYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeVpXRnRYM1J5WVc1elptOXliU2NwTzF4dVhHNXlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BLRkJoYzNOVWFISnZkV2RvTENCVWNtRnVjMlp2Y20wcE8xeHVYRzVtZFc1amRHbHZiaUJRWVhOelZHaHliM1ZuYUNodmNIUnBiMjV6S1NCN1hHNGdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCUVlYTnpWR2h5YjNWbmFDa3BJSEpsZEhWeWJpQnVaWGNnVUdGemMxUm9jbTkxWjJnb2IzQjBhVzl1Y3lrN1hHNGdJRlJ5WVc1elptOXliUzVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dWZWeHVYRzVRWVhOelZHaHliM1ZuYUM1d2NtOTBiM1I1Y0dVdVgzUnlZVzV6Wm05eWJTQTlJR1oxYm1OMGFXOXVJQ2hqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJR05pS0c1MWJHd3NJR05vZFc1cktUdGNibjA3SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzRuZFhObElITjBjbWxqZENjN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdVbVZoWkdGaWJHVTdYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1WEc1MllYSWdSSFZ3YkdWNE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmxKbFlXUmhZbXhsTGxKbFlXUmhZbXhsVTNSaGRHVWdQU0JTWldGa1lXSnNaVk4wWVhSbE8xeHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlFVkZJRDBnY21WeGRXbHlaU2duWlhabGJuUnpKeWt1UlhabGJuUkZiV2wwZEdWeU8xeHVYRzUyWVhJZ1JVVnNhWE4wWlc1bGNrTnZkVzUwSUQwZ1puVnVZM1JwYjI0Z1JVVnNhWE4wWlc1bGNrTnZkVzUwS0dWdGFYUjBaWElzSUhSNWNHVXBJSHRjYmlBZ2NtVjBkWEp1SUdWdGFYUjBaWEl1YkdsemRHVnVaWEp6S0hSNWNHVXBMbXhsYm1kMGFEdGNibjA3WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1WEc1MllYSWdVM1J5WldGdElEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzl6ZEhKbFlXMXpMM04wY21WaGJTY3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JseHVkbUZ5SUVKMVptWmxjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaWNwTGtKMVptWmxjanRjYmx4dWRtRnlJRTkxY2xWcGJuUTRRWEp5WVhrZ1BTQm5iRzlpWVd3dVZXbHVkRGhCY25KaGVTQjhmQ0JtZFc1amRHbHZiaUFvS1NCN2ZUdGNibHh1Wm5WdVkzUnBiMjRnWDNWcGJuUTRRWEp5WVhsVWIwSjFabVpsY2loamFIVnVheWtnZTF4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1aeWIyMG9ZMmgxYm1zcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmFYTlZhVzUwT0VGeWNtRjVLRzlpYWlrZ2UxeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUxtbHpRblZtWm1WeUtHOWlhaWtnZkh3Z2IySnFJR2x1YzNSaGJtTmxiMllnVDNWeVZXbHVkRGhCY25KaGVUdGNibjFjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JseHVkbUZ5SUdSbFluVm5WWFJwYkNBOUlISmxjWFZwY21Vb0ozVjBhV3duS1R0Y2JseHVkbUZ5SUdSbFluVm5PMXh1WEc1cFppQW9aR1ZpZFdkVmRHbHNJQ1ltSUdSbFluVm5WWFJwYkM1a1pXSjFaMnh2WnlrZ2UxeHVJQ0JrWldKMVp5QTlJR1JsWW5WblZYUnBiQzVrWldKMVoyeHZaeWduYzNSeVpXRnRKeWs3WEc1OUlHVnNjMlVnZTF4dUlDQmtaV0oxWnlBOUlHWjFibU4wYVc5dUlHUmxZblZuS0NrZ2UzMDdYRzU5WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVYRzUyWVhJZ1FuVm1abVZ5VEdsemRDQTlJSEpsY1hWcGNtVW9KeTR2YVc1MFpYSnVZV3d2YzNSeVpXRnRjeTlpZFdabVpYSmZiR2x6ZENjcE8xeHVYRzUyWVhJZ1pHVnpkSEp2ZVVsdGNHd2dQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDNOMGNtVmhiWE12WkdWemRISnZlU2NwTzF4dVhHNTJZWElnWDNKbGNYVnBjbVVnUFNCeVpYRjFhWEpsS0NjdUwybHVkR1Z5Ym1Gc0wzTjBjbVZoYlhNdmMzUmhkR1VuS1N4Y2JpQWdJQ0JuWlhSSWFXZG9WMkYwWlhKTllYSnJJRDBnWDNKbGNYVnBjbVV1WjJWMFNHbG5hRmRoZEdWeVRXRnlhenRjYmx4dWRtRnlJRjl5WlhGMWFYSmxKR052WkdWeklEMGdjbVZ4ZFdseVpTZ25MaTR2WlhKeWIzSnpKeWt1WTI5a1pYTXNYRzRnSUNBZ1JWSlNYMGxPVmtGTVNVUmZRVkpIWDFSWlVFVWdQU0JmY21WeGRXbHlaU1JqYjJSbGN5NUZVbEpmU1U1V1FVeEpSRjlCVWtkZlZGbFFSU3hjYmlBZ0lDQkZVbEpmVTFSU1JVRk5YMUJWVTBoZlFVWlVSVkpmUlU5R0lEMGdYM0psY1hWcGNtVWtZMjlrWlhNdVJWSlNYMU5VVWtWQlRWOVFWVk5JWDBGR1ZFVlNYMFZQUml4Y2JpQWdJQ0JGVWxKZlRVVlVTRTlFWDA1UFZGOUpUVkJNUlUxRlRsUkZSQ0E5SUY5eVpYRjFhWEpsSkdOdlpHVnpMa1ZTVWw5TlJWUklUMFJmVGs5VVgwbE5VRXhGVFVWT1ZFVkVMRnh1SUNBZ0lFVlNVbDlUVkZKRlFVMWZWVTVUU0VsR1ZGOUJSbFJGVWw5RlRrUmZSVlpGVGxRZ1BTQmZjbVZ4ZFdseVpTUmpiMlJsY3k1RlVsSmZVMVJTUlVGTlgxVk9VMGhKUmxSZlFVWlVSVkpmUlU1RVgwVldSVTVVTzF4dVhHNTJZWElnWDNKbGNYVnBjbVV5SUQwZ2NtVnhkV2x5WlNnbkxpNHZaWGh3WlhKcGJXVnVkR0ZzVjJGeWJtbHVaeWNwTEZ4dUlDQWdJR1Z0YVhSRmVIQmxjbWx0Wlc1MFlXeFhZWEp1YVc1bklEMGdYM0psY1hWcGNtVXlMbVZ0YVhSRmVIQmxjbWx0Wlc1MFlXeFhZWEp1YVc1bk95QXZMeUJNWVhwNUlHeHZZV1JsWkNCMGJ5QnBiWEJ5YjNabElIUm9aU0J6ZEdGeWRIVndJSEJsY21admNtMWhibU5sTGx4dVhHNWNiblpoY2lCVGRISnBibWRFWldOdlpHVnlPMXh1ZG1GeUlHTnlaV0YwWlZKbFlXUmhZbXhsVTNSeVpXRnRRWE41Ym1OSmRHVnlZWFJ2Y2p0Y2JseHVjbVZ4ZFdseVpTZ25hVzVvWlhKcGRITW5LU2hTWldGa1lXSnNaU3dnVTNSeVpXRnRLVHRjYmx4dWRtRnlJR3RRY205NGVVVjJaVzUwY3lBOUlGc25aWEp5YjNJbkxDQW5ZMnh2YzJVbkxDQW5aR1Z6ZEhKdmVTY3NJQ2R3WVhWelpTY3NJQ2R5WlhOMWJXVW5YVHRjYmx4dVpuVnVZM1JwYjI0Z2NISmxjR1Z1WkV4cGMzUmxibVZ5S0dWdGFYUjBaWElzSUdWMlpXNTBMQ0JtYmlrZ2UxeHVJQ0F2THlCVFlXUnNlU0IwYUdseklHbHpJRzV2ZENCallXTm9aV0ZpYkdVZ1lYTWdjMjl0WlNCc2FXSnlZWEpwWlhNZ1luVnVaR3hsSUhSb1pXbHlJRzkzYmx4dUlDQXZMeUJsZG1WdWRDQmxiV2wwZEdWeUlHbHRjR3hsYldWdWRHRjBhVzl1SUhkcGRHZ2dkR2hsYlM1Y2JpQWdhV1lnS0hSNWNHVnZaaUJsYldsMGRHVnlMbkJ5WlhCbGJtUk1hWE4wWlc1bGNpQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2NtVjBkWEp1SUdWdGFYUjBaWEl1Y0hKbGNHVnVaRXhwYzNSbGJtVnlLR1YyWlc1MExDQm1iaWs3SUM4dklGUm9hWE1nYVhNZ1lTQm9ZV05ySUhSdklHMWhhMlVnYzNWeVpTQjBhR0YwSUc5MWNpQmxjbkp2Y2lCb1lXNWtiR1Z5SUdseklHRjBkR0ZqYUdWa0lHSmxabTl5WlNCaGJubGNiaUFnTHk4Z2RYTmxjbXhoYm1RZ2IyNWxjeTRnSUU1RlZrVlNJRVJQSUZSSVNWTXVJRlJvYVhNZ2FYTWdhR1Z5WlNCdmJteDVJR0psWTJGMWMyVWdkR2hwY3lCamIyUmxJRzVsWldSelhHNGdJQzh2SUhSdklHTnZiblJwYm5WbElIUnZJSGR2Y21zZ2QybDBhQ0J2YkdSbGNpQjJaWEp6YVc5dWN5QnZaaUJPYjJSbExtcHpJSFJvWVhRZ1pHOGdibTkwSUdsdVkyeDFaR1ZjYmlBZ0x5OGdkR2hsSUhCeVpYQmxibVJNYVhOMFpXNWxjaWdwSUcxbGRHaHZaQzRnVkdobElHZHZZV3dnYVhNZ2RHOGdaWFpsYm5SMVlXeHNlU0J5WlcxdmRtVWdkR2hwY3lCb1lXTnJMbHh1WEc0Z0lHbG1JQ2doWlcxcGRIUmxjaTVmWlhabGJuUnpJSHg4SUNGbGJXbDBkR1Z5TGw5bGRtVnVkSE5iWlhabGJuUmRLU0JsYldsMGRHVnlMbTl1S0dWMlpXNTBMQ0JtYmlrN1pXeHpaU0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2hsYldsMGRHVnlMbDlsZG1WdWRITmJaWFpsYm5SZEtTa2daVzFwZEhSbGNpNWZaWFpsYm5SelcyVjJaVzUwWFM1MWJuTm9hV1owS0dadUtUdGxiSE5sSUdWdGFYUjBaWEl1WDJWMlpXNTBjMXRsZG1WdWRGMGdQU0JiWm00c0lHVnRhWFIwWlhJdVgyVjJaVzUwYzF0bGRtVnVkRjFkTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJTWldGa1lXSnNaVk4wWVhSbEtHOXdkR2x2Ym5Nc0lITjBjbVZoYlN3Z2FYTkVkWEJzWlhncElIdGNiaUFnUkhWd2JHVjRJRDBnUkhWd2JHVjRJSHg4SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5a2RYQnNaWGduS1R0Y2JpQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMwN0lDOHZJRVIxY0d4bGVDQnpkSEpsWVcxeklHRnlaU0JpYjNSb0lISmxZV1JoWW14bElHRnVaQ0IzY21sMFlXSnNaU3dnWW5WMElITm9ZWEpsWEc0Z0lDOHZJSFJvWlNCellXMWxJRzl3ZEdsdmJuTWdiMkpxWldOMExseHVJQ0F2THlCSWIzZGxkbVZ5TENCemIyMWxJR05oYzJWeklISmxjWFZwY21VZ2MyVjBkR2x1WnlCdmNIUnBiMjV6SUhSdklHUnBabVpsY21WdWRGeHVJQ0F2THlCMllXeDFaWE1nWm05eUlIUm9aU0J5WldGa1lXSnNaU0JoYm1RZ2RHaGxJSGR5YVhSaFlteGxJSE5wWkdWeklHOW1JSFJvWlNCa2RYQnNaWGdnYzNSeVpXRnRMbHh1SUNBdkx5QlVhR1Z6WlNCdmNIUnBiMjV6SUdOaGJpQmlaU0J3Y205MmFXUmxaQ0J6WlhCaGNtRjBaV3g1SUdGeklISmxZV1JoWW14bFdGaFlJR0Z1WkNCM2NtbDBZV0pzWlZoWVdDNWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHbHpSSFZ3YkdWNElDRTlQU0FuWW05dmJHVmhiaWNwSUdselJIVndiR1Y0SUQwZ2MzUnlaV0Z0SUdsdWMzUmhibU5sYjJZZ1JIVndiR1Y0T3lBdkx5QnZZbXBsWTNRZ2MzUnlaV0Z0SUdac1lXY3VJRlZ6WldRZ2RHOGdiV0ZyWlNCeVpXRmtLRzRwSUdsbmJtOXlaU0J1SUdGdVpDQjBiMXh1SUNBdkx5QnRZV3RsSUdGc2JDQjBhR1VnWW5WbVptVnlJRzFsY21kcGJtY2dZVzVrSUd4bGJtZDBhQ0JqYUdWamEzTWdaMjhnWVhkaGVWeHVYRzRnSUhSb2FYTXViMkpxWldOMFRXOWtaU0E5SUNFaGIzQjBhVzl1Y3k1dlltcGxZM1JOYjJSbE8xeHVJQ0JwWmlBb2FYTkVkWEJzWlhncElIUm9hWE11YjJKcVpXTjBUVzlrWlNBOUlIUm9hWE11YjJKcVpXTjBUVzlrWlNCOGZDQWhJVzl3ZEdsdmJuTXVjbVZoWkdGaWJHVlBZbXBsWTNSTmIyUmxPeUF2THlCMGFHVWdjRzlwYm5RZ1lYUWdkMmhwWTJnZ2FYUWdjM1J2Y0hNZ1kyRnNiR2x1WnlCZmNtVmhaQ2dwSUhSdklHWnBiR3dnZEdobElHSjFabVpsY2x4dUlDQXZMeUJPYjNSbE9pQXdJR2x6SUdFZ2RtRnNhV1FnZG1Gc2RXVXNJRzFsWVc1eklGd2laRzl1SjNRZ1kyRnNiQ0JmY21WaFpDQndjbVZsYlhCMGFYWmxiSGtnWlhabGNsd2lYRzVjYmlBZ2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKcklEMGdaMlYwU0dsbmFGZGhkR1Z5VFdGeWF5aDBhR2x6TENCdmNIUnBiMjV6TENBbmNtVmhaR0ZpYkdWSWFXZG9WMkYwWlhKTllYSnJKeXdnYVhORWRYQnNaWGdwT3lBdkx5QkJJR3hwYm10bFpDQnNhWE4wSUdseklIVnpaV1FnZEc4Z2MzUnZjbVVnWkdGMFlTQmphSFZ1YTNNZ2FXNXpkR1ZoWkNCdlppQmhiaUJoY25KaGVTQmlaV05oZFhObElIUm9aVnh1SUNBdkx5QnNhVzVyWldRZ2JHbHpkQ0JqWVc0Z2NtVnRiM1psSUdWc1pXMWxiblJ6SUdaeWIyMGdkR2hsSUdKbFoybHVibWx1WnlCbVlYTjBaWElnZEdoaGJseHVJQ0F2THlCaGNuSmhlUzV6YUdsbWRDZ3BYRzVjYmlBZ2RHaHBjeTVpZFdabVpYSWdQU0J1WlhjZ1FuVm1abVZ5VEdsemRDZ3BPMXh1SUNCMGFHbHpMbXhsYm1kMGFDQTlJREE3WEc0Z0lIUm9hWE11Y0dsd1pYTWdQU0J1ZFd4c08xeHVJQ0IwYUdsekxuQnBjR1Z6UTI5MWJuUWdQU0F3TzF4dUlDQjBhR2x6TG1ac2IzZHBibWNnUFNCdWRXeHNPMXh1SUNCMGFHbHpMbVZ1WkdWa0lEMGdabUZzYzJVN1hHNGdJSFJvYVhNdVpXNWtSVzFwZEhSbFpDQTlJR1poYkhObE8xeHVJQ0IwYUdsekxuSmxZV1JwYm1jZ1BTQm1ZV3h6WlRzZ0x5OGdZU0JtYkdGbklIUnZJR0psSUdGaWJHVWdkRzhnZEdWc2JDQnBaaUIwYUdVZ1pYWmxiblFnSjNKbFlXUmhZbXhsSnk4blpHRjBZU2NnYVhNZ1pXMXBkSFJsWkZ4dUlDQXZMeUJwYlcxbFpHbGhkR1ZzZVN3Z2IzSWdiMjRnWVNCc1lYUmxjaUIwYVdOckxpQWdWMlVnYzJWMElIUm9hWE1nZEc4Z2RISjFaU0JoZENCbWFYSnpkQ3dnWW1WallYVnpaVnh1SUNBdkx5QmhibmtnWVdOMGFXOXVjeUIwYUdGMElITm9iM1ZzWkc0bmRDQm9ZWEJ3Wlc0Z2RXNTBhV3dnWENKc1lYUmxjbHdpSUhOb2IzVnNaQ0JuWlc1bGNtRnNiSGtnWVd4emIxeHVJQ0F2THlCdWIzUWdhR0Z3Y0dWdUlHSmxabTl5WlNCMGFHVWdabWx5YzNRZ2NtVmhaQ0JqWVd4c0xseHVYRzRnSUhSb2FYTXVjM2x1WXlBOUlIUnlkV1U3SUM4dklIZG9aVzVsZG1WeUlIZGxJSEpsZEhWeWJpQnVkV3hzTENCMGFHVnVJSGRsSUhObGRDQmhJR1pzWVdjZ2RHOGdjMkY1WEc0Z0lDOHZJSFJvWVhRZ2QyVW5jbVVnWVhkaGFYUnBibWNnWVNBbmNtVmhaR0ZpYkdVbklHVjJaVzUwSUdWdGFYTnphVzl1TGx4dVhHNGdJSFJvYVhNdWJtVmxaRkpsWVdSaFlteGxJRDBnWm1Gc2MyVTdYRzRnSUhSb2FYTXVaVzFwZEhSbFpGSmxZV1JoWW14bElEMGdabUZzYzJVN1hHNGdJSFJvYVhNdWNtVmhaR0ZpYkdWTWFYTjBaVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1eVpYTjFiV1ZUWTJobFpIVnNaV1FnUFNCbVlXeHpaVHNnTHk4Z1UyaHZkV3hrSUdOc2IzTmxJR0psSUdWdGFYUjBaV1FnYjI0Z1pHVnpkSEp2ZVM0Z1JHVm1ZWFZzZEhNZ2RHOGdkSEoxWlM1Y2JseHVJQ0IwYUdsekxtVnRhWFJEYkc5elpTQTlJRzl3ZEdsdmJuTXVaVzFwZEVOc2IzTmxJQ0U5UFNCbVlXeHpaVHNnTHk4Z2FHRnpJR2wwSUdKbFpXNGdaR1Z6ZEhKdmVXVmtYRzVjYmlBZ2RHaHBjeTVrWlhOMGNtOTVaV1FnUFNCbVlXeHpaVHNnTHk4Z1EzSjVjSFJ2SUdseklHdHBibVFnYjJZZ2IyeGtJR0Z1WkNCamNuVnpkSGt1SUNCSWFYTjBiM0pwWTJGc2JIa3NJR2wwY3lCa1pXWmhkV3gwSUhOMGNtbHVaMXh1SUNBdkx5QmxibU52WkdsdVp5QnBjeUFuWW1sdVlYSjVKeUJ6YnlCM1pTQm9ZWFpsSUhSdklHMWhhMlVnZEdocGN5QmpiMjVtYVdkMWNtRmliR1V1WEc0Z0lDOHZJRVYyWlhKNWRHaHBibWNnWld4elpTQnBiaUIwYUdVZ2RXNXBkbVZ5YzJVZ2RYTmxjeUFuZFhSbU9DY3NJSFJvYjNWbmFDNWNibHh1SUNCMGFHbHpMbVJsWm1GMWJIUkZibU52WkdsdVp5QTlJRzl3ZEdsdmJuTXVaR1ZtWVhWc2RFVnVZMjlrYVc1bklIeDhJQ2QxZEdZNEp6c2dMeThnZEdobElHNTFiV0psY2lCdlppQjNjbWwwWlhKeklIUm9ZWFFnWVhKbElHRjNZV2wwYVc1bklHRWdaSEpoYVc0Z1pYWmxiblFnYVc0Z0xuQnBjR1VvS1hOY2JseHVJQ0IwYUdsekxtRjNZV2wwUkhKaGFXNGdQU0F3T3lBdkx5QnBaaUIwY25WbExDQmhJRzFoZVdKbFVtVmhaRTF2Y21VZ2FHRnpJR0psWlc0Z2MyTm9aV1IxYkdWa1hHNWNiaUFnZEdocGN5NXlaV0ZrYVc1blRXOXlaU0E5SUdaaGJITmxPMXh1SUNCMGFHbHpMbVJsWTI5a1pYSWdQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JseHVJQ0JwWmlBb2IzQjBhVzl1Y3k1bGJtTnZaR2x1WnlrZ2UxeHVJQ0FnSUdsbUlDZ2hVM1J5YVc1blJHVmpiMlJsY2lrZ1UzUnlhVzVuUkdWamIyUmxjaUE5SUhKbGNYVnBjbVVvSjNOMGNtbHVaMTlrWldOdlpHVnlMeWNwTGxOMGNtbHVaMFJsWTI5a1pYSTdYRzRnSUNBZ2RHaHBjeTVrWldOdlpHVnlJRDBnYm1WM0lGTjBjbWx1WjBSbFkyOWtaWElvYjNCMGFXOXVjeTVsYm1OdlpHbHVaeWs3WEc0Z0lDQWdkR2hwY3k1bGJtTnZaR2x1WnlBOUlHOXdkR2x2Ym5NdVpXNWpiMlJwYm1jN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdVbVZoWkdGaWJHVW9iM0IwYVc5dWN5a2dlMXh1SUNCRWRYQnNaWGdnUFNCRWRYQnNaWGdnZkh3Z2NtVnhkV2x5WlNnbkxpOWZjM1J5WldGdFgyUjFjR3hsZUNjcE8xeHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1VtVmhaR0ZpYkdVcEtTQnlaWFIxY200Z2JtVjNJRkpsWVdSaFlteGxLRzl3ZEdsdmJuTXBPeUF2THlCRGFHVmphMmx1WnlCbWIzSWdZU0JUZEhKbFlXMHVSSFZ3YkdWNElHbHVjM1JoYm1ObElHbHpJR1poYzNSbGNpQm9aWEpsSUdsdWMzUmxZV1FnYjJZZ2FXNXphV1JsWEc0Z0lDOHZJSFJvWlNCU1pXRmtZV0pzWlZOMFlYUmxJR052Ym5OMGNuVmpkRzl5TENCaGRDQnNaV0Z6ZENCM2FYUm9JRlk0SURZdU5WeHVYRzRnSUhaaGNpQnBjMFIxY0d4bGVDQTlJSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkVkWEJzWlhnN1hHNGdJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VnUFNCdVpYY2dVbVZoWkdGaWJHVlRkR0YwWlNodmNIUnBiMjV6TENCMGFHbHpMQ0JwYzBSMWNHeGxlQ2s3SUM4dklHeGxaMkZqZVZ4dVhHNGdJSFJvYVhNdWNtVmhaR0ZpYkdVZ1BTQjBjblZsTzF4dVhHNGdJR2xtSUNodmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG5KbFlXUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDNKbFlXUWdQU0J2Y0hScGIyNXpMbkpsWVdRN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG1SbGMzUnliM2tnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSFJvYVhNdVgyUmxjM1J5YjNrZ1BTQnZjSFJwYjI1ekxtUmxjM1J5YjNrN1hHNGdJSDFjYmx4dUlDQlRkSEpsWVcwdVkyRnNiQ2gwYUdsektUdGNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRkpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjJSbGMzUnliM2xsWkNjc0lIdGNiaUFnTHk4Z2JXRnJhVzVuSUdsMElHVjRjR3hwWTJsMElIUm9hWE1nY0hKdmNHVnlkSGtnYVhNZ2JtOTBJR1Z1ZFcxbGNtRmliR1ZjYmlBZ0x5OGdZbVZqWVhWelpTQnZkR2hsY25kcGMyVWdjMjl0WlNCd2NtOTBiM1I1Y0dVZ2JXRnVhWEIxYkdGMGFXOXVJR2x1WEc0Z0lDOHZJSFZ6WlhKc1lXNWtJSGRwYkd3Z1ptRnBiRnh1SUNCbGJuVnRaWEpoWW14bE9pQm1ZV3h6WlN4Y2JpQWdaMlYwT2lCbWRXNWpkR2x2YmlCblpYUW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1SbGMzUnliM2xsWkR0Y2JpQWdmU3hjYmlBZ2MyVjBPaUJtZFc1amRHbHZiaUJ6WlhRb2RtRnNkV1VwSUh0Y2JpQWdJQ0F2THlCM1pTQnBaMjV2Y21VZ2RHaGxJSFpoYkhWbElHbG1JSFJvWlNCemRISmxZVzFjYmlBZ0lDQXZMeUJvWVhNZ2JtOTBJR0psWlc0Z2FXNXBkR2xoYkdsNlpXUWdlV1YwWEc0Z0lDQWdhV1lnS0NGMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlNBdkx5QmlZV05yZDJGeVpDQmpiMjF3WVhScFltbHNhWFI1TENCMGFHVWdkWE5sY2lCcGN5QmxlSEJzYVdOcGRHeDVYRzRnSUNBZ0x5OGdiV0Z1WVdkcGJtY2daR1Z6ZEhKdmVXVmtYRzVjYmx4dUlDQWdJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1WkdWemRISnZlV1ZrSUQwZ2RtRnNkV1U3WEc0Z0lIMWNibjBwTzF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzVrWlhOMGNtOTVPMXh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTGw5MWJtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzUxYm1SbGMzUnliM2s3WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNWZaR1Z6ZEhKdmVTQTlJR1oxYm1OMGFXOXVJQ2hsY25Jc0lHTmlLU0I3WEc0Z0lHTmlLR1Z5Y2lrN1hHNTlPeUF2THlCTllXNTFZV3hzZVNCemFHOTJaU0J6YjIxbGRHaHBibWNnYVc1MGJ5QjBhR1VnY21WaFpDZ3BJR0oxWm1abGNpNWNiaTh2SUZSb2FYTWdjbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0JvYVdkb1YyRjBaWEpOWVhKcklHaGhjeUJ1YjNRZ1ltVmxiaUJvYVhRZ2VXVjBMRnh1THk4Z2MybHRhV3hoY2lCMGJ5Qm9iM2NnVjNKcGRHRmliR1V1ZDNKcGRHVW9LU0J5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdlVzkxSUhOb2IzVnNaRnh1THk4Z2QzSnBkR1VvS1NCemIyMWxJRzF2Y21VdVhHNWNibHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5CMWMyZ2dQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lIWmhjaUJ6YTJsd1EyaDFibXREYUdWamF6dGNibHh1SUNCcFppQW9JWE4wWVhSbExtOWlhbVZqZEUxdlpHVXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR05vZFc1cklEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnWlc1amIyUnBibWNnUFNCbGJtTnZaR2x1WnlCOGZDQnpkR0YwWlM1a1pXWmhkV3gwUlc1amIyUnBibWM3WEc1Y2JpQWdJQ0FnSUdsbUlDaGxibU52WkdsdVp5QWhQVDBnYzNSaGRHVXVaVzVqYjJScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnWTJoMWJtc2dQU0JDZFdabVpYSXVabkp2YlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dUlDQWdJQ0FnSUNCbGJtTnZaR2x1WnlBOUlDY25PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J6YTJsd1EyaDFibXREYUdWamF5QTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhOcmFYQkRhSFZ1YTBOb1pXTnJJRDBnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnlaV0ZrWVdKc1pVRmtaRU5vZFc1cktIUm9hWE1zSUdOb2RXNXJMQ0JsYm1OdlpHbHVaeXdnWm1Gc2MyVXNJSE5yYVhCRGFIVnVhME5vWldOcktUdGNibjA3SUM4dklGVnVjMmhwWm5RZ2MyaHZkV3hrSUNwaGJIZGhlWE1xSUdKbElITnZiV1YwYUdsdVp5QmthWEpsWTNSc2VTQnZkWFFnYjJZZ2NtVmhaQ2dwWEc1Y2JseHVVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMblZ1YzJocFpuUWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3BJSHRjYmlBZ2NtVjBkWEp1SUhKbFlXUmhZbXhsUVdSa1EyaDFibXNvZEdocGN5d2dZMmgxYm1zc0lHNTFiR3dzSUhSeWRXVXNJR1poYkhObEtUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlISmxZV1JoWW14bFFXUmtRMmgxYm1zb2MzUnlaV0Z0TENCamFIVnVheXdnWlc1amIyUnBibWNzSUdGa1pGUnZSbkp2Ym5Rc0lITnJhWEJEYUhWdWEwTm9aV05yS1NCN1hHNGdJR1JsWW5WbktDZHlaV0ZrWVdKc1pVRmtaRU5vZFc1ckp5d2dZMmgxYm1zcE8xeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCemRISmxZVzB1WDNKbFlXUmhZbXhsVTNSaGRHVTdYRzVjYmlBZ2FXWWdLR05vZFc1cklEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2MzUmhkR1V1Y21WaFpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHOXVSVzltUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RtRnlJR1Z5TzF4dUlDQWdJR2xtSUNnaGMydHBjRU5vZFc1clEyaGxZMnNwSUdWeUlEMGdZMmgxYm10SmJuWmhiR2xrS0hOMFlYUmxMQ0JqYUhWdWF5azdYRzVjYmlBZ0lDQnBaaUFvWlhJcElIdGNiaUFnSUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMFlYUmxMbTlpYW1WamRFMXZaR1VnZkh3Z1kyaDFibXNnSmlZZ1kyaDFibXN1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmphSFZ1YXlBaFBUMGdKM04wY21sdVp5Y2dKaVlnSVhOMFlYUmxMbTlpYW1WamRFMXZaR1VnSmlZZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LR05vZFc1cktTQWhQVDBnUW5WbVptVnlMbkJ5YjNSdmRIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCamFIVnVheUE5SUY5MWFXNTBPRUZ5Y21GNVZHOUNkV1ptWlhJb1kyaDFibXNwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9ZV1JrVkc5R2NtOXVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9jM1JoZEdVdVpXNWtSVzFwZEhSbFpDa2djM1J5WldGdExtVnRhWFFvSjJWeWNtOXlKeXdnYm1WM0lFVlNVbDlUVkZKRlFVMWZWVTVUU0VsR1ZGOUJSbFJGVWw5RlRrUmZSVlpGVGxRb0tTazdaV3h6WlNCaFpHUkRhSFZ1YXloemRISmxZVzBzSUhOMFlYUmxMQ0JqYUhWdWF5d2dkSEoxWlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITjBZWFJsTG1WdVpHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGxjbkp2Y2ljc0lHNWxkeUJGVWxKZlUxUlNSVUZOWDFCVlUwaGZRVVpVUlZKZlJVOUdLQ2twTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoemRHRjBaUzVrWlhOMGNtOTVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjM1JoZEdVdWNtVmhaR2x1WnlBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTNWtaV052WkdWeUlDWW1JQ0ZsYm1OdlpHbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9kVzVySUQwZ2MzUmhkR1V1WkdWamIyUmxjaTUzY21sMFpTaGphSFZ1YXlrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOMFlYUmxMbTlpYW1WamRFMXZaR1VnZkh3Z1kyaDFibXN1YkdWdVozUm9JQ0U5UFNBd0tTQmhaR1JEYUhWdWF5aHpkSEpsWVcwc0lITjBZWFJsTENCamFIVnVheXdnWm1Gc2MyVXBPMlZzYzJVZ2JXRjVZbVZTWldGa1RXOXlaU2h6ZEhKbFlXMHNJSE4wWVhSbEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JoWkdSRGFIVnVheWh6ZEhKbFlXMHNJSE4wWVhSbExDQmphSFZ1YXl3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNnaFlXUmtWRzlHY205dWRDa2dlMXh1SUNBZ0lDQWdjM1JoZEdVdWNtVmhaR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYldGNVltVlNaV0ZrVFc5eVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdMeThnVjJVZ1kyRnVJSEIxYzJnZ2JXOXlaU0JrWVhSaElHbG1JSGRsSUdGeVpTQmlaV3h2ZHlCMGFHVWdhR2xuYUZkaGRHVnlUV0Z5YXk1Y2JpQWdMeThnUVd4emJ5d2dhV1lnZDJVZ2FHRjJaU0J1YnlCa1lYUmhJSGxsZEN3Z2QyVWdZMkZ1SUhOMFlXNWtJSE52YldVZ2JXOXlaU0JpZVhSbGN5NWNiaUFnTHk4Z1ZHaHBjeUJwY3lCMGJ5QjNiM0pySUdGeWIzVnVaQ0JqWVhObGN5QjNhR1Z5WlNCb2QyMDlNQ3dnYzNWamFDQmhjeUIwYUdVZ2NtVndiQzVjYmx4dVhHNGdJSEpsZEhWeWJpQWhjM1JoZEdVdVpXNWtaV1FnSmlZZ0tITjBZWFJsTG14bGJtZDBhQ0E4SUhOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zZ2ZId2djM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdLVHRjYm4xY2JseHVablZ1WTNScGIyNGdZV1JrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUdGa1pGUnZSbkp2Ym5RcElIdGNiaUFnYVdZZ0tITjBZWFJsTG1ac2IzZHBibWNnSmlZZ2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JQ0Z6ZEdGMFpTNXplVzVqS1NCN1hHNGdJQ0FnYzNSaGRHVXVZWGRoYVhSRWNtRnBiaUE5SURBN1hHNGdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyUmhkR0VuTENCamFIVnVheWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z2RYQmtZWFJsSUhSb1pTQmlkV1ptWlhJZ2FXNW1ieTVjYmlBZ0lDQnpkR0YwWlM1c1pXNW5kR2dnS3owZ2MzUmhkR1V1YjJKcVpXTjBUVzlrWlNBL0lERWdPaUJqYUhWdWF5NXNaVzVuZEdnN1hHNGdJQ0FnYVdZZ0tHRmtaRlJ2Um5KdmJuUXBJSE4wWVhSbExtSjFabVpsY2k1MWJuTm9hV1owS0dOb2RXNXJLVHRsYkhObElITjBZWFJsTG1KMVptWmxjaTV3ZFhOb0tHTm9kVzVyS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bEtTQmxiV2wwVW1WaFpHRmliR1VvYzNSeVpXRnRLVHRjYmlBZ2ZWeHVYRzRnSUcxaGVXSmxVbVZoWkUxdmNtVW9jM1J5WldGdExDQnpkR0YwWlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdOb2RXNXJTVzUyWVd4cFpDaHpkR0YwWlN3Z1kyaDFibXNwSUh0Y2JpQWdkbUZ5SUdWeU8xeHVYRzRnSUdsbUlDZ2hYMmx6VldsdWREaEJjbkpoZVNoamFIVnVheWtnSmlZZ2RIbHdaVzltSUdOb2RXNXJJQ0U5UFNBbmMzUnlhVzVuSnlBbUppQmphSFZ1YXlBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnWlhJZ1BTQnVaWGNnUlZKU1gwbE9Wa0ZNU1VSZlFWSkhYMVJaVUVVb0oyTm9kVzVySnl3Z1d5ZHpkSEpwYm1jbkxDQW5RblZtWm1WeUp5d2dKMVZwYm5RNFFYSnlZWGtuWFN3Z1kyaDFibXNwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdWeU8xeHVmVnh1WEc1U1pXRmtZV0pzWlM1d2NtOTBiM1I1Y0dVdWFYTlFZWFZ6WldRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lISmxkSFZ5YmlCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtWnNiM2RwYm1jZ1BUMDlJR1poYkhObE8xeHVmVHNnTHk4Z1ltRmphM2RoY21SeklHTnZiWEJoZEdsaWFXeHBkSGt1WEc1Y2JseHVVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMbk5sZEVWdVkyOWthVzVuSUQwZ1puVnVZM1JwYjI0Z0tHVnVZeWtnZTF4dUlDQnBaaUFvSVZOMGNtbHVaMFJsWTI5a1pYSXBJRk4wY21sdVowUmxZMjlrWlhJZ1BTQnlaWEYxYVhKbEtDZHpkSEpwYm1kZlpHVmpiMlJsY2k4bktTNVRkSEpwYm1kRVpXTnZaR1Z5TzF4dUlDQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVJsWTI5a1pYSWdQU0J1WlhjZ1UzUnlhVzVuUkdWamIyUmxjaWhsYm1NcE95QXZMeUJwWmlCelpYUkZibU52WkdsdVp5aHVkV3hzS1N3Z1pHVmpiMlJsY2k1bGJtTnZaR2x1WnlCbGNYVmhiSE1nZFhSbU9GeHVYRzRnSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVdVpXNWpiMlJwYm1jZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbVJsWTI5a1pYSXVaVzVqYjJScGJtYzdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHNnTHk4Z1JHOXVKM1FnY21GcGMyVWdkR2hsSUdoM2JTQStJRGhOUWx4dVhHNWNiblpoY2lCTlFWaGZTRmROSUQwZ01IZzRNREF3TURBN1hHNWNibVoxYm1OMGFXOXVJR052YlhCMWRHVk9aWGRJYVdkb1YyRjBaWEpOWVhKcktHNHBJSHRjYmlBZ2FXWWdLRzRnUGowZ1RVRllYMGhYVFNrZ2UxeHVJQ0FnSUc0Z1BTQk5RVmhmU0ZkTk8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRWRsZENCMGFHVWdibVY0ZENCb2FXZG9aWE4wSUhCdmQyVnlJRzltSURJZ2RHOGdjSEpsZG1WdWRDQnBibU55WldGemFXNW5JR2gzYlNCbGVHTmxjM05wZG1Wc2VTQnBibHh1SUNBZ0lDOHZJSFJwYm5rZ1lXMXZkVzUwYzF4dUlDQWdJRzR0TFR0Y2JpQWdJQ0J1SUh3OUlHNGdQajQrSURFN1hHNGdJQ0FnYmlCOFBTQnVJRDQrUGlBeU8xeHVJQ0FnSUc0Z2ZEMGdiaUErUGo0Z05EdGNiaUFnSUNCdUlIdzlJRzRnUGo0K0lEZzdYRzRnSUNBZ2JpQjhQU0J1SUQ0K1BpQXhOanRjYmlBZ0lDQnVLeXM3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYmp0Y2JuMGdMeThnVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUJrWlhOcFoyNWxaQ0IwYnlCaVpTQnBibXhwYm1GaWJHVXNJSE52SUhCc1pXRnpaU0IwWVd0bElHTmhjbVVnZDJobGJpQnRZV3RwYm1kY2JpOHZJR05vWVc1blpYTWdkRzhnZEdobElHWjFibU4wYVc5dUlHSnZaSGt1WEc1Y2JseHVablZ1WTNScGIyNGdhRzkzVFhWamFGUnZVbVZoWkNodUxDQnpkR0YwWlNrZ2UxeHVJQ0JwWmlBb2JpQThQU0F3SUh4OElITjBZWFJsTG14bGJtZDBhQ0E5UFQwZ01DQW1KaUJ6ZEdGMFpTNWxibVJsWkNrZ2NtVjBkWEp1SURBN1hHNGdJR2xtSUNoemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCeVpYUjFjbTRnTVR0Y2JseHVJQ0JwWmlBb2JpQWhQVDBnYmlrZ2UxeHVJQ0FnSUM4dklFOXViSGtnWm14dmR5QnZibVVnWW5WbVptVnlJR0YwSUdFZ2RHbHRaVnh1SUNBZ0lHbG1JQ2h6ZEdGMFpTNW1iRzkzYVc1bklDWW1JSE4wWVhSbExteGxibWQwYUNrZ2NtVjBkWEp1SUhOMFlYUmxMbUoxWm1abGNpNW9aV0ZrTG1SaGRHRXViR1Z1WjNSb08yVnNjMlVnY21WMGRYSnVJSE4wWVhSbExteGxibWQwYUR0Y2JpQWdmU0F2THlCSlppQjNaU2R5WlNCaGMydHBibWNnWm05eUlHMXZjbVVnZEdoaGJpQjBhR1VnWTNWeWNtVnVkQ0JvZDIwc0lIUm9aVzRnY21GcGMyVWdkR2hsSUdoM2JTNWNibHh1WEc0Z0lHbG1JQ2h1SUQ0Z2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5a2djM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheUE5SUdOdmJYQjFkR1ZPWlhkSWFXZG9WMkYwWlhKTllYSnJLRzRwTzF4dUlDQnBaaUFvYmlBOFBTQnpkR0YwWlM1c1pXNW5kR2dwSUhKbGRIVnliaUJ1T3lBdkx5QkViMjRuZENCb1lYWmxJR1Z1YjNWbmFGeHVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpXNWtaV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlITjBZWFJsTG14bGJtZDBhRHRjYm4wZ0x5OGdlVzkxSUdOaGJpQnZkbVZ5Y21sa1pTQmxhWFJvWlhJZ2RHaHBjeUJ0WlhSb2IyUXNJRzl5SUhSb1pTQmhjM2x1WXlCZmNtVmhaQ2h1S1NCaVpXeHZkeTVjYmx4dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVjbVZoWkNBOUlHWjFibU4wYVc5dUlDaHVLU0I3WEc0Z0lHUmxZblZuS0NkeVpXRmtKeXdnYmlrN1hHNGdJRzRnUFNCd1lYSnpaVWx1ZENodUxDQXhNQ2s3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lIWmhjaUJ1VDNKcFp5QTlJRzQ3WEc0Z0lHbG1JQ2h1SUNFOVBTQXdLU0J6ZEdGMFpTNWxiV2wwZEdWa1VtVmhaR0ZpYkdVZ1BTQm1ZV3h6WlRzZ0x5OGdhV1lnZDJVbmNtVWdaRzlwYm1jZ2NtVmhaQ2d3S1NCMGJ5QjBjbWxuWjJWeUlHRWdjbVZoWkdGaWJHVWdaWFpsYm5Rc0lHSjFkQ0IzWlZ4dUlDQXZMeUJoYkhKbFlXUjVJR2hoZG1VZ1lTQmlkVzVqYUNCdlppQmtZWFJoSUdsdUlIUm9aU0JpZFdabVpYSXNJSFJvWlc0Z2FuVnpkQ0IwY21sbloyVnlYRzRnSUM4dklIUm9aU0FuY21WaFpHRmliR1VuSUdWMlpXNTBJR0Z1WkNCdGIzWmxJRzl1TGx4dVhHNGdJR2xtSUNodUlEMDlQU0F3SUNZbUlITjBZWFJsTG01bFpXUlNaV0ZrWVdKc1pTQW1KaUFvS0hOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zZ0lUMDlJREFnUHlCemRHRjBaUzVzWlc1bmRHZ2dQajBnYzNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXlBNklITjBZWFJsTG14bGJtZDBhQ0ErSURBcElIeDhJSE4wWVhSbExtVnVaR1ZrS1NrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R5WldGa09pQmxiV2wwVW1WaFpHRmliR1VuTENCemRHRjBaUzVzWlc1bmRHZ3NJSE4wWVhSbExtVnVaR1ZrS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JSE4wWVhSbExtVnVaR1ZrS1NCbGJtUlNaV0ZrWVdKc1pTaDBhR2x6S1R0bGJITmxJR1Z0YVhSU1pXRmtZV0pzWlNoMGFHbHpLVHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ2ZWeHVYRzRnSUc0Z1BTQm9iM2ROZFdOb1ZHOVNaV0ZrS0c0c0lITjBZWFJsS1RzZ0x5OGdhV1lnZDJVbmRtVWdaVzVrWldRc0lHRnVaQ0IzWlNkeVpTQnViM2NnWTJ4bFlYSXNJSFJvWlc0Z1ptbHVhWE5vSUdsMElIVndMbHh1WEc0Z0lHbG1JQ2h1SUQwOVBTQXdJQ1ltSUhOMFlYUmxMbVZ1WkdWa0tTQjdYRzRnSUNBZ2FXWWdLSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ2tnWlc1a1VtVmhaR0ZpYkdVb2RHaHBjeWs3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lIMGdMeThnUVd4c0lIUm9aU0JoWTNSMVlXd2dZMmgxYm1zZ1oyVnVaWEpoZEdsdmJpQnNiMmRwWXlCdVpXVmtjeUIwYnlCaVpWeHVJQ0F2THlBcVltVnNiM2NxSUhSb1pTQmpZV3hzSUhSdklGOXlaV0ZrTGlBZ1ZHaGxJSEpsWVhOdmJpQnBjeUIwYUdGMElHbHVJR05sY25SaGFXNWNiaUFnTHk4Z2MzbHVkR2hsZEdsaklITjBjbVZoYlNCallYTmxjeXdnYzNWamFDQmhjeUJ3WVhOemRHaHliM1ZuYUNCemRISmxZVzF6TENCZmNtVmhaRnh1SUNBdkx5QnRZWGtnWW1VZ1lTQmpiMjF3YkdWMFpXeDVJSE41Ym1Ob2NtOXViM1Z6SUc5d1pYSmhkR2x2YmlCM2FHbGphQ0J0WVhrZ1kyaGhibWRsWEc0Z0lDOHZJSFJvWlNCemRHRjBaU0J2WmlCMGFHVWdjbVZoWkNCaWRXWm1aWElzSUhCeWIzWnBaR2x1WnlCbGJtOTFaMmdnWkdGMFlTQjNhR1Z1WEc0Z0lDOHZJR0psWm05eVpTQjBhR1Z5WlNCM1lYTWdLbTV2ZENvZ1pXNXZkV2RvTGx4dUlDQXZMMXh1SUNBdkx5QlRieXdnZEdobElITjBaWEJ6SUdGeVpUcGNiaUFnTHk4Z01TNGdSbWxuZFhKbElHOTFkQ0IzYUdGMElIUm9aU0J6ZEdGMFpTQnZaaUIwYUdsdVozTWdkMmxzYkNCaVpTQmhablJsY2lCM1pTQmtiMXh1SUNBdkx5QmhJSEpsWVdRZ1puSnZiU0IwYUdVZ1luVm1abVZ5TGx4dUlDQXZMMXh1SUNBdkx5QXlMaUJKWmlCMGFHRjBJSEpsYzNWc2RHbHVaeUJ6ZEdGMFpTQjNhV3hzSUhSeWFXZG5aWElnWVNCZmNtVmhaQ3dnZEdobGJpQmpZV3hzSUY5eVpXRmtMbHh1SUNBdkx5Qk9iM1JsSUhSb1lYUWdkR2hwY3lCdFlYa2dZbVVnWVhONWJtTm9jbTl1YjNWekxDQnZjaUJ6ZVc1amFISnZibTkxY3k0Z0lGbGxjeXdnYVhRZ2FYTmNiaUFnTHk4Z1pHVmxjR3g1SUhWbmJIa2dkRzhnZDNKcGRHVWdRVkJKY3lCMGFHbHpJSGRoZVN3Z1luVjBJSFJvWVhRZ2MzUnBiR3dnWkc5bGMyNG5kQ0J0WldGdVhHNGdJQzh2SUhSb1lYUWdkR2hsSUZKbFlXUmhZbXhsSUdOc1lYTnpJSE5vYjNWc1pDQmlaV2hoZG1VZ2FXMXdjbTl3WlhKc2VTd2dZWE1nYzNSeVpXRnRjeUJoY21WY2JpQWdMeThnWkdWemFXZHVaV1FnZEc4Z1ltVWdjM2x1WXk5aGMzbHVZeUJoWjI1dmMzUnBZeTVjYmlBZ0x5OGdWR0ZyWlNCdWIzUmxJR2xtSUhSb1pTQmZjbVZoWkNCallXeHNJR2x6SUhONWJtTWdiM0lnWVhONWJtTWdLR2xsTENCcFppQjBhR1VnY21WaFpDQmpZV3hzWEc0Z0lDOHZJR2hoY3lCeVpYUjFjbTVsWkNCNVpYUXBMQ0J6YnlCMGFHRjBJSGRsSUd0dWIzY2dkMmhsZEdobGNpQnZjaUJ1YjNRZ2FYUW5jeUJ6WVdabElIUnZJR1Z0YVhSY2JpQWdMeThnSjNKbFlXUmhZbXhsSnlCbGRHTXVYRzRnSUM4dlhHNGdJQzh2SURNdUlFRmpkSFZoYkd4NUlIQjFiR3dnZEdobElISmxjWFZsYzNSbFpDQmphSFZ1YTNNZ2IzVjBJRzltSUhSb1pTQmlkV1ptWlhJZ1lXNWtJSEpsZEhWeWJpNWNiaUFnTHk4Z2FXWWdkMlVnYm1WbFpDQmhJSEpsWVdSaFlteGxJR1YyWlc1MExDQjBhR1Z1SUhkbElHNWxaV1FnZEc4Z1pHOGdjMjl0WlNCeVpXRmthVzVuTGx4dVhHNWNiaUFnZG1GeUlHUnZVbVZoWkNBOUlITjBZWFJsTG01bFpXUlNaV0ZrWVdKc1pUdGNiaUFnWkdWaWRXY29KMjVsWldRZ2NtVmhaR0ZpYkdVbkxDQmtiMUpsWVdRcE95QXZMeUJwWmlCM1pTQmpkWEp5Wlc1MGJIa2dhR0YyWlNCc1pYTnpJSFJvWVc0Z2RHaGxJR2hwWjJoWFlYUmxjazFoY21zc0lIUm9aVzRnWVd4emJ5QnlaV0ZrSUhOdmJXVmNibHh1SUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdJSHg4SUhOMFlYUmxMbXhsYm1kMGFDQXRJRzRnUENCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcktTQjdYRzRnSUNBZ1pHOVNaV0ZrSUQwZ2RISjFaVHRjYmlBZ0lDQmtaV0oxWnlnbmJHVnVaM1JvSUd4bGMzTWdkR2hoYmlCM1lYUmxjbTFoY21zbkxDQmtiMUpsWVdRcE8xeHVJQ0I5SUM4dklHaHZkMlYyWlhJc0lHbG1JSGRsSjNabElHVnVaR1ZrTENCMGFHVnVJSFJvWlhKbEozTWdibThnY0c5cGJuUXNJR0Z1WkNCcFppQjNaU2R5WlNCaGJISmxZV1I1WEc0Z0lDOHZJSEpsWVdScGJtY3NJSFJvWlc0Z2FYUW5jeUIxYm01bFkyVnpjMkZ5ZVM1Y2JseHVYRzRnSUdsbUlDaHpkR0YwWlM1bGJtUmxaQ0I4ZkNCemRHRjBaUzV5WldGa2FXNW5LU0I3WEc0Z0lDQWdaRzlTWldGa0lEMGdabUZzYzJVN1hHNGdJQ0FnWkdWaWRXY29KM0psWVdScGJtY2diM0lnWlc1a1pXUW5MQ0JrYjFKbFlXUXBPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHUnZVbVZoWkNrZ2UxeHVJQ0FnSUdSbFluVm5LQ2RrYnlCeVpXRmtKeWs3WEc0Z0lDQWdjM1JoZEdVdWNtVmhaR2x1WnlBOUlIUnlkV1U3WEc0Z0lDQWdjM1JoZEdVdWMzbHVZeUE5SUhSeWRXVTdJQzh2SUdsbUlIUm9aU0JzWlc1bmRHZ2dhWE1nWTNWeWNtVnVkR3g1SUhwbGNtOHNJSFJvWlc0Z2QyVWdLbTVsWldRcUlHRWdjbVZoWkdGaWJHVWdaWFpsYm5RdVhHNWNiaUFnSUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdLU0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPeUF2THlCallXeHNJR2x1ZEdWeWJtRnNJSEpsWVdRZ2JXVjBhRzlrWEc1Y2JpQWdJQ0IwYUdsekxsOXlaV0ZrS0hOMFlYUmxMbWhwWjJoWFlYUmxjazFoY21zcE8xeHVYRzRnSUNBZ2MzUmhkR1V1YzNsdVl5QTlJR1poYkhObE95QXZMeUJKWmlCZmNtVmhaQ0J3ZFhOb1pXUWdaR0YwWVNCemVXNWphSEp2Ym05MWMyeDVMQ0IwYUdWdUlHQnlaV0ZrYVc1bllDQjNhV3hzSUdKbElHWmhiSE5sTEZ4dUlDQWdJQzh2SUdGdVpDQjNaU0J1WldWa0lIUnZJSEpsTFdWMllXeDFZWFJsSUdodmR5QnRkV05vSUdSaGRHRWdkMlVnWTJGdUlISmxkSFZ5YmlCMGJ5QjBhR1VnZFhObGNpNWNibHh1SUNBZ0lHbG1JQ2doYzNSaGRHVXVjbVZoWkdsdVp5a2diaUE5SUdodmQwMTFZMmhVYjFKbFlXUW9iazl5YVdjc0lITjBZWFJsS1R0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJ5WlhRN1hHNGdJR2xtSUNodUlENGdNQ2tnY21WMElEMGdabkp2YlV4cGMzUW9iaXdnYzNSaGRHVXBPMlZzYzJVZ2NtVjBJRDBnYm5Wc2JEdGNibHh1SUNCcFppQW9jbVYwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQnVJRDBnTUR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCemRHRjBaUzVzWlc1bmRHZ2dMVDBnYmp0Y2JpQWdJQ0J6ZEdGMFpTNWhkMkZwZEVSeVlXbHVJRDBnTUR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0F2THlCSlppQjNaU0JvWVhabElHNXZkR2hwYm1jZ2FXNGdkR2hsSUdKMVptWmxjaXdnZEdobGJpQjNaU0IzWVc1MElIUnZJR3R1YjNkY2JpQWdJQ0F2THlCaGN5QnpiMjl1SUdGeklIZGxJQ3BrYnlvZ1oyVjBJSE52YldWMGFHbHVaeUJwYm5SdklIUm9aU0JpZFdabVpYSXVYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNWxibVJsWkNrZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElEMGdkSEoxWlRzZ0x5OGdTV1lnZDJVZ2RISnBaV1FnZEc4Z2NtVmhaQ2dwSUhCaGMzUWdkR2hsSUVWUFJpd2dkR2hsYmlCbGJXbDBJR1Z1WkNCdmJpQjBhR1VnYm1WNGRDQjBhV05yTGx4dVhHNGdJQ0FnYVdZZ0tHNVBjbWxuSUNFOVBTQnVJQ1ltSUhOMFlYUmxMbVZ1WkdWa0tTQmxibVJTWldGa1lXSnNaU2gwYUdsektUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoeVpYUWdJVDA5SUc1MWJHd3BJSFJvYVhNdVpXMXBkQ2duWkdGMFlTY3NJSEpsZENrN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJ2YmtWdlprTm9kVzVyS0hOMGNtVmhiU3dnYzNSaGRHVXBJSHRjYmlBZ2FXWWdLSE4wWVhSbExtVnVaR1ZrS1NCeVpYUjFjbTQ3WEc1Y2JpQWdhV1lnS0hOMFlYUmxMbVJsWTI5a1pYSXBJSHRjYmlBZ0lDQjJZWElnWTJoMWJtc2dQU0J6ZEdGMFpTNWtaV052WkdWeUxtVnVaQ2dwTzF4dVhHNGdJQ0FnYVdZZ0tHTm9kVzVySUNZbUlHTm9kVzVyTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnYzNSaGRHVXVZblZtWm1WeUxuQjFjMmdvWTJoMWJtc3BPMXh1SUNBZ0lDQWdjM1JoZEdVdWJHVnVaM1JvSUNzOUlITjBZWFJsTG05aWFtVmpkRTF2WkdVZ1B5QXhJRG9nWTJoMWJtc3ViR1Z1WjNSb08xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lITjBZWFJsTG1WdVpHVmtJRDBnZEhKMVpUdGNibHh1SUNCcFppQW9jM1JoZEdVdWMzbHVZeWtnZTF4dUlDQWdJQzh2SUdsbUlIZGxJR0Z5WlNCemVXNWpMQ0IzWVdsMElIVnVkR2xzSUc1bGVIUWdkR2xqYXlCMGJ5QmxiV2wwSUhSb1pTQmtZWFJoTGx4dUlDQWdJQzh2SUU5MGFHVnlkMmx6WlNCM1pTQnlhWE5ySUdWdGFYUjBhVzVuSUdSaGRHRWdhVzRnZEdobElHWnNiM2NvS1Z4dUlDQWdJQzh2SUhSb1pTQnlaV0ZrWVdKc1pTQmpiMlJsSUhSeWFXZG5aWEp6SUdSMWNtbHVaeUJoSUhKbFlXUW9LU0JqWVd4c1hHNGdJQ0FnWlcxcGRGSmxZV1JoWW14bEtITjBjbVZoYlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdaVzFwZENBbmNtVmhaR0ZpYkdVbklHNXZkeUIwYnlCdFlXdGxJSE4xY21VZ2FYUWdaMlYwY3lCd2FXTnJaV1FnZFhBdVhHNGdJQ0FnYzNSaGRHVXVibVZsWkZKbFlXUmhZbXhsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0JwWmlBb0lYTjBZWFJsTG1WdGFYUjBaV1JTWldGa1lXSnNaU2tnZTF4dUlDQWdJQ0FnYzNSaGRHVXVaVzFwZEhSbFpGSmxZV1JoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdWdGFYUlNaV0ZrWVdKc1pWOG9jM1J5WldGdEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4wZ0x5OGdSRzl1SjNRZ1pXMXBkQ0J5WldGa1lXSnNaU0J5YVdkb2RDQmhkMkY1SUdsdUlITjVibU1nYlc5a1pTd2dZbVZqWVhWelpTQjBhR2x6SUdOaGJpQjBjbWxuWjJWeVhHNHZMeUJoYm05MGFHVnlJSEpsWVdRb0tTQmpZV3hzSUQwK0lITjBZV05ySUc5MlpYSm1iRzkzTGlBZ1ZHaHBjeUIzWVhrc0lHbDBJRzFwWjJoMElIUnlhV2RuWlhKY2JpOHZJR0VnYm1WNGRGUnBZMnNnY21WamRYSnphVzl1SUhkaGNtNXBibWNzSUdKMWRDQjBhR0YwSjNNZ2JtOTBJSE52SUdKaFpDNWNibHh1WEc1bWRXNWpkR2x2YmlCbGJXbDBVbVZoWkdGaWJHVW9jM1J5WldGdEtTQjdYRzRnSUhaaGNpQnpkR0YwWlNBOUlITjBjbVZoYlM1ZmNtVmhaR0ZpYkdWVGRHRjBaVHRjYmlBZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElEMGdabUZzYzJVN1hHNWNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJXbDBkR1ZrVW1WaFpHRmliR1VwSUh0Y2JpQWdJQ0JrWldKMVp5Z25aVzFwZEZKbFlXUmhZbXhsSnl3Z2MzUmhkR1V1Wm14dmQybHVaeWs3WEc0Z0lDQWdjM1JoZEdVdVpXMXBkSFJsWkZKbFlXUmhZbXhsSUQwZ2RISjFaVHRjYmlBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHVnRhWFJTWldGa1lXSnNaVjhzSUhOMGNtVmhiU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXMXBkRkpsWVdSaFlteGxYeWh6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdjM1J5WldGdExsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQmtaV0oxWnlnblpXMXBkRkpsWVdSaFlteGxYeWNzSUhOMFlYUmxMbVJsYzNSeWIzbGxaQ3dnYzNSaGRHVXViR1Z1WjNSb0xDQnpkR0YwWlM1bGJtUmxaQ2s3WEc1Y2JpQWdhV1lnS0NGemRHRjBaUzVrWlhOMGNtOTVaV1FnSmlZZ0tITjBZWFJsTG14bGJtZDBhQ0I4ZkNCemRHRjBaUzVsYm1SbFpDa3BJSHRjYmlBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duY21WaFpHRmliR1VuS1R0Y2JpQWdmU0F2THlCVWFHVWdjM1J5WldGdElHNWxaV1J6SUdGdWIzUm9aWElnY21WaFpHRmliR1VnWlhabGJuUWdhV1pjYmlBZ0x5OGdNUzRnU1hRZ2FYTWdibTkwSUdac2IzZHBibWNzSUdGeklIUm9aU0JtYkc5M0lHMWxZMmhoYm1semJTQjNhV3hzSUhSaGEyVmNiaUFnTHk4Z0lDQWdZMkZ5WlNCdlppQnBkQzVjYmlBZ0x5OGdNaTRnU1hRZ2FYTWdibTkwSUdWdVpHVmtMbHh1SUNBdkx5QXpMaUJKZENCcGN5QmlaV3h2ZHlCMGFHVWdhR2xuYUZkaGRHVnlUV0Z5YXl3Z2MyOGdkMlVnWTJGdUlITmphR1ZrZFd4bFhHNGdJQzh2SUNBZ0lHRnViM1JvWlhJZ2NtVmhaR0ZpYkdVZ2JHRjBaWEl1WEc1Y2JseHVJQ0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNBaGMzUmhkR1V1Wm14dmQybHVaeUFtSmlBaGMzUmhkR1V1Wlc1a1pXUWdKaVlnYzNSaGRHVXViR1Z1WjNSb0lEdzlJSE4wWVhSbExtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lHWnNiM2NvYzNSeVpXRnRLVHRjYm4wZ0x5OGdZWFFnZEdocGN5QndiMmx1ZEN3Z2RHaGxJSFZ6WlhJZ2FHRnpJSEJ5WlhOMWJXRmliSGtnYzJWbGJpQjBhR1VnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ3hjYmk4dklHRnVaQ0JqWVd4c1pXUWdjbVZoWkNncElIUnZJR052Ym5OMWJXVWdjMjl0WlNCa1lYUmhMaUFnZEdoaGRDQnRZWGtnYUdGMlpTQjBjbWxuWjJWeVpXUmNiaTh2SUdsdUlIUjFjbTRnWVc1dmRHaGxjaUJmY21WaFpDaHVLU0JqWVd4c0xDQnBiaUIzYUdsamFDQmpZWE5sSUhKbFlXUnBibWNnUFNCMGNuVmxJR2xtWEc0dkx5QnBkQ2R6SUdsdUlIQnliMmR5WlhOekxseHVMeThnU0c5M1pYWmxjaXdnYVdZZ2QyVW5jbVVnYm05MElHVnVaR1ZrTENCdmNpQnlaV0ZrYVc1bkxDQmhibVFnZEdobElHeGxibWQwYUNBOElHaDNiU3hjYmk4dklIUm9aVzRnWjI4Z1lXaGxZV1FnWVc1a0lIUnllU0IwYnlCeVpXRmtJSE52YldVZ2JXOXlaU0J3Y21WbGJYQjBhWFpsYkhrdVhHNWNibHh1Wm5WdVkzUnBiMjRnYldGNVltVlNaV0ZrVFc5eVpTaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1Y21WaFpHbHVaMDF2Y21VcElIdGNiaUFnSUNCemRHRjBaUzV5WldGa2FXNW5UVzl5WlNBOUlIUnlkV1U3WEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aHRZWGxpWlZKbFlXUk5iM0psWHl3Z2MzUnlaV0Z0TENCemRHRjBaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRjVZbVZTWldGa1RXOXlaVjhvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ2MzUmhkR1V1YkdWdVozUm9PMXh1WEc0Z0lIZG9hV3hsSUNnaGMzUmhkR1V1Y21WaFpHbHVaeUFtSmlBaGMzUmhkR1V1Wlc1a1pXUWdKaVlnYzNSaGRHVXViR1Z1WjNSb0lEd2djM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheWtnZTF4dUlDQWdJR1JsWW5WbktDZHRZWGxpWlZKbFlXUk5iM0psSUhKbFlXUWdNQ2NwTzF4dUlDQWdJSE4wY21WaGJTNXlaV0ZrS0RBcE8xeHVJQ0FnSUdsbUlDaHNaVzRnUFQwOUlITjBZWFJsTG14bGJtZDBhQ2tnTHk4Z1pHbGtiaWQwSUdkbGRDQmhibmtnWkdGMFlTd2djM1J2Y0NCemNHbHVibWx1Wnk1Y2JpQWdJQ0FnSUdKeVpXRnJPMlZzYzJVZ2JHVnVJRDBnYzNSaGRHVXViR1Z1WjNSb08xeHVJQ0I5WEc1Y2JpQWdjM1JoZEdVdWNtVmhaR2x1WjAxdmNtVWdQU0JtWVd4elpUdGNibjBnTHk4Z1lXSnpkSEpoWTNRZ2JXVjBhRzlrTGlBZ2RHOGdZbVVnYjNabGNuSnBaR1JsYmlCcGJpQnpjR1ZqYVdacFl5QnBiWEJzWlcxbGJuUmhkR2x2YmlCamJHRnpjMlZ6TGx4dUx5OGdZMkZzYkNCallpaGxjaXdnWkdGMFlTa2dkMmhsY21VZ1pHRjBZU0JwY3lBOFBTQnVJR2x1SUd4bGJtZDBhQzVjYmk4dklHWnZjaUIyYVhKMGRXRnNJQ2h1YjI0dGMzUnlhVzVuTENCdWIyNHRZblZtWm1WeUtTQnpkSEpsWVcxekxDQmNJbXhsYm1kMGFGd2lJR2x6SUhOdmJXVjNhR0YwWEc0dkx5QmhjbUpwZEhKaGNua3NJR0Z1WkNCd1pYSm9ZWEJ6SUc1dmRDQjJaWEo1SUcxbFlXNXBibWRtZFd3dVhHNWNibHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTGw5eVpXRmtJRDBnWm5WdVkzUnBiMjRnS0c0cElIdGNiaUFnZEdocGN5NWxiV2wwS0NkbGNuSnZjaWNzSUc1bGR5QkZVbEpmVFVWVVNFOUVYMDVQVkY5SlRWQk1SVTFGVGxSRlJDZ25YM0psWVdRb0tTY3BLVHRjYm4wN1hHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3YVhCbElEMGdablZ1WTNScGIyNGdLR1JsYzNRc0lIQnBjR1ZQY0hSektTQjdYRzRnSUhaaGNpQnpjbU1nUFNCMGFHbHpPMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1WEc0Z0lITjNhWFJqYUNBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENrZ2UxeHVJQ0FnSUdOaGMyVWdNRHBjYmlBZ0lDQWdJSE4wWVhSbExuQnBjR1Z6SUQwZ1pHVnpkRHRjYmlBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ1kyRnpaU0F4T2x4dUlDQWdJQ0FnYzNSaGRHVXVjR2x3WlhNZ1BTQmJjM1JoZEdVdWNHbHdaWE1zSUdSbGMzUmRPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNWNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnYzNSaGRHVXVjR2x3WlhNdWNIVnphQ2hrWlhOMEtUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBclBTQXhPMXh1SUNCa1pXSjFaeWduY0dsd1pTQmpiM1Z1ZEQwbFpDQnZjSFJ6UFNWcUp5d2djM1JoZEdVdWNHbHdaWE5EYjNWdWRDd2djR2x3WlU5d2RITXBPMXh1SUNCMllYSWdaRzlGYm1RZ1BTQW9JWEJwY0dWUGNIUnpJSHg4SUhCcGNHVlBjSFJ6TG1WdVpDQWhQVDBnWm1Gc2MyVXBJQ1ltSUdSbGMzUWdJVDA5SUhCeWIyTmxjM011YzNSa2IzVjBJQ1ltSUdSbGMzUWdJVDA5SUhCeWIyTmxjM011YzNSa1pYSnlPMXh1SUNCMllYSWdaVzVrUm00Z1BTQmtiMFZ1WkNBL0lHOXVaVzVrSURvZ2RXNXdhWEJsTzF4dUlDQnBaaUFvYzNSaGRHVXVaVzVrUlcxcGRIUmxaQ2tnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhsYm1SR2JpazdaV3h6WlNCemNtTXViMjVqWlNnblpXNWtKeXdnWlc1a1JtNHBPMXh1SUNCa1pYTjBMbTl1S0NkMWJuQnBjR1VuTENCdmJuVnVjR2x3WlNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnYjI1MWJuQnBjR1VvY21WaFpHRmliR1VzSUhWdWNHbHdaVWx1Wm04cElIdGNiaUFnSUNCa1pXSjFaeWduYjI1MWJuQnBjR1VuS1R0Y2JseHVJQ0FnSUdsbUlDaHlaV0ZrWVdKc1pTQTlQVDBnYzNKaktTQjdYRzRnSUNBZ0lDQnBaaUFvZFc1d2FYQmxTVzVtYnlBbUppQjFibkJwY0dWSmJtWnZMbWhoYzFWdWNHbHdaV1FnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lIVnVjR2x3WlVsdVptOHVhR0Z6Vlc1d2FYQmxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJR05zWldGdWRYQW9LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJ2Ym1WdVpDZ3BJSHRjYmlBZ0lDQmtaV0oxWnlnbmIyNWxibVFuS1R0Y2JpQWdJQ0JrWlhOMExtVnVaQ2dwTzF4dUlDQjlJQzh2SUhkb1pXNGdkR2hsSUdSbGMzUWdaSEpoYVc1ekxDQnBkQ0J5WldSMVkyVnpJSFJvWlNCaGQyRnBkRVJ5WVdsdUlHTnZkVzUwWlhKY2JpQWdMeThnYjI0Z2RHaGxJSE52ZFhKalpTNGdJRlJvYVhNZ2QyOTFiR1FnWW1VZ2JXOXlaU0JsYkdWbllXNTBJSGRwZEdnZ1lTQXViMjVqWlNncFhHNGdJQzh2SUdoaGJtUnNaWElnYVc0Z1pteHZkeWdwTENCaWRYUWdZV1JrYVc1bklHRnVaQ0J5WlcxdmRtbHVaeUJ5WlhCbFlYUmxaR3g1SUdselhHNGdJQzh2SUhSdmJ5QnpiRzkzTGx4dVhHNWNiaUFnZG1GeUlHOXVaSEpoYVc0Z1BTQndhWEJsVDI1RWNtRnBiaWh6Y21NcE8xeHVJQ0JrWlhOMExtOXVLQ2RrY21GcGJpY3NJRzl1WkhKaGFXNHBPMXh1SUNCMllYSWdZMnhsWVc1bFpGVndJRDBnWm1Gc2MyVTdYRzVjYmlBZ1puVnVZM1JwYjI0Z1kyeGxZVzUxY0NncElIdGNiaUFnSUNCa1pXSjFaeWduWTJ4bFlXNTFjQ2NwT3lBdkx5QmpiR1ZoYm5Wd0lHVjJaVzUwSUdoaGJtUnNaWEp6SUc5dVkyVWdkR2hsSUhCcGNHVWdhWE1nWW5KdmEyVnVYRzVjYmlBZ0lDQmtaWE4wTG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RqYkc5elpTY3NJRzl1WTJ4dmMyVXBPMXh1SUNBZ0lHUmxjM1F1Y21WdGIzWmxUR2x6ZEdWdVpYSW9KMlpwYm1semFDY3NJRzl1Wm1sdWFYTm9LVHRjYmlBZ0lDQmtaWE4wTG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RrY21GcGJpY3NJRzl1WkhKaGFXNHBPMXh1SUNBZ0lHUmxjM1F1Y21WdGIzWmxUR2x6ZEdWdVpYSW9KMlZ5Y205eUp5d2diMjVsY25KdmNpazdYRzRnSUNBZ1pHVnpkQzV5WlcxdmRtVk1hWE4wWlc1bGNpZ25kVzV3YVhCbEp5d2diMjUxYm5CcGNHVXBPMXh1SUNBZ0lITnlZeTV5WlcxdmRtVk1hWE4wWlc1bGNpZ25aVzVrSnl3Z2IyNWxibVFwTzF4dUlDQWdJSE55WXk1eVpXMXZkbVZNYVhOMFpXNWxjaWduWlc1a0p5d2dkVzV3YVhCbEtUdGNiaUFnSUNCemNtTXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyUmhkR0VuTENCdmJtUmhkR0VwTzF4dUlDQWdJR05zWldGdVpXUlZjQ0E5SUhSeWRXVTdJQzh2SUdsbUlIUm9aU0J5WldGa1pYSWdhWE1nZDJGcGRHbHVaeUJtYjNJZ1lTQmtjbUZwYmlCbGRtVnVkQ0JtY205dElIUm9hWE5jYmlBZ0lDQXZMeUJ6Y0dWamFXWnBZeUIzY21sMFpYSXNJSFJvWlc0Z2FYUWdkMjkxYkdRZ1kyRjFjMlVnYVhRZ2RHOGdibVYyWlhJZ2MzUmhjblJjYmlBZ0lDQXZMeUJtYkc5M2FXNW5JR0ZuWVdsdUxseHVJQ0FnSUM4dklGTnZMQ0JwWmlCMGFHbHpJR2x6SUdGM1lXbDBhVzVuSUdFZ1pISmhhVzRzSUhSb1pXNGdkMlVnYW5WemRDQmpZV3hzSUdsMElHNXZkeTVjYmlBZ0lDQXZMeUJKWmlCM1pTQmtiMjRuZENCcmJtOTNMQ0IwYUdWdUlHRnpjM1Z0WlNCMGFHRjBJSGRsSUdGeVpTQjNZV2wwYVc1bklHWnZjaUJ2Ym1VdVhHNWNiaUFnSUNCcFppQW9jM1JoZEdVdVlYZGhhWFJFY21GcGJpQW1KaUFvSVdSbGMzUXVYM2R5YVhSaFlteGxVM1JoZEdVZ2ZId2daR1Z6ZEM1ZmQzSnBkR0ZpYkdWVGRHRjBaUzV1WldWa1JISmhhVzRwS1NCdmJtUnlZV2x1S0NrN1hHNGdJSDFjYmx4dUlDQnpjbU11YjI0b0oyUmhkR0VuTENCdmJtUmhkR0VwTzF4dVhHNGdJR1oxYm1OMGFXOXVJRzl1WkdGMFlTaGphSFZ1YXlrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R2Ym1SaGRHRW5LVHRjYmlBZ0lDQjJZWElnY21WMElEMGdaR1Z6ZEM1M2NtbDBaU2hqYUhWdWF5azdYRzRnSUNBZ1pHVmlkV2NvSjJSbGMzUXVkM0pwZEdVbkxDQnlaWFFwTzF4dVhHNGdJQ0FnYVdZZ0tISmxkQ0E5UFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUM4dklFbG1JSFJvWlNCMWMyVnlJSFZ1Y0dsd1pXUWdaSFZ5YVc1bklHQmtaWE4wTG5keWFYUmxLQ2xnTENCcGRDQnBjeUJ3YjNOemFXSnNaVnh1SUNBZ0lDQWdMeThnZEc4Z1oyVjBJSE4wZFdOcklHbHVJR0VnY0dWeWJXRnVaVzUwYkhrZ2NHRjFjMlZrSUhOMFlYUmxJR2xtSUhSb1lYUWdkM0pwZEdWY2JpQWdJQ0FnSUM4dklHRnNjMjhnY21WMGRYSnVaV1FnWm1Gc2MyVXVYRzRnSUNBZ0lDQXZMeUE5UGlCRGFHVmpheUIzYUdWMGFHVnlJR0JrWlhOMFlDQnBjeUJ6ZEdsc2JDQmhJSEJwY0dsdVp5QmtaWE4wYVc1aGRHbHZiaTVjYmlBZ0lDQWdJR2xtSUNnb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBOVBUMGdNU0FtSmlCemRHRjBaUzV3YVhCbGN5QTlQVDBnWkdWemRDQjhmQ0J6ZEdGMFpTNXdhWEJsYzBOdmRXNTBJRDRnTVNBbUppQnBibVJsZUU5bUtITjBZWFJsTG5CcGNHVnpMQ0JrWlhOMEtTQWhQVDBnTFRFcElDWW1JQ0ZqYkdWaGJtVmtWWEFwSUh0Y2JpQWdJQ0FnSUNBZ1pHVmlkV2NvSjJaaGJITmxJSGR5YVhSbElISmxjM0J2Ym5ObExDQndZWFZ6WlNjc0lITjBZWFJsTG1GM1lXbDBSSEpoYVc0cE8xeHVJQ0FnSUNBZ0lDQnpkR0YwWlM1aGQyRnBkRVJ5WVdsdUt5czdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSE55WXk1d1lYVnpaU2dwTzF4dUlDQWdJSDFjYmlBZ2ZTQXZMeUJwWmlCMGFHVWdaR1Z6ZENCb1lYTWdZVzRnWlhKeWIzSXNJSFJvWlc0Z2MzUnZjQ0J3YVhCcGJtY2dhVzUwYnlCcGRDNWNiaUFnTHk4Z2FHOTNaWFpsY2l3Z1pHOXVKM1FnYzNWd2NISmxjM01nZEdobElIUm9jbTkzYVc1bklHSmxhR0YyYVc5eUlHWnZjaUIwYUdsekxseHVYRzVjYmlBZ1puVnVZM1JwYjI0Z2IyNWxjbkp2Y2lobGNpa2dlMXh1SUNBZ0lHUmxZblZuS0NkdmJtVnljbTl5Snl3Z1pYSXBPMXh1SUNBZ0lIVnVjR2x3WlNncE8xeHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyVnljbTl5Snl3Z2IyNWxjbkp2Y2lrN1hHNGdJQ0FnYVdZZ0tFVkZiR2x6ZEdWdVpYSkRiM1Z1ZENoa1pYTjBMQ0FuWlhKeWIzSW5LU0E5UFQwZ01Da2daR1Z6ZEM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JpQWdmU0F2THlCTllXdGxJSE4xY21VZ2IzVnlJR1Z5Y205eUlHaGhibVJzWlhJZ2FYTWdZWFIwWVdOb1pXUWdZbVZtYjNKbElIVnpaWEpzWVc1a0lHOXVaWE11WEc1Y2JseHVJQ0J3Y21Wd1pXNWtUR2x6ZEdWdVpYSW9aR1Z6ZEN3Z0oyVnljbTl5Snl3Z2IyNWxjbkp2Y2lrN0lDOHZJRUp2ZEdnZ1kyeHZjMlVnWVc1a0lHWnBibWx6YUNCemFHOTFiR1FnZEhKcFoyZGxjaUIxYm5CcGNHVXNJR0oxZENCdmJteDVJRzl1WTJVdVhHNWNiaUFnWm5WdVkzUnBiMjRnYjI1amJHOXpaU2dwSUh0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbWFXNXBjMmduTENCdmJtWnBibWx6YUNrN1hHNGdJQ0FnZFc1d2FYQmxLQ2s3WEc0Z0lIMWNibHh1SUNCa1pYTjBMbTl1WTJVb0oyTnNiM05sSnl3Z2IyNWpiRzl6WlNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnYjI1bWFXNXBjMmdvS1NCN1hHNGdJQ0FnWkdWaWRXY29KMjl1Wm1sdWFYTm9KeWs3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0J2Ym1Oc2IzTmxLVHRjYmlBZ0lDQjFibkJwY0dVb0tUdGNiaUFnZlZ4dVhHNGdJR1JsYzNRdWIyNWpaU2duWm1sdWFYTm9KeXdnYjI1bWFXNXBjMmdwTzF4dVhHNGdJR1oxYm1OMGFXOXVJSFZ1Y0dsd1pTZ3BJSHRjYmlBZ0lDQmtaV0oxWnlnbmRXNXdhWEJsSnlrN1hHNGdJQ0FnYzNKakxuVnVjR2x3WlNoa1pYTjBLVHRjYmlBZ2ZTQXZMeUIwWld4c0lIUm9aU0JrWlhOMElIUm9ZWFFnYVhRbmN5QmlaV2x1WnlCd2FYQmxaQ0IwYjF4dVhHNWNiaUFnWkdWemRDNWxiV2wwS0Nkd2FYQmxKeXdnYzNKaktUc2dMeThnYzNSaGNuUWdkR2hsSUdac2IzY2dhV1lnYVhRZ2FHRnpiaWQwSUdKbFpXNGdjM1JoY25SbFpDQmhiSEpsWVdSNUxseHVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpteHZkMmx1WnlrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R3YVhCbElISmxjM1Z0WlNjcE8xeHVJQ0FnSUhOeVl5NXlaWE4xYldVb0tUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmtaWE4wTzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnY0dsd1pVOXVSSEpoYVc0b2MzSmpLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCd2FYQmxUMjVFY21GcGJrWjFibU4wYVc5dVVtVnpkV3gwS0NrZ2UxeHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlITnlZeTVmY21WaFpHRmliR1ZUZEdGMFpUdGNiaUFnSUNCa1pXSjFaeWduY0dsd1pVOXVSSEpoYVc0bkxDQnpkR0YwWlM1aGQyRnBkRVJ5WVdsdUtUdGNiaUFnSUNCcFppQW9jM1JoZEdVdVlYZGhhWFJFY21GcGJpa2djM1JoZEdVdVlYZGhhWFJFY21GcGJpMHRPMXh1WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbUYzWVdsMFJISmhhVzRnUFQwOUlEQWdKaVlnUlVWc2FYTjBaVzVsY2tOdmRXNTBLSE55WXl3Z0oyUmhkR0VuS1NrZ2UxeHVJQ0FnSUNBZ2MzUmhkR1V1Wm14dmQybHVaeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQm1iRzkzS0hOeVl5azdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZFc1d2FYQmxJRDBnWm5WdVkzUnBiMjRnS0dSbGMzUXBJSHRjYmlBZ2RtRnlJSE4wWVhSbElEMGdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaVHRjYmlBZ2RtRnlJSFZ1Y0dsd1pVbHVabThnUFNCN1hHNGdJQ0FnYUdGelZXNXdhWEJsWkRvZ1ptRnNjMlZjYmlBZ2ZUc2dMeThnYVdZZ2QyVW5jbVVnYm05MElIQnBjR2x1WnlCaGJubDNhR1Z5WlN3Z2RHaGxiaUJrYnlCdWIzUm9hVzVuTGx4dVhHNGdJR2xtSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwSUQwOVBTQXdLU0J5WlhSMWNtNGdkR2hwY3pzZ0x5OGdhblZ6ZENCdmJtVWdaR1Z6ZEdsdVlYUnBiMjR1SUNCdGIzTjBJR052YlcxdmJpQmpZWE5sTGx4dVhHNGdJR2xtSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwSUQwOVBTQXhLU0I3WEc0Z0lDQWdMeThnY0dGemMyVmtJR2x1SUc5dVpTd2dZblYwSUdsMEozTWdibTkwSUhSb1pTQnlhV2RvZENCdmJtVXVYRzRnSUNBZ2FXWWdLR1JsYzNRZ0ppWWdaR1Z6ZENBaFBUMGdjM1JoZEdVdWNHbHdaWE1wSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUdsbUlDZ2haR1Z6ZENrZ1pHVnpkQ0E5SUhOMFlYUmxMbkJwY0dWek95QXZMeUJuYjNRZ1lTQnRZWFJqYUM1Y2JseHVJQ0FnSUhOMFlYUmxMbkJwY0dWeklEMGdiblZzYkR0Y2JpQWdJQ0J6ZEdGMFpTNXdhWEJsYzBOdmRXNTBJRDBnTUR0Y2JpQWdJQ0J6ZEdGMFpTNW1iRzkzYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnYVdZZ0tHUmxjM1FwSUdSbGMzUXVaVzFwZENnbmRXNXdhWEJsSnl3Z2RHaHBjeXdnZFc1d2FYQmxTVzVtYnlrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDBnTHk4Z2MyeHZkeUJqWVhObExpQnRkV3gwYVhCc1pTQndhWEJsSUdSbGMzUnBibUYwYVc5dWN5NWNibHh1WEc0Z0lHbG1JQ2doWkdWemRDa2dlMXh1SUNBZ0lDOHZJSEpsYlc5MlpTQmhiR3d1WEc0Z0lDQWdkbUZ5SUdSbGMzUnpJRDBnYzNSaGRHVXVjR2x3WlhNN1hHNGdJQ0FnZG1GeUlHeGxiaUE5SUhOMFlYUmxMbkJwY0dWelEyOTFiblE3WEc0Z0lDQWdjM1JoZEdVdWNHbHdaWE1nUFNCdWRXeHNPMXh1SUNBZ0lITjBZWFJsTG5CcGNHVnpRMjkxYm5RZ1BTQXdPMXh1SUNBZ0lITjBZWFJsTG1ac2IzZHBibWNnUFNCbVlXeHpaVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0FnSUdSbGMzUnpXMmxkTG1WdGFYUW9KM1Z1Y0dsd1pTY3NJSFJvYVhNc0lIdGNiaUFnSUNBZ0lDQWdhR0Z6Vlc1d2FYQmxaRG9nWm1Gc2MyVmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOUlDOHZJSFJ5ZVNCMGJ5Qm1hVzVrSUhSb1pTQnlhV2RvZENCdmJtVXVYRzVjYmx4dUlDQjJZWElnYVc1a1pYZ2dQU0JwYm1SbGVFOW1LSE4wWVhSbExuQnBjR1Z6TENCa1pYTjBLVHRjYmlBZ2FXWWdLR2x1WkdWNElEMDlQU0F0TVNrZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUhOMFlYUmxMbkJwY0dWekxuTndiR2xqWlNocGJtUmxlQ3dnTVNrN1hHNGdJSE4wWVhSbExuQnBjR1Z6UTI5MWJuUWdMVDBnTVR0Y2JpQWdhV1lnS0hOMFlYUmxMbkJwY0dWelEyOTFiblFnUFQwOUlERXBJSE4wWVhSbExuQnBjR1Z6SUQwZ2MzUmhkR1V1Y0dsd1pYTmJNRjA3WEc0Z0lHUmxjM1F1WlcxcGRDZ25kVzV3YVhCbEp5d2dkR2hwY3l3Z2RXNXdhWEJsU1c1bWJ5azdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHNnTHk4Z2MyVjBJSFZ3SUdSaGRHRWdaWFpsYm5SeklHbG1JSFJvWlhrZ1lYSmxJR0Z6YTJWa0lHWnZjbHh1THk4Z1JXNXpkWEpsSUhKbFlXUmhZbXhsSUd4cGMzUmxibVZ5Y3lCbGRtVnVkSFZoYkd4NUlHZGxkQ0J6YjIxbGRHaHBibWRjYmx4dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXViMjRnUFNCbWRXNWpkR2x2YmlBb1pYWXNJR1p1S1NCN1hHNGdJSFpoY2lCeVpYTWdQU0JUZEhKbFlXMHVjSEp2ZEc5MGVYQmxMbTl1TG1OaGJHd29kR2hwY3l3Z1pYWXNJR1p1S1R0Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlR0Y2JseHVJQ0JwWmlBb1pYWWdQVDA5SUNka1lYUmhKeWtnZTF4dUlDQWdJQzh2SUhWd1pHRjBaU0J5WldGa1lXSnNaVXhwYzNSbGJtbHVaeUJ6YnlCMGFHRjBJSEpsYzNWdFpTZ3BJRzFoZVNCaVpTQmhJRzV2TFc5d1hHNGdJQ0FnTHk4Z1lTQm1aWGNnYkdsdVpYTWdaRzkzYmk0Z1ZHaHBjeUJwY3lCdVpXVmtaV1FnZEc4Z2MzVndjRzl5ZENCdmJtTmxLQ2R5WldGa1lXSnNaU2NwTGx4dUlDQWdJSE4wWVhSbExuSmxZV1JoWW14bFRHbHpkR1Z1YVc1bklEMGdkR2hwY3k1c2FYTjBaVzVsY2tOdmRXNTBLQ2R5WldGa1lXSnNaU2NwSUQ0Z01Ec2dMeThnVkhKNUlITjBZWEowSUdac2IzZHBibWNnYjI0Z2JtVjRkQ0IwYVdOcklHbG1JSE4wY21WaGJTQnBjMjRuZENCbGVIQnNhV05wZEd4NUlIQmhkWE5sWkZ4dVhHNGdJQ0FnYVdZZ0tITjBZWFJsTG1ac2IzZHBibWNnSVQwOUlHWmhiSE5sS1NCMGFHbHpMbkpsYzNWdFpTZ3BPMXh1SUNCOUlHVnNjMlVnYVdZZ0tHVjJJRDA5UFNBbmNtVmhaR0ZpYkdVbktTQjdYRzRnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNWxibVJGYldsMGRHVmtJQ1ltSUNGemRHRjBaUzV5WldGa1lXSnNaVXhwYzNSbGJtbHVaeWtnZTF4dUlDQWdJQ0FnYzNSaGRHVXVjbVZoWkdGaWJHVk1hWE4wWlc1cGJtY2dQU0J6ZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjM1JoZEdVdVpteHZkMmx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzNSaGRHVXVaVzFwZEhSbFpGSmxZV1JoWW14bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCa1pXSjFaeWduYjI0Z2NtVmhaR0ZpYkdVbkxDQnpkR0YwWlM1c1pXNW5kR2dzSUhOMFlYUmxMbkpsWVdScGJtY3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb2MzUmhkR1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUdWdGFYUlNaV0ZrWVdKc1pTaDBhR2x6S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lYTjBZWFJsTG5KbFlXUnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlodVVtVmhaR2x1WjA1bGVIUlVhV05yTENCMGFHbHpLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6TzF4dWZUdGNibHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG1Ga1pFeHBjM1JsYm1WeUlEMGdVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMbTl1TzF4dVhHNVNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXVjbVZ0YjNabFRHbHpkR1Z1WlhJZ1BTQm1kVzVqZEdsdmJpQW9aWFlzSUdadUtTQjdYRzRnSUhaaGNpQnlaWE1nUFNCVGRISmxZVzB1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVXhwYzNSbGJtVnlMbU5oYkd3b2RHaHBjeXdnWlhZc0lHWnVLVHRjYmx4dUlDQnBaaUFvWlhZZ1BUMDlJQ2R5WldGa1lXSnNaU2NwSUh0Y2JpQWdJQ0F2THlCWFpTQnVaV1ZrSUhSdklHTm9aV05ySUdsbUlIUm9aWEpsSUdseklITnZiV1Z2Ym1VZ2MzUnBiR3dnYkdsemRHVnVhVzVuSUhSdlhHNGdJQ0FnTHk4Z2NtVmhaR0ZpYkdVZ1lXNWtJSEpsYzJWMElIUm9aU0J6ZEdGMFpTNGdTRzkzWlhabGNpQjBhR2x6SUc1bFpXUnpJSFJ2SUdoaGNIQmxibHh1SUNBZ0lDOHZJR0ZtZEdWeUlISmxZV1JoWW14bElHaGhjeUJpWldWdUlHVnRhWFIwWldRZ1luVjBJR0psWm05eVpTQkpMMDhnS0c1bGVIUlVhV05yS1NCMGIxeHVJQ0FnSUM4dklITjFjSEJ2Y25RZ2IyNWpaU2duY21WaFpHRmliR1VuTENCbWJpa2dZM2xqYkdWekxpQlVhR2x6SUcxbFlXNXpJSFJvWVhRZ1kyRnNiR2x1WjF4dUlDQWdJQzh2SUhKbGMzVnRaU0IzYVhSb2FXNGdkR2hsSUhOaGJXVWdkR2xqYXlCM2FXeHNJR2hoZG1VZ2JtOWNiaUFnSUNBdkx5QmxabVpsWTNRdVhHNGdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWgxY0dSaGRHVlNaV0ZrWVdKc1pVeHBjM1JsYm1sdVp5d2dkR2hwY3lrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVnpPMXh1ZlR0Y2JseHVVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMbkpsYlc5MlpVRnNiRXhwYzNSbGJtVnljeUE5SUdaMWJtTjBhVzl1SUNobGRpa2dlMXh1SUNCMllYSWdjbVZ6SUQwZ1UzUnlaV0Z0TG5CeWIzUnZkSGx3WlM1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25NdVlYQndiSGtvZEdocGN5d2dZWEpuZFcxbGJuUnpLVHRjYmx4dUlDQnBaaUFvWlhZZ1BUMDlJQ2R5WldGa1lXSnNaU2NnZkh3Z1pYWWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUM4dklGZGxJRzVsWldRZ2RHOGdZMmhsWTJzZ2FXWWdkR2hsY21VZ2FYTWdjMjl0Wlc5dVpTQnpkR2xzYkNCc2FYTjBaVzVwYm1jZ2RHOWNiaUFnSUNBdkx5QnlaV0ZrWVdKc1pTQmhibVFnY21WelpYUWdkR2hsSUhOMFlYUmxMaUJJYjNkbGRtVnlJSFJvYVhNZ2JtVmxaSE1nZEc4Z2FHRndjR1Z1WEc0Z0lDQWdMeThnWVdaMFpYSWdjbVZoWkdGaWJHVWdhR0Z6SUdKbFpXNGdaVzFwZEhSbFpDQmlkWFFnWW1WbWIzSmxJRWt2VHlBb2JtVjRkRlJwWTJzcElIUnZYRzRnSUNBZ0x5OGdjM1Z3Y0c5eWRDQnZibU5sS0NkeVpXRmtZV0pzWlNjc0lHWnVLU0JqZVdOc1pYTXVJRlJvYVhNZ2JXVmhibk1nZEdoaGRDQmpZV3hzYVc1blhHNGdJQ0FnTHk4Z2NtVnpkVzFsSUhkcGRHaHBiaUIwYUdVZ2MyRnRaU0IwYVdOcklIZHBiR3dnYUdGMlpTQnViMXh1SUNBZ0lDOHZJR1ZtWm1WamRDNWNiaUFnSUNCd2NtOWpaWE56TG01bGVIUlVhV05yS0hWd1pHRjBaVkpsWVdSaFlteGxUR2x6ZEdWdWFXNW5MQ0IwYUdsektUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnlaWE03WEc1OU8xeHVYRzVtZFc1amRHbHZiaUIxY0dSaGRHVlNaV0ZrWVdKc1pVeHBjM1JsYm1sdVp5aHpaV3htS1NCN1hHNGdJSE5sYkdZdVgzSmxZV1JoWW14bFUzUmhkR1V1Y21WaFpHRmliR1ZNYVhOMFpXNXBibWNnUFNCelpXeG1MbXhwYzNSbGJtVnlRMjkxYm5Rb0ozSmxZV1JoWW14bEp5a2dQaUF3T3lBdkx5QmpjblZrWlNCM1lYa2dkRzhnWTJobFkyc2dhV1lnZDJVZ2MyaHZkV3hrSUhKbGMzVnRaVnh1WEc0Z0lHbG1JQ2h6Wld4bUxteHBjM1JsYm1WeVEyOTFiblFvSjJSaGRHRW5LU0ErSURBcElIdGNiaUFnSUNCelpXeG1MbkpsYzNWdFpTZ3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUc1U1pXRmthVzVuVG1WNGRGUnBZMnNvYzJWc1ppa2dlMXh1SUNCa1pXSjFaeWduY21WaFpHRmliR1VnYm1WNGRIUnBZMnNnY21WaFpDQXdKeWs3WEc0Z0lITmxiR1l1Y21WaFpDZ3dLVHRjYm4wZ0x5OGdjR0YxYzJVb0tTQmhibVFnY21WemRXMWxLQ2tnWVhKbElISmxiVzVoYm5SeklHOW1JSFJvWlNCc1pXZGhZM2tnY21WaFpHRmliR1VnYzNSeVpXRnRJRUZRU1Z4dUx5OGdTV1lnZEdobElIVnpaWElnZFhObGN5QjBhR1Z0TENCMGFHVnVJSE4zYVhSamFDQnBiblJ2SUc5c1pDQnRiMlJsTGx4dVhHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV5WlhOMWJXVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNWNiaUFnYVdZZ0tDRnpkR0YwWlM1bWJHOTNhVzVuS1NCN1hHNGdJQ0FnWkdWaWRXY29KM0psYzNWdFpTY3BPeUF2THlCM1pTQm1iRzkzSUc5dWJIa2dhV1lnZEdobGNtVWdhWE1nYm04Z2IyNWxJR3hwYzNSbGJtbHVaMXh1SUNBZ0lDOHZJR1p2Y2lCeVpXRmtZV0pzWlN3Z1luVjBJSGRsSUhOMGFXeHNJR2hoZG1VZ2RHOGdZMkZzYkZ4dUlDQWdJQzh2SUhKbGMzVnRaU2dwWEc1Y2JpQWdJQ0J6ZEdGMFpTNW1iRzkzYVc1bklEMGdJWE4wWVhSbExuSmxZV1JoWW14bFRHbHpkR1Z1YVc1bk8xeHVJQ0FnSUhKbGMzVnRaU2gwYUdsekxDQnpkR0YwWlNrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNibVoxYm1OMGFXOXVJSEpsYzNWdFpTaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1Y21WemRXMWxVMk5vWldSMWJHVmtLU0I3WEc0Z0lDQWdjM1JoZEdVdWNtVnpkVzFsVTJOb1pXUjFiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktISmxjM1Z0WlY4c0lITjBjbVZoYlN3Z2MzUmhkR1VwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlISmxjM1Z0WlY4b2MzUnlaV0Z0TENCemRHRjBaU2tnZTF4dUlDQmtaV0oxWnlnbmNtVnpkVzFsSnl3Z2MzUmhkR1V1Y21WaFpHbHVaeWs3WEc1Y2JpQWdhV1lnS0NGemRHRjBaUzV5WldGa2FXNW5LU0I3WEc0Z0lDQWdjM1J5WldGdExuSmxZV1FvTUNrN1hHNGdJSDFjYmx4dUlDQnpkR0YwWlM1eVpYTjFiV1ZUWTJobFpIVnNaV1FnUFNCbVlXeHpaVHRjYmlBZ2MzUnlaV0Z0TG1WdGFYUW9KM0psYzNWdFpTY3BPMXh1SUNCbWJHOTNLSE4wY21WaGJTazdYRzRnSUdsbUlDaHpkR0YwWlM1bWJHOTNhVzVuSUNZbUlDRnpkR0YwWlM1eVpXRmthVzVuS1NCemRISmxZVzB1Y21WaFpDZ3dLVHRjYm4xY2JseHVVbVZoWkdGaWJHVXVjSEp2ZEc5MGVYQmxMbkJoZFhObElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQmtaV0oxWnlnblkyRnNiQ0J3WVhWelpTQm1iRzkzYVc1blBTVnFKeXdnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bWJHOTNhVzVuS1R0Y2JseHVJQ0JwWmlBb2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNW1iRzkzYVc1bklDRTlQU0JtWVd4elpTa2dlMXh1SUNBZ0lHUmxZblZuS0Nkd1lYVnpaU2NwTzF4dUlDQWdJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WlcxcGRDZ25jR0YxYzJVbktUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnWm14dmR5aHpkSEpsWVcwcElIdGNiaUFnZG1GeUlITjBZWFJsSUQwZ2MzUnlaV0Z0TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNCa1pXSjFaeWduWm14dmR5Y3NJSE4wWVhSbExtWnNiM2RwYm1jcE8xeHVYRzRnSUhkb2FXeGxJQ2h6ZEdGMFpTNW1iRzkzYVc1bklDWW1JSE4wY21WaGJTNXlaV0ZrS0NrZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBN1hHNGdJSDFjYm4wZ0x5OGdkM0poY0NCaGJpQnZiR1F0YzNSNWJHVWdjM1J5WldGdElHRnpJSFJvWlNCaGMzbHVZeUJrWVhSaElITnZkWEpqWlM1Y2JpOHZJRlJvYVhNZ2FYTWdLbTV2ZENvZ2NHRnlkQ0J2WmlCMGFHVWdjbVZoWkdGaWJHVWdjM1J5WldGdElHbHVkR1Z5Wm1GalpTNWNiaTh2SUVsMElHbHpJR0Z1SUhWbmJIa2dkVzVtYjNKMGRXNWhkR1VnYldWemN5QnZaaUJvYVhOMGIzSjVMbHh1WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNTNjbUZ3SUQwZ1puVnVZM1JwYjI0Z0tITjBjbVZoYlNrZ2UxeHVJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lIWmhjaUJ3WVhWelpXUWdQU0JtWVd4elpUdGNiaUFnYzNSeVpXRnRMbTl1S0NkbGJtUW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnWkdWaWRXY29KM2R5WVhCd1pXUWdaVzVrSnlrN1hHNWNiaUFnSUNCcFppQW9jM1JoZEdVdVpHVmpiMlJsY2lBbUppQWhjM1JoZEdVdVpXNWtaV1FwSUh0Y2JpQWdJQ0FnSUhaaGNpQmphSFZ1YXlBOUlITjBZWFJsTG1SbFkyOWtaWEl1Wlc1a0tDazdYRzRnSUNBZ0lDQnBaaUFvWTJoMWJtc2dKaVlnWTJoMWJtc3ViR1Z1WjNSb0tTQmZkR2hwY3k1d2RYTm9LR05vZFc1cktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmRHaHBjeTV3ZFhOb0tHNTFiR3dwTzF4dUlDQjlLVHRjYmlBZ2MzUnlaV0Z0TG05dUtDZGtZWFJoSnl3Z1puVnVZM1JwYjI0Z0tHTm9kVzVyS1NCN1hHNGdJQ0FnWkdWaWRXY29KM2R5WVhCd1pXUWdaR0YwWVNjcE8xeHVJQ0FnSUdsbUlDaHpkR0YwWlM1a1pXTnZaR1Z5S1NCamFIVnVheUE5SUhOMFlYUmxMbVJsWTI5a1pYSXVkM0pwZEdVb1kyaDFibXNwT3lBdkx5QmtiMjRuZENCemEybHdJRzkyWlhJZ1ptRnNjM2tnZG1Gc2RXVnpJR2x1SUc5aWFtVmpkRTF2WkdWY2JseHVJQ0FnSUdsbUlDaHpkR0YwWlM1dlltcGxZM1JOYjJSbElDWW1JQ2hqYUhWdWF5QTlQVDBnYm5Wc2JDQjhmQ0JqYUhWdWF5QTlQVDBnZFc1a1pXWnBibVZrS1NrZ2NtVjBkWEp1TzJWc2MyVWdhV1lnS0NGemRHRjBaUzV2WW1wbFkzUk5iMlJsSUNZbUlDZ2hZMmgxYm1zZ2ZId2dJV05vZFc1ckxteGxibWQwYUNrcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUhaaGNpQnlaWFFnUFNCZmRHaHBjeTV3ZFhOb0tHTm9kVzVyS1R0Y2JseHVJQ0FnSUdsbUlDZ2hjbVYwS1NCN1hHNGdJQ0FnSUNCd1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjM1J5WldGdExuQmhkWE5sS0NrN1hHNGdJQ0FnZlZ4dUlDQjlLVHNnTHk4Z2NISnZlSGtnWVd4c0lIUm9aU0J2ZEdobGNpQnRaWFJvYjJSekxseHVJQ0F2THlCcGJYQnZjblJoYm5RZ2QyaGxiaUIzY21Gd2NHbHVaeUJtYVd4MFpYSnpJR0Z1WkNCa2RYQnNaWGhsY3k1Y2JseHVJQ0JtYjNJZ0tIWmhjaUJwSUdsdUlITjBjbVZoYlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6VzJsZElEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2RIbHdaVzltSUhOMGNtVmhiVnRwWFNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnZEdocGMxdHBYU0E5SUdaMWJtTjBhVzl1SUcxbGRHaHZaRmR5WVhBb2JXVjBhRzlrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdFpYUm9iMlJYY21Gd1VtVjBkWEp1Um5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjBjbVZoYlZ0dFpYUm9iMlJkTG1Gd2NHeDVLSE4wY21WaGJTd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUgwb2FTazdYRzRnSUNBZ2ZWeHVJQ0I5SUM4dklIQnliM2g1SUdObGNuUmhhVzRnYVcxd2IzSjBZVzUwSUdWMlpXNTBjeTVjYmx4dVhHNGdJR1p2Y2lBb2RtRnlJRzRnUFNBd095QnVJRHdnYTFCeWIzaDVSWFpsYm5SekxteGxibWQwYURzZ2Jpc3JLU0I3WEc0Z0lDQWdjM1J5WldGdExtOXVLR3RRY205NGVVVjJaVzUwYzF0dVhTd2dkR2hwY3k1bGJXbDBMbUpwYm1Rb2RHaHBjeXdnYTFCeWIzaDVSWFpsYm5SelcyNWRLU2s3WEc0Z0lIMGdMeThnZDJobGJpQjNaU0IwY25rZ2RHOGdZMjl1YzNWdFpTQnpiMjFsSUcxdmNtVWdZbmwwWlhNc0lITnBiWEJzZVNCMWJuQmhkWE5sSUhSb1pWeHVJQ0F2THlCMWJtUmxjbXg1YVc1bklITjBjbVZoYlM1Y2JseHVYRzRnSUhSb2FYTXVYM0psWVdRZ1BTQm1kVzVqZEdsdmJpQW9iaWtnZTF4dUlDQWdJR1JsWW5WbktDZDNjbUZ3Y0dWa0lGOXlaV0ZrSnl3Z2JpazdYRzVjYmlBZ0lDQnBaaUFvY0dGMWMyVmtLU0I3WEc0Z0lDQWdJQ0J3WVhWelpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lITjBjbVZoYlM1eVpYTjFiV1VvS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNXBaaUFvZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0JTWldGa1lXSnNaUzV3Y205MGIzUjVjR1ZiVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR1Z0YVhSRmVIQmxjbWx0Wlc1MFlXeFhZWEp1YVc1bktDZFNaV0ZrWVdKc1pWdFRlVzFpYjJ3dVlYTjVibU5KZEdWeVlYUnZjbDBuS1R0Y2JseHVJQ0FnSUdsbUlDaGpjbVZoZEdWU1pXRmtZV0pzWlZOMGNtVmhiVUZ6ZVc1alNYUmxjbUYwYjNJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnWTNKbFlYUmxVbVZoWkdGaWJHVlRkSEpsWVcxQmMzbHVZMGwwWlhKaGRHOXlJRDBnY21WeGRXbHlaU2duTGk5cGJuUmxjbTVoYkM5emRISmxZVzF6TDJGemVXNWpYMmwwWlhKaGRHOXlKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlZKbFlXUmhZbXhsVTNSeVpXRnRRWE41Ym1OSmRHVnlZWFJ2Y2loMGFHbHpLVHRjYmlBZ2ZUdGNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRkpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjNKbFlXUmhZbXhsU0dsbmFGZGhkR1Z5VFdGeWF5Y3NJSHRjYmlBZ0x5OGdiV0ZyYVc1bklHbDBJR1Y0Y0d4cFkybDBJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FYTWdibTkwSUdWdWRXMWxjbUZpYkdWY2JpQWdMeThnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnYzI5dFpTQndjbTkwYjNSNWNHVWdiV0Z1YVhCMWJHRjBhVzl1SUdsdVhHNGdJQzh2SUhWelpYSnNZVzVrSUhkcGJHd2dabUZwYkZ4dUlDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQm5aWFFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF6dGNiaUFnZlZ4dWZTazdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1VtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExDQW5jbVZoWkdGaWJHVkNkV1ptWlhJbkxDQjdYRzRnSUM4dklHMWhhMmx1WnlCcGRDQmxlSEJzYVdOcGRDQjBhR2x6SUhCeWIzQmxjblI1SUdseklHNXZkQ0JsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR0psWTJGMWMyVWdiM1JvWlhKM2FYTmxJSE52YldVZ2NISnZkRzkwZVhCbElHMWhibWx3ZFd4aGRHbHZiaUJwYmx4dUlDQXZMeUIxYzJWeWJHRnVaQ0IzYVd4c0lHWmhhV3hjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z1oyVjBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxJQ1ltSUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVdVluVm1abVZ5TzF4dUlDQjlYRzU5S1R0Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hTWldGa1lXSnNaUzV3Y205MGIzUjVjR1VzSUNkeVpXRmtZV0pzWlVac2IzZHBibWNuTENCN1hHNGdJQzh2SUcxaGEybHVaeUJwZENCbGVIQnNhV05wZENCMGFHbHpJSEJ5YjNCbGNuUjVJR2x6SUc1dmRDQmxiblZ0WlhKaFlteGxYRzRnSUM4dklHSmxZMkYxYzJVZ2IzUm9aWEozYVhObElITnZiV1VnY0hKdmRHOTBlWEJsSUcxaGJtbHdkV3hoZEdsdmJpQnBibHh1SUNBdkx5QjFjMlZ5YkdGdVpDQjNhV3hzSUdaaGFXeGNiaUFnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnWjJWMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtWnNiM2RwYm1jN1hHNGdJSDBzWEc0Z0lITmxkRG9nWm5WdVkzUnBiMjRnYzJWMEtITjBZWFJsS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeUE5SUhOMFlYUmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dWZTazdJQzh2SUdWNGNHOXpaV1FnWm05eUlIUmxjM1JwYm1jZ2NIVnljRzl6WlhNZ2IyNXNlUzVjYmx4dVVtVmhaR0ZpYkdVdVgyWnliMjFNYVhOMElEMGdabkp2YlV4cGMzUTdYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1VtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExDQW5jbVZoWkdGaWJHVk1aVzVuZEdnbkxDQjdYRzRnSUM4dklHMWhhMmx1WnlCcGRDQmxlSEJzYVdOcGRDQjBhR2x6SUhCeWIzQmxjblI1SUdseklHNXZkQ0JsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR0psWTJGMWMyVWdiM1JvWlhKM2FYTmxJSE52YldVZ2NISnZkRzkwZVhCbElHMWhibWx3ZFd4aGRHbHZiaUJwYmx4dUlDQXZMeUIxYzJWeWJHRnVaQ0IzYVd4c0lHWmhhV3hjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z1oyVjBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbXhsYm1kMGFEdGNiaUFnZlZ4dWZTazdJQzh2SUZCc2RXTnJJRzltWmlCdUlHSjVkR1Z6SUdaeWIyMGdZVzRnWVhKeVlYa2diMllnWW5WbVptVnljeTVjYmk4dklFeGxibWQwYUNCcGN5QjBhR1VnWTI5dFltbHVaV1FnYkdWdVozUm9jeUJ2WmlCaGJHd2dkR2hsSUdKMVptWmxjbk1nYVc0Z2RHaGxJR3hwYzNRdVhHNHZMeUJVYUdseklHWjFibU4wYVc5dUlHbHpJR1JsYzJsbmJtVmtJSFJ2SUdKbElHbHViR2x1WVdKc1pTd2djMjhnY0d4bFlYTmxJSFJoYTJVZ1kyRnlaU0IzYUdWdUlHMWhhMmx1WjF4dUx5OGdZMmhoYm1kbGN5QjBieUIwYUdVZ1puVnVZM1JwYjI0Z1ltOWtlUzVjYmx4dVpuVnVZM1JwYjI0Z1puSnZiVXhwYzNRb2Jpd2djM1JoZEdVcElIdGNiaUFnTHk4Z2JtOTBhR2x1WnlCaWRXWm1aWEpsWkZ4dUlDQnBaaUFvYzNSaGRHVXViR1Z1WjNSb0lEMDlQU0F3S1NCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnZG1GeUlISmxkRHRjYmlBZ2FXWWdLSE4wWVhSbExtOWlhbVZqZEUxdlpHVXBJSEpsZENBOUlITjBZWFJsTG1KMVptWmxjaTV6YUdsbWRDZ3BPMlZzYzJVZ2FXWWdLQ0Z1SUh4OElHNGdQajBnYzNSaGRHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0x5OGdjbVZoWkNCcGRDQmhiR3dzSUhSeWRXNWpZWFJsSUhSb1pTQnNhWE4wWEc0Z0lDQWdhV1lnS0hOMFlYUmxMbVJsWTI5a1pYSXBJSEpsZENBOUlITjBZWFJsTG1KMVptWmxjaTVxYjJsdUtDY25LVHRsYkhObElHbG1JQ2h6ZEdGMFpTNWlkV1ptWlhJdWJHVnVaM1JvSUQwOVBTQXhLU0J5WlhRZ1BTQnpkR0YwWlM1aWRXWm1aWEl1Wm1seWMzUW9LVHRsYkhObElISmxkQ0E5SUhOMFlYUmxMbUoxWm1abGNpNWpiMjVqWVhRb2MzUmhkR1V1YkdWdVozUm9LVHRjYmlBZ0lDQnpkR0YwWlM1aWRXWm1aWEl1WTJ4bFlYSW9LVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCeVpXRmtJSEJoY25RZ2IyWWdiR2x6ZEZ4dUlDQWdJSEpsZENBOUlITjBZWFJsTG1KMVptWmxjaTVqYjI1emRXMWxLRzRzSUhOMFlYUmxMbVJsWTI5a1pYSXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Z1WkZKbFlXUmhZbXhsS0hOMGNtVmhiU2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0J6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJR1JsWW5WbktDZGxibVJTWldGa1lXSnNaU2NzSUhOMFlYUmxMbVZ1WkVWdGFYUjBaV1FwTzF4dVhHNGdJR2xtSUNnaGMzUmhkR1V1Wlc1a1JXMXBkSFJsWkNrZ2UxeHVJQ0FnSUhOMFlYUmxMbVZ1WkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR1Z1WkZKbFlXUmhZbXhsVGxRc0lITjBZWFJsTENCemRISmxZVzBwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHVnVaRkpsWVdSaFlteGxUbFFvYzNSaGRHVXNJSE4wY21WaGJTa2dlMXh1SUNCa1pXSjFaeWduWlc1a1VtVmhaR0ZpYkdWT1ZDY3NJSE4wWVhSbExtVnVaRVZ0YVhSMFpXUXNJSE4wWVhSbExteGxibWQwYUNrN0lDOHZJRU5vWldOcklIUm9ZWFFnZDJVZ1pHbGtiaWQwSUdkbGRDQnZibVVnYkdGemRDQjFibk5vYVdaMExseHVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpXNWtSVzFwZEhSbFpDQW1KaUJ6ZEdGMFpTNXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0J6ZEdGMFpTNWxibVJGYldsMGRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCemRISmxZVzB1Y21WaFpHRmliR1VnUFNCbVlXeHpaVHRjYmlBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duWlc1a0p5azdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1a1pYaFBaaWg0Y3l3Z2VDa2dlMXh1SUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlIaHpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4dUlDQWdJR2xtSUNoNGMxdHBYU0E5UFQwZ2VDa2djbVYwZFhKdUlHazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdMVEU3WEc1OUlpd2lMeThnUTI5d2VYSnBaMmgwSUVwdmVXVnVkQ3dnU1c1akxpQmhibVFnYjNSb1pYSWdUbTlrWlNCamIyNTBjbWxpZFhSdmNuTXVYRzR2TDF4dUx5OGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRmNiaTh2SUdOdmNIa2diMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCa2IyTjFiV1Z1ZEdGMGFXOXVJR1pwYkdWeklDaDBhR1ZjYmk4dklGd2lVMjltZEhkaGNtVmNJaWtzSUhSdklHUmxZV3dnYVc0Z2RHaGxJRk52Wm5SM1lYSmxJSGRwZEdodmRYUWdjbVZ6ZEhKcFkzUnBiMjRzSUdsdVkyeDFaR2x1WjF4dUx5OGdkMmwwYUc5MWRDQnNhVzFwZEdGMGFXOXVJSFJvWlNCeWFXZG9kSE1nZEc4Z2RYTmxMQ0JqYjNCNUxDQnRiMlJwWm5rc0lHMWxjbWRsTENCd2RXSnNhWE5vTEZ4dUx5OGdaR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JSFJvWlNCVGIyWjBkMkZ5WlN3Z1lXNWtJSFJ2SUhCbGNtMXBkRnh1THk4Z2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjeUJtZFhKdWFYTm9aV1FnZEc4Z1pHOGdjMjhzSUhOMVltcGxZM1FnZEc4Z2RHaGxYRzR2THlCbWIyeHNiM2RwYm1jZ1kyOXVaR2wwYVc5dWN6cGNiaTh2WEc0dkx5QlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpGeHVMeThnYVc0Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEc0dkwxeHVMeThnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVTF4dUx5OGdUMUlnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmx4dUx5OGdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxDQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUbHh1THk4Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRklFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc1hHNHZMeUJFUVUxQlIwVlRJRTlTSUU5VVNFVlNJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSmNiaTh2SUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MQ0JQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VWY2JpOHZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRpQlVTRVVnVTA5R1ZGZEJVa1V1WEc0dkx5QmhJSFJ5WVc1elptOXliU0J6ZEhKbFlXMGdhWE1nWVNCeVpXRmtZV0pzWlM5M2NtbDBZV0pzWlNCemRISmxZVzBnZDJobGNtVWdlVzkxSUdSdlhHNHZMeUJ6YjIxbGRHaHBibWNnZDJsMGFDQjBhR1VnWkdGMFlTNGdJRk52YldWMGFXMWxjeUJwZENkeklHTmhiR3hsWkNCaElGd2labWxzZEdWeVhDSXNYRzR2THlCaWRYUWdkR2hoZENkeklHNXZkQ0JoSUdkeVpXRjBJRzVoYldVZ1ptOXlJR2wwTENCemFXNWpaU0IwYUdGMElHbHRjR3hwWlhNZ1lTQjBhR2x1WnlCM2FHVnlaVnh1THk4Z2MyOXRaU0JpYVhSeklIQmhjM01nZEdoeWIzVm5hQ3dnWVc1a0lHOTBhR1Z5Y3lCaGNtVWdjMmx0Y0d4NUlHbG5ibTl5WldRdUlDQW9WR2hoZENCM2IzVnNaRnh1THk4Z1ltVWdZU0IyWVd4cFpDQmxlR0Z0Y0d4bElHOW1JR0VnZEhKaGJuTm1iM0p0TENCdlppQmpiM1Z5YzJVdUtWeHVMeTljYmk4dklGZG9hV3hsSUhSb1pTQnZkWFJ3ZFhRZ2FYTWdZMkYxYzJGc2JIa2djbVZzWVhSbFpDQjBieUIwYUdVZ2FXNXdkWFFzSUdsMEozTWdibTkwSUdGY2JpOHZJRzVsWTJWemMyRnlhV3g1SUhONWJXMWxkSEpwWXlCdmNpQnplVzVqYUhKdmJtOTFjeUIwY21GdWMyWnZjbTFoZEdsdmJpNGdJRVp2Y2lCbGVHRnRjR3hsTEZ4dUx5OGdZU0I2YkdsaUlITjBjbVZoYlNCdGFXZG9kQ0IwWVd0bElHMTFiSFJwY0d4bElIQnNZV2x1TFhSbGVIUWdkM0pwZEdWektDa3NJR0Z1WkNCMGFHVnVYRzR2THlCbGJXbDBJR0VnYzJsdVoyeGxJR052YlhCeVpYTnpaV1FnWTJoMWJtc2djMjl0WlNCMGFXMWxJR2x1SUhSb1pTQm1kWFIxY21VdVhHNHZMMXh1THk4Z1NHVnlaU2R6SUdodmR5QjBhR2x6SUhkdmNtdHpPbHh1THk5Y2JpOHZJRlJvWlNCVWNtRnVjMlp2Y20wZ2MzUnlaV0Z0SUdoaGN5QmhiR3dnZEdobElHRnpjR1ZqZEhNZ2IyWWdkR2hsSUhKbFlXUmhZbXhsSUdGdVpDQjNjbWwwWVdKc1pWeHVMeThnYzNSeVpXRnRJR05zWVhOelpYTXVJQ0JYYUdWdUlIbHZkU0IzY21sMFpTaGphSFZ1YXlrc0lIUm9ZWFFnWTJGc2JITWdYM2R5YVhSbEtHTm9kVzVyTEdOaUtWeHVMeThnYVc1MFpYSnVZV3hzZVN3Z1lXNWtJSEpsZEhWeWJuTWdabUZzYzJVZ2FXWWdkR2hsY21VbmN5QmhJR3h2ZENCdlppQndaVzVrYVc1bklIZHlhWFJsYzF4dUx5OGdZblZtWm1WeVpXUWdkWEF1SUNCWGFHVnVJSGx2ZFNCallXeHNJSEpsWVdRb0tTd2dkR2hoZENCallXeHNjeUJmY21WaFpDaHVLU0IxYm5ScGJGeHVMeThnZEdobGNtVW5jeUJsYm05MVoyZ2djR1Z1WkdsdVp5QnlaV0ZrWVdKc1pTQmtZWFJoSUdKMVptWmxjbVZrSUhWd0xseHVMeTljYmk4dklFbHVJR0VnZEhKaGJuTm1iM0p0SUhOMGNtVmhiU3dnZEdobElIZHlhWFIwWlc0Z1pHRjBZU0JwY3lCd2JHRmpaV1FnYVc0Z1lTQmlkV1ptWlhJdUlDQlhhR1Z1WEc0dkx5QmZjbVZoWkNodUtTQnBjeUJqWVd4c1pXUXNJR2wwSUhSeVlXNXpabTl5YlhNZ2RHaGxJSEYxWlhWbFpDQjFjQ0JrWVhSaExDQmpZV3hzYVc1bklIUm9aVnh1THk4Z1luVm1abVZ5WldRZ1gzZHlhWFJsSUdOaUozTWdZWE1nYVhRZ1kyOXVjM1Z0WlhNZ1kyaDFibXR6TGlBZ1NXWWdZMjl1YzNWdGFXNW5JR0VnYzJsdVoyeGxYRzR2THlCM2NtbDBkR1Z1SUdOb2RXNXJJSGR2ZFd4a0lISmxjM1ZzZENCcGJpQnRkV3gwYVhCc1pTQnZkWFJ3ZFhRZ1kyaDFibXR6TENCMGFHVnVJSFJvWlNCbWFYSnpkRnh1THk4Z2IzVjBjSFYwZEdWa0lHSnBkQ0JqWVd4c2N5QjBhR1VnY21WaFpHTmlMQ0JoYm1RZ2MzVmljMlZ4ZFdWdWRDQmphSFZ1YTNNZ2FuVnpkQ0JuYnlCcGJuUnZYRzR2THlCMGFHVWdjbVZoWkNCaWRXWm1aWElzSUdGdVpDQjNhV3hzSUdOaGRYTmxJR2wwSUhSdklHVnRhWFFnSjNKbFlXUmhZbXhsSnlCcFppQnVaV05sYzNOaGNua3VYRzR2TDF4dUx5OGdWR2hwY3lCM1lYa3NJR0poWTJzdGNISmxjM04xY21VZ2FYTWdZV04wZFdGc2JIa2daR1YwWlhKdGFXNWxaQ0JpZVNCMGFHVWdjbVZoWkdsdVp5QnphV1JsTEZ4dUx5OGdjMmx1WTJVZ1gzSmxZV1FnYUdGeklIUnZJR0psSUdOaGJHeGxaQ0IwYnlCemRHRnlkQ0J3Y205alpYTnphVzVuSUdFZ2JtVjNJR05vZFc1ckxpQWdTRzkzWlhabGNpeGNiaTh2SUdFZ2NHRjBhRzlzYjJkcFkyRnNJR2x1Wm14aGRHVWdkSGx3WlNCdlppQjBjbUZ1YzJadmNtMGdZMkZ1SUdOaGRYTmxJR1Y0WTJWemMybDJaU0JpZFdabVpYSnBibWRjYmk4dklHaGxjbVV1SUNCR2IzSWdaWGhoYlhCc1pTd2dhVzFoWjJsdVpTQmhJSE4wY21WaGJTQjNhR1Z5WlNCbGRtVnllU0JpZVhSbElHOW1JR2x1Y0hWMElHbHpYRzR2THlCcGJuUmxjbkJ5WlhSbFpDQmhjeUJoYmlCcGJuUmxaMlZ5SUdaeWIyMGdNQzB5TlRVc0lHRnVaQ0IwYUdWdUlISmxjM1ZzZEhNZ2FXNGdkR2hoZENCdFlXNTVYRzR2THlCaWVYUmxjeUJ2WmlCdmRYUndkWFF1SUNCWGNtbDBhVzVuSUhSb1pTQTBJR0o1ZEdWeklIdG1aaXhtWml4bVppeG1abjBnZDI5MWJHUWdjbVZ6ZFd4MElHbHVYRzR2THlBeGEySWdiMllnWkdGMFlTQmlaV2x1WnlCdmRYUndkWFF1SUNCSmJpQjBhR2x6SUdOaGMyVXNJSGx2ZFNCamIzVnNaQ0IzY21sMFpTQmhJSFpsY25rZ2MyMWhiR3hjYmk4dklHRnRiM1Z1ZENCdlppQnBibkIxZEN3Z1lXNWtJR1Z1WkNCMWNDQjNhWFJvSUdFZ2RtVnllU0JzWVhKblpTQmhiVzkxYm5RZ2IyWWdiM1YwY0hWMExpQWdTVzVjYmk4dklITjFZMmdnWVNCd1lYUm9iMnh2WjJsallXd2dhVzVtYkdGMGFXNW5JRzFsWTJoaGJtbHpiU3dnZEdobGNtVW5aQ0JpWlNCdWJ5QjNZWGtnZEc4Z2RHVnNiRnh1THk4Z2RHaGxJSE41YzNSbGJTQjBieUJ6ZEc5d0lHUnZhVzVuSUhSb1pTQjBjbUZ1YzJadmNtMHVJQ0JCSUhOcGJtZHNaU0EwVFVJZ2QzSnBkR1VnWTI5MWJHUmNiaTh2SUdOaGRYTmxJSFJvWlNCemVYTjBaVzBnZEc4Z2NuVnVJRzkxZENCdlppQnRaVzF2Y25rdVhHNHZMMXh1THk4Z1NHOTNaWFpsY2l3Z1pYWmxiaUJwYmlCemRXTm9JR0VnY0dGMGFHOXNiMmRwWTJGc0lHTmhjMlVzSUc5dWJIa2dZU0J6YVc1bmJHVWdkM0pwZEhSbGJpQmphSFZ1YTF4dUx5OGdkMjkxYkdRZ1ltVWdZMjl1YzNWdFpXUXNJR0Z1WkNCMGFHVnVJSFJvWlNCeVpYTjBJSGR2ZFd4a0lIZGhhWFFnS0hWdUxYUnlZVzV6Wm05eWJXVmtLU0IxYm5ScGJGeHVMeThnZEdobElISmxjM1ZzZEhNZ2IyWWdkR2hsSUhCeVpYWnBiM1Z6SUhSeVlXNXpabTl5YldWa0lHTm9kVzVySUhkbGNtVWdZMjl1YzNWdFpXUXVYRzRuZFhObElITjBjbWxqZENjN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWSEpoYm5ObWIzSnRPMXh1WEc1MllYSWdYM0psY1hWcGNtVWtZMjlrWlhNZ1BTQnlaWEYxYVhKbEtDY3VMaTlsY25KdmNuTW5LUzVqYjJSbGN5eGNiaUFnSUNCRlVsSmZUVVZVU0U5RVgwNVBWRjlKVFZCTVJVMUZUbFJGUkNBOUlGOXlaWEYxYVhKbEpHTnZaR1Z6TGtWU1VsOU5SVlJJVDBSZlRrOVVYMGxOVUV4RlRVVk9WRVZFTEZ4dUlDQWdJRVZTVWw5TlZVeFVTVkJNUlY5RFFVeE1Ra0ZEU3lBOUlGOXlaWEYxYVhKbEpHTnZaR1Z6TGtWU1VsOU5WVXhVU1ZCTVJWOURRVXhNUWtGRFN5eGNiaUFnSUNCRlVsSmZWRkpCVGxOR1QxSk5YMEZNVWtWQlJGbGZWRkpCVGxOR1QxSk5TVTVISUQwZ1gzSmxjWFZwY21Va1kyOWtaWE11UlZKU1gxUlNRVTVUUms5U1RWOUJURkpGUVVSWlgxUlNRVTVUUms5U1RVbE9SeXhjYmlBZ0lDQkZVbEpmVkZKQlRsTkdUMUpOWDFkSlZFaGZURVZPUjFSSVh6QWdQU0JmY21WeGRXbHlaU1JqYjJSbGN5NUZVbEpmVkZKQlRsTkdUMUpOWDFkSlZFaGZURVZPUjFSSVh6QTdYRzVjYm5aaGNpQkVkWEJzWlhnZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzVjYm5KbGNYVnBjbVVvSjJsdWFHVnlhWFJ6Snlrb1ZISmhibk5tYjNKdExDQkVkWEJzWlhncE8xeHVYRzVtZFc1amRHbHZiaUJoWm5SbGNsUnlZVzV6Wm05eWJTaGxjaXdnWkdGMFlTa2dlMXh1SUNCMllYSWdkSE1nUFNCMGFHbHpMbDkwY21GdWMyWnZjbTFUZEdGMFpUdGNiaUFnZEhNdWRISmhibk5tYjNKdGFXNW5JRDBnWm1Gc2MyVTdYRzRnSUhaaGNpQmpZaUE5SUhSekxuZHlhWFJsWTJJN1hHNWNiaUFnYVdZZ0tHTmlJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WlcxcGRDZ25aWEp5YjNJbkxDQnVaWGNnUlZKU1gwMVZURlJKVUV4RlgwTkJURXhDUVVOTEtDa3BPMXh1SUNCOVhHNWNiaUFnZEhNdWQzSnBkR1ZqYUhWdWF5QTlJRzUxYkd3N1hHNGdJSFJ6TG5keWFYUmxZMklnUFNCdWRXeHNPMXh1SUNCcFppQW9aR0YwWVNBaFBTQnVkV3hzS1NBdkx5QnphVzVuYkdVZ1pYRjFZV3h6SUdOb1pXTnJJR1p2Y2lCaWIzUm9JR0J1ZFd4c1lDQmhibVFnWUhWdVpHVm1hVzVsWkdCY2JpQWdJQ0IwYUdsekxuQjFjMmdvWkdGMFlTazdYRzRnSUdOaUtHVnlLVHRjYmlBZ2RtRnlJSEp6SUQwZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpUdGNiaUFnY25NdWNtVmhaR2x1WnlBOUlHWmhiSE5sTzF4dVhHNGdJR2xtSUNoeWN5NXVaV1ZrVW1WaFpHRmliR1VnZkh3Z2NuTXViR1Z1WjNSb0lEd2djbk11YUdsbmFGZGhkR1Z5VFdGeWF5a2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUW9jbk11YUdsbmFGZGhkR1Z5VFdGeWF5azdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnVkhKaGJuTm1iM0p0S0c5d2RHbHZibk1wSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUZSeVlXNXpabTl5YlNrcElISmxkSFZ5YmlCdVpYY2dWSEpoYm5ObWIzSnRLRzl3ZEdsdmJuTXBPMXh1SUNCRWRYQnNaWGd1WTJGc2JDaDBhR2x6TENCdmNIUnBiMjV6S1R0Y2JpQWdkR2hwY3k1ZmRISmhibk5tYjNKdFUzUmhkR1VnUFNCN1hHNGdJQ0FnWVdaMFpYSlVjbUZ1YzJadmNtMDZJR0ZtZEdWeVZISmhibk5tYjNKdExtSnBibVFvZEdocGN5a3NYRzRnSUNBZ2JtVmxaRlJ5WVc1elptOXliVG9nWm1Gc2MyVXNYRzRnSUNBZ2RISmhibk5tYjNKdGFXNW5PaUJtWVd4elpTeGNiaUFnSUNCM2NtbDBaV05pT2lCdWRXeHNMRnh1SUNBZ0lIZHlhWFJsWTJoMWJtczZJRzUxYkd3c1hHNGdJQ0FnZDNKcGRHVmxibU52WkdsdVp6b2diblZzYkZ4dUlDQjlPeUF2THlCemRHRnlkQ0J2ZFhRZ1lYTnJhVzVuSUdadmNpQmhJSEpsWVdSaFlteGxJR1YyWlc1MElHOXVZMlVnWkdGMFlTQnBjeUIwY21GdWMyWnZjbTFsWkM1Y2JseHVJQ0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG01bFpXUlNaV0ZrWVdKc1pTQTlJSFJ5ZFdVN0lDOHZJSGRsSUdoaGRtVWdhVzF3YkdWdFpXNTBaV1FnZEdobElGOXlaV0ZrSUcxbGRHaHZaQ3dnWVc1a0lHUnZibVVnZEdobElHOTBhR1Z5SUhSb2FXNW5jMXh1SUNBdkx5QjBhR0YwSUZKbFlXUmhZbXhsSUhkaGJuUnpJR0psWm05eVpTQjBhR1VnWm1seWMzUWdYM0psWVdRZ1kyRnNiQ3dnYzI4Z2RXNXpaWFFnZEdobFhHNGdJQzh2SUhONWJtTWdaM1ZoY21RZ1pteGhaeTVjYmx4dUlDQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxMbk41Ym1NZ1BTQm1ZV3h6WlR0Y2JseHVJQ0JwWmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3k1MGNtRnVjMlp2Y20wZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhSb2FYTXVYM1J5WVc1elptOXliU0E5SUc5d2RHbHZibk11ZEhKaGJuTm1iM0p0TzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTVtYkhWemFDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2RHaHBjeTVmWm14MWMyZ2dQU0J2Y0hScGIyNXpMbVpzZFhOb08xeHVJQ0I5SUM4dklGZG9aVzRnZEdobElIZHlhWFJoWW14bElITnBaR1VnWm1sdWFYTm9aWE1zSUhSb1pXNGdabXgxYzJnZ2IzVjBJR0Z1ZVhSb2FXNW5JSEpsYldGcGJtbHVaeTVjYmx4dVhHNGdJSFJvYVhNdWIyNG9KM0J5WldacGJtbHphQ2NzSUhCeVpXWnBibWx6YUNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeVpXWnBibWx6YUNncElIdGNiaUFnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdVgyWnNkWE5vSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUNGMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpDa2dlMXh1SUNBZ0lIUm9hWE11WDJac2RYTm9LR1oxYm1OMGFXOXVJQ2hsY2l3Z1pHRjBZU2tnZTF4dUlDQWdJQ0FnWkc5dVpTaGZkR2hwY3l3Z1pYSXNJR1JoZEdFcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHUnZibVVvZEdocGN5d2diblZzYkN3Z2JuVnNiQ2s3WEc0Z0lIMWNibjFjYmx4dVZISmhibk5tYjNKdExuQnliM1J2ZEhsd1pTNXdkWE5vSUQwZ1puVnVZM1JwYjI0Z0tHTm9kVzVyTENCbGJtTnZaR2x1WnlrZ2UxeHVJQ0IwYUdsekxsOTBjbUZ1YzJadmNtMVRkR0YwWlM1dVpXVmtWSEpoYm5ObWIzSnRJRDBnWm1Gc2MyVTdYRzRnSUhKbGRIVnliaUJFZFhCc1pYZ3VjSEp2ZEc5MGVYQmxMbkIxYzJndVkyRnNiQ2gwYUdsekxDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jcE8xeHVmVHNnTHk4Z1ZHaHBjeUJwY3lCMGFHVWdjR0Z5ZENCM2FHVnlaU0I1YjNVZ1pHOGdjM1IxWm1ZaFhHNHZMeUJ2ZG1WeWNtbGtaU0IwYUdseklHWjFibU4wYVc5dUlHbHVJR2x0Y0d4bGJXVnVkR0YwYVc5dUlHTnNZWE56WlhNdVhHNHZMeUFuWTJoMWJtc25JR2x6SUdGdUlHbHVjSFYwSUdOb2RXNXJMbHh1THk5Y2JpOHZJRU5oYkd3Z1lIQjFjMmdvYm1WM1EyaDFibXNwWUNCMGJ5QndZWE56SUdGc2IyNW5JSFJ5WVc1elptOXliV1ZrSUc5MWRIQjFkRnh1THk4Z2RHOGdkR2hsSUhKbFlXUmhZbXhsSUhOcFpHVXVJQ0JaYjNVZ2JXRjVJR05oYkd3Z0ozQjFjMmduSUhwbGNtOGdiM0lnYlc5eVpTQjBhVzFsY3k1Y2JpOHZYRzR2THlCRFlXeHNJR0JqWWlobGNuSXBZQ0IzYUdWdUlIbHZkU0JoY21VZ1pHOXVaU0IzYVhSb0lIUm9hWE1nWTJoMWJtc3VJQ0JKWmlCNWIzVWdjR0Z6YzF4dUx5OGdZVzRnWlhKeWIzSXNJSFJvWlc0Z2RHaGhkQ2RzYkNCd2RYUWdkR2hsSUdoMWNuUWdiMjRnZEdobElIZG9iMnhsSUc5d1pYSmhkR2x2Ymk0Z0lFbG1JSGx2ZFZ4dUx5OGdibVYyWlhJZ1kyRnNiQ0JqWWlncExDQjBhR1Z1SUhsdmRTZHNiQ0J1WlhabGNpQm5aWFFnWVc1dmRHaGxjaUJqYUhWdWF5NWNibHh1WEc1VWNtRnVjMlp2Y20wdWNISnZkRzkwZVhCbExsOTBjbUZ1YzJadmNtMGdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0JqWWlodVpYY2dSVkpTWDAxRlZFaFBSRjlPVDFSZlNVMVFURVZOUlU1VVJVUW9KMTkwY21GdWMyWnZjbTBvS1NjcEtUdGNibjA3WEc1Y2JsUnlZVzV6Wm05eWJTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwSUh0Y2JpQWdkbUZ5SUhSeklEMGdkR2hwY3k1ZmRISmhibk5tYjNKdFUzUmhkR1U3WEc0Z0lIUnpMbmR5YVhSbFkySWdQU0JqWWp0Y2JpQWdkSE11ZDNKcGRHVmphSFZ1YXlBOUlHTm9kVzVyTzF4dUlDQjBjeTUzY21sMFpXVnVZMjlrYVc1bklEMGdaVzVqYjJScGJtYzdYRzVjYmlBZ2FXWWdLQ0YwY3k1MGNtRnVjMlp2Y20xcGJtY3BJSHRjYmlBZ0lDQjJZWElnY25NZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNBZ0lHbG1JQ2gwY3k1dVpXVmtWSEpoYm5ObWIzSnRJSHg4SUhKekxtNWxaV1JTWldGa1lXSnNaU0I4ZkNCeWN5NXNaVzVuZEdnZ1BDQnljeTVvYVdkb1YyRjBaWEpOWVhKcktTQjBhR2x6TGw5eVpXRmtLSEp6TG1ocFoyaFhZWFJsY2sxaGNtc3BPMXh1SUNCOVhHNTlPeUF2THlCRWIyVnpiaWQwSUcxaGRIUmxjaUIzYUdGMElIUm9aU0JoY21keklHRnlaU0JvWlhKbExseHVMeThnWDNSeVlXNXpabTl5YlNCa2IyVnpJR0ZzYkNCMGFHVWdkMjl5YXk1Y2JpOHZJRlJvWVhRZ2QyVWdaMjkwSUdobGNtVWdiV1ZoYm5NZ2RHaGhkQ0IwYUdVZ2NtVmhaR0ZpYkdVZ2MybGtaU0IzWVc1MGN5QnRiM0psSUdSaGRHRXVYRzVjYmx4dVZISmhibk5tYjNKdExuQnliM1J2ZEhsd1pTNWZjbVZoWkNBOUlHWjFibU4wYVc5dUlDaHVLU0I3WEc0Z0lIWmhjaUIwY3lBOUlIUm9hWE11WDNSeVlXNXpabTl5YlZOMFlYUmxPMXh1WEc0Z0lHbG1JQ2gwY3k1M2NtbDBaV05vZFc1cklDRTlQU0J1ZFd4c0lDWW1JQ0YwY3k1MGNtRnVjMlp2Y20xcGJtY3BJSHRjYmlBZ0lDQjBjeTUwY21GdWMyWnZjbTFwYm1jZ1BTQjBjblZsTzF4dVhHNGdJQ0FnZEdocGN5NWZkSEpoYm5ObWIzSnRLSFJ6TG5keWFYUmxZMmgxYm1zc0lIUnpMbmR5YVhSbFpXNWpiMlJwYm1jc0lIUnpMbUZtZEdWeVZISmhibk5tYjNKdEtUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJ0WVhKcklIUm9ZWFFnZDJVZ2JtVmxaQ0JoSUhSeVlXNXpabTl5YlN3Z2MyOGdkR2hoZENCaGJua2daR0YwWVNCMGFHRjBJR052YldWeklHbHVYRzRnSUNBZ0x5OGdkMmxzYkNCblpYUWdjSEp2WTJWemMyVmtMQ0J1YjNjZ2RHaGhkQ0IzWlNkMlpTQmhjMnRsWkNCbWIzSWdhWFF1WEc0Z0lDQWdkSE11Ym1WbFpGUnlZVzV6Wm05eWJTQTlJSFJ5ZFdVN1hHNGdJSDFjYm4wN1hHNWNibFJ5WVc1elptOXliUzV3Y205MGIzUjVjR1V1WDJSbGMzUnliM2tnUFNCbWRXNWpkR2x2YmlBb1pYSnlMQ0JqWWlrZ2UxeHVJQ0JFZFhCc1pYZ3VjSEp2ZEc5MGVYQmxMbDlrWlhOMGNtOTVMbU5oYkd3b2RHaHBjeXdnWlhKeUxDQm1kVzVqZEdsdmJpQW9aWEp5TWlrZ2UxeHVJQ0FnSUdOaUtHVnljaklwTzF4dUlDQjlLVHRjYm4wN1hHNWNibVoxYm1OMGFXOXVJR1J2Ym1Vb2MzUnlaV0Z0TENCbGNpd2daR0YwWVNrZ2UxeHVJQ0JwWmlBb1pYSXBJSEpsZEhWeWJpQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJR2xtSUNoa1lYUmhJQ0U5SUc1MWJHd3BJQzh2SUhOcGJtZHNaU0JsY1hWaGJITWdZMmhsWTJzZ1ptOXlJR0p2ZEdnZ1lHNTFiR3hnSUdGdVpDQmdkVzVrWldacGJtVmtZRnh1SUNBZ0lITjBjbVZoYlM1d2RYTm9LR1JoZEdFcE95QXZMeUJVVDBSUEtFSnlhV1JuWlVGU0tUb2dWM0pwZEdVZ1lTQjBaWE4wSUdadmNpQjBhR1Z6WlNCMGQyOGdaWEp5YjNJZ1kyRnpaWE5jYmlBZ0x5OGdhV1lnZEdobGNtVW5jeUJ1YjNSb2FXNW5JR2x1SUhSb1pTQjNjbWwwWlNCaWRXWm1aWElzSUhSb1pXNGdkR2hoZENCdFpXRnVjMXh1SUNBdkx5QjBhR0YwSUc1dmRHaHBibWNnYlc5eVpTQjNhV3hzSUdWMlpYSWdZbVVnY0hKdmRtbGtaV1JjYmx4dUlDQnBaaUFvYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbExteGxibWQwYUNrZ2RHaHliM2NnYm1WM0lFVlNVbDlVVWtGT1UwWlBVazFmVjBsVVNGOU1SVTVIVkVoZk1DZ3BPMXh1SUNCcFppQW9jM1J5WldGdExsOTBjbUZ1YzJadmNtMVRkR0YwWlM1MGNtRnVjMlp2Y20xcGJtY3BJSFJvY205M0lHNWxkeUJGVWxKZlZGSkJUbE5HVDFKTlgwRk1Va1ZCUkZsZlZGSkJUbE5HVDFKTlNVNUhLQ2s3WEc0Z0lISmxkSFZ5YmlCemRISmxZVzB1Y0hWemFDaHVkV3hzS1R0Y2JuMGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1NtOTVaVzUwTENCSmJtTXVJR0Z1WkNCdmRHaGxjaUJPYjJSbElHTnZiblJ5YVdKMWRHOXljeTVjYmk4dlhHNHZMeUJRWlhKdGFYTnphVzl1SUdseklHaGxjbVZpZVNCbmNtRnVkR1ZrTENCbWNtVmxJRzltSUdOb1lYSm5aU3dnZEc4Z1lXNTVJSEJsY25OdmJpQnZZblJoYVc1cGJtY2dZVnh1THk4Z1kyOXdlU0J2WmlCMGFHbHpJSE52Wm5SM1lYSmxJR0Z1WkNCaGMzTnZZMmxoZEdWa0lHUnZZM1Z0Wlc1MFlYUnBiMjRnWm1sc1pYTWdLSFJvWlZ4dUx5OGdYQ0pUYjJaMGQyRnlaVndpS1N3Z2RHOGdaR1ZoYkNCcGJpQjBhR1VnVTI5bWRIZGhjbVVnZDJsMGFHOTFkQ0J5WlhOMGNtbGpkR2x2Yml3Z2FXNWpiSFZrYVc1blhHNHZMeUIzYVhSb2IzVjBJR3hwYldsMFlYUnBiMjRnZEdobElISnBaMmgwY3lCMGJ5QjFjMlVzSUdOdmNIa3NJRzF2WkdsbWVTd2diV1Z5WjJVc0lIQjFZbXhwYzJnc1hHNHZMeUJrYVhOMGNtbGlkWFJsTENCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnZEdobElGTnZablIzWVhKbExDQmhibVFnZEc4Z2NHVnliV2wwWEc0dkx5QndaWEp6YjI1eklIUnZJSGRvYjIwZ2RHaGxJRk52Wm5SM1lYSmxJR2x6SUdaMWNtNXBjMmhsWkNCMGJ5QmtieUJ6Ynl3Z2MzVmlhbVZqZENCMGJ5QjBhR1ZjYmk4dklHWnZiR3h2ZDJsdVp5QmpiMjVrYVhScGIyNXpPbHh1THk5Y2JpOHZJRlJvWlNCaFltOTJaU0JqYjNCNWNtbG5hSFFnYm05MGFXTmxJR0Z1WkNCMGFHbHpJSEJsY20xcGMzTnBiMjRnYm05MGFXTmxJSE5vWVd4c0lHSmxJR2x1WTJ4MVpHVmtYRzR2THlCcGJpQmhiR3dnWTI5d2FXVnpJRzl5SUhOMVluTjBZVzUwYVdGc0lIQnZjblJwYjI1eklHOW1JSFJvWlNCVGIyWjBkMkZ5WlM1Y2JpOHZYRzR2THlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVFhHNHZMeUJQVWlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R1hHNHZMeUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPWEc0dkx5Qk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVWdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTeGNiaTh2SUVSQlRVRkhSVk1nVDFJZ1QxUklSVklnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVbHh1THk4Z1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzSUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJWeHVMeThnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9JRlJJUlNCVFQwWlVWMEZTUlM1Y2JpOHZJRUVnWW1sMElITnBiWEJzWlhJZ2RHaGhiaUJ5WldGa1lXSnNaU0J6ZEhKbFlXMXpMbHh1THk4Z1NXMXdiR1Z0Wlc1MElHRnVJR0Z6ZVc1aklDNWZkM0pwZEdVb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa3NJR0Z1WkNCcGRDZHNiQ0JvWVc1a2JHVWdZV3hzWEc0dkx5QjBhR1VnWkhKaGFXNGdaWFpsYm5RZ1pXMXBjM05wYjI0Z1lXNWtJR0oxWm1abGNtbHVaeTVjYmlkMWMyVWdjM1J5YVdOMEp6dGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JYY21sMFlXSnNaVHRjYmk4cUlEeHlaWEJzWVdObGJXVnVkRDRnS2k5Y2JseHVablZ1WTNScGIyNGdWM0pwZEdWU1pYRW9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWtnZTF4dUlDQjBhR2x6TG1Ob2RXNXJJRDBnWTJoMWJtczdYRzRnSUhSb2FYTXVaVzVqYjJScGJtY2dQU0JsYm1OdlpHbHVaenRjYmlBZ2RHaHBjeTVqWVd4c1ltRmpheUE5SUdOaU8xeHVJQ0IwYUdsekxtNWxlSFFnUFNCdWRXeHNPMXh1ZlNBdkx5QkpkQ0J6WldWdGN5QmhJR3hwYm10bFpDQnNhWE4wSUdKMWRDQnBkQ0JwY3lCdWIzUmNiaTh2SUhSb1pYSmxJSGRwYkd3Z1ltVWdiMjVzZVNBeUlHOW1JSFJvWlhObElHWnZjaUJsWVdOb0lITjBjbVZoYlZ4dVhHNWNibVoxYm1OMGFXOXVJRU52Y210bFpGSmxjWFZsYzNRb2MzUmhkR1VwSUh0Y2JpQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNCMGFHbHpMbTVsZUhRZ1BTQnVkV3hzTzF4dUlDQjBhR2x6TG1WdWRISjVJRDBnYm5Wc2JEdGNibHh1SUNCMGFHbHpMbVpwYm1semFDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J2YmtOdmNtdGxaRVpwYm1semFDaGZkR2hwY3l3Z2MzUmhkR1VwTzF4dUlDQjlPMXh1ZlZ4dUx5b2dQQzl5WlhCc1lXTmxiV1Z1ZEQ0Z0tpOWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYmx4dVhHNTJZWElnUkhWd2JHVjRPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JsZHlhWFJoWW14bExsZHlhWFJoWW14bFUzUmhkR1VnUFNCWGNtbDBZV0pzWlZOMFlYUmxPMXh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYmx4dWRtRnlJR2x1ZEdWeWJtRnNWWFJwYkNBOUlIdGNiaUFnWkdWd2NtVmpZWFJsT2lCeVpYRjFhWEpsS0NkMWRHbHNMV1JsY0hKbFkyRjBaU2NwWEc1OU8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJUZEhKbFlXMGdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDNOMGNtVmhiWE12YzNSeVpXRnRKeWs3WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVYRzUyWVhJZ1FuVm1abVZ5SUQwZ2NtVnhkV2x5WlNnblluVm1abVZ5SnlrdVFuVm1abVZ5TzF4dVhHNTJZWElnVDNWeVZXbHVkRGhCY25KaGVTQTlJR2RzYjJKaGJDNVZhVzUwT0VGeWNtRjVJSHg4SUdaMWJtTjBhVzl1SUNncElIdDlPMXh1WEc1bWRXNWpkR2x2YmlCZmRXbHVkRGhCY25KaGVWUnZRblZtWm1WeUtHTm9kVzVyS1NCN1hHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdVpuSnZiU2hqYUhWdWF5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOXBjMVZwYm5RNFFYSnlZWGtvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUJDZFdabVpYSXVhWE5DZFdabVpYSW9iMkpxS1NCOGZDQnZZbW9nYVc1emRHRnVZMlZ2WmlCUGRYSlZhVzUwT0VGeWNtRjVPMXh1ZlZ4dVhHNTJZWElnWkdWemRISnZlVWx0Y0d3Z1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMM04wY21WaGJYTXZaR1Z6ZEhKdmVTY3BPMXh1WEc1MllYSWdYM0psY1hWcGNtVWdQU0J5WlhGMWFYSmxLQ2N1TDJsdWRHVnlibUZzTDNOMGNtVmhiWE12YzNSaGRHVW5LU3hjYmlBZ0lDQm5aWFJJYVdkb1YyRjBaWEpOWVhKcklEMGdYM0psY1hWcGNtVXVaMlYwU0dsbmFGZGhkR1Z5VFdGeWF6dGNibHh1ZG1GeUlGOXlaWEYxYVhKbEpHTnZaR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpNHZaWEp5YjNKekp5a3VZMjlrWlhNc1hHNGdJQ0FnUlZKU1gwbE9Wa0ZNU1VSZlFWSkhYMVJaVUVVZ1BTQmZjbVZ4ZFdseVpTUmpiMlJsY3k1RlVsSmZTVTVXUVV4SlJGOUJVa2RmVkZsUVJTeGNiaUFnSUNCRlVsSmZUVVZVU0U5RVgwNVBWRjlKVFZCTVJVMUZUbFJGUkNBOUlGOXlaWEYxYVhKbEpHTnZaR1Z6TGtWU1VsOU5SVlJJVDBSZlRrOVVYMGxOVUV4RlRVVk9WRVZFTEZ4dUlDQWdJRVZTVWw5TlZVeFVTVkJNUlY5RFFVeE1Ra0ZEU3lBOUlGOXlaWEYxYVhKbEpHTnZaR1Z6TGtWU1VsOU5WVXhVU1ZCTVJWOURRVXhNUWtGRFN5eGNiaUFnSUNCRlVsSmZVMVJTUlVGTlgwTkJUazVQVkY5UVNWQkZJRDBnWDNKbGNYVnBjbVVrWTI5a1pYTXVSVkpTWDFOVVVrVkJUVjlEUVU1T1QxUmZVRWxRUlN4Y2JpQWdJQ0JGVWxKZlUxUlNSVUZOWDBSRlUxUlNUMWxGUkNBOUlGOXlaWEYxYVhKbEpHTnZaR1Z6TGtWU1VsOVRWRkpGUVUxZlJFVlRWRkpQV1VWRUxGeHVJQ0FnSUVWU1VsOVRWRkpGUVUxZlRsVk1URjlXUVV4VlJWTWdQU0JmY21WeGRXbHlaU1JqYjJSbGN5NUZVbEpmVTFSU1JVRk5YMDVWVEV4ZlZrRk1WVVZUTEZ4dUlDQWdJRVZTVWw5VFZGSkZRVTFmVjFKSlZFVmZRVVpVUlZKZlJVNUVJRDBnWDNKbGNYVnBjbVVrWTI5a1pYTXVSVkpTWDFOVVVrVkJUVjlYVWtsVVJWOUJSbFJGVWw5RlRrUXNYRzRnSUNBZ1JWSlNYMVZPUzA1UFYwNWZSVTVEVDBSSlRrY2dQU0JmY21WeGRXbHlaU1JqYjJSbGN5NUZVbEpmVlU1TFRrOVhUbDlGVGtOUFJFbE9SenRjYmx4dWNtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktTaFhjbWwwWVdKc1pTd2dVM1J5WldGdEtUdGNibHh1Wm5WdVkzUnBiMjRnYm05d0tDa2dlMzFjYmx4dVpuVnVZM1JwYjI0Z1YzSnBkR0ZpYkdWVGRHRjBaU2h2Y0hScGIyNXpMQ0J6ZEhKbFlXMHNJR2x6UkhWd2JHVjRLU0I3WEc0Z0lFUjFjR3hsZUNBOUlFUjFjR3hsZUNCOGZDQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzRnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPeUF2THlCRWRYQnNaWGdnYzNSeVpXRnRjeUJoY21VZ1ltOTBhQ0J5WldGa1lXSnNaU0JoYm1RZ2QzSnBkR0ZpYkdVc0lHSjFkQ0J6YUdGeVpWeHVJQ0F2THlCMGFHVWdjMkZ0WlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0x5OGdTRzkzWlhabGNpd2djMjl0WlNCallYTmxjeUJ5WlhGMWFYSmxJSE5sZEhScGJtY2diM0IwYVc5dWN5QjBieUJrYVdabVpYSmxiblJjYmlBZ0x5OGdkbUZzZFdWeklHWnZjaUIwYUdVZ2NtVmhaR0ZpYkdVZ1lXNWtJSFJvWlNCM2NtbDBZV0pzWlNCemFXUmxjeUJ2WmlCMGFHVWdaSFZ3YkdWNElITjBjbVZoYlM1Y2JpQWdMeThnVkdobGMyVWdiM0IwYVc5dWN5QmpZVzRnWW1VZ2NISnZkbWxrWldRZ2MyVndZWEpoZEdWc2VTQmhjeUJ5WldGa1lXSnNaVmhZV0NCaGJtUWdkM0pwZEdGaWJHVllXRmd1WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJwYzBSMWNHeGxlQ0FoUFQwZ0oySnZiMnhsWVc0bktTQnBjMFIxY0d4bGVDQTlJSE4wY21WaGJTQnBibk4wWVc1alpXOW1JRVIxY0d4bGVEc2dMeThnYjJKcVpXTjBJSE4wY21WaGJTQm1iR0ZuSUhSdklHbHVaR2xqWVhSbElIZG9aWFJvWlhJZ2IzSWdibTkwSUhSb2FYTWdjM1J5WldGdFhHNGdJQzh2SUdOdmJuUmhhVzV6SUdKMVptWmxjbk1nYjNJZ2IySnFaV04wY3k1Y2JseHVJQ0IwYUdsekxtOWlhbVZqZEUxdlpHVWdQU0FoSVc5d2RHbHZibk11YjJKcVpXTjBUVzlrWlR0Y2JpQWdhV1lnS0dselJIVndiR1Y0S1NCMGFHbHpMbTlpYW1WamRFMXZaR1VnUFNCMGFHbHpMbTlpYW1WamRFMXZaR1VnZkh3Z0lTRnZjSFJwYjI1ekxuZHlhWFJoWW14bFQySnFaV04wVFc5a1pUc2dMeThnZEdobElIQnZhVzUwSUdGMElIZG9hV05vSUhkeWFYUmxLQ2tnYzNSaGNuUnpJSEpsZEhWeWJtbHVaeUJtWVd4elpWeHVJQ0F2THlCT2IzUmxPaUF3SUdseklHRWdkbUZzYVdRZ2RtRnNkV1VzSUcxbFlXNXpJSFJvWVhRZ2QyVWdZV3gzWVhseklISmxkSFZ5YmlCbVlXeHpaU0JwWmx4dUlDQXZMeUIwYUdVZ1pXNTBhWEpsSUdKMVptWmxjaUJwY3lCdWIzUWdabXgxYzJobFpDQnBiVzFsWkdsaGRHVnNlU0J2YmlCM2NtbDBaU2dwWEc1Y2JpQWdkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJJRDBnWjJWMFNHbG5hRmRoZEdWeVRXRnlheWgwYUdsekxDQnZjSFJwYjI1ekxDQW5kM0pwZEdGaWJHVklhV2RvVjJGMFpYSk5ZWEpySnl3Z2FYTkVkWEJzWlhncE95QXZMeUJwWmlCZlptbHVZV3dnYUdGeklHSmxaVzRnWTJGc2JHVmtYRzVjYmlBZ2RHaHBjeTVtYVc1aGJFTmhiR3hsWkNBOUlHWmhiSE5sT3lBdkx5QmtjbUZwYmlCbGRtVnVkQ0JtYkdGbkxseHVYRzRnSUhSb2FYTXVibVZsWkVSeVlXbHVJRDBnWm1Gc2MyVTdJQzh2SUdGMElIUm9aU0J6ZEdGeWRDQnZaaUJqWVd4c2FXNW5JR1Z1WkNncFhHNWNiaUFnZEdocGN5NWxibVJwYm1jZ1BTQm1ZV3h6WlRzZ0x5OGdkMmhsYmlCbGJtUW9LU0JvWVhNZ1ltVmxiaUJqWVd4c1pXUXNJR0Z1WkNCeVpYUjFjbTVsWkZ4dVhHNGdJSFJvYVhNdVpXNWtaV1FnUFNCbVlXeHpaVHNnTHk4Z2QyaGxiaUFuWm1sdWFYTm9KeUJwY3lCbGJXbDBkR1ZrWEc1Y2JpQWdkR2hwY3k1bWFXNXBjMmhsWkNBOUlHWmhiSE5sT3lBdkx5Qm9ZWE1nYVhRZ1ltVmxiaUJrWlhOMGNtOTVaV1JjYmx4dUlDQjBhR2x6TG1SbGMzUnliM2xsWkNBOUlHWmhiSE5sT3lBdkx5QnphRzkxYkdRZ2QyVWdaR1ZqYjJSbElITjBjbWx1WjNNZ2FXNTBieUJpZFdabVpYSnpJR0psWm05eVpTQndZWE56YVc1bklIUnZJRjkzY21sMFpUOWNiaUFnTHk4Z2RHaHBjeUJwY3lCb1pYSmxJSE52SUhSb1lYUWdjMjl0WlNCdWIyUmxMV052Y21VZ2MzUnlaV0Z0Y3lCallXNGdiM0IwYVcxcGVtVWdjM1J5YVc1blhHNGdJQzh2SUdoaGJtUnNhVzVuSUdGMElHRWdiRzkzWlhJZ2JHVjJaV3d1WEc1Y2JpQWdkbUZ5SUc1dlJHVmpiMlJsSUQwZ2IzQjBhVzl1Y3k1a1pXTnZaR1ZUZEhKcGJtZHpJRDA5UFNCbVlXeHpaVHRjYmlBZ2RHaHBjeTVrWldOdlpHVlRkSEpwYm1keklEMGdJVzV2UkdWamIyUmxPeUF2THlCRGNubHdkRzhnYVhNZ2EybHVaQ0J2WmlCdmJHUWdZVzVrSUdOeWRYTjBlUzRnSUVocGMzUnZjbWxqWVd4c2VTd2dhWFJ6SUdSbFptRjFiSFFnYzNSeWFXNW5YRzRnSUM4dklHVnVZMjlrYVc1bklHbHpJQ2RpYVc1aGNua25JSE52SUhkbElHaGhkbVVnZEc4Z2JXRnJaU0IwYUdseklHTnZibVpwWjNWeVlXSnNaUzVjYmlBZ0x5OGdSWFpsY25sMGFHbHVaeUJsYkhObElHbHVJSFJvWlNCMWJtbDJaWEp6WlNCMWMyVnpJQ2QxZEdZNEp5d2dkR2h2ZFdkb0xseHVYRzRnSUhSb2FYTXVaR1ZtWVhWc2RFVnVZMjlrYVc1bklEMGdiM0IwYVc5dWN5NWtaV1poZFd4MFJXNWpiMlJwYm1jZ2ZId2dKM1YwWmpnbk95QXZMeUJ1YjNRZ1lXNGdZV04wZFdGc0lHSjFabVpsY2lCM1pTQnJaV1Z3SUhSeVlXTnJJRzltTENCaWRYUWdZU0J0WldGemRYSmxiV1Z1ZEZ4dUlDQXZMeUJ2WmlCb2IzY2diWFZqYUNCM1pTZHlaU0IzWVdsMGFXNW5JSFJ2SUdkbGRDQndkWE5vWldRZ2RHOGdjMjl0WlNCMWJtUmxjbXg1YVc1blhHNGdJQzh2SUhOdlkydGxkQ0J2Y2lCbWFXeGxMbHh1WEc0Z0lIUm9hWE11YkdWdVozUm9JRDBnTURzZ0x5OGdZU0JtYkdGbklIUnZJSE5sWlNCM2FHVnVJSGRsSjNKbElHbHVJSFJvWlNCdGFXUmtiR1VnYjJZZ1lTQjNjbWwwWlM1Y2JseHVJQ0IwYUdsekxuZHlhWFJwYm1jZ1BTQm1ZV3h6WlRzZ0x5OGdkMmhsYmlCMGNuVmxJR0ZzYkNCM2NtbDBaWE1nZDJsc2JDQmlaU0JpZFdabVpYSmxaQ0IxYm5ScGJDQXVkVzVqYjNKcktDa2dZMkZzYkZ4dVhHNGdJSFJvYVhNdVkyOXlhMlZrSUQwZ01Ec2dMeThnWVNCbWJHRm5JSFJ2SUdKbElHRmliR1VnZEc4Z2RHVnNiQ0JwWmlCMGFHVWdiMjUzY21sMFpTQmpZaUJwY3lCallXeHNaV1FnYVcxdFpXUnBZWFJsYkhrc1hHNGdJQzh2SUc5eUlHOXVJR0VnYkdGMFpYSWdkR2xqYXk0Z0lGZGxJSE5sZENCMGFHbHpJSFJ2SUhSeWRXVWdZWFFnWm1seWMzUXNJR0psWTJGMWMyVWdZVzU1WEc0Z0lDOHZJR0ZqZEdsdmJuTWdkR2hoZENCemFHOTFiR1J1SjNRZ2FHRndjR1Z1SUhWdWRHbHNJRndpYkdGMFpYSmNJaUJ6YUc5MWJHUWdaMlZ1WlhKaGJHeDVJR0ZzYzI5Y2JpQWdMeThnYm05MElHaGhjSEJsYmlCaVpXWnZjbVVnZEdobElHWnBjbk4wSUhkeWFYUmxJR05oYkd3dVhHNWNiaUFnZEdocGN5NXplVzVqSUQwZ2RISjFaVHNnTHk4Z1lTQm1iR0ZuSUhSdklHdHViM2NnYVdZZ2QyVW5jbVVnY0hKdlkyVnpjMmx1WnlCd2NtVjJhVzkxYzJ4NUlHSjFabVpsY21Wa0lHbDBaVzF6TENCM2FHbGphRnh1SUNBdkx5QnRZWGtnWTJGc2JDQjBhR1VnWDNkeWFYUmxLQ2tnWTJGc2JHSmhZMnNnYVc0Z2RHaGxJSE5oYldVZ2RHbGpheXdnYzI4Z2RHaGhkQ0IzWlNCa2IyNG5kRnh1SUNBdkx5QmxibVFnZFhBZ2FXNGdZVzRnYjNabGNteGhjSEJsWkNCdmJuZHlhWFJsSUhOcGRIVmhkR2x2Ymk1Y2JseHVJQ0IwYUdsekxtSjFabVpsY2xCeWIyTmxjM05wYm1jZ1BTQm1ZV3h6WlRzZ0x5OGdkR2hsSUdOaGJHeGlZV05ySUhSb1lYUW5jeUJ3WVhOelpXUWdkRzhnWDNkeWFYUmxLR05vZFc1ckxHTmlLVnh1WEc0Z0lIUm9hWE11YjI1M2NtbDBaU0E5SUdaMWJtTjBhVzl1SUNobGNpa2dlMXh1SUNBZ0lHOXVkM0pwZEdVb2MzUnlaV0Z0TENCbGNpazdYRzRnSUgwN0lDOHZJSFJvWlNCallXeHNZbUZqYXlCMGFHRjBJSFJvWlNCMWMyVnlJSE4xY0hCc2FXVnpJSFJ2SUhkeWFYUmxLR05vZFc1ckxHVnVZMjlrYVc1bkxHTmlLVnh1WEc1Y2JpQWdkR2hwY3k1M2NtbDBaV05pSUQwZ2JuVnNiRHNnTHk4Z2RHaGxJR0Z0YjNWdWRDQjBhR0YwSUdseklHSmxhVzVuSUhkeWFYUjBaVzRnZDJobGJpQmZkM0pwZEdVZ2FYTWdZMkZzYkdWa0xseHVYRzRnSUhSb2FYTXVkM0pwZEdWc1pXNGdQU0F3TzF4dUlDQjBhR2x6TG1KMVptWmxjbVZrVW1WeGRXVnpkQ0E5SUc1MWJHdzdYRzRnSUhSb2FYTXViR0Z6ZEVKMVptWmxjbVZrVW1WeGRXVnpkQ0E5SUc1MWJHdzdJQzh2SUc1MWJXSmxjaUJ2WmlCd1pXNWthVzVuSUhWelpYSXRjM1Z3Y0d4cFpXUWdkM0pwZEdVZ1kyRnNiR0poWTJ0elhHNGdJQzh2SUhSb2FYTWdiWFZ6ZENCaVpTQXdJR0psWm05eVpTQW5abWx1YVhOb0p5QmpZVzRnWW1VZ1pXMXBkSFJsWkZ4dVhHNGdJSFJvYVhNdWNHVnVaR2x1WjJOaUlEMGdNRHNnTHk4Z1pXMXBkQ0J3Y21WbWFXNXBjMmdnYVdZZ2RHaGxJRzl1YkhrZ2RHaHBibWNnZDJVbmNtVWdkMkZwZEdsdVp5Qm1iM0lnYVhNZ1gzZHlhWFJsSUdOaWMxeHVJQ0F2THlCVWFHbHpJR2x6SUhKbGJHVjJZVzUwSUdadmNpQnplVzVqYUhKdmJtOTFjeUJVY21GdWMyWnZjbTBnYzNSeVpXRnRjMXh1WEc0Z0lIUm9hWE11Y0hKbFptbHVhWE5vWldRZ1BTQm1ZV3h6WlRzZ0x5OGdWSEoxWlNCcFppQjBhR1VnWlhKeWIzSWdkMkZ6SUdGc2NtVmhaSGtnWlcxcGRIUmxaQ0JoYm1RZ2MyaHZkV3hrSUc1dmRDQmlaU0IwYUhKdmQyNGdZV2RoYVc1Y2JseHVJQ0IwYUdsekxtVnljbTl5UlcxcGRIUmxaQ0E5SUdaaGJITmxPeUF2THlCVGFHOTFiR1FnWTJ4dmMyVWdZbVVnWlcxcGRIUmxaQ0J2YmlCa1pYTjBjbTk1TGlCRVpXWmhkV3gwY3lCMGJ5QjBjblZsTGx4dVhHNGdJSFJvYVhNdVpXMXBkRU5zYjNObElEMGdiM0IwYVc5dWN5NWxiV2wwUTJ4dmMyVWdJVDA5SUdaaGJITmxPeUF2THlCamIzVnVkQ0JpZFdabVpYSmxaQ0J5WlhGMVpYTjBjMXh1WEc0Z0lIUm9hWE11WW5WbVptVnlaV1JTWlhGMVpYTjBRMjkxYm5RZ1BTQXdPeUF2THlCaGJHeHZZMkYwWlNCMGFHVWdabWx5YzNRZ1EyOXlhMlZrVW1WeGRXVnpkQ3dnZEdobGNtVWdhWE1nWVd4M1lYbHpYRzRnSUM4dklHOXVaU0JoYkd4dlkyRjBaV1FnWVc1a0lHWnlaV1VnZEc4Z2RYTmxMQ0JoYm1RZ2QyVWdiV0ZwYm5SaGFXNGdZWFFnYlc5emRDQjBkMjljYmx4dUlDQjBhR2x6TG1OdmNtdGxaRkpsY1hWbGMzUnpSbkpsWlNBOUlHNWxkeUJEYjNKclpXUlNaWEYxWlhOMEtIUm9hWE1wTzF4dWZWeHVYRzVYY21sMFlXSnNaVk4wWVhSbExuQnliM1J2ZEhsd1pTNW5aWFJDZFdabVpYSWdQU0JtZFc1amRHbHZiaUJuWlhSQ2RXWm1aWElvS1NCN1hHNGdJSFpoY2lCamRYSnlaVzUwSUQwZ2RHaHBjeTVpZFdabVpYSmxaRkpsY1hWbGMzUTdYRzRnSUhaaGNpQnZkWFFnUFNCYlhUdGNibHh1SUNCM2FHbHNaU0FvWTNWeWNtVnVkQ2tnZTF4dUlDQWdJRzkxZEM1d2RYTm9LR04xY25KbGJuUXBPMXh1SUNBZ0lHTjFjbkpsYm5RZ1BTQmpkWEp5Wlc1MExtNWxlSFE3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYjNWME8xeHVmVHRjYmx4dUtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RISjVJSHRjYmlBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVjNKcGRHRmliR1ZUZEdGMFpTNXdjbTkwYjNSNWNHVXNJQ2RpZFdabVpYSW5MQ0I3WEc0Z0lDQWdJQ0JuWlhRNklHbHVkR1Z5Ym1Gc1ZYUnBiQzVrWlhCeVpXTmhkR1VvWm5WdVkzUnBiMjRnZDNKcGRHRmliR1ZUZEdGMFpVSjFabVpsY2tkbGRIUmxjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwUW5WbVptVnlLQ2s3WEc0Z0lDQWdJQ0I5TENBblgzZHlhWFJoWW14bFUzUmhkR1V1WW5WbVptVnlJR2x6SUdSbGNISmxZMkYwWldRdUlGVnpaU0JmZDNKcGRHRmliR1ZUZEdGMFpTNW5aWFJDZFdabVpYSWdKeUFySUNkcGJuTjBaV0ZrTGljc0lDZEVSVkF3TURBekp5bGNiaUFnSUNCOUtUdGNiaUFnZlNCallYUmphQ0FvWHlrZ2UzMWNibjBwS0NrN0lDOHZJRlJsYzNRZ1gzZHlhWFJoWW14bFUzUmhkR1VnWm05eUlHbHVhR1Z5YVhSaGJtTmxJSFJ2SUdGalkyOTFiblFnWm05eUlFUjFjR3hsZUNCemRISmxZVzF6TEZ4dUx5OGdkMmh2YzJVZ2NISnZkRzkwZVhCbElHTm9ZV2x1SUc5dWJIa2djRzlwYm5SeklIUnZJRkpsWVdSaFlteGxMbHh1WEc1Y2JuWmhjaUJ5WldGc1NHRnpTVzV6ZEdGdVkyVTdYRzVjYm1sbUlDaDBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUZONWJXSnZiQzVvWVhOSmJuTjBZVzVqWlNBbUppQjBlWEJsYjJZZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbFcxTjViV0p2YkM1b1lYTkpibk4wWVc1alpWMGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnY21WaGJFaGhjMGx1YzNSaGJtTmxJRDBnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsVzFONWJXSnZiQzVvWVhOSmJuTjBZVzVqWlYwN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoWGNtbDBZV0pzWlN3Z1UzbHRZbTlzTG1oaGMwbHVjM1JoYm1ObExDQjdYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUhaaGJIVmxLRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdhV1lnS0hKbFlXeElZWE5KYm5OMFlXNWpaUzVqWVd4c0tIUm9hWE1zSUc5aWFtVmpkQ2twSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNZ0lUMDlJRmR5YVhSaFlteGxLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjJKcVpXTjBJQ1ltSUc5aWFtVmpkQzVmZDNKcGRHRmliR1ZUZEdGMFpTQnBibk4wWVc1alpXOW1JRmR5YVhSaFlteGxVM1JoZEdVN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYm4wZ1pXeHpaU0I3WEc0Z0lISmxZV3hJWVhOSmJuTjBZVzVqWlNBOUlHWjFibU4wYVc5dUlISmxZV3hJWVhOSmJuTjBZVzVqWlNodlltcGxZM1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxWldOMElHbHVjM1JoYm1ObGIyWWdkR2hwY3p0Y2JpQWdmVHRjYm4xY2JseHVablZ1WTNScGIyNGdWM0pwZEdGaWJHVW9iM0IwYVc5dWN5a2dlMXh1SUNCRWRYQnNaWGdnUFNCRWRYQnNaWGdnZkh3Z2NtVnhkV2x5WlNnbkxpOWZjM1J5WldGdFgyUjFjR3hsZUNjcE95QXZMeUJYY21sMFlXSnNaU0JqZEc5eUlHbHpJR0Z3Y0d4cFpXUWdkRzhnUkhWd2JHVjRaWE1zSUhSdmJ5NWNiaUFnTHk4Z1lISmxZV3hJWVhOSmJuTjBZVzVqWldBZ2FYTWdibVZqWlhOellYSjVJR0psWTJGMWMyVWdkWE5wYm1jZ2NHeGhhVzRnWUdsdWMzUmhibU5sYjJaZ1hHNGdJQzh2SUhkdmRXeGtJSEpsZEhWeWJpQm1ZV3h6WlN3Z1lYTWdibThnWUY5M2NtbDBZV0pzWlZOMFlYUmxZQ0J3Y205d1pYSjBlU0JwY3lCaGRIUmhZMmhsWkM1Y2JpQWdMeThnVkhKNWFXNW5JSFJ2SUhWelpTQjBhR1VnWTNWemRHOXRJR0JwYm5OMFlXNWpaVzltWUNCbWIzSWdWM0pwZEdGaWJHVWdhR1Z5WlNCM2FXeHNJR0ZzYzI4Z1luSmxZV3NnZEdobFhHNGdJQzh2SUU1dlpHVXVhbk1nVEdGNmVWUnlZVzV6Wm05eWJTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2QyaHBZMmdnYUdGeklHRWdibTl1TFhSeWFYWnBZV3dnWjJWMGRHVnlJR1p2Y2x4dUlDQXZMeUJnWDNkeWFYUmhZbXhsVTNSaGRHVmdJSFJvWVhRZ2QyOTFiR1FnYkdWaFpDQjBieUJwYm1acGJtbDBaU0J5WldOMWNuTnBiMjR1WEc0Z0lDOHZJRU5vWldOcmFXNW5JR1p2Y2lCaElGTjBjbVZoYlM1RWRYQnNaWGdnYVc1emRHRnVZMlVnYVhNZ1ptRnpkR1Z5SUdobGNtVWdhVzV6ZEdWaFpDQnZaaUJwYm5OcFpHVmNiaUFnTHk4Z2RHaGxJRmR5YVhSaFlteGxVM1JoZEdVZ1kyOXVjM1J5ZFdOMGIzSXNJR0YwSUd4bFlYTjBJSGRwZEdnZ1ZqZ2dOaTQxWEc1Y2JpQWdkbUZ5SUdselJIVndiR1Y0SUQwZ2RHaHBjeUJwYm5OMFlXNWpaVzltSUVSMWNHeGxlRHRjYmlBZ2FXWWdLQ0ZwYzBSMWNHeGxlQ0FtSmlBaGNtVmhiRWhoYzBsdWMzUmhibU5sTG1OaGJHd29WM0pwZEdGaWJHVXNJSFJvYVhNcEtTQnlaWFIxY200Z2JtVjNJRmR5YVhSaFlteGxLRzl3ZEdsdmJuTXBPMXh1SUNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbElEMGdibVYzSUZkeWFYUmhZbXhsVTNSaGRHVW9iM0IwYVc5dWN5d2dkR2hwY3l3Z2FYTkVkWEJzWlhncE95QXZMeUJzWldkaFkza3VYRzVjYmlBZ2RHaHBjeTUzY21sMFlXSnNaU0E5SUhSeWRXVTdYRzVjYmlBZ2FXWWdLRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVkM0pwZEdVZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhSb2FYTXVYM2R5YVhSbElEMGdiM0IwYVc5dWN5NTNjbWwwWlR0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11ZDNKcGRHVjJJRDA5UFNBblpuVnVZM1JwYjI0bktTQjBhR2x6TGw5M2NtbDBaWFlnUFNCdmNIUnBiMjV6TG5keWFYUmxkanRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVaR1Z6ZEhKdmVTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2RHaHBjeTVmWkdWemRISnZlU0E5SUc5d2RHbHZibk11WkdWemRISnZlVHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTXVabWx1WVd3Z1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhSb2FYTXVYMlpwYm1Gc0lEMGdiM0IwYVc5dWN5NW1hVzVoYkR0Y2JpQWdmVnh1WEc0Z0lGTjBjbVZoYlM1allXeHNLSFJvYVhNcE8xeHVmU0F2THlCUGRHaGxjbmRwYzJVZ2NHVnZjR3hsSUdOaGJpQndhWEJsSUZkeWFYUmhZbXhsSUhOMGNtVmhiWE1zSUhkb2FXTm9JR2x6SUdwMWMzUWdkM0p2Ym1jdVhHNWNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG5CcGNHVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvYVhNdVpXMXBkQ2duWlhKeWIzSW5MQ0J1WlhjZ1JWSlNYMU5VVWtWQlRWOURRVTVPVDFSZlVFbFFSU2dwS1R0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUhkeWFYUmxRV1owWlhKRmJtUW9jM1J5WldGdExDQmpZaWtnZTF4dUlDQjJZWElnWlhJZ1BTQnVaWGNnUlZKU1gxTlVVa1ZCVFY5WFVrbFVSVjlCUmxSRlVsOUZUa1FvS1RzZ0x5OGdWRTlFVHpvZ1pHVm1aWElnWlhKeWIzSWdaWFpsYm5SeklHTnZibk5wYzNSbGJuUnNlU0JsZG1WeWVYZG9aWEpsTENCdWIzUWdhblZ6ZENCMGFHVWdZMkpjYmx4dUlDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMklzSUdWeUtUdGNibjBnTHk4Z1EyaGxZMnR6SUhSb1lYUWdZU0IxYzJWeUxYTjFjSEJzYVdWa0lHTm9kVzVySUdseklIWmhiR2xrTENCbGMzQmxZMmxoYkd4NUlHWnZjaUIwYUdVZ2NHRnlkR2xqZFd4aGNseHVMeThnYlc5a1pTQjBhR1VnYzNSeVpXRnRJR2x6SUdsdUxpQkRkWEp5Wlc1MGJIa2dkR2hwY3lCdFpXRnVjeUIwYUdGMElHQnVkV3hzWUNCcGN5QnVaWFpsY2lCaFkyTmxjSFJsWkZ4dUx5OGdZVzVrSUhWdVpHVm1hVzVsWkM5dWIyNHRjM1J5YVc1bklIWmhiSFZsY3lCaGNtVWdiMjVzZVNCaGJHeHZkMlZrSUdsdUlHOWlhbVZqZENCdGIyUmxMbHh1WEc1Y2JtWjFibU4wYVc5dUlIWmhiR2xrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUdOaUtTQjdYRzRnSUhaaGNpQmxjanRjYmx4dUlDQnBaaUFvWTJoMWJtc2dQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQmxjaUE5SUc1bGR5QkZVbEpmVTFSU1JVRk5YMDVWVEV4ZlZrRk1WVVZUS0NrN1hHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR05vZFc1cklDRTlQU0FuYzNSeWFXNW5KeUFtSmlBaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNrZ2UxeHVJQ0FnSUdWeUlEMGdibVYzSUVWU1VsOUpUbFpCVEVsRVgwRlNSMTlVV1ZCRktDZGphSFZ1YXljc0lGc25jM1J5YVc1bkp5d2dKMEoxWm1abGNpZGRMQ0JqYUhWdWF5azdYRzRnSUgxY2JseHVJQ0JwWmlBb1pYSXBJSHRjYmlBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWWl3Z1pYSXBPMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIwY25WbE8xeHVmVnh1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdWQzSnBkR1VnUFNCbWRXNWpkR2x2YmlBb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxPMXh1SUNCMllYSWdjbVYwSUQwZ1ptRnNjMlU3WEc1Y2JpQWdkbUZ5SUdselFuVm1JRDBnSVhOMFlYUmxMbTlpYW1WamRFMXZaR1VnSmlZZ1gybHpWV2x1ZERoQmNuSmhlU2hqYUhWdWF5azdYRzVjYmlBZ2FXWWdLR2x6UW5WbUlDWW1JQ0ZDZFdabVpYSXVhWE5DZFdabVpYSW9ZMmgxYm1zcEtTQjdYRzRnSUNBZ1kyaDFibXNnUFNCZmRXbHVkRGhCY25KaGVWUnZRblZtWm1WeUtHTm9kVzVyS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaVzVqYjJScGJtY2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCallpQTlJR1Z1WTI5a2FXNW5PMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hwYzBKMVppa2daVzVqYjJScGJtY2dQU0FuWW5WbVptVnlKenRsYkhObElHbG1JQ2doWlc1amIyUnBibWNwSUdWdVkyOWthVzVuSUQwZ2MzUmhkR1V1WkdWbVlYVnNkRVZ1WTI5a2FXNW5PMXh1SUNCcFppQW9kSGx3Wlc5bUlHTmlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQmpZaUE5SUc1dmNEdGNiaUFnYVdZZ0tITjBZWFJsTG1WdVpHbHVaeWtnZDNKcGRHVkJablJsY2tWdVpDaDBhR2x6TENCallpazdaV3h6WlNCcFppQW9hWE5DZFdZZ2ZId2dkbUZzYVdSRGFIVnVheWgwYUdsekxDQnpkR0YwWlN3Z1kyaDFibXNzSUdOaUtTa2dlMXh1SUNBZ0lITjBZWFJsTG5CbGJtUnBibWRqWWlzck8xeHVJQ0FnSUhKbGRDQTlJSGR5YVhSbFQzSkNkV1ptWlhJb2RHaHBjeXdnYzNSaGRHVXNJR2x6UW5WbUxDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG1OdmNtc2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1V1WTI5eWEyVmtLeXM3WEc1OU8xeHVYRzVYY21sMFlXSnNaUzV3Y205MGIzUjVjR1V1ZFc1amIzSnJJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVYRzRnSUdsbUlDaHpkR0YwWlM1amIzSnJaV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNWpiM0pyWldRdExUdGNiaUFnSUNCcFppQW9JWE4wWVhSbExuZHlhWFJwYm1jZ0ppWWdJWE4wWVhSbExtTnZjbXRsWkNBbUppQWhjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBbUppQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FwSUdOc1pXRnlRblZtWm1WeUtIUm9hWE1zSUhOMFlYUmxLVHRjYmlBZ2ZWeHVmVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExuTmxkRVJsWm1GMWJIUkZibU52WkdsdVp5QTlJR1oxYm1OMGFXOXVJSE5sZEVSbFptRjFiSFJGYm1OdlpHbHVaeWhsYm1OdlpHbHVaeWtnZTF4dUlDQXZMeUJ1YjJSbE9qcFFZWEp6WlVWdVkyOWthVzVuS0NrZ2NtVnhkV2x5WlhNZ2JHOTNaWElnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBOVBUMGdKM04wY21sdVp5Y3BJR1Z1WTI5a2FXNW5JRDBnWlc1amIyUnBibWN1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnYVdZZ0tDRW9XeWRvWlhnbkxDQW5kWFJtT0Njc0lDZDFkR1l0T0Njc0lDZGhjMk5wYVNjc0lDZGlhVzVoY25rbkxDQW5ZbUZ6WlRZMEp5d2dKM1ZqY3pJbkxDQW5kV056TFRJbkxDQW5kWFJtTVRac1pTY3NJQ2QxZEdZdE1UWnNaU2NzSUNkeVlYY25YUzVwYm1SbGVFOW1LQ2hsYm1OdlpHbHVaeUFySUNjbktTNTBiMHh2ZDJWeVEyRnpaU2dwS1NBK0lDMHhLU2tnZEdoeWIzY2dibVYzSUVWU1VsOVZUa3RPVDFkT1gwVk9RMDlFU1U1SEtHVnVZMjlrYVc1bktUdGNiaUFnZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1a1pXWmhkV3gwUlc1amIyUnBibWNnUFNCbGJtTnZaR2x1Wnp0Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1YzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExDQW5kM0pwZEdGaWJHVkNkV1ptWlhJbkxDQjdYRzRnSUM4dklHMWhhMmx1WnlCcGRDQmxlSEJzYVdOcGRDQjBhR2x6SUhCeWIzQmxjblI1SUdseklHNXZkQ0JsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR0psWTJGMWMyVWdiM1JvWlhKM2FYTmxJSE52YldVZ2NISnZkRzkwZVhCbElHMWhibWx3ZFd4aGRHbHZiaUJwYmx4dUlDQXZMeUIxYzJWeWJHRnVaQ0IzYVd4c0lHWmhhV3hjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z1oyVjBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxJQ1ltSUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVdVoyVjBRblZtWm1WeUtDazdYRzRnSUgxY2JuMHBPMXh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYUhWdWF5aHpkR0YwWlN3Z1kyaDFibXNzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNBbUppQnpkR0YwWlM1a1pXTnZaR1ZUZEhKcGJtZHpJQ0U5UFNCbVlXeHpaU0FtSmlCMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0JDZFdabVpYSXVabkp2YlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdOb2RXNXJPMXh1ZlZ4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTENBbmQzSnBkR0ZpYkdWSWFXZG9WMkYwWlhKTllYSnJKeXdnZTF4dUlDQXZMeUJ0WVd0cGJtY2dhWFFnWlhod2JHbGphWFFnZEdocGN5QndjbTl3WlhKMGVTQnBjeUJ1YjNRZ1pXNTFiV1Z5WVdKc1pWeHVJQ0F2THlCaVpXTmhkWE5sSUc5MGFHVnlkMmx6WlNCemIyMWxJSEJ5YjNSdmRIbHdaU0J0WVc1cGNIVnNZWFJwYjI0Z2FXNWNiaUFnTHk4Z2RYTmxjbXhoYm1RZ2QybHNiQ0JtWVdsc1hHNGdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNCblpYUTZJR1oxYm1OMGFXOXVJR2RsZENncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1b2FXZG9WMkYwWlhKTllYSnJPMXh1SUNCOVhHNTlLVHNnTHk4Z2FXWWdkMlVuY21VZ1lXeHlaV0ZrZVNCM2NtbDBhVzVuSUhOdmJXVjBhR2x1Wnl3Z2RHaGxiaUJxZFhOMElIQjFkQ0IwYUdselhHNHZMeUJwYmlCMGFHVWdjWFZsZFdVc0lHRnVaQ0IzWVdsMElHOTFjaUIwZFhKdUxpQWdUM1JvWlhKM2FYTmxMQ0JqWVd4c0lGOTNjbWwwWlZ4dUx5OGdTV1lnZDJVZ2NtVjBkWEp1SUdaaGJITmxMQ0IwYUdWdUlIZGxJRzVsWldRZ1lTQmtjbUZwYmlCbGRtVnVkQ3dnYzI4Z2MyVjBJSFJvWVhRZ1pteGhaeTVjYmx4dVpuVnVZM1JwYjI0Z2QzSnBkR1ZQY2tKMVptWmxjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQnBjMEoxWml3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCcFppQW9JV2x6UW5WbUtTQjdYRzRnSUNBZ2RtRnlJRzVsZDBOb2RXNXJJRDBnWkdWamIyUmxRMmgxYm1zb2MzUmhkR1VzSUdOb2RXNXJMQ0JsYm1OdlpHbHVaeWs3WEc1Y2JpQWdJQ0JwWmlBb1kyaDFibXNnSVQwOUlHNWxkME5vZFc1cktTQjdYRzRnSUNBZ0lDQnBjMEoxWmlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0JsYm1OdlpHbHVaeUE5SUNkaWRXWm1aWEluTzF4dUlDQWdJQ0FnWTJoMWJtc2dQU0J1WlhkRGFIVnVhenRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ2JHVnVJRDBnYzNSaGRHVXViMkpxWldOMFRXOWtaU0EvSURFZ09pQmphSFZ1YXk1c1pXNW5kR2c3WEc0Z0lITjBZWFJsTG14bGJtZDBhQ0FyUFNCc1pXNDdYRzRnSUhaaGNpQnlaWFFnUFNCemRHRjBaUzVzWlc1bmRHZ2dQQ0J6ZEdGMFpTNW9hV2RvVjJGMFpYSk5ZWEpyT3lBdkx5QjNaU0J0ZFhOMElHVnVjM1Z5WlNCMGFHRjBJSEJ5WlhacGIzVnpJRzVsWldSRWNtRnBiaUIzYVd4c0lHNXZkQ0JpWlNCeVpYTmxkQ0IwYnlCbVlXeHpaUzVjYmx4dUlDQnBaaUFvSVhKbGRDa2djM1JoZEdVdWJtVmxaRVJ5WVdsdUlEMGdkSEoxWlR0Y2JseHVJQ0JwWmlBb2MzUmhkR1V1ZDNKcGRHbHVaeUI4ZkNCemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQjJZWElnYkdGemRDQTlJSE4wWVhSbExteGhjM1JDZFdabVpYSmxaRkpsY1hWbGMzUTdYRzRnSUNBZ2MzUmhkR1V1YkdGemRFSjFabVpsY21Wa1VtVnhkV1Z6ZENBOUlIdGNiaUFnSUNBZ0lHTm9kVzVyT2lCamFIVnVheXhjYmlBZ0lDQWdJR1Z1WTI5a2FXNW5PaUJsYm1OdlpHbHVaeXhjYmlBZ0lDQWdJR2x6UW5WbU9pQnBjMEoxWml4Y2JpQWdJQ0FnSUdOaGJHeGlZV05yT2lCallpeGNiaUFnSUNBZ0lHNWxlSFE2SUc1MWJHeGNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLR3hoYzNRcElIdGNiaUFnSUNBZ0lHeGhjM1F1Ym1WNGRDQTlJSE4wWVhSbExteGhjM1JDZFdabVpYSmxaRkpsY1hWbGMzUTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMFlYUmxMbUoxWm1abGNtVmtVbVZ4ZFdWemRDQTlJSE4wWVhSbExteGhjM1JDZFdabVpYSmxaRkpsY1hWbGMzUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR1V1WW5WbVptVnlaV1JTWlhGMVpYTjBRMjkxYm5RZ0t6MGdNVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JrYjFkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lHWmhiSE5sTENCc1pXNHNJR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhKbGREdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1pHOVhjbWwwWlNoemRISmxZVzBzSUhOMFlYUmxMQ0IzY21sMFpYWXNJR3hsYml3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCemRHRjBaUzUzY21sMFpXeGxiaUE5SUd4bGJqdGNiaUFnYzNSaGRHVXVkM0pwZEdWallpQTlJR05pTzF4dUlDQnpkR0YwWlM1M2NtbDBhVzVuSUQwZ2RISjFaVHRjYmlBZ2MzUmhkR1V1YzNsdVl5QTlJSFJ5ZFdVN1hHNGdJR2xtSUNoemRHRjBaUzVrWlhOMGNtOTVaV1FwSUhOMFlYUmxMbTl1ZDNKcGRHVW9ibVYzSUVWU1VsOVRWRkpGUVUxZlJFVlRWRkpQV1VWRUtDZDNjbWwwWlNjcEtUdGxiSE5sSUdsbUlDaDNjbWwwWlhZcElITjBjbVZoYlM1ZmQzSnBkR1YyS0dOb2RXNXJMQ0J6ZEdGMFpTNXZibmR5YVhSbEtUdGxiSE5sSUhOMGNtVmhiUzVmZDNKcGRHVW9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQnpkR0YwWlM1dmJuZHlhWFJsS1R0Y2JpQWdjM1JoZEdVdWMzbHVZeUE5SUdaaGJITmxPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZibmR5YVhSbFJYSnliM0lvYzNSeVpXRnRMQ0J6ZEdGMFpTd2djM2x1WXl3Z1pYSXNJR05pS1NCN1hHNGdJQzB0YzNSaGRHVXVjR1Z1WkdsdVoyTmlPMXh1WEc0Z0lHbG1JQ2h6ZVc1aktTQjdYRzRnSUNBZ0x5OGdaR1ZtWlhJZ2RHaGxJR05oYkd4aVlXTnJJR2xtSUhkbElHRnlaU0JpWldsdVp5QmpZV3hzWldRZ2MzbHVZMmh5YjI1dmRYTnNlVnh1SUNBZ0lDOHZJSFJ2SUdGMmIybGtJSEJwYkdsdVp5QjFjQ0IwYUdsdVozTWdiMjRnZEdobElITjBZV05yWEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpZaXdnWlhJcE95QXZMeUIwYUdseklHTmhiaUJsYldsMElHWnBibWx6YUN3Z1lXNWtJR2wwSUhkcGJHd2dZV3gzWVhseklHaGhjSEJsYmx4dUlDQWdJQzh2SUdGbWRHVnlJR1Z5Y205eVhHNWNiaUFnSUNCd2NtOWpaWE56TG01bGVIUlVhV05yS0dacGJtbHphRTFoZVdKbExDQnpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0J6ZEhKbFlXMHVYM2R5YVhSaFlteGxVM1JoZEdVdVpYSnliM0pGYldsMGRHVmtJRDBnZEhKMVpUdGNiaUFnSUNCemRISmxZVzB1WlcxcGRDZ25aWEp5YjNJbkxDQmxjaWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z2RHaGxJR05oYkd4bGNpQmxlSEJsWTNRZ2RHaHBjeUIwYnlCb1lYQndaVzRnWW1WbWIzSmxJR2xtWEc0Z0lDQWdMeThnYVhRZ2FYTWdZWE41Ym1OY2JpQWdJQ0JqWWlobGNpazdYRzRnSUNBZ2MzUnlaV0Z0TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVZ5Y205eVJXMXBkSFJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjJWeWNtOXlKeXdnWlhJcE95QXZMeUIwYUdseklHTmhiaUJsYldsMElHWnBibWx6YUN3Z1luVjBJR1pwYm1semFDQnRkWE4wWEc0Z0lDQWdMeThnWVd4M1lYbHpJR1p2Ykd4dmR5Qmxjbkp2Y2x4dVhHNGdJQ0FnWm1sdWFYTm9UV0Y1WW1Vb2MzUnlaV0Z0TENCemRHRjBaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2IyNTNjbWwwWlZOMFlYUmxWWEJrWVhSbEtITjBZWFJsS1NCN1hHNGdJSE4wWVhSbExuZHlhWFJwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdjM1JoZEdVdWQzSnBkR1ZqWWlBOUlHNTFiR3c3WEc0Z0lITjBZWFJsTG14bGJtZDBhQ0F0UFNCemRHRjBaUzUzY21sMFpXeGxianRjYmlBZ2MzUmhkR1V1ZDNKcGRHVnNaVzRnUFNBd08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdmJuZHlhWFJsS0hOMGNtVmhiU3dnWlhJcElIdGNiaUFnZG1GeUlITjBZWFJsSUQwZ2MzUnlaV0Z0TGw5M2NtbDBZV0pzWlZOMFlYUmxPMXh1SUNCMllYSWdjM2x1WXlBOUlITjBZWFJsTG5ONWJtTTdYRzRnSUhaaGNpQmpZaUE5SUhOMFlYUmxMbmR5YVhSbFkySTdYRzRnSUdsbUlDaDBlWEJsYjJZZ1kySWdJVDA5SUNkbWRXNWpkR2x2YmljcElIUm9jbTkzSUc1bGR5QkZVbEpmVFZWTVZFbFFURVZmUTBGTVRFSkJRMHNvS1R0Y2JpQWdiMjUzY21sMFpWTjBZWFJsVlhCa1lYUmxLSE4wWVhSbEtUdGNiaUFnYVdZZ0tHVnlLU0J2Ym5keWFYUmxSWEp5YjNJb2MzUnlaV0Z0TENCemRHRjBaU3dnYzNsdVl5d2daWElzSUdOaUtUdGxiSE5sSUh0Y2JpQWdJQ0F2THlCRGFHVmpheUJwWmlCM1pTZHlaU0JoWTNSMVlXeHNlU0J5WldGa2VTQjBieUJtYVc1cGMyZ3NJR0oxZENCa2IyNG5kQ0JsYldsMElIbGxkRnh1SUNBZ0lIWmhjaUJtYVc1cGMyaGxaQ0E5SUc1bFpXUkdhVzVwYzJnb2MzUmhkR1VwTzF4dVhHNGdJQ0FnYVdZZ0tDRm1hVzVwYzJobFpDQW1KaUFoYzNSaGRHVXVZMjl5YTJWa0lDWW1JQ0Z6ZEdGMFpTNWlkV1ptWlhKUWNtOWpaWE56YVc1bklDWW1JSE4wWVhSbExtSjFabVpsY21Wa1VtVnhkV1Z6ZENrZ2UxeHVJQ0FnSUNBZ1kyeGxZWEpDZFdabVpYSW9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tITjVibU1wSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWVdaMFpYSlhjbWwwWlN3Z2MzUnlaV0Z0TENCemRHRjBaU3dnWm1sdWFYTm9aV1FzSUdOaUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVdaMFpYSlhjbWwwWlNoemRISmxZVzBzSUhOMFlYUmxMQ0JtYVc1cGMyaGxaQ3dnWTJJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhablJsY2xkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lHWnBibWx6YUdWa0xDQmpZaWtnZTF4dUlDQnBaaUFvSVdacGJtbHphR1ZrS1NCdmJuZHlhWFJsUkhKaGFXNG9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSE4wWVhSbExuQmxibVJwYm1kallpMHRPMXh1SUNCallpZ3BPMXh1SUNCbWFXNXBjMmhOWVhsaVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JuMGdMeThnVFhWemRDQm1iM0pqWlNCallXeHNZbUZqYXlCMGJ5QmlaU0JqWVd4c1pXUWdiMjRnYm1WNGRGUnBZMnNzSUhOdklIUm9ZWFFnZDJVZ1pHOXVKM1JjYmk4dklHVnRhWFFnSjJSeVlXbHVKeUJpWldadmNtVWdkR2hsSUhkeWFYUmxLQ2tnWTI5dWMzVnRaWElnWjJWMGN5QjBhR1VnSjJaaGJITmxKeUJ5WlhSMWNtNWNiaTh2SUhaaGJIVmxMQ0JoYm1RZ2FHRnpJR0VnWTJoaGJtTmxJSFJ2SUdGMGRHRmphQ0JoSUNka2NtRnBiaWNnYkdsemRHVnVaWEl1WEc1Y2JseHVablZ1WTNScGIyNGdiMjUzY21sMFpVUnlZV2x1S0hOMGNtVmhiU3dnYzNSaGRHVXBJSHRjYmlBZ2FXWWdLSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ0FtSmlCemRHRjBaUzV1WldWa1JISmhhVzRwSUh0Y2JpQWdJQ0J6ZEdGMFpTNXVaV1ZrUkhKaGFXNGdQU0JtWVd4elpUdGNiaUFnSUNCemRISmxZVzB1WlcxcGRDZ25aSEpoYVc0bktUdGNiaUFnZlZ4dWZTQXZMeUJwWmlCMGFHVnlaU2R6SUhOdmJXVjBhR2x1WnlCcGJpQjBhR1VnWW5WbVptVnlJSGRoYVhScGJtY3NJSFJvWlc0Z2NISnZZMlZ6Y3lCcGRGeHVYRzVjYm1aMWJtTjBhVzl1SUdOc1pXRnlRblZtWm1WeUtITjBjbVZoYlN3Z2MzUmhkR1VwSUh0Y2JpQWdjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBOUlIUnlkV1U3WEc0Z0lIWmhjaUJsYm5SeWVTQTlJSE4wWVhSbExtSjFabVpsY21Wa1VtVnhkV1Z6ZER0Y2JseHVJQ0JwWmlBb2MzUnlaV0Z0TGw5M2NtbDBaWFlnSmlZZ1pXNTBjbmtnSmlZZ1pXNTBjbmt1Ym1WNGRDa2dlMXh1SUNBZ0lDOHZJRVpoYzNRZ1kyRnpaU3dnZDNKcGRHVWdaWFpsY25sMGFHbHVaeUIxYzJsdVp5QmZkM0pwZEdWMktDbGNiaUFnSUNCMllYSWdiQ0E5SUhOMFlYUmxMbUoxWm1abGNtVmtVbVZ4ZFdWemRFTnZkVzUwTzF4dUlDQWdJSFpoY2lCaWRXWm1aWElnUFNCdVpYY2dRWEp5WVhrb2JDazdYRzRnSUNBZ2RtRnlJR2h2YkdSbGNpQTlJSE4wWVhSbExtTnZjbXRsWkZKbGNYVmxjM1J6Um5KbFpUdGNiaUFnSUNCb2IyeGtaWEl1Wlc1MGNua2dQU0JsYm5SeWVUdGNiaUFnSUNCMllYSWdZMjkxYm5RZ1BTQXdPMXh1SUNBZ0lIWmhjaUJoYkd4Q2RXWm1aWEp6SUQwZ2RISjFaVHRjYmx4dUlDQWdJSGRvYVd4bElDaGxiblJ5ZVNrZ2UxeHVJQ0FnSUNBZ1luVm1abVZ5VzJOdmRXNTBYU0E5SUdWdWRISjVPMXh1SUNBZ0lDQWdhV1lnS0NGbGJuUnllUzVwYzBKMVppa2dZV3hzUW5WbVptVnljeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdaVzUwY25rZ1BTQmxiblJ5ZVM1dVpYaDBPMXh1SUNBZ0lDQWdZMjkxYm5RZ0t6MGdNVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmlkV1ptWlhJdVlXeHNRblZtWm1WeWN5QTlJR0ZzYkVKMVptWmxjbk03WEc0Z0lDQWdaRzlYY21sMFpTaHpkSEpsWVcwc0lITjBZWFJsTENCMGNuVmxMQ0J6ZEdGMFpTNXNaVzVuZEdnc0lHSjFabVpsY2l3Z0p5Y3NJR2h2YkdSbGNpNW1hVzVwYzJncE95QXZMeUJrYjFkeWFYUmxJR2x6SUdGc2JXOXpkQ0JoYkhkaGVYTWdZWE41Ym1Nc0lHUmxabVZ5SUhSb1pYTmxJSFJ2SUhOaGRtVWdZU0JpYVhRZ2IyWWdkR2x0WlZ4dUlDQWdJQzh2SUdGeklIUm9aU0JvYjNRZ2NHRjBhQ0JsYm1SeklIZHBkR2dnWkc5WGNtbDBaVnh1WEc0Z0lDQWdjM1JoZEdVdWNHVnVaR2x1WjJOaUt5czdYRzRnSUNBZ2MzUmhkR1V1YkdGemRFSjFabVpsY21Wa1VtVnhkV1Z6ZENBOUlHNTFiR3c3WEc1Y2JpQWdJQ0JwWmlBb2FHOXNaR1Z5TG01bGVIUXBJSHRjYmlBZ0lDQWdJSE4wWVhSbExtTnZjbXRsWkZKbGNYVmxjM1J6Um5KbFpTQTlJR2h2YkdSbGNpNXVaWGgwTzF4dUlDQWdJQ0FnYUc5c1pHVnlMbTVsZUhRZ1BTQnVkV3hzTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkR0YwWlM1amIzSnJaV1JTWlhGMVpYTjBjMFp5WldVZ1BTQnVaWGNnUTI5eWEyVmtVbVZ4ZFdWemRDaHpkR0YwWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHVXVZblZtWm1WeVpXUlNaWEYxWlhOMFEyOTFiblFnUFNBd08xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRk5zYjNjZ1kyRnpaU3dnZDNKcGRHVWdZMmgxYm10eklHOXVaUzFpZVMxdmJtVmNiaUFnSUNCM2FHbHNaU0FvWlc1MGNua3BJSHRjYmlBZ0lDQWdJSFpoY2lCamFIVnVheUE5SUdWdWRISjVMbU5vZFc1ck8xeHVJQ0FnSUNBZ2RtRnlJR1Z1WTI5a2FXNW5JRDBnWlc1MGNua3VaVzVqYjJScGJtYzdYRzRnSUNBZ0lDQjJZWElnWTJJZ1BTQmxiblJ5ZVM1allXeHNZbUZqYXp0Y2JpQWdJQ0FnSUhaaGNpQnNaVzRnUFNCemRHRjBaUzV2WW1wbFkzUk5iMlJsSUQ4Z01TQTZJR05vZFc1ckxteGxibWQwYUR0Y2JpQWdJQ0FnSUdSdlYzSnBkR1VvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabUZzYzJVc0lHeGxiaXdnWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrN1hHNGdJQ0FnSUNCbGJuUnllU0E5SUdWdWRISjVMbTVsZUhRN1hHNGdJQ0FnSUNCemRHRjBaUzVpZFdabVpYSmxaRkpsY1hWbGMzUkRiM1Z1ZEMwdE95QXZMeUJwWmlCM1pTQmthV1J1SjNRZ1kyRnNiQ0IwYUdVZ2IyNTNjbWwwWlNCcGJXMWxaR2xoZEdWc2VTd2dkR2hsYmx4dUlDQWdJQ0FnTHk4Z2FYUWdiV1ZoYm5NZ2RHaGhkQ0IzWlNCdVpXVmtJSFJ2SUhkaGFYUWdkVzUwYVd3Z2FYUWdaRzlsY3k1Y2JpQWdJQ0FnSUM4dklHRnNjMjhzSUhSb1lYUWdiV1ZoYm5NZ2RHaGhkQ0IwYUdVZ1kyaDFibXNnWVc1a0lHTmlJR0Z5WlNCamRYSnlaVzUwYkhsY2JpQWdJQ0FnSUM4dklHSmxhVzVuSUhCeWIyTmxjM05sWkN3Z2MyOGdiVzkyWlNCMGFHVWdZblZtWm1WeUlHTnZkVzUwWlhJZ2NHRnpkQ0IwYUdWdExseHVYRzRnSUNBZ0lDQnBaaUFvYzNSaGRHVXVkM0pwZEdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aVzUwY25rZ1BUMDlJRzUxYkd3cElITjBZWFJsTG14aGMzUkNkV1ptWlhKbFpGSmxjWFZsYzNRZ1BTQnVkV3hzTzF4dUlDQjlYRzVjYmlBZ2MzUmhkR1V1WW5WbVptVnlaV1JTWlhGMVpYTjBJRDBnWlc1MGNuazdYRzRnSUhOMFlYUmxMbUoxWm1abGNsQnliMk5sYzNOcGJtY2dQU0JtWVd4elpUdGNibjFjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExsOTNjbWwwWlNBOUlHWjFibU4wYVc5dUlDaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lHTmlLRzVsZHlCRlVsSmZUVVZVU0U5RVgwNVBWRjlKVFZCTVJVMUZUbFJGUkNnblgzZHlhWFJsS0NrbktTazdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbGRpQTlJRzUxYkd3N1hHNWNibGR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaUzVsYm1RZ1BTQm1kVzVqZEdsdmJpQW9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWtnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCallpQTlJR05vZFc1ck8xeHVJQ0FnSUdOb2RXNXJJRDBnYm5Wc2JEdGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnVZMjlrYVc1bklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJJZ1BTQmxibU52WkdsdVp6dGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMmgxYm1zZ0lUMDlJRzUxYkd3Z0ppWWdZMmgxYm1zZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZEdocGN5NTNjbWwwWlNoamFIVnVheXdnWlc1amIyUnBibWNwT3lBdkx5QXVaVzVrS0NrZ1puVnNiSGtnZFc1amIzSnJjMXh1WEc0Z0lHbG1JQ2h6ZEdGMFpTNWpiM0pyWldRcElIdGNiaUFnSUNCemRHRjBaUzVqYjNKclpXUWdQU0F4TzF4dUlDQWdJSFJvYVhNdWRXNWpiM0pyS0NrN1hHNGdJSDBnTHk4Z2FXZHViM0psSUhWdWJtVmpaWE56WVhKNUlHVnVaQ2dwSUdOaGJHeHpMbHh1WEc1Y2JpQWdhV1lnS0NGemRHRjBaUzVsYm1ScGJtY3BJR1Z1WkZkeWFYUmhZbXhsS0hSb2FYTXNJSE4wWVhSbExDQmpZaWs3WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0ZkeWFYUmhZbXhsTG5CeWIzUnZkSGx3WlN3Z0ozZHlhWFJoWW14bFRHVnVaM1JvSnl3Z2UxeHVJQ0F2THlCdFlXdHBibWNnYVhRZ1pYaHdiR2xqYVhRZ2RHaHBjeUJ3Y205d1pYSjBlU0JwY3lCdWIzUWdaVzUxYldWeVlXSnNaVnh1SUNBdkx5QmlaV05oZFhObElHOTBhR1Z5ZDJselpTQnpiMjFsSUhCeWIzUnZkSGx3WlNCdFlXNXBjSFZzWVhScGIyNGdhVzVjYmlBZ0x5OGdkWE5sY214aGJtUWdkMmxzYkNCbVlXbHNYRzRnSUdWdWRXMWxjbUZpYkdVNklHWmhiSE5sTEZ4dUlDQm5aWFE2SUdaMWJtTjBhVzl1SUdkbGRDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNXNaVzVuZEdnN1hHNGdJSDFjYm4wcE8xeHVYRzVtZFc1amRHbHZiaUJ1WldWa1JtbHVhWE5vS0hOMFlYUmxLU0I3WEc0Z0lISmxkSFZ5YmlCemRHRjBaUzVsYm1ScGJtY2dKaVlnYzNSaGRHVXViR1Z1WjNSb0lEMDlQU0F3SUNZbUlITjBZWFJsTG1KMVptWmxjbVZrVW1WeGRXVnpkQ0E5UFQwZ2JuVnNiQ0FtSmlBaGMzUmhkR1V1Wm1sdWFYTm9aV1FnSmlZZ0lYTjBZWFJsTG5keWFYUnBibWM3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05oYkd4R2FXNWhiQ2h6ZEhKbFlXMHNJSE4wWVhSbEtTQjdYRzRnSUhOMGNtVmhiUzVmWm1sdVlXd29ablZ1WTNScGIyNGdLR1Z5Y2lrZ2UxeHVJQ0FnSUhOMFlYUmxMbkJsYm1ScGJtZGpZaTB0TzF4dVhHNGdJQ0FnYVdZZ0tHVnljaWtnZTF4dUlDQWdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwWlM1d2NtVm1hVzVwYzJobFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0ozQnlaV1pwYm1semFDY3BPMXh1SUNBZ0lHWnBibWx6YUUxaGVXSmxLSE4wY21WaGJTd2djM1JoZEdVcE8xeHVJQ0I5S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY0hKbFptbHVhWE5vS0hOMGNtVmhiU3dnYzNSaGRHVXBJSHRjYmlBZ2FXWWdLQ0Z6ZEdGMFpTNXdjbVZtYVc1cGMyaGxaQ0FtSmlBaGMzUmhkR1V1Wm1sdVlXeERZV3hzWldRcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITjBjbVZoYlM1ZlptbHVZV3dnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnSVhOMFlYUmxMbVJsYzNSeWIzbGxaQ2tnZTF4dUlDQWdJQ0FnYzNSaGRHVXVjR1Z1WkdsdVoyTmlLeXM3WEc0Z0lDQWdJQ0J6ZEdGMFpTNW1hVzVoYkVOaGJHeGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHTmhiR3hHYVc1aGJDd2djM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wWVhSbExuQnlaV1pwYm1semFHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2R3Y21WbWFXNXBjMmduS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVhWE5vVFdGNVltVW9jM1J5WldGdExDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JtVmxaQ0E5SUc1bFpXUkdhVzVwYzJnb2MzUmhkR1VwTzF4dVhHNGdJR2xtSUNodVpXVmtLU0I3WEc0Z0lDQWdjSEpsWm1sdWFYTm9LSE4wY21WaGJTd2djM1JoZEdVcE8xeHVYRzRnSUNBZ2FXWWdLSE4wWVhSbExuQmxibVJwYm1kallpQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2MzUmhkR1V1Wm1sdWFYTm9aV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjM1J5WldGdExtVnRhWFFvSjJacGJtbHphQ2NwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ1WldWa08xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbGJtUlhjbWwwWVdKc1pTaHpkSEpsWVcwc0lITjBZWFJsTENCallpa2dlMXh1SUNCemRHRjBaUzVsYm1ScGJtY2dQU0IwY25WbE8xeHVJQ0JtYVc1cGMyaE5ZWGxpWlNoemRISmxZVzBzSUhOMFlYUmxLVHRjYmx4dUlDQnBaaUFvWTJJcElIdGNiaUFnSUNCcFppQW9jM1JoZEdVdVptbHVhWE5vWldRcElIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1kySXBPMlZzYzJVZ2MzUnlaV0Z0TG05dVkyVW9KMlpwYm1semFDY3NJR05pS1R0Y2JpQWdmVnh1WEc0Z0lITjBZWFJsTG1WdVpHVmtJRDBnZEhKMVpUdGNiaUFnYzNSeVpXRnRMbmR5YVhSaFlteGxJRDBnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVRMjl5YTJWa1JtbHVhWE5vS0dOdmNtdFNaWEVzSUhOMFlYUmxMQ0JsY25JcElIdGNiaUFnZG1GeUlHVnVkSEo1SUQwZ1kyOXlhMUpsY1M1bGJuUnllVHRjYmlBZ1kyOXlhMUpsY1M1bGJuUnllU0E5SUc1MWJHdzdYRzVjYmlBZ2QyaHBiR1VnS0dWdWRISjVLU0I3WEc0Z0lDQWdkbUZ5SUdOaUlEMGdaVzUwY25rdVkyRnNiR0poWTJzN1hHNGdJQ0FnYzNSaGRHVXVjR1Z1WkdsdVoyTmlMUzA3WEc0Z0lDQWdZMklvWlhKeUtUdGNiaUFnSUNCbGJuUnllU0E5SUdWdWRISjVMbTVsZUhRN1hHNGdJSDBnTHk4Z2NtVjFjMlVnZEdobElHWnlaV1VnWTI5eWExSmxjUzVjYmx4dVhHNGdJSE4wWVhSbExtTnZjbXRsWkZKbGNYVmxjM1J6Um5KbFpTNXVaWGgwSUQwZ1kyOXlhMUpsY1R0Y2JuMWNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGZHlhWFJoWW14bExuQnliM1J2ZEhsd1pTd2dKMlJsYzNSeWIzbGxaQ2NzSUh0Y2JpQWdMeThnYldGcmFXNW5JR2wwSUdWNGNHeHBZMmwwSUhSb2FYTWdjSEp2Y0dWeWRIa2dhWE1nYm05MElHVnVkVzFsY21GaWJHVmNiaUFnTHk4Z1ltVmpZWFZ6WlNCdmRHaGxjbmRwYzJVZ2MyOXRaU0J3Y205MGIzUjVjR1VnYldGdWFYQjFiR0YwYVc5dUlHbHVYRzRnSUM4dklIVnpaWEpzWVc1a0lIZHBiR3dnWm1GcGJGeHVJQ0JsYm5WdFpYSmhZbXhsT2lCbVlXeHpaU3hjYmlBZ1oyVjBPaUJtZFc1amRHbHZiaUJuWlhRb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1VnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaRHRjYmlBZ2ZTeGNiaUFnYzJWME9pQm1kVzVqZEdsdmJpQnpaWFFvZG1Gc2RXVXBJSHRjYmlBZ0lDQXZMeUIzWlNCcFoyNXZjbVVnZEdobElIWmhiSFZsSUdsbUlIUm9aU0J6ZEhKbFlXMWNiaUFnSUNBdkx5Qm9ZWE1nYm05MElHSmxaVzRnYVc1cGRHbGhiR2w2WldRZ2VXVjBYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmU0F2THlCaVlXTnJkMkZ5WkNCamIyMXdZWFJwWW1sc2FYUjVMQ0IwYUdVZ2RYTmxjaUJwY3lCbGVIQnNhV05wZEd4NVhHNGdJQ0FnTHk4Z2JXRnVZV2RwYm1jZ1pHVnpkSEp2ZVdWa1hHNWNibHh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaR1Z6ZEhKdmVXVmtJRDBnZG1Gc2RXVTdYRzRnSUgxY2JuMHBPMXh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG1SbGMzUnliM2tnUFNCa1pYTjBjbTk1U1cxd2JDNWtaWE4wY205NU8xeHVWM0pwZEdGaWJHVXVjSEp2ZEc5MGVYQmxMbDkxYm1SbGMzUnliM2tnUFNCa1pYTjBjbTk1U1cxd2JDNTFibVJsYzNSeWIzazdYRzVjYmxkeWFYUmhZbXhsTG5CeWIzUnZkSGx3WlM1ZlpHVnpkSEp2ZVNBOUlHWjFibU4wYVc5dUlDaGxjbklzSUdOaUtTQjdYRzRnSUdOaUtHVnljaWs3WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUY5UFltcGxZM1FrYzJWMFVISnZkRzkwZVhCbFR6dGNibHh1Wm5WdVkzUnBiMjRnWDJSbFptbHVaVkJ5YjNCbGNuUjVLRzlpYWl3Z2EyVjVMQ0IyWVd4MVpTa2dleUJwWmlBb2EyVjVJR2x1SUc5aWFpa2dleUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2IySnFMQ0JyWlhrc0lIc2dkbUZzZFdVNklIWmhiSFZsTENCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc0lIZHlhWFJoWW14bE9pQjBjblZsSUgwcE95QjlJR1ZzYzJVZ2V5QnZZbXBiYTJWNVhTQTlJSFpoYkhWbE95QjlJSEpsZEhWeWJpQnZZbW83SUgxY2JseHVkbUZ5SUdacGJtbHphR1ZrSUQwZ2NtVnhkV2x5WlNnbkxpOWxibVF0YjJZdGMzUnlaV0Z0SnlrN1hHNWNiblpoY2lCclRHRnpkRkpsYzI5c2RtVWdQU0JUZVcxaWIyd29KMnhoYzNSU1pYTnZiSFpsSnlrN1hHNTJZWElnYTB4aGMzUlNaV3BsWTNRZ1BTQlRlVzFpYjJ3b0oyeGhjM1JTWldwbFkzUW5LVHRjYm5aaGNpQnJSWEp5YjNJZ1BTQlRlVzFpYjJ3b0oyVnljbTl5SnlrN1hHNTJZWElnYTBWdVpHVmtJRDBnVTNsdFltOXNLQ2RsYm1SbFpDY3BPMXh1ZG1GeUlHdE1ZWE4wVUhKdmJXbHpaU0E5SUZONWJXSnZiQ2duYkdGemRGQnliMjFwYzJVbktUdGNiblpoY2lCclNHRnVaR3hsVUhKdmJXbHpaU0E5SUZONWJXSnZiQ2duYUdGdVpHeGxVSEp2YldselpTY3BPMXh1ZG1GeUlHdFRkSEpsWVcwZ1BTQlRlVzFpYjJ3b0ozTjBjbVZoYlNjcE8xeHVYRzVtZFc1amRHbHZiaUJqY21WaGRHVkpkR1Z5VW1WemRXeDBLSFpoYkhWbExDQmtiMjVsS1NCN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2RtRnNkV1U2SUhaaGJIVmxMRnh1SUNBZ0lHUnZibVU2SUdSdmJtVmNiaUFnZlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WaFpFRnVaRkpsYzI5c2RtVW9hWFJsY2lrZ2UxeHVJQ0IyWVhJZ2NtVnpiMngyWlNBOUlHbDBaWEpiYTB4aGMzUlNaWE52YkhabFhUdGNibHh1SUNCcFppQW9jbVZ6YjJ4MlpTQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lIWmhjaUJrWVhSaElEMGdhWFJsY2x0clUzUnlaV0Z0WFM1eVpXRmtLQ2s3SUM4dklIZGxJR1JsWm1WeUlHbG1JR1JoZEdFZ2FYTWdiblZzYkZ4dUlDQWdJQzh2SUhkbElHTmhiaUJpWlNCbGVIQmxZM1JwYm1jZ1pXbDBhR1Z5SUNkbGJtUW5JRzl5WEc0Z0lDQWdMeThnSjJWeWNtOXlKMXh1WEc0Z0lDQWdhV1lnS0dSaGRHRWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR2wwWlhKYmEweGhjM1JRY205dGFYTmxYU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQnBkR1Z5VzJ0TVlYTjBVbVZ6YjJ4MlpWMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2FYUmxjbHRyVEdGemRGSmxhbVZqZEYwZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WemIyeDJaU2hqY21WaGRHVkpkR1Z5VW1WemRXeDBLR1JoZEdFc0lHWmhiSE5sS1NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVVbVZoWkdGaWJHVW9hWFJsY2lrZ2UxeHVJQ0F2THlCM1pTQjNZV2wwSUdadmNpQjBhR1VnYm1WNGRDQjBhV05yTENCaVpXTmhkWE5sSUdsMElHMXBaMmgwWEc0Z0lDOHZJR1Z0YVhRZ1lXNGdaWEp5YjNJZ2QybDBhQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJYRzRnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvY21WaFpFRnVaRkpsYzI5c2RtVXNJR2wwWlhJcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCM2NtRndSbTl5VG1WNGRDaHNZWE4wVUhKdmJXbHpaU3dnYVhSbGNpa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJR3hoYzNSUWNtOXRhWE5sTG5Sb1pXNG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnYVhSbGNsdHJTR0Z1Wkd4bFVISnZiV2x6WlYwb2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0I5TENCeVpXcGxZM1FwTzF4dUlDQjlPMXh1ZlZ4dVhHNTJZWElnUVhONWJtTkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmlobWRXNWpkR2x2YmlBb0tTQjdmU2s3WEc1MllYSWdVbVZoWkdGaWJHVlRkSEpsWVcxQmMzbHVZMGwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxJRDBnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUtDaGZUMkpxWldOMEpITmxkRkJ5YjNSdmRIbHdaVThnUFNCN1hHNGdJR2RsZENCemRISmxZVzBvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhOYmExTjBjbVZoYlYwN1hHNGdJSDBzWEc1Y2JpQWdibVY0ZERvZ1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2JpQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeThnYVdZZ2QyVWdhR0YyWlNCa1pYUmxZM1JsWkNCaGJpQmxjbkp2Y2lCcGJpQjBhR1VnYldWaGJuZG9hV3hsWEc0Z0lDQWdMeThnY21WcVpXTjBJSE4wY21GcFoyaDBJR0YzWVhsY2JpQWdJQ0IyWVhJZ1pYSnliM0lnUFNCMGFHbHpXMnRGY25KdmNsMDdYRzVjYmlBZ0lDQnBaaUFvWlhKeWIzSWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hSb2FYTmJhMFZ1WkdWa1hTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlGQnliMjFwYzJVdWNtVnpiMngyWlNoamNtVmhkR1ZKZEdWeVVtVnpkV3gwS0c1MWJHd3NJSFJ5ZFdVcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwYzF0clUzUnlaV0Z0WFM1a1pYTjBjbTk1WldRcElIdGNiaUFnSUNBZ0lDOHZJRmRsSUc1bFpXUWdkRzhnWkdWbVpYSWdkbWxoSUc1bGVIUlVhV05ySUdKbFkyRjFjMlVnYVdZZ0xtUmxjM1J5YjNrb1pYSnlLU0JwYzF4dUlDQWdJQ0FnTHk4Z1kyRnNiR1ZrTENCMGFHVWdaWEp5YjNJZ2QybHNiQ0JpWlNCbGJXbDBkR1ZrSUhacFlTQnVaWGgwVkdsamF5d2dZVzVrWEc0Z0lDQWdJQ0F2THlCM1pTQmpZVzV1YjNRZ1ozVmhjbUZ1ZEdWbElIUm9ZWFFnZEdobGNtVWdhWE1nYm04Z1pYSnliM0lnYkdsdVoyVnlhVzVuSUdGeWIzVnVaRnh1SUNBZ0lDQWdMeThnZDJGcGRHbHVaeUIwYnlCaVpTQmxiV2wwZEdWa0xseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRjkwYUdselcydEZjbkp2Y2wwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hmZEdocGMxdHJSWEp5YjNKZEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoamNtVmhkR1ZKZEdWeVVtVnpkV3gwS0c1MWJHd3NJSFJ5ZFdVcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTQXZMeUJwWmlCM1pTQm9ZWFpsSUcxMWJIUnBjR3hsSUc1bGVIUW9LU0JqWVd4c2MxeHVJQ0FnSUM4dklIZGxJSGRwYkd3Z2QyRnBkQ0JtYjNJZ2RHaGxJSEJ5WlhacGIzVnpJRkJ5YjIxcGMyVWdkRzhnWm1sdWFYTm9YRzRnSUNBZ0x5OGdkR2hwY3lCc2IyZHBZeUJwY3lCdmNIUnBiV2w2WldRZ2RHOGdjM1Z3Y0c5eWRDQm1iM0lnWVhkaGFYUWdiRzl2Y0hNc1hHNGdJQ0FnTHk4Z2QyaGxjbVVnYm1WNGRDZ3BJR2x6SUc5dWJIa2dZMkZzYkdWa0lHOXVZMlVnWVhRZ1lTQjBhVzFsWEc1Y2JseHVJQ0FnSUhaaGNpQnNZWE4wVUhKdmJXbHpaU0E5SUhSb2FYTmJhMHhoYzNSUWNtOXRhWE5sWFR0Y2JpQWdJQ0IyWVhJZ2NISnZiV2x6WlR0Y2JseHVJQ0FnSUdsbUlDaHNZWE4wVUhKdmJXbHpaU2tnZTF4dUlDQWdJQ0FnY0hKdmJXbHpaU0E5SUc1bGR5QlFjbTl0YVhObEtIZHlZWEJHYjNKT1pYaDBLR3hoYzNSUWNtOXRhWE5sTENCMGFHbHpLU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZJR1poYzNRZ2NHRjBhQ0J1WldWa1pXUWdkRzhnYzNWd2NHOXlkQ0J0ZFd4MGFYQnNaU0IwYUdsekxuQjFjMmdvS1Z4dUlDQWdJQ0FnTHk4Z2QybDBhRzkxZENCMGNtbG5aMlZ5YVc1bklIUm9aU0J1WlhoMEtDa2djWFZsZFdWY2JpQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2RHaHBjMXRyVTNSeVpXRnRYUzV5WldGa0tDazdYRzVjYmlBZ0lDQWdJR2xtSUNoa1lYUmhJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9ZM0psWVhSbFNYUmxjbEpsYzNWc2RDaGtZWFJoTENCbVlXeHpaU2twTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCd2NtOXRhWE5sSUQwZ2JtVjNJRkJ5YjIxcGMyVW9kR2hwYzF0clNHRnVaR3hsVUhKdmJXbHpaVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhOYmEweGhjM1JRY205dGFYTmxYU0E5SUhCeWIyMXBjMlU3WEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJVN1hHNGdJSDFjYm4wc0lGOWtaV1pwYm1WUWNtOXdaWEowZVNoZlQySnFaV04wSkhObGRGQnliM1J2ZEhsd1pVOHNJRk41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5TENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmU2tzSUY5a1pXWnBibVZRY205d1pYSjBlU2hmVDJKcVpXTjBKSE5sZEZCeWIzUnZkSGx3WlU4c0lGd2ljbVYwZFhKdVhDSXNJR1oxYm1OMGFXOXVJRjl5WlhSMWNtNG9LU0I3WEc0Z0lIWmhjaUJmZEdocGN6SWdQU0IwYUdsek8xeHVYRzRnSUM4dklHUmxjM1J5YjNrb1pYSnlMQ0JqWWlrZ2FYTWdZU0J3Y21sMllYUmxJRUZRU1Z4dUlDQXZMeUIzWlNCallXNGdaM1ZoY21GdWRHVmxJSGRsSUdoaGRtVWdkR2hoZENCb1pYSmxMQ0JpWldOaGRYTmxJSGRsSUdOdmJuUnliMndnZEdobFhHNGdJQzh2SUZKbFlXUmhZbXhsSUdOc1lYTnpJSFJvYVhNZ2FYTWdZWFIwWVdOb1pXUWdkRzljYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNCZmRHaHBjekpiYTFOMGNtVmhiVjB1WkdWemRISnZlU2h1ZFd4c0xDQm1kVzVqZEdsdmJpQW9aWEp5S1NCN1hHNGdJQ0FnSUNCcFppQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsYzI5c2RtVW9ZM0psWVhSbFNYUmxjbEpsYzNWc2RDaHVkV3hzTENCMGNuVmxLU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMHBPMXh1ZlNrc0lGOVBZbXBsWTNRa2MyVjBVSEp2ZEc5MGVYQmxUeWtzSUVGemVXNWpTWFJsY21GMGIzSlFjbTkwYjNSNWNHVXBPMXh1WEc1MllYSWdZM0psWVhSbFVtVmhaR0ZpYkdWVGRISmxZVzFCYzNsdVkwbDBaWEpoZEc5eUlEMGdablZ1WTNScGIyNGdZM0psWVhSbFVtVmhaR0ZpYkdWVGRISmxZVzFCYzNsdVkwbDBaWEpoZEc5eUtITjBjbVZoYlNrZ2UxeHVJQ0IyWVhJZ1gwOWlhbVZqZENSamNtVmhkR1U3WEc1Y2JpQWdkbUZ5SUdsMFpYSmhkRzl5SUQwZ1QySnFaV04wTG1OeVpXRjBaU2hTWldGa1lXSnNaVk4wY21WaGJVRnplVzVqU1hSbGNtRjBiM0pRY205MGIzUjVjR1VzSUNoZlQySnFaV04wSkdOeVpXRjBaU0E5SUh0OUxDQmZaR1ZtYVc1bFVISnZjR1Z5ZEhrb1gwOWlhbVZqZENSamNtVmhkR1VzSUd0VGRISmxZVzBzSUh0Y2JpQWdJQ0IyWVd4MVpUb2djM1J5WldGdExGeHVJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxYRzRnSUgwcExDQmZaR1ZtYVc1bFVISnZjR1Z5ZEhrb1gwOWlhbVZqZENSamNtVmhkR1VzSUd0TVlYTjBVbVZ6YjJ4MlpTd2dlMXh1SUNBZ0lIWmhiSFZsT2lCdWRXeHNMRnh1SUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsWEc0Z0lIMHBMQ0JmWkdWbWFXNWxVSEp2Y0dWeWRIa29YMDlpYW1WamRDUmpjbVZoZEdVc0lHdE1ZWE4wVW1WcVpXTjBMQ0I3WEc0Z0lDQWdkbUZzZFdVNklHNTFiR3dzWEc0Z0lDQWdkM0pwZEdGaWJHVTZJSFJ5ZFdWY2JpQWdmU2tzSUY5a1pXWnBibVZRY205d1pYSjBlU2hmVDJKcVpXTjBKR055WldGMFpTd2dhMFZ5Y205eUxDQjdYRzRnSUNBZ2RtRnNkV1U2SUc1MWJHd3NYRzRnSUNBZ2QzSnBkR0ZpYkdVNklIUnlkV1ZjYmlBZ2ZTa3NJRjlrWldacGJtVlFjbTl3WlhKMGVTaGZUMkpxWldOMEpHTnlaV0YwWlN3Z2EwVnVaR1ZrTENCN1hHNGdJQ0FnZG1Gc2RXVTZJSE4wY21WaGJTNWZjbVZoWkdGaWJHVlRkR0YwWlM1bGJtUkZiV2wwZEdWa0xGeHVJQ0FnSUhkeWFYUmhZbXhsT2lCMGNuVmxYRzRnSUgwcExDQmZaR1ZtYVc1bFVISnZjR1Z5ZEhrb1gwOWlhbVZqZENSamNtVmhkR1VzSUd0TVlYTjBVSEp2YldselpTd2dlMXh1SUNBZ0lIWmhiSFZsT2lCdWRXeHNMRnh1SUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsWEc0Z0lIMHBMQ0JmWkdWbWFXNWxVSEp2Y0dWeWRIa29YMDlpYW1WamRDUmpjbVZoZEdVc0lHdElZVzVrYkdWUWNtOXRhWE5sTENCN1hHNGdJQ0FnZG1Gc2RXVTZJR1oxYm1OMGFXOXVJSFpoYkhWbEtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQnBkR1Z5WVhSdmNsdHJVM1J5WldGdFhTNXlaV0ZrS0NrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR2wwWlhKaGRHOXlXMnRNWVhOMFVISnZiV2x6WlYwZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCcGRHVnlZWFJ2Y2x0clRHRnpkRkpsYzI5c2RtVmRJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdhWFJsY21GMGIzSmJhMHhoYzNSU1pXcGxZM1JkSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hqY21WaGRHVkpkR1Z5VW1WemRXeDBLR1JoZEdFc0lHWmhiSE5sS1NrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCcGRHVnlZWFJ2Y2x0clRHRnpkRkpsYzI5c2RtVmRJRDBnY21WemIyeDJaVHRjYmlBZ0lDQWdJQ0FnYVhSbGNtRjBiM0piYTB4aGMzUlNaV3BsWTNSZElEMGdjbVZxWldOME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNGdJQ0FnZDNKcGRHRmliR1U2SUhSeWRXVmNiaUFnZlNrc0lGOVBZbXBsWTNRa1kzSmxZWFJsS1NrN1hHNGdJR1pwYm1semFHVmtLSE4wY21WaGJTd2dablZ1WTNScGIyNGdLR1Z5Y2lrZ2UxeHVJQ0FnSUdsbUlDaGxjbklnSmlZZ1pYSnlMbU52WkdVZ0lUMDlJQ2RGVWxKZlUxUlNSVUZOWDFCU1JVMUJWRlZTUlY5RFRFOVRSU2NwSUh0Y2JpQWdJQ0FnSUhaaGNpQnlaV3BsWTNRZ1BTQnBkR1Z5WVhSdmNsdHJUR0Z6ZEZKbGFtVmpkRjA3SUM4dklISmxhbVZqZENCcFppQjNaU0JoY21VZ2QyRnBkR2x1WnlCbWIzSWdaR0YwWVNCcGJpQjBhR1VnVUhKdmJXbHpaVnh1SUNBZ0lDQWdMeThnY21WMGRYSnVaV1FnWW5rZ2JtVjRkQ2dwSUdGdVpDQnpkRzl5WlNCMGFHVWdaWEp5YjNKY2JseHVJQ0FnSUNBZ2FXWWdLSEpsYW1WamRDQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JwZEdWeVlYUnZjbHRyVEdGemRGQnliMjFwYzJWZElEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2FYUmxjbUYwYjNKYmEweGhjM1JTWlhOdmJIWmxYU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJR2wwWlhKaGRHOXlXMnRNWVhOMFVtVnFaV04wWFNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBkR1Z5WVhSdmNsdHJSWEp5YjNKZElEMGdaWEp5TzF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WlhOdmJIWmxJRDBnYVhSbGNtRjBiM0piYTB4aGMzUlNaWE52YkhabFhUdGNibHh1SUNBZ0lHbG1JQ2h5WlhOdmJIWmxJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0JwZEdWeVlYUnZjbHRyVEdGemRGQnliMjFwYzJWZElEMGdiblZzYkR0Y2JpQWdJQ0FnSUdsMFpYSmhkRzl5VzJ0TVlYTjBVbVZ6YjJ4MlpWMGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2FYUmxjbUYwYjNKYmEweGhjM1JTWldwbFkzUmRJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lISmxjMjlzZG1Vb1kzSmxZWFJsU1hSbGNsSmxjM1ZzZENodWRXeHNMQ0IwY25WbEtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FYUmxjbUYwYjNKYmEwVnVaR1ZrWFNBOUlIUnlkV1U3WEc0Z0lIMHBPMXh1SUNCemRISmxZVzB1YjI0b0ozSmxZV1JoWW14bEp5d2diMjVTWldGa1lXSnNaUzVpYVc1a0tHNTFiR3dzSUdsMFpYSmhkRzl5S1NrN1hHNGdJSEpsZEhWeWJpQnBkR1Z5WVhSdmNqdGNibjA3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kzSmxZWFJsVW1WaFpHRmliR1ZUZEhKbFlXMUJjM2x1WTBsMFpYSmhkRzl5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVpuVnVZM1JwYjI0Z1gyOWlhbVZqZEZOd2NtVmhaQ2gwWVhKblpYUXBJSHNnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHNnZG1GeUlITnZkWEpqWlNBOUlHRnlaM1Z0Wlc1MGMxdHBYU0FoUFNCdWRXeHNJRDhnWVhKbmRXMWxiblJ6VzJsZElEb2dlMzA3SUhaaGNpQnZkMjVMWlhseklEMGdUMkpxWldOMExtdGxlWE1vYzI5MWNtTmxLVHNnYVdZZ0tIUjVjR1Z2WmlCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN0lHOTNia3RsZVhNZ1BTQnZkMjVMWlhsekxtTnZibU5oZENoUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektITnZkWEpqWlNrdVptbHNkR1Z5S0daMWJtTjBhVzl1SUNoemVXMHBJSHNnY21WMGRYSnVJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb2MyOTFjbU5sTENCemVXMHBMbVZ1ZFcxbGNtRmliR1U3SUgwcEtUc2dmU0J2ZDI1TFpYbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLR3RsZVNrZ2V5QmZaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCclpYa3NJSE52ZFhKalpWdHJaWGxkS1RzZ2ZTazdJSDBnY21WMGRYSnVJSFJoY21kbGREc2dmVnh1WEc1bWRXNWpkR2x2YmlCZlpHVm1hVzVsVUhKdmNHVnlkSGtvYjJKcUxDQnJaWGtzSUhaaGJIVmxLU0I3SUdsbUlDaHJaWGtnYVc0Z2IySnFLU0I3SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZZbW9zSUd0bGVTd2dleUIyWVd4MVpUb2dkbUZzZFdVc0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lHTnZibVpwWjNWeVlXSnNaVG9nZEhKMVpTd2dkM0pwZEdGaWJHVTZJSFJ5ZFdVZ2ZTazdJSDBnWld4elpTQjdJRzlpYWx0clpYbGRJRDBnZG1Gc2RXVTdJSDBnY21WMGRYSnVJRzlpYWpzZ2ZWeHVYRzUyWVhJZ1gzSmxjWFZwY21VZ1BTQnlaWEYxYVhKbEtDZGlkV1ptWlhJbktTeGNiaUFnSUNCQ2RXWm1aWElnUFNCZmNtVnhkV2x5WlM1Q2RXWm1aWEk3WEc1Y2JuWmhjaUJmY21WeGRXbHlaVElnUFNCeVpYRjFhWEpsS0NkMWRHbHNKeWtzWEc0Z0lDQWdhVzV6Y0dWamRDQTlJRjl5WlhGMWFYSmxNaTVwYm5Od1pXTjBPMXh1WEc1MllYSWdZM1Z6ZEc5dElEMGdhVzV6Y0dWamRDQW1KaUJwYm5Od1pXTjBMbU4xYzNSdmJTQjhmQ0FuYVc1emNHVmpkQ2M3WEc1Y2JtWjFibU4wYVc5dUlHTnZjSGxDZFdabVpYSW9jM0pqTENCMFlYSm5aWFFzSUc5bVpuTmxkQ2tnZTF4dUlDQkNkV1ptWlhJdWNISnZkRzkwZVhCbExtTnZjSGt1WTJGc2JDaHpjbU1zSUhSaGNtZGxkQ3dnYjJabWMyVjBLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BWeHVMeW9qWDE5UVZWSkZYMThxTDF4dVpuVnVZM1JwYjI0Z0tDa2dlMXh1SUNCbWRXNWpkR2x2YmlCQ2RXWm1aWEpNYVhOMEtDa2dlMXh1SUNBZ0lIUm9hWE11YUdWaFpDQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NTBZV2xzSUQwZ2JuVnNiRHRjYmlBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SURBN1hHNGdJSDFjYmx4dUlDQjJZWElnWDNCeWIzUnZJRDBnUW5WbVptVnlUR2x6ZEM1d2NtOTBiM1I1Y0dVN1hHNWNiaUFnWDNCeWIzUnZMbkIxYzJnZ1BTQm1kVzVqZEdsdmJpQndkWE5vS0hZcElIdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQjdYRzRnSUNBZ0lDQmtZWFJoT2lCMkxGeHVJQ0FnSUNBZ2JtVjRkRG9nYm5Wc2JGeHVJQ0FnSUgwN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnTUNrZ2RHaHBjeTUwWVdsc0xtNWxlSFFnUFNCbGJuUnllVHRsYkhObElIUm9hWE11YUdWaFpDQTlJR1Z1ZEhKNU8xeHVJQ0FnSUhSb2FYTXVkR0ZwYkNBOUlHVnVkSEo1TzF4dUlDQWdJQ3NyZEdocGN5NXNaVzVuZEdnN1hHNGdJSDA3WEc1Y2JpQWdYM0J5YjNSdkxuVnVjMmhwWm5RZ1BTQm1kVzVqZEdsdmJpQjFibk5vYVdaMEtIWXBJSHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0I3WEc0Z0lDQWdJQ0JrWVhSaE9pQjJMRnh1SUNBZ0lDQWdibVY0ZERvZ2RHaHBjeTVvWldGa1hHNGdJQ0FnZlR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURBcElIUm9hWE11ZEdGcGJDQTlJR1Z1ZEhKNU8xeHVJQ0FnSUhSb2FYTXVhR1ZoWkNBOUlHVnVkSEo1TzF4dUlDQWdJQ3NyZEdocGN5NXNaVzVuZEdnN1hHNGdJSDA3WEc1Y2JpQWdYM0J5YjNSdkxuTm9hV1owSUQwZ1puVnVZM1JwYjI0Z2MyaHBablFvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200N1hHNGdJQ0FnZG1GeUlISmxkQ0E5SUhSb2FYTXVhR1ZoWkM1a1lYUmhPMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNU2tnZEdocGN5NW9aV0ZrSUQwZ2RHaHBjeTUwWVdsc0lEMGdiblZzYkR0bGJITmxJSFJvYVhNdWFHVmhaQ0E5SUhSb2FYTXVhR1ZoWkM1dVpYaDBPMXh1SUNBZ0lDMHRkR2hwY3k1c1pXNW5kR2c3WEc0Z0lDQWdjbVYwZFhKdUlISmxkRHRjYmlBZ2ZUdGNibHh1SUNCZmNISnZkRzh1WTJ4bFlYSWdQU0JtZFc1amRHbHZiaUJqYkdWaGNpZ3BJSHRjYmlBZ0lDQjBhR2x6TG1obFlXUWdQU0IwYUdsekxuUmhhV3dnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnTUR0Y2JpQWdmVHRjYmx4dUlDQmZjSEp2ZEc4dWFtOXBiaUE5SUdaMWJtTjBhVzl1SUdwdmFXNG9jeWtnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTUNrZ2NtVjBkWEp1SUNjbk8xeHVJQ0FnSUhaaGNpQndJRDBnZEdocGN5NW9aV0ZrTzF4dUlDQWdJSFpoY2lCeVpYUWdQU0FuSnlBcklIQXVaR0YwWVR0Y2JseHVJQ0FnSUhkb2FXeGxJQ2h3SUQwZ2NDNXVaWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUWdLejBnY3lBcklIQXVaR0YwWVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVYwTzF4dUlDQjlPMXh1WEc0Z0lGOXdjbTkwYnk1amIyNWpZWFFnUFNCbWRXNWpkR2x2YmlCamIyNWpZWFFvYmlrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlFSjFabVpsY2k1aGJHeHZZeWd3S1R0Y2JpQWdJQ0IyWVhJZ2NtVjBJRDBnUW5WbVptVnlMbUZzYkc5alZXNXpZV1psS0c0Z1BqNCtJREFwTzF4dUlDQWdJSFpoY2lCd0lEMGdkR2hwY3k1b1pXRmtPMXh1SUNBZ0lIWmhjaUJwSUQwZ01EdGNibHh1SUNBZ0lIZG9hV3hsSUNod0tTQjdYRzRnSUNBZ0lDQmpiM0I1UW5WbVptVnlLSEF1WkdGMFlTd2djbVYwTENCcEtUdGNiaUFnSUNBZ0lHa2dLejBnY0M1a1lYUmhMbXhsYm1kMGFEdGNiaUFnSUNBZ0lIQWdQU0J3TG01bGVIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnZlNBdkx5QkRiMjV6ZFcxbGN5QmhJSE53WldOcFptbGxaQ0JoYlc5MWJuUWdiMllnWW5sMFpYTWdiM0lnWTJoaGNtRmpkR1Z5Y3lCbWNtOXRJSFJvWlNCaWRXWm1aWEpsWkNCa1lYUmhMbHh1SUNBN1hHNWNiaUFnWDNCeWIzUnZMbU52Ym5OMWJXVWdQU0JtZFc1amRHbHZiaUJqYjI1emRXMWxLRzRzSUdoaGMxTjBjbWx1WjNNcElIdGNiaUFnSUNCMllYSWdjbVYwTzF4dVhHNGdJQ0FnYVdZZ0tHNGdQQ0IwYUdsekxtaGxZV1F1WkdGMFlTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDOHZJR0J6YkdsalpXQWdhWE1nZEdobElITmhiV1VnWm05eUlHSjFabVpsY25NZ1lXNWtJSE4wY21sdVozTXVYRzRnSUNBZ0lDQnlaWFFnUFNCMGFHbHpMbWhsWVdRdVpHRjBZUzV6YkdsalpTZ3dMQ0J1S1R0Y2JpQWdJQ0FnSUhSb2FYTXVhR1ZoWkM1a1lYUmhJRDBnZEdocGN5NW9aV0ZrTG1SaGRHRXVjMnhwWTJVb2JpazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVJRDA5UFNCMGFHbHpMbWhsWVdRdVpHRjBZUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQzh2SUVacGNuTjBJR05vZFc1cklHbHpJR0VnY0dWeVptVmpkQ0J0WVhSamFDNWNiaUFnSUNBZ0lISmxkQ0E5SUhSb2FYTXVjMmhwWm5Rb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnTHk4Z1VtVnpkV3gwSUhOd1lXNXpJRzF2Y21VZ2RHaGhiaUJ2Ym1VZ1luVm1abVZ5TGx4dUlDQWdJQ0FnY21WMElEMGdhR0Z6VTNSeWFXNW5jeUEvSUhSb2FYTXVYMmRsZEZOMGNtbHVaeWh1S1NBNklIUm9hWE11WDJkbGRFSjFabVpsY2lodUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5TzF4dVhHNGdJRjl3Y205MGJ5NW1hWEp6ZENBOUlHWjFibU4wYVc5dUlHWnBjbk4wS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtaGxZV1F1WkdGMFlUdGNiaUFnZlNBdkx5QkRiMjV6ZFcxbGN5QmhJSE53WldOcFptbGxaQ0JoYlc5MWJuUWdiMllnWTJoaGNtRmpkR1Z5Y3lCbWNtOXRJSFJvWlNCaWRXWm1aWEpsWkNCa1lYUmhMbHh1SUNBN1hHNWNiaUFnWDNCeWIzUnZMbDluWlhSVGRISnBibWNnUFNCbWRXNWpkR2x2YmlCZloyVjBVM1J5YVc1bktHNHBJSHRjYmlBZ0lDQjJZWElnY0NBOUlIUm9hWE11YUdWaFpEdGNiaUFnSUNCMllYSWdZeUE5SURFN1hHNGdJQ0FnZG1GeUlISmxkQ0E5SUhBdVpHRjBZVHRjYmlBZ0lDQnVJQzA5SUhKbGRDNXNaVzVuZEdnN1hHNWNiaUFnSUNCM2FHbHNaU0FvY0NBOUlIQXVibVY0ZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSE4wY2lBOUlIQXVaR0YwWVR0Y2JpQWdJQ0FnSUhaaGNpQnVZaUE5SUc0Z1BpQnpkSEl1YkdWdVozUm9JRDhnYzNSeUxteGxibWQwYUNBNklHNDdYRzRnSUNBZ0lDQnBaaUFvYm1JZ1BUMDlJSE4wY2k1c1pXNW5kR2dwSUhKbGRDQXJQU0J6ZEhJN1pXeHpaU0J5WlhRZ0t6MGdjM1J5TG5Oc2FXTmxLREFzSUc0cE8xeHVJQ0FnSUNBZ2JpQXRQU0J1WWp0Y2JseHVJQ0FnSUNBZ2FXWWdLRzRnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWlJRDA5UFNCemRISXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnS3l0ak8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNod0xtNWxlSFFwSUhSb2FYTXVhR1ZoWkNBOUlIQXVibVY0ZER0bGJITmxJSFJvYVhNdWFHVmhaQ0E5SUhSb2FYTXVkR0ZwYkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWldGa0lEMGdjRHRjYmlBZ0lDQWdJQ0FnSUNCd0xtUmhkR0VnUFNCemRISXVjMnhwWTJVb2JtSXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNzcll6dGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbXhsYm1kMGFDQXRQU0JqTzF4dUlDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lIMGdMeThnUTI5dWMzVnRaWE1nWVNCemNHVmphV1pwWldRZ1lXMXZkVzUwSUc5bUlHSjVkR1Z6SUdaeWIyMGdkR2hsSUdKMVptWmxjbVZrSUdSaGRHRXVYRzRnSUR0Y2JseHVJQ0JmY0hKdmRHOHVYMmRsZEVKMVptWmxjaUE5SUdaMWJtTjBhVzl1SUY5blpYUkNkV1ptWlhJb2Jpa2dlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQkNkV1ptWlhJdVlXeHNiMk5WYm5OaFptVW9iaWs3WEc0Z0lDQWdkbUZ5SUhBZ1BTQjBhR2x6TG1obFlXUTdYRzRnSUNBZ2RtRnlJR01nUFNBeE8xeHVJQ0FnSUhBdVpHRjBZUzVqYjNCNUtISmxkQ2s3WEc0Z0lDQWdiaUF0UFNCd0xtUmhkR0V1YkdWdVozUm9PMXh1WEc0Z0lDQWdkMmhwYkdVZ0tIQWdQU0J3TG01bGVIUXBJSHRjYmlBZ0lDQWdJSFpoY2lCaWRXWWdQU0J3TG1SaGRHRTdYRzRnSUNBZ0lDQjJZWElnYm1JZ1BTQnVJRDRnWW5WbUxteGxibWQwYUNBL0lHSjFaaTVzWlc1bmRHZ2dPaUJ1TzF4dUlDQWdJQ0FnWW5WbUxtTnZjSGtvY21WMExDQnlaWFF1YkdWdVozUm9JQzBnYml3Z01Dd2dibUlwTzF4dUlDQWdJQ0FnYmlBdFBTQnVZanRjYmx4dUlDQWdJQ0FnYVdZZ0tHNGdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0c1aUlEMDlQU0JpZFdZdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdLeXRqTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h3TG01bGVIUXBJSFJvYVhNdWFHVmhaQ0E5SUhBdWJtVjRkRHRsYkhObElIUm9hWE11YUdWaFpDQTlJSFJvYVhNdWRHRnBiQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NW9aV0ZrSUQwZ2NEdGNiaUFnSUNBZ0lDQWdJQ0J3TG1SaGRHRWdQU0JpZFdZdWMyeHBZMlVvYm1JcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ3NyWXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxteGxibWQwYUNBdFBTQmpPMXh1SUNBZ0lISmxkSFZ5YmlCeVpYUTdYRzRnSUgwZ0x5OGdUV0ZyWlNCemRYSmxJSFJvWlNCc2FXNXJaV1FnYkdsemRDQnZibXg1SUhOb2IzZHpJSFJvWlNCdGFXNXBiV0ZzSUc1bFkyVnpjMkZ5ZVNCcGJtWnZjbTFoZEdsdmJpNWNiaUFnTzF4dVhHNGdJRjl3Y205MGIxdGpkWE4wYjIxZElEMGdablZ1WTNScGIyNGdLRjhzSUc5d2RHbHZibk1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdhVzV6Y0dWamRDaDBhR2x6TENCZmIySnFaV04wVTNCeVpXRmtLSHQ5TENCdmNIUnBiMjV6TENCN1hHNGdJQ0FnSUNBdkx5QlBibXg1SUdsdWMzQmxZM1FnYjI1bElHeGxkbVZzTGx4dUlDQWdJQ0FnWkdWd2RHZzZJREFzWEc0Z0lDQWdJQ0F2THlCSmRDQnphRzkxYkdRZ2JtOTBJSEpsWTNWeWMyVXVYRzRnSUNBZ0lDQmpkWE4wYjIxSmJuTndaV04wT2lCbVlXeHpaVnh1SUNBZ0lIMHBLVHRjYmlBZ2ZUdGNibHh1SUNCeVpYUjFjbTRnUW5WbVptVnlUR2x6ZER0Y2JuMG9LVHNpTENJbmRYTmxJSE4wY21samRDYzdJQzh2SUhWdVpHOWpkVzFsYm5SbFpDQmpZaWdwSUVGUVNTd2dibVZsWkdWa0lHWnZjaUJqYjNKbExDQnViM1FnWm05eUlIQjFZbXhwWXlCQlVFbGNibHh1Wm5WdVkzUnBiMjRnWkdWemRISnZlU2hsY25Jc0lHTmlLU0I3WEc0Z0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnZG1GeUlISmxZV1JoWW14bFJHVnpkSEp2ZVdWa0lEMGdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaU0FtSmlCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpEdGNiaUFnZG1GeUlIZHlhWFJoWW14bFJHVnpkSEp2ZVdWa0lEMGdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0FtSmlCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpEdGNibHh1SUNCcFppQW9jbVZoWkdGaWJHVkVaWE4wY205NVpXUWdmSHdnZDNKcGRHRmliR1ZFWlhOMGNtOTVaV1FwSUh0Y2JpQWdJQ0JwWmlBb1kySXBJSHRjYmlBZ0lDQWdJR05pS0dWeWNpazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaGxjbklnSmlZZ0tDRjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxJSHg4SUNGMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtVnljbTl5UlcxcGRIUmxaQ2twSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWlcxcGRFVnljbTl5VGxRc0lIUm9hWE1zSUdWeWNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwZ0x5OGdkMlVnYzJWMElHUmxjM1J5YjNsbFpDQjBieUIwY25WbElHSmxabTl5WlNCbWFYSnBibWNnWlhKeWIzSWdZMkZzYkdKaFkydHpJR2x1SUc5eVpHVnlYRzRnSUM4dklIUnZJRzFoYTJVZ2FYUWdjbVV0Wlc1MGNtRnVZMlVnYzJGbVpTQnBiaUJqWVhObElHUmxjM1J5YjNrb0tTQnBjeUJqWVd4c1pXUWdkMmwwYUdsdUlHTmhiR3hpWVdOcmMxeHVYRzVjYmlBZ2FXWWdLSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VwSUh0Y2JpQWdJQ0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1SbGMzUnliM2xsWkNBOUlIUnlkV1U3WEc0Z0lIMGdMeThnYVdZZ2RHaHBjeUJwY3lCaElHUjFjR3hsZUNCemRISmxZVzBnYldGeWF5QjBhR1VnZDNKcGRHRmliR1VnY0dGeWRDQmhjeUJrWlhOMGNtOTVaV1FnWVhNZ2QyVnNiRnh1WEc1Y2JpQWdhV1lnS0hSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVcElIdGNiaUFnSUNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtUmxjM1J5YjNsbFpDQTlJSFJ5ZFdVN1hHNGdJSDFjYmx4dUlDQjBhR2x6TGw5a1pYTjBjbTk1S0dWeWNpQjhmQ0J1ZFd4c0xDQm1kVzVqZEdsdmJpQW9aWEp5S1NCN1hHNGdJQ0FnYVdZZ0tDRmpZaUFtSmlCbGNuSXBJSHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29aVzFwZEVWeWNtOXlRVzVrUTJ4dmMyVk9WQ3dnWDNSb2FYTXNJR1Z5Y2lrN1hHNWNiaUFnSUNBZ0lHbG1JQ2hmZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaUzVsY25KdmNrVnRhWFIwWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvWTJJcElIdGNiaUFnSUNBZ0lIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1pXMXBkRU5zYjNObFRsUXNJRjkwYUdsektUdGNiaUFnSUNBZ0lHTmlLR1Z5Y2lrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29aVzFwZEVOc2IzTmxUbFFzSUY5MGFHbHpLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCbGJXbDBSWEp5YjNKQmJtUkRiRzl6WlU1VUtITmxiR1lzSUdWeWNpa2dlMXh1SUNCbGJXbDBSWEp5YjNKT1ZDaHpaV3htTENCbGNuSXBPMXh1SUNCbGJXbDBRMnh2YzJWT1ZDaHpaV3htS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWlcxcGRFTnNiM05sVGxRb2MyVnNaaWtnZTF4dUlDQnBaaUFvYzJWc1ppNWZkM0pwZEdGaWJHVlRkR0YwWlNBbUppQWhjMlZzWmk1ZmQzSnBkR0ZpYkdWVGRHRjBaUzVsYldsMFEyeHZjMlVwSUhKbGRIVnlianRjYmlBZ2FXWWdLSE5sYkdZdVgzSmxZV1JoWW14bFUzUmhkR1VnSmlZZ0lYTmxiR1l1WDNKbFlXUmhZbXhsVTNSaGRHVXVaVzFwZEVOc2IzTmxLU0J5WlhSMWNtNDdYRzRnSUhObGJHWXVaVzFwZENnblkyeHZjMlVuS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZFc1a1pYTjBjbTk1S0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTa2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaR1Z6ZEhKdmVXVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaVzVrUlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1WdVpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVabWx1WVd4RFlXeHNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbkJ5WldacGJtbHphR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaUzVtYVc1cGMyaGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaWEp5YjNKRmJXbDBkR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXMXBkRVZ5Y205eVRsUW9jMlZzWml3Z1pYSnlLU0I3WEc0Z0lITmxiR1l1WlcxcGRDZ25aWEp5YjNJbkxDQmxjbklwTzF4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ1pHVnpkSEp2ZVRvZ1pHVnpkSEp2ZVN4Y2JpQWdkVzVrWlhOMGNtOTVPaUIxYm1SbGMzUnliM2xjYm4wN0lpd2lMeThnVUc5eWRHVmtJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyMWhabWx1ZEc5emFDOWxibVF0YjJZdGMzUnlaV0Z0SUhkcGRHaGNiaTh2SUhCbGNtMXBjM05wYjI0Z1puSnZiU0IwYUdVZ1lYVjBhRzl5TENCTllYUm9hV0Z6SUVKMWRYTWdLRUJ0WVdacGJuUnZjMmdwTGx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdSVkpTWDFOVVVrVkJUVjlRVWtWTlFWUlZVa1ZmUTB4UFUwVWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOHVMaTlsY25KdmNuTW5LUzVqYjJSbGN5NUZVbEpmVTFSU1JVRk5YMUJTUlUxQlZGVlNSVjlEVEU5VFJUdGNibHh1Wm5WdVkzUnBiMjRnYm05dmNDZ3BJSHQ5WEc1Y2JtWjFibU4wYVc5dUlHbHpVbVZ4ZFdWemRDaHpkSEpsWVcwcElIdGNiaUFnY21WMGRYSnVJSE4wY21WaGJTNXpaWFJJWldGa1pYSWdKaVlnZEhsd1pXOW1JSE4wY21WaGJTNWhZbTl5ZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4xY2JseHVablZ1WTNScGIyNGdiMjVqWlNoallXeHNZbUZqYXlrZ2UxeHVJQ0IyWVhJZ1kyRnNiR1ZrSUQwZ1ptRnNjMlU3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb1pYSnlLU0I3WEc0Z0lDQWdhV1lnS0dOaGJHeGxaQ2tnY21WMGRYSnVPMXh1SUNBZ0lHTmhiR3hsWkNBOUlIUnlkV1U3WEc0Z0lDQWdZMkZzYkdKaFkyc3VZMkZzYkNoMGFHbHpMQ0JsY25JcE8xeHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJsYjNNb2MzUnlaV0Z0TENCdmNIUnpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JRzl3ZEhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUhKbGRIVnliaUJsYjNNb2MzUnlaV0Z0TENCdWRXeHNMQ0J2Y0hSektUdGNiaUFnYVdZZ0tDRnZjSFJ6S1NCdmNIUnpJRDBnZTMwN1hHNGdJR05oYkd4aVlXTnJJRDBnYjI1alpTaGpZV3hzWW1GamF5QjhmQ0J1YjI5d0tUdGNiaUFnZG1GeUlIZHpJRDBnYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2NuTWdQU0J6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJSFpoY2lCeVpXRmtZV0pzWlNBOUlHOXdkSE11Y21WaFpHRmliR1VnZkh3Z2IzQjBjeTV5WldGa1lXSnNaU0FoUFQwZ1ptRnNjMlVnSmlZZ2MzUnlaV0Z0TG5KbFlXUmhZbXhsTzF4dUlDQjJZWElnZDNKcGRHRmliR1VnUFNCdmNIUnpMbmR5YVhSaFlteGxJSHg4SUc5d2RITXVkM0pwZEdGaWJHVWdJVDA5SUdaaGJITmxJQ1ltSUhOMGNtVmhiUzUzY21sMFlXSnNaVHRjYmx4dUlDQjJZWElnYjI1c1pXZGhZM2xtYVc1cGMyZ2dQU0JtZFc1amRHbHZiaUJ2Ym14bFoyRmplV1pwYm1semFDZ3BJSHRjYmlBZ0lDQnBaaUFvSVhOMGNtVmhiUzUzY21sMFlXSnNaU2tnYjI1bWFXNXBjMmdvS1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnYjI1bWFXNXBjMmdnUFNCbWRXNWpkR2x2YmlCdmJtWnBibWx6YUNncElIdGNiaUFnSUNCM2NtbDBZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNnaGNtVmhaR0ZpYkdVcElHTmhiR3hpWVdOckxtTmhiR3dvYzNSeVpXRnRLVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdiMjVsYm1RZ1BTQm1kVzVqZEdsdmJpQnZibVZ1WkNncElIdGNiaUFnSUNCeVpXRmtZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNnaGQzSnBkR0ZpYkdVcElHTmhiR3hpWVdOckxtTmhiR3dvYzNSeVpXRnRLVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdiMjVsY25KdmNpQTlJR1oxYm1OMGFXOXVJRzl1WlhKeWIzSW9aWEp5S1NCN1hHNGdJQ0FnWTJGc2JHSmhZMnN1WTJGc2JDaHpkSEpsWVcwc0lHVnljaWs3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJRzl1WTJ4dmMyVWdQU0JtZFc1amRHbHZiaUJ2Ym1Oc2IzTmxLQ2tnZTF4dUlDQWdJR2xtSUNoeVpXRmtZV0pzWlNBbUppQWhLSEp6SUNZbUlISnpMbVZ1WkdWa0tTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOckxtTmhiR3dvYzNSeVpXRnRMQ0J1WlhjZ1JWSlNYMU5VVWtWQlRWOVFVa1ZOUVZSVlVrVmZRMHhQVTBVb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSGR5YVhSaFlteGxJQ1ltSUNFb2QzTWdKaVlnZDNNdVpXNWtaV1FwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTJGc2JHSmhZMnN1WTJGc2JDaHpkSEpsWVcwc0lHNWxkeUJGVWxKZlUxUlNSVUZOWDFCU1JVMUJWRlZTUlY5RFRFOVRSU2dwS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJRzl1Y21WeGRXVnpkQ0E5SUdaMWJtTjBhVzl1SUc5dWNtVnhkV1Z6ZENncElIdGNiaUFnSUNCemRISmxZVzB1Y21WeExtOXVLQ2RtYVc1cGMyZ25MQ0J2Ym1acGJtbHphQ2s3WEc0Z0lIMDdYRzVjYmlBZ2FXWWdLR2x6VW1WeGRXVnpkQ2h6ZEhKbFlXMHBLU0I3WEc0Z0lDQWdjM1J5WldGdExtOXVLQ2RqYjIxd2JHVjBaU2NzSUc5dVptbHVhWE5vS1R0Y2JpQWdJQ0J6ZEhKbFlXMHViMjRvSjJGaWIzSjBKeXdnYjI1amJHOXpaU2s3WEc0Z0lDQWdhV1lnS0hOMGNtVmhiUzV5WlhFcElHOXVjbVZ4ZFdWemRDZ3BPMlZzYzJVZ2MzUnlaV0Z0TG05dUtDZHlaWEYxWlhOMEp5d2diMjV5WlhGMVpYTjBLVHRjYmlBZ2ZTQmxiSE5sSUdsbUlDaDNjbWwwWVdKc1pTQW1KaUFoZDNNcElIdGNiaUFnSUNBdkx5QnNaV2RoWTNrZ2MzUnlaV0Z0YzF4dUlDQWdJSE4wY21WaGJTNXZiaWduWlc1a0p5d2diMjVzWldkaFkzbG1hVzVwYzJncE8xeHVJQ0FnSUhOMGNtVmhiUzV2YmlnblkyeHZjMlVuTENCdmJteGxaMkZqZVdacGJtbHphQ2s3WEc0Z0lIMWNibHh1SUNCemRISmxZVzB1YjI0b0oyVnVaQ2NzSUc5dVpXNWtLVHRjYmlBZ2MzUnlaV0Z0TG05dUtDZG1hVzVwYzJnbkxDQnZibVpwYm1semFDazdYRzRnSUdsbUlDaHZjSFJ6TG1WeWNtOXlJQ0U5UFNCbVlXeHpaU2tnYzNSeVpXRnRMbTl1S0NkbGNuSnZjaWNzSUc5dVpYSnliM0lwTzF4dUlDQnpkSEpsWVcwdWIyNG9KMk5zYjNObEp5d2diMjVqYkc5elpTazdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYzNSeVpXRnRMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZGpiMjF3YkdWMFpTY3NJRzl1Wm1sdWFYTm9LVHRjYmlBZ0lDQnpkSEpsWVcwdWNtVnRiM1psVEdsemRHVnVaWElvSjJGaWIzSjBKeXdnYjI1amJHOXpaU2s3WEc0Z0lDQWdjM1J5WldGdExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkeVpYRjFaWE4wSnl3Z2IyNXlaWEYxWlhOMEtUdGNiaUFnSUNCcFppQW9jM1J5WldGdExuSmxjU2tnYzNSeVpXRnRMbkpsY1M1eVpXMXZkbVZNYVhOMFpXNWxjaWduWm1sdWFYTm9KeXdnYjI1bWFXNXBjMmdwTzF4dUlDQWdJSE4wY21WaGJTNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpXNWtKeXdnYjI1c1pXZGhZM2xtYVc1cGMyZ3BPMXh1SUNBZ0lITjBjbVZoYlM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0J2Ym14bFoyRmplV1pwYm1semFDazdYRzRnSUNBZ2MzUnlaV0Z0TG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RtYVc1cGMyZ25MQ0J2Ym1acGJtbHphQ2s3WEc0Z0lDQWdjM1J5WldGdExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGJtUW5MQ0J2Ym1WdVpDazdYRzRnSUNBZ2MzUnlaV0Z0TG5KbGJXOTJaVXhwYzNSbGJtVnlLQ2RsY25KdmNpY3NJRzl1WlhKeWIzSXBPMXh1SUNBZ0lITjBjbVZoYlM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWTJ4dmMyVW5MQ0J2Ym1Oc2IzTmxLVHRjYmlBZ2ZUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbGIzTTdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ1JWSlNYMGxPVmtGTVNVUmZUMUJVWDFaQlRGVkZJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZMaTR2WlhKeWIzSnpKeWt1WTI5a1pYTXVSVkpTWDBsT1ZrRk1TVVJmVDFCVVgxWkJURlZGTzF4dVhHNW1kVzVqZEdsdmJpQm9hV2RvVjJGMFpYSk5ZWEpyUm5KdmJTaHZjSFJwYjI1ekxDQnBjMFIxY0d4bGVDd2daSFZ3YkdWNFMyVjVLU0I3WEc0Z0lISmxkSFZ5YmlCdmNIUnBiMjV6TG1ocFoyaFhZWFJsY2sxaGNtc2dJVDBnYm5Wc2JDQS9JRzl3ZEdsdmJuTXVhR2xuYUZkaGRHVnlUV0Z5YXlBNklHbHpSSFZ3YkdWNElEOGdiM0IwYVc5dWMxdGtkWEJzWlhoTFpYbGRJRG9nYm5Wc2JEdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBTR2xuYUZkaGRHVnlUV0Z5YXloemRHRjBaU3dnYjNCMGFXOXVjeXdnWkhWd2JHVjRTMlY1TENCcGMwUjFjR3hsZUNrZ2UxeHVJQ0IyWVhJZ2FIZHRJRDBnYUdsbmFGZGhkR1Z5VFdGeWEwWnliMjBvYjNCMGFXOXVjeXdnYVhORWRYQnNaWGdzSUdSMWNHeGxlRXRsZVNrN1hHNWNiaUFnYVdZZ0tHaDNiU0FoUFNCdWRXeHNLU0I3WEc0Z0lDQWdhV1lnS0NFb2FYTkdhVzVwZEdVb2FIZHRLU0FtSmlCTllYUm9MbVpzYjI5eUtHaDNiU2tnUFQwOUlHaDNiU2tnZkh3Z2FIZHRJRHdnTUNrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzVoYldVZ1BTQnBjMFIxY0d4bGVDQS9JR1IxY0d4bGVFdGxlU0E2SUNkb2FXZG9WMkYwWlhKTllYSnJKenRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGVWxKZlNVNVdRVXhKUkY5UFVGUmZWa0ZNVlVVb2JtRnRaU3dnYUhkdEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnVFdGMGFDNW1iRzl2Y2lob2QyMHBPMXh1SUNCOUlDOHZJRVJsWm1GMWJIUWdkbUZzZFdWY2JseHVYRzRnSUhKbGRIVnliaUJ6ZEdGMFpTNXZZbXBsWTNSTmIyUmxJRDhnTVRZZ09pQXhOaUFxSURFd01qUTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHVJQ0JuWlhSSWFXZG9WMkYwWlhKTllYSnJPaUJuWlhSSWFXZG9WMkYwWlhKTllYSnJYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnblpYWmxiblJ6SnlrdVJYWmxiblJGYldsMGRHVnlPMXh1SWl3aVpYaHdiM0owY3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjl5WldGa1lXSnNaUzVxY3ljcE8xeHVaWGh3YjNKMGN5NVRkSEpsWVcwZ1BTQmxlSEJ2Y25Sek8xeHVaWGh3YjNKMGN5NVNaV0ZrWVdKc1pTQTlJR1Y0Y0c5eWRITTdYRzVsZUhCdmNuUnpMbGR5YVhSaFlteGxJRDBnY21WeGRXbHlaU2duTGk5c2FXSXZYM04wY21WaGJWOTNjbWwwWVdKc1pTNXFjeWNwTzF4dVpYaHdiM0owY3k1RWRYQnNaWGdnUFNCeVpYRjFhWEpsS0NjdUwyeHBZaTlmYzNSeVpXRnRYMlIxY0d4bGVDNXFjeWNwTzF4dVpYaHdiM0owY3k1VWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDY3VMMnhwWWk5ZmMzUnlaV0Z0WDNSeVlXNXpabTl5YlM1cWN5Y3BPMXh1Wlhod2IzSjBjeTVRWVhOelZHaHliM1ZuYUNBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmY0dGemMzUm9jbTkxWjJndWFuTW5LVHRjYmlJc0lpOHFJR2RzYjJKaGJDQnBibVJsZUdWa1JFSWdLaTljYmx4dUozVnpaU0J6ZEhKcFkzUW5YRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVEdWMlpXeGNibHh1ZG1GeUlFRmljM1J5WVdOMFRHVjJaV3hFVDFkT0lEMGdjbVZ4ZFdseVpTZ25ZV0p6ZEhKaFkzUXRiR1YyWld4a2IzZHVKeWt1UVdKemRISmhZM1JNWlhabGJFUlBWMDVjYm5aaGNpQnBibWhsY21sMGN5QTlJSEpsY1hWcGNtVW9KMmx1YUdWeWFYUnpKeWxjYm5aaGNpQkpkR1Z5WVhSdmNpQTlJSEpsY1hWcGNtVW9KeTR2YVhSbGNtRjBiM0luS1Z4dWRtRnlJRzFwZUdWa1ZHOUNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd3dmJXbDRaV1F0ZEc4dFluVm1abVZ5SnlsY2JuWmhjaUJ6WlhSSmJXMWxaR2xoZEdVZ1BTQnlaWEYxYVhKbEtDY3VMM1YwYVd3dmFXMXRaV1JwWVhSbEp5bGNiblpoY2lCemRYQndiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOTFkR2xzTDNOMWNIQnZjblFuS1Z4dVhHNTJZWElnUkVWR1FWVk1WRjlRVWtWR1NWZ2dQU0FuYkdWMlpXd3Rhbk10SjF4dVhHNW1kVzVqZEdsdmJpQk1aWFpsYkNBb2JHOWpZWFJwYjI0c0lHOXdkSE1wSUh0Y2JpQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUV4bGRtVnNLU2tnY21WMGRYSnVJRzVsZHlCTVpYWmxiQ2hzYjJOaGRHbHZiaXdnYjNCMGN5bGNiaUFnUVdKemRISmhZM1JNWlhabGJFUlBWMDR1WTJGc2JDaDBhR2x6S1Z4dUlDQnZjSFJ6SUQwZ2IzQjBjeUI4ZkNCN2ZWeHVYRzRnSUdsbUlDaDBlWEJsYjJZZ2JHOWpZWFJwYjI0Z0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGpiMjV6ZEhKMVkzUnZjaUJ5WlhGMWFYSmxjeUJoSUd4dlkyRjBhVzl1SUhOMGNtbHVaeUJoY21kMWJXVnVkQ2NwWEc0Z0lIMWNibHh1SUNCMGFHbHpMbXh2WTJGMGFXOXVJRDBnYkc5allYUnBiMjVjYmlBZ2RHaHBjeTV3Y21WbWFYZ2dQU0J2Y0hSekxuQnlaV1pwZUNCOGZDQkVSVVpCVlV4VVgxQlNSVVpKV0Z4dUlDQjBhR2x6TG5abGNuTnBiMjRnUFNCd1lYSnpaVWx1ZENodmNIUnpMblpsY25OcGIyNGdmSHdnTVN3Z01UQXBYRzU5WEc1Y2JtbHVhR1Z5YVhSektFeGxkbVZzTENCQlluTjBjbUZqZEV4bGRtVnNSRTlYVGlsY2JseHVMeThnUkdWMFpXTjBJR0pwYm1GeWVTQmhibVFnWVhKeVlYa2dhMlY1SUhOMWNIQnZjblFnS0VsdVpHVjRaV1JFUWlCVFpXTnZibVFnUldScGRHbHZiaWxjYmt4bGRtVnNMbUpwYm1GeWVVdGxlWE1nUFNCemRYQndiM0owTG1KcGJtRnllVXRsZVhNb2FXNWtaWGhsWkVSQ0tWeHVUR1YyWld3dVlYSnlZWGxMWlhseklEMGdjM1Z3Y0c5eWRDNWhjbkpoZVV0bGVYTW9hVzVrWlhobFpFUkNLVnh1WEc1TVpYWmxiQzV3Y205MGIzUjVjR1V1WDI5d1pXNGdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUhKbGNTQTlJR2x1WkdWNFpXUkVRaTV2Y0dWdUtIUm9hWE11Y0hKbFptbDRJQ3NnZEdocGN5NXNiMk5oZEdsdmJpd2dkR2hwY3k1MlpYSnphVzl1S1Z4dUlDQjJZWElnYzJWc1ppQTlJSFJvYVhOY2JseHVJQ0J5WlhFdWIyNWxjbkp2Y2lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5aHlaWEV1WlhKeWIzSWdmSHdnYm1WM0lFVnljbTl5S0NkMWJtdHViM2R1SUdWeWNtOXlKeWtwWEc0Z0lIMWNibHh1SUNCeVpYRXViMjV6ZFdOalpYTnpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhObGJHWXVaR0lnUFNCeVpYRXVjbVZ6ZFd4MFhHNGdJQ0FnWTJGc2JHSmhZMnNvS1Z4dUlDQjlYRzVjYmlBZ2NtVnhMbTl1ZFhCbmNtRmtaVzVsWldSbFpDQTlJR1oxYm1OMGFXOXVJQ2hsZGlrZ2UxeHVJQ0FnSUhaaGNpQmtZaUE5SUdWMkxuUmhjbWRsZEM1eVpYTjFiSFJjYmx4dUlDQWdJR2xtSUNnaFpHSXViMkpxWldOMFUzUnZjbVZPWVcxbGN5NWpiMjUwWVdsdWN5aHpaV3htTG14dlkyRjBhVzl1S1NrZ2UxeHVJQ0FnSUNBZ1pHSXVZM0psWVhSbFQySnFaV04wVTNSdmNtVW9jMlZzWmk1c2IyTmhkR2x2YmlsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVRHVjJaV3d1Y0hKdmRHOTBlWEJsTG5OMGIzSmxJRDBnWm5WdVkzUnBiMjRnS0cxdlpHVXBJSHRjYmlBZ2RtRnlJSFJ5WVc1ellXTjBhVzl1SUQwZ2RHaHBjeTVrWWk1MGNtRnVjMkZqZEdsdmJpaGJkR2hwY3k1c2IyTmhkR2x2Ymwwc0lHMXZaR1VwWEc0Z0lISmxkSFZ5YmlCMGNtRnVjMkZqZEdsdmJpNXZZbXBsWTNSVGRHOXlaU2gwYUdsekxteHZZMkYwYVc5dUtWeHVmVnh1WEc1TVpYWmxiQzV3Y205MGIzUjVjR1V1WVhkaGFYUWdQU0JtZFc1amRHbHZiaUFvY21WeGRXVnpkQ3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUhSeVlXNXpZV04wYVc5dUlEMGdjbVZ4ZFdWemRDNTBjbUZ1YzJGamRHbHZibHh1WEc0Z0lDOHZJRlJoYTJVZ1lXUjJZVzUwWVdkbElHOW1JSFJvWlNCbVlXTjBJSFJvWVhRZ1lTQnViMjR0WTJGdVkyVnNaV1FnY21WeGRXVnpkQ0JsY25KdmNpQmhZbTl5ZEhOY2JpQWdMeThnZEdobElIUnlZVzV6WVdOMGFXOXVMaUJKTG1VdUlHNXZJRzVsWldRZ2RHOGdiR2x6ZEdWdUlHWnZjaUJjSW5KbGNYVmxjM1F1YjI1bGNuSnZjbHdpTGx4dUlDQjBjbUZ1YzJGamRHbHZiaTV2Ym1GaWIzSjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUdOaGJHeGlZV05yS0hSeVlXNXpZV04wYVc5dUxtVnljbTl5SUh4OElHNWxkeUJGY25KdmNpZ25ZV0p2Y25SbFpDQmllU0IxYzJWeUp5a3BYRzRnSUgxY2JseHVJQ0IwY21GdWMyRmpkR2x2Ymk1dmJtTnZiWEJzWlhSbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR05oYkd4aVlXTnJLRzUxYkd3c0lISmxjWFZsYzNRdWNtVnpkV3gwS1Z4dUlDQjlYRzU5WEc1Y2JreGxkbVZzTG5CeWIzUnZkSGx3WlM1ZloyVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2diM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ2RtRnlJSE4wYjNKbElEMGdkR2hwY3k1emRHOXlaU2duY21WaFpHOXViSGtuS1Z4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlISmxjU0E5SUhOMGIzSmxMbWRsZENoclpYa3BYRzRnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCelpYUkpiVzFsWkdsaGRHVW9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWTJGc2JHSmhZMnNvWlhKeUtWeHVJQ0FnSUgwcFhHNGdJSDFjYmx4dUlDQjBhR2x6TG1GM1lXbDBLSEpsY1N3Z1puVnVZM1JwYjI0Z0tHVnljaXdnZG1Gc2RXVXBJSHRjYmlBZ0lDQnBaaUFvWlhKeUtTQnlaWFIxY200Z1kyRnNiR0poWTJzb1pYSnlLVnh1WEc0Z0lDQWdhV1lnS0haaGJIVmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDOHZJQ2RPYjNSR2IzVnVaQ2NnWlhKeWIzSXNJR052Ym5OcGMzUmxiblFnZDJsMGFDQk1aWFpsYkVSUFYwNGdRVkJKWEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29ibVYzSUVWeWNtOXlLQ2RPYjNSR2IzVnVaQ2NwS1Z4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodmNIUnBiMjV6TG1GelFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUcxcGVHVmtWRzlDZFdabVpYSW9kbUZzZFdVcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnWTJGc2JHSmhZMnNvYm5Wc2JDd2dkbUZzZFdVcFhHNGdJSDBwWEc1OVhHNWNia3hsZG1Wc0xuQnliM1J2ZEhsd1pTNWZaR1ZzSUQwZ1puVnVZM1JwYjI0Z0tHdGxlU3dnYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUhOMGIzSmxJRDBnZEdocGN5NXpkRzl5WlNnbmNtVmhaSGR5YVhSbEp5bGNibHh1SUNCMGNua2dlMXh1SUNBZ0lIWmhjaUJ5WlhFZ1BTQnpkRzl5WlM1a1pXeGxkR1VvYTJWNUtWeHVJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNCeVpYUjFjbTRnYzJWMFNXMXRaV1JwWVhSbEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLR1Z5Y2lsY2JpQWdJQ0I5S1Z4dUlDQjlYRzVjYmlBZ2RHaHBjeTVoZDJGcGRDaHlaWEVzSUdOaGJHeGlZV05yS1Z4dWZWeHVYRzVNWlhabGJDNXdjbTkwYjNSNWNHVXVYM0IxZENBOUlHWjFibU4wYVc5dUlDaHJaWGtzSUhaaGJIVmxMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQjJZWElnYzNSdmNtVWdQU0IwYUdsekxuTjBiM0psS0NkeVpXRmtkM0pwZEdVbktWeHVYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdWMmxzYkNCMGFISnZkeUJoSUVSaGRHRkZjbkp2Y2lCdmNpQkVZWFJoUTJ4dmJtVkZjbkp2Y2lCcFppQjBhR1VnWlc1MmFYSnZibTFsYm5SY2JpQWdJQ0F2THlCa2IyVnpJRzV2ZENCemRYQndiM0owSUhObGNtbGhiR2w2YVc1bklIUm9aU0JyWlhrZ2IzSWdkbUZzZFdVZ2NtVnpjR1ZqZEdsMlpXeDVMbHh1SUNBZ0lIWmhjaUJ5WlhFZ1BTQnpkRzl5WlM1d2RYUW9kbUZzZFdVc0lHdGxlU2xjYmlBZ2ZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlITmxkRWx0YldWa2FXRjBaU2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCallXeHNZbUZqYXlobGNuSXBYRzRnSUNBZ2ZTbGNiaUFnZlZ4dVhHNGdJSFJvYVhNdVlYZGhhWFFvY21WeExDQmpZV3hzWW1GamF5bGNibjFjYmx4dUx5OGdWbUZzYVdRZ2EyVjVJSFI1Y0dWeklHbHVJRWx1WkdWNFpXUkVRaUJUWldOdmJtUWdSV1JwZEdsdmJqcGNiaTh2WEc0dkx5QXRJRTUxYldKbGNpd2daWGhqWlhCMElFNWhUaTRnU1c1amJIVmtaWE1nU1c1bWFXNXBkSGtnWVc1a0lDMUpibVpwYm1sMGVWeHVMeThnTFNCRVlYUmxMQ0JsZUdObGNIUWdhVzUyWVd4cFpDQW9UbUZPS1Z4dUx5OGdMU0JUZEhKcGJtZGNiaTh2SUMwZ1FYSnlZWGxDZFdabVpYSWdiM0lnWVNCMmFXVjNJSFJvWlhKbGIyWWdLSFI1Y0dWa0lHRnljbUY1Y3lrdUlFbHVJR3hsZG1Wc0xXcHpJSGRsSUdGc2MyOGdjM1Z3Y0c5eWRGeHVMeThnSUNCQ2RXWm1aWElnS0hkb2FXTm9JR2x6SUdGdUlGVnBiblE0UVhKeVlYa3BJQ2hoYm1RZ2RHaGxJSEJ5YVcxaGNua2dZbWx1WVhKNUlIUjVjR1VnYjJZZ1RHVjJaV3dwTGx4dUx5OGdMU0JCY25KaGVTd2daWGhqWlhCMElHTjVZMnhwWTJGc0lHRnVaQ0JsYlhCMGVTQW9aUzVuTGlCQmNuSmhlU2d4TUNrcExpQkZiR1Z0Wlc1MGN5QnRkWE4wSUdKbElIWmhiR2xrWEc0dkx5QWdJSFI1Y0dWeklIUm9aVzF6Wld4MlpYTXVYRzVNWlhabGJDNXdjbTkwYjNSNWNHVXVYM05sY21saGJHbDZaVXRsZVNBOUlHWjFibU4wYVc5dUlDaHJaWGtwSUh0Y2JpQWdhV1lnS0VKMVptWmxjaTVwYzBKMVptWmxjaWhyWlhrcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUV4bGRtVnNMbUpwYm1GeWVVdGxlWE1nUHlCclpYa2dPaUJyWlhrdWRHOVRkSEpwYm1jb0tWeHVJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29hMlY1S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJNWlhabGJDNWhjbkpoZVV0bGVYTWdQeUJyWlhrdWJXRndLSFJvYVhNdVgzTmxjbWxoYkdsNlpVdGxlU3dnZEdocGN5a2dPaUJUZEhKcGJtY29hMlY1S1Z4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJyWlhsY2JpQWdmVnh1ZlZ4dVhHNU1aWFpsYkM1d2NtOTBiM1I1Y0dVdVgzTmxjbWxoYkdsNlpWWmhiSFZsSUQwZ1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQjJZV3gxWlZ4dWZWeHVYRzVNWlhabGJDNXdjbTkwYjNSNWNHVXVYMmwwWlhKaGRHOXlJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1wSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJKZEdWeVlYUnZjaWgwYUdsekxDQjBhR2x6TG14dlkyRjBhVzl1TENCdmNIUnBiMjV6S1Z4dWZWeHVYRzVNWlhabGJDNXdjbTkwYjNSNWNHVXVYMkpoZEdOb0lEMGdablZ1WTNScGIyNGdLRzl3WlhKaGRHbHZibk1zSUc5d2RHbHZibk1zSUdOaGJHeGlZV05yS1NCN1hHNGdJR2xtSUNodmNHVnlZWFJwYjI1ekxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVJSE5sZEVsdGJXVmthV0YwWlNoallXeHNZbUZqYXlsY2JseHVJQ0IyWVhJZ2MzUnZjbVVnUFNCMGFHbHpMbk4wYjNKbEtDZHlaV0ZrZDNKcGRHVW5LVnh1SUNCMllYSWdkSEpoYm5OaFkzUnBiMjRnUFNCemRHOXlaUzUwY21GdWMyRmpkR2x2Ymx4dUlDQjJZWElnYVc1a1pYZ2dQU0F3WEc0Z0lIWmhjaUJsY25KdmNseHVYRzRnSUhSeVlXNXpZV04wYVc5dUxtOXVZV0p2Y25RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdZMkZzYkdKaFkyc29aWEp5YjNJZ2ZId2dkSEpoYm5OaFkzUnBiMjR1WlhKeWIzSWdmSHdnYm1WM0lFVnljbTl5S0NkaFltOXlkR1ZrSUdKNUlIVnpaWEluS1NsY2JpQWdmVnh1WEc0Z0lIUnlZVzV6WVdOMGFXOXVMbTl1WTI5dGNHeGxkR1VnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1kyRnNiR0poWTJzb0tWeHVJQ0I5WEc1Y2JpQWdMeThnVjJGcGRDQm1iM0lnWVNCeVpYRjFaWE4wSUhSdklHTnZiWEJzWlhSbElHSmxabTl5WlNCdFlXdHBibWNnZEdobElHNWxlSFFzSUhOaGRtbHVaeUJEVUZVdVhHNGdJR1oxYm1OMGFXOXVJR3h2YjNBZ0tDa2dlMXh1SUNBZ0lIWmhjaUJ2Y0NBOUlHOXdaWEpoZEdsdmJuTmJhVzVrWlhncksxMWNiaUFnSUNCMllYSWdhMlY1SUQwZ2IzQXVhMlY1WEc1Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2RtRnlJSEpsY1NBOUlHOXdMblI1Y0dVZ1BUMDlJQ2RrWld3bklEOGdjM1J2Y21VdVpHVnNaWFJsS0d0bGVTa2dPaUJ6ZEc5eVpTNXdkWFFvYjNBdWRtRnNkV1VzSUd0bGVTbGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJR1Z5Y205eUlEMGdaWEp5WEc0Z0lDQWdJQ0IwY21GdWMyRmpkR2x2Ymk1aFltOXlkQ2dwWEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9hVzVrWlhnZ1BDQnZjR1Z5WVhScGIyNXpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdjbVZ4TG05dWMzVmpZMlZ6Y3lBOUlHeHZiM0JjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JzYjI5d0tDbGNibjFjYmx4dVRHVjJaV3d1Y0hKdmRHOTBlWEJsTGw5amJHOXpaU0E5SUdaMWJtTjBhVzl1SUNoallXeHNZbUZqYXlrZ2UxeHVJQ0IwYUdsekxtUmlMbU5zYjNObEtDbGNiaUFnYzJWMFNXMXRaV1JwWVhSbEtHTmhiR3hpWVdOcktWeHVmVnh1WEc1TVpYWmxiQzVrWlhOMGNtOTVJRDBnWm5WdVkzUnBiMjRnS0d4dlkyRjBhVzl1TENCd2NtVm1hWGdzSUdOaGJHeGlZV05yS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnY0hKbFptbDRJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ1kyRnNiR0poWTJzZ1BTQndjbVZtYVhoY2JpQWdJQ0J3Y21WbWFYZ2dQU0JFUlVaQlZVeFVYMUJTUlVaSldGeHVJQ0I5WEc0Z0lIWmhjaUJ5WlhGMVpYTjBJRDBnYVc1a1pYaGxaRVJDTG1SbGJHVjBaVVJoZEdGaVlYTmxLSEJ5WldacGVDQXJJR3h2WTJGMGFXOXVLVnh1SUNCeVpYRjFaWE4wTG05dWMzVmpZMlZ6Y3lBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5Z3BYRzRnSUgxY2JpQWdjbVZ4ZFdWemRDNXZibVZ5Y205eUlEMGdablZ1WTNScGIyNGdLR1Z5Y2lrZ2UxeHVJQ0FnSUdOaGJHeGlZV05yS0dWeWNpbGNiaUFnZlZ4dWZWeHVJaXdpTHlvZ1oyeHZZbUZzSUVsRVFrdGxlVkpoYm1kbElDb3ZYRzVjYmlkMWMyVWdjM1J5YVdOMEoxeHVYRzUyWVhJZ2FXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BYRzUyWVhJZ1FXSnpkSEpoWTNSSmRHVnlZWFJ2Y2lBOUlISmxjWFZwY21Vb0oyRmljM1J5WVdOMExXeGxkbVZzWkc5M2JpY3BMa0ZpYzNSeVlXTjBTWFJsY21GMGIzSmNiblpoY2lCc2RHZDBJRDBnY21WeGRXbHlaU2duYkhSbmRDY3BYRzUyWVhJZ2JXbDRaV1JVYjBKMVptWmxjaUE5SUhKbGNYVnBjbVVvSnk0dmRYUnBiQzl0YVhobFpDMTBieTFpZFdabVpYSW5LVnh1ZG1GeUlITmxkRWx0YldWa2FXRjBaU0E5SUhKbGNYVnBjbVVvSnk0dmRYUnBiQzlwYlcxbFpHbGhkR1VuS1Z4dWRtRnlJRzV2YjNBZ1BTQm1kVzVqZEdsdmJpQW9LU0I3ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFbDBaWEpoZEc5eVhHNWNibVoxYm1OMGFXOXVJRWwwWlhKaGRHOXlJQ2hrWWl3Z2JHOWpZWFJwYjI0c0lHOXdkR2x2Ym5NcElIdGNiaUFnUVdKemRISmhZM1JKZEdWeVlYUnZjaTVqWVd4c0tIUm9hWE1zSUdSaUtWeHVYRzRnSUhSb2FYTXVYMnhwYldsMElEMGdiM0IwYVc5dWN5NXNhVzFwZEZ4dUlDQjBhR2x6TGw5amIzVnVkQ0E5SURCY2JpQWdkR2hwY3k1ZlkyRnNiR0poWTJzZ1BTQnVkV3hzWEc0Z0lIUm9hWE11WDJOaFkyaGxJRDBnVzExY2JpQWdkR2hwY3k1ZlkyOXRjR3hsZEdWa0lEMGdabUZzYzJWY2JpQWdkR2hwY3k1ZllXSnZjblJsWkNBOUlHWmhiSE5sWEc0Z0lIUm9hWE11WDJWeWNtOXlJRDBnYm5Wc2JGeHVJQ0IwYUdsekxsOTBjbUZ1YzJGamRHbHZiaUE5SUc1MWJHeGNibHh1SUNCMGFHbHpMbDlyWlhsQmMwSjFabVpsY2lBOUlHOXdkR2x2Ym5NdWEyVjVRWE5DZFdabVpYSmNiaUFnZEdocGN5NWZkbUZzZFdWQmMwSjFabVpsY2lBOUlHOXdkR2x2Ym5NdWRtRnNkV1ZCYzBKMVptWmxjbHh1WEc0Z0lHbG1JQ2gwYUdsekxsOXNhVzFwZENBOVBUMGdNQ2tnZTF4dUlDQWdJSFJvYVhNdVgyTnZiWEJzWlhSbFpDQTlJSFJ5ZFdWY2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHdGxlVkpoYm1kbElEMGdkR2hwY3k1amNtVmhkR1ZMWlhsU1lXNW5aU2h2Y0hScGIyNXpLVnh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0x5OGdWR2hsSUd4dmQyVnlJR3RsZVNCcGN5Qm5jbVZoZEdWeUlIUm9ZVzRnZEdobElIVndjR1Z5SUd0bGVTNWNiaUFnSUNBdkx5QkpibVJsZUdWa1JFSWdkR2h5YjNkeklHRnVJR1Z5Y205eUxDQmlkWFFnZDJVbmJHd2dhblZ6ZENCeVpYUjFjbTRnTUNCeVpYTjFiSFJ6TGx4dUlDQWdJSFJvYVhNdVgyTnZiWEJzWlhSbFpDQTlJSFJ5ZFdWY2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dVhHNGdJSFJvYVhNdVkzSmxZWFJsU1hSbGNtRjBiM0lvYkc5allYUnBiMjRzSUd0bGVWSmhibWRsTENCdmNIUnBiMjV6TG5KbGRtVnljMlVwWEc1OVhHNWNibWx1YUdWeWFYUnpLRWwwWlhKaGRHOXlMQ0JCWW5OMGNtRmpkRWwwWlhKaGRHOXlLVnh1WEc1SmRHVnlZWFJ2Y2k1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsUzJWNVVtRnVaMlVnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0IyWVhJZ2JHOTNaWElnUFNCc2RHZDBMbXh2ZDJWeVFtOTFibVFvYjNCMGFXOXVjeWxjYmlBZ2RtRnlJSFZ3Y0dWeUlEMGdiSFJuZEM1MWNIQmxja0p2ZFc1a0tHOXdkR2x2Ym5NcFhHNGdJSFpoY2lCc2IzZGxjazl3Wlc0Z1BTQnNkR2QwTG14dmQyVnlRbTkxYm1SRmVHTnNkWE5wZG1Vb2IzQjBhVzl1Y3lsY2JpQWdkbUZ5SUhWd2NHVnlUM0JsYmlBOUlHeDBaM1F1ZFhCd1pYSkNiM1Z1WkVWNFkyeDFjMmwyWlNodmNIUnBiMjV6S1Z4dVhHNGdJR2xtSUNoc2IzZGxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFZ3Y0dWeUlDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdTVVJDUzJWNVVtRnVaMlV1WW05MWJtUW9iRzkzWlhJc0lIVndjR1Z5TENCc2IzZGxjazl3Wlc0c0lIVndjR1Z5VDNCbGJpbGNiaUFnZlNCbGJITmxJR2xtSUNoc2IzZGxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUVsRVFrdGxlVkpoYm1kbExteHZkMlZ5UW05MWJtUW9iRzkzWlhJc0lHeHZkMlZ5VDNCbGJpbGNiaUFnZlNCbGJITmxJR2xtSUNoMWNIQmxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUVsRVFrdGxlVkpoYm1kbExuVndjR1Z5UW05MWJtUW9kWEJ3WlhJc0lIVndjR1Z5VDNCbGJpbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRnh1SUNCOVhHNTlYRzVjYmtsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZKZEdWeVlYUnZjaUE5SUdaMWJtTjBhVzl1SUNoc2IyTmhkR2x2Yml3Z2EyVjVVbUZ1WjJVc0lISmxkbVZ5YzJVcElIdGNiaUFnZG1GeUlITmxiR1lnUFNCMGFHbHpYRzRnSUhaaGNpQjBjbUZ1YzJGamRHbHZiaUE5SUhSb2FYTXVaR0l1WkdJdWRISmhibk5oWTNScGIyNG9XMnh2WTJGMGFXOXVYU3dnSjNKbFlXUnZibXg1SnlsY2JpQWdkbUZ5SUhOMGIzSmxJRDBnZEhKaGJuTmhZM1JwYjI0dWIySnFaV04wVTNSdmNtVW9iRzlqWVhScGIyNHBYRzRnSUhaaGNpQnlaWEVnUFNCemRHOXlaUzV2Y0dWdVEzVnljMjl5S0d0bGVWSmhibWRsTENCeVpYWmxjbk5sSUQ4Z0ozQnlaWFluSURvZ0oyNWxlSFFuS1Z4dVhHNGdJSEpsY1M1dmJuTjFZMk5sYzNNZ1BTQm1kVzVqZEdsdmJpQW9aWFlwSUh0Y2JpQWdJQ0IyWVhJZ1kzVnljMjl5SUQwZ1pYWXVkR0Z5WjJWMExuSmxjM1ZzZEZ4dUlDQWdJR2xtSUNoamRYSnpiM0lwSUhObGJHWXViMjVKZEdWdEtHTjFjbk52Y2lsY2JpQWdmVnh1WEc0Z0lIUm9hWE11WDNSeVlXNXpZV04wYVc5dUlEMGdkSEpoYm5OaFkzUnBiMjVjYmx4dUlDQXZMeUJKWmlCaGJpQmxjbkp2Y2lCdlkyTjFjbk1nS0c5dUlIUm9aU0J5WlhGMVpYTjBLU3dnZEdobElIUnlZVzV6WVdOMGFXOXVJSGRwYkd3Z1lXSnZjblF1WEc0Z0lIUnlZVzV6WVdOMGFXOXVMbTl1WVdKdmNuUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYzJWc1ppNXZia0ZpYjNKMEtITmxiR1l1WDNSeVlXNXpZV04wYVc5dUxtVnljbTl5SUh4OElHNWxkeUJGY25KdmNpZ25ZV0p2Y25SbFpDQmllU0IxYzJWeUp5a3BYRzRnSUgxY2JseHVJQ0IwY21GdWMyRmpkR2x2Ymk1dmJtTnZiWEJzWlhSbElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSE5sYkdZdWIyNURiMjF3YkdWMFpTZ3BYRzRnSUgxY2JuMWNibHh1U1hSbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTG05dVNYUmxiU0E5SUdaMWJtTjBhVzl1SUNoamRYSnpiM0lwSUh0Y2JpQWdkR2hwY3k1ZlkyRmphR1V1Y0hWemFDaGpkWEp6YjNJdWEyVjVMQ0JqZFhKemIzSXVkbUZzZFdVcFhHNWNiaUFnYVdZZ0tIUm9hWE11WDJ4cGJXbDBJRHc5SURBZ2ZId2dLeXQwYUdsekxsOWpiM1Z1ZENBOElIUm9hWE11WDJ4cGJXbDBLU0I3WEc0Z0lDQWdZM1Z5YzI5eVd5ZGpiMjUwYVc1MVpTZGRLQ2xjYmlBZ2ZWeHVYRzRnSUhSb2FYTXViV0Y1WW1WT1pYaDBLQ2xjYm4xY2JseHVTWFJsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbTl1UVdKdmNuUWdQU0JtZFc1amRHbHZiaUFvWlhKeUtTQjdYRzRnSUhSb2FYTXVYMkZpYjNKMFpXUWdQU0IwY25WbFhHNGdJSFJvYVhNdVgyVnljbTl5SUQwZ1pYSnlYRzRnSUhSb2FYTXViV0Y1WW1WT1pYaDBLQ2xjYm4xY2JseHVTWFJsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbTl1UTI5dGNHeGxkR1VnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhSb2FYTXVYMk52YlhCc1pYUmxaQ0E5SUhSeWRXVmNiaUFnZEdocGN5NXRZWGxpWlU1bGVIUW9LVnh1ZlZ4dVhHNUpkR1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXViV0Y1WW1WT1pYaDBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0IwYUdsekxsOXVaWGgwS0hSb2FYTXVYMk5oYkd4aVlXTnJLVnh1SUNBZ0lIUm9hWE11WDJOaGJHeGlZV05ySUQwZ2JuVnNiRnh1SUNCOVhHNTlYRzVjYmtsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1ZmJtVjRkQ0E5SUdaMWJtTjBhVzl1SUNoallXeHNZbUZqYXlrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmWVdKdmNuUmxaQ2tnZTF4dUlDQWdJQzh2SUZSb1pTQmxjbkp2Y2lCemFHOTFiR1FnWW1VZ2NHbGphMlZrSUhWd0lHSjVJR1ZwZEdobGNpQnVaWGgwS0NrZ2IzSWdaVzVrS0NrdVhHNGdJQ0FnZG1GeUlHVnljaUE5SUhSb2FYTXVYMlZ5Y205eVhHNGdJQ0FnZEdocGN5NWZaWEp5YjNJZ1BTQnVkV3hzWEc1Y2JpQWdJQ0J6WlhSSmJXMWxaR2xoZEdVb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdZMkZzYkdKaFkyc29aWEp5S1Z4dUlDQWdJSDBwWEc0Z0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1ZlkyRmphR1V1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUhaaGNpQnJaWGtnUFNCMGFHbHpMbDlqWVdOb1pTNXphR2xtZENncFhHNGdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2RHaHBjeTVmWTJGamFHVXVjMmhwWm5Rb0tWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVgydGxlVUZ6UW5WbVptVnlLU0JyWlhrZ1BTQnRhWGhsWkZSdlFuVm1abVZ5S0d0bGVTbGNiaUFnSUNCcFppQW9kR2hwY3k1ZmRtRnNkV1ZCYzBKMVptWmxjaWtnZG1Gc2RXVWdQU0J0YVhobFpGUnZRblZtWm1WeUtIWmhiSFZsS1Z4dVhHNGdJQ0FnYzJWMFNXMXRaV1JwWVhSbEtHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLRzUxYkd3c0lHdGxlU3dnZG1Gc2RXVXBYRzRnSUNBZ2ZTbGNiaUFnZlNCbGJITmxJR2xtSUNoMGFHbHpMbDlqYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0J6WlhSSmJXMWxaR2xoZEdVb1kyRnNiR0poWTJzcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2RHaHBjeTVmWTJGc2JHSmhZMnNnUFNCallXeHNZbUZqYTF4dUlDQjlYRzU5WEc1Y2JrbDBaWEpoZEc5eUxuQnliM1J2ZEhsd1pTNWZaVzVrSUQwZ1puVnVZM1JwYjI0Z0tHTmhiR3hpWVdOcktTQjdYRzRnSUdsbUlDaDBhR2x6TGw5aFltOXlkR1ZrSUh4OElIUm9hWE11WDJOdmJYQnNaWFJsWkNrZ2UxeHVJQ0FnSUhaaGNpQmxjbklnUFNCMGFHbHpMbDlsY25KdmNseHVYRzRnSUNBZ2MyVjBTVzF0WldScFlYUmxLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUdOaGJHeGlZV05yS0dWeWNpbGNiaUFnSUNCOUtWeHVYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNibHh1SUNBdkx5QkViMjRuZENCaFpIWmhibU5sSUhSb1pTQmpkWEp6YjNJZ1lXNTViVzl5WlN3Z1lXNWtJSFJvWlNCMGNtRnVjMkZqZEdsdmJpQjNhV3hzSUdOdmJYQnNaWFJsWEc0Z0lDOHZJRzl1SUdsMGN5QnZkMjRnYVc0Z2RHaGxJRzVsZUhRZ2RHbGpheTRnVkdocGN5QmhjSEJ5YjJGamFDQnBjeUJ0ZFdOb0lHTnNaV0Z1WlhJZ2RHaGhiaUJqWVd4c2FXNW5YRzRnSUM4dklIUnlZVzV6WVdOMGFXOXVMbUZpYjNKMEtDa2dkMmwwYUNCcGRITWdkVzV3Y21Wa2FXTjBZV0pzWlNCbGRtVnVkQ0J2Y21SbGNpNWNiaUFnZEdocGN5NXZia2wwWlcwZ1BTQnViMjl3WEc0Z0lIUm9hWE11YjI1QlltOXlkQ0E5SUdOaGJHeGlZV05yWEc0Z0lIUm9hWE11YjI1RGIyMXdiR1YwWlNBOUlHTmhiR3hpWVdOclhHNTlYRzRpTENKbWRXNWpkR2x2YmlCQlluTjBjbUZqZEVOb1lXbHVaV1JDWVhSamFDQW9aR0lwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJrWWlBaFBUMGdKMjlpYW1WamRDY2dmSHdnWkdJZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEdhWEp6ZENCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdGdUlHRmljM1J5WVdOMExXeGxkbVZzWkc5M2JpQmpiMjF3YkdsaGJuUWdjM1J2Y21VbktWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1a1lpQTlJR1JpWEc0Z0lIUm9hWE11WDI5d1pYSmhkR2x2Ym5NZ1BTQmJYVnh1SUNCMGFHbHpMbDkzY21sMGRHVnVJRDBnWm1Gc2MyVmNibjFjYmx4dVFXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ3VjSEp2ZEc5MGVYQmxMbDlqYUdWamExZHlhWFIwWlc0Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHbG1JQ2gwYUdsekxsOTNjbWwwZEdWdUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkM2NtbDBaU2dwSUdGc2NtVmhaSGtnWTJGc2JHVmtJRzl1SUhSb2FYTWdZbUYwWTJnbktWeHVJQ0I5WEc1OVhHNWNia0ZpYzNSeVlXTjBRMmhoYVc1bFpFSmhkR05vTG5CeWIzUnZkSGx3WlM1d2RYUWdQU0JtZFc1amRHbHZiaUFvYTJWNUxDQjJZV3gxWlNrZ2UxeHVJQ0IwYUdsekxsOWphR1ZqYTFkeWFYUjBaVzRvS1Z4dVhHNGdJSFpoY2lCbGNuSWdQU0IwYUdsekxtUmlMbDlqYUdWamEwdGxlU2hyWlhrcElIeDhJSFJvYVhNdVpHSXVYMk5vWldOclZtRnNkV1VvZG1Gc2RXVXBYRzRnSUdsbUlDaGxjbklwSUhSb2NtOTNJR1Z5Y2x4dVhHNGdJR3RsZVNBOUlIUm9hWE11WkdJdVgzTmxjbWxoYkdsNlpVdGxlU2hyWlhrcFhHNGdJSFpoYkhWbElEMGdkR2hwY3k1a1lpNWZjMlZ5YVdGc2FYcGxWbUZzZFdVb2RtRnNkV1VwWEc1Y2JpQWdkR2hwY3k1ZmNIVjBLR3RsZVN3Z2RtRnNkV1VwWEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVRV0p6ZEhKaFkzUkRhR0ZwYm1Wa1FtRjBZMmd1Y0hKdmRHOTBlWEJsTGw5d2RYUWdQU0JtZFc1amRHbHZiaUFvYTJWNUxDQjJZV3gxWlNrZ2UxeHVJQ0IwYUdsekxsOXZjR1Z5WVhScGIyNXpMbkIxYzJnb2V5QjBlWEJsT2lBbmNIVjBKeXdnYTJWNU9pQnJaWGtzSUhaaGJIVmxPaUIyWVd4MVpTQjlLVnh1ZlZ4dVhHNUJZbk4wY21GamRFTm9ZV2x1WldSQ1lYUmphQzV3Y205MGIzUjVjR1V1WkdWc0lEMGdablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0IwYUdsekxsOWphR1ZqYTFkeWFYUjBaVzRvS1Z4dVhHNGdJSFpoY2lCbGNuSWdQU0IwYUdsekxtUmlMbDlqYUdWamEwdGxlU2hyWlhrcFhHNGdJR2xtSUNobGNuSXBJSFJvY205M0lHVnljbHh1WEc0Z0lHdGxlU0E5SUhSb2FYTXVaR0l1WDNObGNtbGhiR2w2WlV0bGVTaHJaWGtwWEc0Z0lIUm9hWE11WDJSbGJDaHJaWGtwWEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE5jYm4xY2JseHVRV0p6ZEhKaFkzUkRhR0ZwYm1Wa1FtRjBZMmd1Y0hKdmRHOTBlWEJsTGw5a1pXd2dQU0JtZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUhSb2FYTXVYMjl3WlhKaGRHbHZibk11Y0hWemFDaDdJSFI1Y0dVNklDZGtaV3duTENCclpYazZJR3RsZVNCOUtWeHVmVnh1WEc1QlluTjBjbUZqZEVOb1lXbHVaV1JDWVhSamFDNXdjbTkwYjNSNWNHVXVZMnhsWVhJZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIUm9hWE11WDJOb1pXTnJWM0pwZEhSbGJpZ3BYRzRnSUhSb2FYTXVYMk5zWldGeUtDbGNibHh1SUNCeVpYUjFjbTRnZEdocGMxeHVmVnh1WEc1QlluTjBjbUZqZEVOb1lXbHVaV1JDWVhSamFDNXdjbTkwYjNSNWNHVXVYMk5zWldGeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBhR2x6TGw5dmNHVnlZWFJwYjI1eklEMGdXMTFjYm4xY2JseHVRV0p6ZEhKaFkzUkRhR0ZwYm1Wa1FtRjBZMmd1Y0hKdmRHOTBlWEJsTG5keWFYUmxJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1zSUdOaGJHeGlZV05yS1NCN1hHNGdJSFJvYVhNdVgyTm9aV05yVjNKcGRIUmxiaWdwWEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdJR05oYkd4aVlXTnJJRDBnYjNCMGFXOXVjeUI5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdZMkZzYkdKaFkyc2dJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNkeWFYUmxLQ2tnY21WeGRXbHlaWE1nWVNCallXeHNZbUZqYXlCaGNtZDFiV1Z1ZENjcFhHNGdJSDFjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCdmNIUnBiMjV6SUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnYjNCMGFXOXVjeUE5SUh0OVhHNGdJSDFjYmx4dUlDQjBhR2x6TGw5M2NtbDBkR1Z1SUQwZ2RISjFaVnh1SUNCMGFHbHpMbDkzY21sMFpTaHZjSFJwYjI1ekxDQmpZV3hzWW1GamF5bGNibjFjYmx4dVFXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ3VjSEp2ZEc5MGVYQmxMbDkzY21sMFpTQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQjBhR2x6TG1SaUxsOWlZWFJqYUNoMGFHbHpMbDl2Y0dWeVlYUnBiMjV6TENCdmNIUnBiMjV6TENCallXeHNZbUZqYXlsY2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCWW5OMGNtRmpkRU5vWVdsdVpXUkNZWFJqYUZ4dUlpd2lablZ1WTNScGIyNGdRV0p6ZEhKaFkzUkpkR1Z5WVhSdmNpQW9aR0lwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJrWWlBaFBUMGdKMjlpYW1WamRDY2dmSHdnWkdJZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEdhWEp6ZENCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdGdUlHRmljM1J5WVdOMExXeGxkbVZzWkc5M2JpQmpiMjF3YkdsaGJuUWdjM1J2Y21VbktWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1a1lpQTlJR1JpWEc0Z0lIUm9hWE11WDJWdVpHVmtJRDBnWm1Gc2MyVmNiaUFnZEdocGN5NWZibVY0ZEdsdVp5QTlJR1poYkhObFhHNTlYRzVjYmtGaWMzUnlZV04wU1hSbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTG01bGVIUWdQU0JtZFc1amRHbHZiaUFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUhObGJHWWdQU0IwYUdselhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ibVY0ZENncElISmxjWFZwY21WeklHRWdZMkZzYkdKaFkyc2dZWEpuZFcxbGJuUW5LVnh1SUNCOVhHNWNiaUFnYVdZZ0tITmxiR1l1WDJWdVpHVmtLU0I3WEc0Z0lDQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpZV3hzWW1GamF5d2dibVYzSUVWeWNtOXlLQ2RqWVc1dWIzUWdZMkZzYkNCdVpYaDBLQ2tnWVdaMFpYSWdaVzVrS0NrbktTbGNiaUFnSUNCeVpYUjFjbTRnYzJWc1pseHVJQ0I5WEc1Y2JpQWdhV1lnS0hObGJHWXVYMjVsZUhScGJtY3BJSHRjYmlBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHTmhiR3hpWVdOckxDQnVaWGNnUlhKeWIzSW9KMk5oYm01dmRDQmpZV3hzSUc1bGVIUW9LU0JpWldadmNtVWdjSEpsZG1sdmRYTWdibVY0ZENncElHaGhjeUJqYjIxd2JHVjBaV1FuS1NsY2JpQWdJQ0J5WlhSMWNtNGdjMlZzWmx4dUlDQjlYRzVjYmlBZ2MyVnNaaTVmYm1WNGRHbHVaeUE5SUhSeWRXVmNiaUFnYzJWc1ppNWZibVY0ZENobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2MyVnNaaTVmYm1WNGRHbHVaeUE5SUdaaGJITmxYRzRnSUNBZ1kyRnNiR0poWTJzdVlYQndiSGtvYm5Wc2JDd2dZWEpuZFcxbGJuUnpLVnh1SUNCOUtWeHVYRzRnSUhKbGRIVnliaUJ6Wld4bVhHNTlYRzVjYmtGaWMzUnlZV04wU1hSbGNtRjBiM0l1Y0hKdmRHOTBlWEJsTGw5dVpYaDBJRDBnWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yS1NCN1hHNGdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMkZzYkdKaFkyc3BYRzU5WEc1Y2JrRmljM1J5WVdOMFNYUmxjbUYwYjNJdWNISnZkRzkwZVhCbExuTmxaV3NnUFNCbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hHNGdJR2xtSUNoMGFHbHpMbDlsYm1SbFpDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblkyRnVibTkwSUdOaGJHd2djMlZsYXlncElHRm1kR1Z5SUdWdVpDZ3BKeWxjYmlBZ2ZWeHVJQ0JwWmlBb2RHaHBjeTVmYm1WNGRHbHVaeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZMkZ1Ym05MElHTmhiR3dnYzJWbGF5Z3BJR0psWm05eVpTQnVaWGgwS0NrZ2FHRnpJR052YlhCc1pYUmxaQ2NwWEc0Z0lIMWNibHh1SUNCMFlYSm5aWFFnUFNCMGFHbHpMbVJpTGw5elpYSnBZV3hwZW1WTFpYa29kR0Z5WjJWMEtWeHVJQ0IwYUdsekxsOXpaV1ZyS0hSaGNtZGxkQ2xjYm4xY2JseHVRV0p6ZEhKaFkzUkpkR1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXVYM05sWldzZ1BTQm1kVzVqZEdsdmJpQW9kR0Z5WjJWMEtTQjdmVnh1WEc1QlluTjBjbUZqZEVsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlM1bGJtUWdQU0JtZFc1amRHbHZiaUFvWTJGc2JHSmhZMnNwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJqWVd4c1ltRmpheUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpXNWtLQ2tnY21WeGRXbHlaWE1nWVNCallXeHNZbUZqYXlCaGNtZDFiV1Z1ZENjcFhHNGdJSDFjYmx4dUlDQnBaaUFvZEdocGN5NWZaVzVrWldRcElIdGNiaUFnSUNCeVpYUjFjbTRnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWVd4c1ltRmpheXdnYm1WM0lFVnljbTl5S0NkbGJtUW9LU0JoYkhKbFlXUjVJR05oYkd4bFpDQnZiaUJwZEdWeVlYUnZjaWNwS1Z4dUlDQjlYRzVjYmlBZ2RHaHBjeTVmWlc1a1pXUWdQU0IwY25WbFhHNGdJSFJvYVhNdVgyVnVaQ2hqWVd4c1ltRmpheWxjYm4xY2JseHVRV0p6ZEhKaFkzUkpkR1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXVYMlZ1WkNBOUlHWjFibU4wYVc5dUlDaGpZV3hzWW1GamF5a2dlMXh1SUNCd2NtOWpaWE56TG01bGVIUlVhV05yS0dOaGJHeGlZV05yS1Z4dWZWeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUZpYzNSeVlXTjBTWFJsY21GMGIzSmNiaUlzSW5aaGNpQjRkR1Z1WkNBOUlISmxjWFZwY21Vb0ozaDBaVzVrSnlsY2JuWmhjaUJCWW5OMGNtRmpkRWwwWlhKaGRHOXlJRDBnY21WeGRXbHlaU2duTGk5aFluTjBjbUZqZEMxcGRHVnlZWFJ2Y2ljcFhHNTJZWElnUVdKemRISmhZM1JEYUdGcGJtVmtRbUYwWTJnZ1BTQnlaWEYxYVhKbEtDY3VMMkZpYzNSeVlXTjBMV05vWVdsdVpXUXRZbUYwWTJnbktWeHVkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVWeHVkbUZ5SUhKaGJtZGxUM0IwYVc5dWN5QTlJQ2R6ZEdGeWRDQmxibVFnWjNRZ1ozUmxJR3gwSUd4MFpTY3VjM0JzYVhRb0p5QW5LVnh1WEc1bWRXNWpkR2x2YmlCQlluTjBjbUZqZEV4bGRtVnNSRTlYVGlBb0tTQjdYRzRnSUhSb2FYTXVjM1JoZEhWeklEMGdKMjVsZHlkY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTG05d1pXNGdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdkbUZ5SUhObGJHWWdQU0IwYUdselhHNGdJSFpoY2lCdmJHUlRkR0YwZFhNZ1BTQjBhR2x6TG5OMFlYUjFjMXh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQnZjSFJwYjI1elhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25iM0JsYmlncElISmxjWFZwY21WeklHRWdZMkZzYkdKaFkyc2dZWEpuZFcxbGJuUW5LVnh1SUNCOVhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6SUNFOVBTQW5iMkpxWldOMEp5QjhmQ0J2Y0hScGIyNXpJRDA5UFNCdWRXeHNLU0J2Y0hScGIyNXpJRDBnZTMxY2JseHVJQ0J2Y0hScGIyNXpMbU55WldGMFpVbG1UV2x6YzJsdVp5QTlJRzl3ZEdsdmJuTXVZM0psWVhSbFNXWk5hWE56YVc1bklDRTlQU0JtWVd4elpWeHVJQ0J2Y0hScGIyNXpMbVZ5Y205eVNXWkZlR2x6ZEhNZ1BTQWhJVzl3ZEdsdmJuTXVaWEp5YjNKSlprVjRhWE4wYzF4dVhHNGdJSFJvYVhNdWMzUmhkSFZ6SUQwZ0oyOXdaVzVwYm1jblhHNGdJSFJvYVhNdVgyOXdaVzRvYjNCMGFXOXVjeXdnWm5WdVkzUnBiMjRnS0dWeWNpa2dlMXh1SUNBZ0lHbG1JQ2hsY25JcElIdGNiaUFnSUNBZ0lITmxiR1l1YzNSaGRIVnpJRDBnYjJ4a1UzUmhkSFZ6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29aWEp5S1Z4dUlDQWdJSDFjYmlBZ0lDQnpaV3htTG5OMFlYUjFjeUE5SUNkdmNHVnVKMXh1SUNBZ0lHTmhiR3hpWVdOcktDbGNiaUFnZlNsY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTGw5dmNHVnVJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1zSUdOaGJHeGlZV05yS1NCN1hHNGdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29ZMkZzYkdKaFkyc3BYRzU5WEc1Y2JrRmljM1J5WVdOMFRHVjJaV3hFVDFkT0xuQnliM1J2ZEhsd1pTNWpiRzl6WlNBOUlHWjFibU4wYVc5dUlDaGpZV3hzWW1GamF5a2dlMXh1SUNCMllYSWdjMlZzWmlBOUlIUm9hWE5jYmlBZ2RtRnlJRzlzWkZOMFlYUjFjeUE5SUhSb2FYTXVjM1JoZEhWelhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZMnh2YzJVb0tTQnlaWEYxYVhKbGN5QmhJR05oYkd4aVlXTnJJR0Z5WjNWdFpXNTBKeWxjYmlBZ2ZWeHVYRzRnSUhSb2FYTXVjM1JoZEhWeklEMGdKMk5zYjNOcGJtY25YRzRnSUhSb2FYTXVYMk5zYjNObEtHWjFibU4wYVc5dUlDaGxjbklwSUh0Y2JpQWdJQ0JwWmlBb1pYSnlLU0I3WEc0Z0lDQWdJQ0J6Wld4bUxuTjBZWFIxY3lBOUlHOXNaRk4wWVhSMWMxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05yS0dWeWNpbGNiaUFnSUNCOVhHNGdJQ0FnYzJWc1ppNXpkR0YwZFhNZ1BTQW5ZMnh2YzJWa0oxeHVJQ0FnSUdOaGJHeGlZV05yS0NsY2JpQWdmU2xjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbDlqYkc5elpTQTlJR1oxYm1OMGFXOXVJQ2hqWVd4c1ltRmpheWtnZTF4dUlDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHTmhiR3hpWVdOcktWeHVmVnh1WEc1QlluTjBjbUZqZEV4bGRtVnNSRTlYVGk1d2NtOTBiM1I1Y0dVdVoyVjBJRDBnWm5WdVkzUnBiMjRnS0d0bGVTd2diM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCallXeHNZbUZqYXlBOUlHOXdkR2x2Ym5OY2JseHVJQ0JwWmlBb2RIbHdaVzltSUdOaGJHeGlZV05ySUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZG5aWFFvS1NCeVpYRjFhWEpsY3lCaElHTmhiR3hpWVdOcklHRnlaM1Z0Wlc1MEp5bGNiaUFnZlZ4dVhHNGdJSFpoY2lCbGNuSWdQU0IwYUdsekxsOWphR1ZqYTB0bGVTaHJaWGtwWEc0Z0lHbG1JQ2hsY25JcElISmxkSFZ5YmlCd2NtOWpaWE56TG01bGVIUlVhV05yS0dOaGJHeGlZV05yTENCbGNuSXBYRzVjYmlBZ2EyVjVJRDBnZEdocGN5NWZjMlZ5YVdGc2FYcGxTMlY1S0d0bGVTbGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NZ0lUMDlJQ2R2WW1wbFkzUW5JSHg4SUc5d2RHbHZibk1nUFQwOUlHNTFiR3dwSUc5d2RHbHZibk1nUFNCN2ZWeHVYRzRnSUc5d2RHbHZibk11WVhOQ2RXWm1aWElnUFNCdmNIUnBiMjV6TG1GelFuVm1abVZ5SUNFOVBTQm1ZV3h6WlZ4dVhHNGdJSFJvYVhNdVgyZGxkQ2hyWlhrc0lHOXdkR2x2Ym5Nc0lHTmhiR3hpWVdOcktWeHVmVnh1WEc1QlluTjBjbUZqZEV4bGRtVnNSRTlYVGk1d2NtOTBiM1I1Y0dVdVgyZGxkQ0E5SUdaMWJtTjBhVzl1SUNoclpYa3NJRzl3ZEdsdmJuTXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lIQnliMk5sYzNNdWJtVjRkRlJwWTJzb1puVnVZM1JwYjI0Z0tDa2dleUJqWVd4c1ltRmpheWh1WlhjZ1JYSnliM0lvSjA1dmRFWnZkVzVrSnlrcElIMHBYRzU5WEc1Y2JrRmljM1J5WVdOMFRHVjJaV3hFVDFkT0xuQnliM1J2ZEhsd1pTNXdkWFFnUFNCbWRXNWpkR2x2YmlBb2EyVjVMQ0IyWVd4MVpTd2diM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCallXeHNZbUZqYXlBOUlHOXdkR2x2Ym5OY2JseHVJQ0JwWmlBb2RIbHdaVzltSUdOaGJHeGlZV05ySUNFOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdkWFFvS1NCeVpYRjFhWEpsY3lCaElHTmhiR3hpWVdOcklHRnlaM1Z0Wlc1MEp5bGNiaUFnZlZ4dVhHNGdJSFpoY2lCbGNuSWdQU0IwYUdsekxsOWphR1ZqYTB0bGVTaHJaWGtwSUh4OElIUm9hWE11WDJOb1pXTnJWbUZzZFdVb2RtRnNkV1VwWEc0Z0lHbG1JQ2hsY25JcElISmxkSFZ5YmlCd2NtOWpaWE56TG01bGVIUlVhV05yS0dOaGJHeGlZV05yTENCbGNuSXBYRzVjYmlBZ2EyVjVJRDBnZEdocGN5NWZjMlZ5YVdGc2FYcGxTMlY1S0d0bGVTbGNiaUFnZG1Gc2RXVWdQU0IwYUdsekxsOXpaWEpwWVd4cGVtVldZV3gxWlNoMllXeDFaU2xjYmx4dUlDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdJVDA5SUNkdlltcGxZM1FuSUh4OElHOXdkR2x2Ym5NZ1BUMDlJRzUxYkd3cElHOXdkR2x2Ym5NZ1BTQjdmVnh1WEc0Z0lIUm9hWE11WDNCMWRDaHJaWGtzSUhaaGJIVmxMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWxjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbDl3ZFhRZ1BTQm1kVzVqZEdsdmJpQW9hMlY1TENCMllXeDFaU3dnYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdjSEp2WTJWemN5NXVaWGgwVkdsamF5aGpZV3hzWW1GamF5bGNibjFjYmx4dVFXSnpkSEpoWTNSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExtUmxiQ0E5SUdaMWJtTjBhVzl1SUNoclpYa3NJRzl3ZEdsdmJuTXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjJaMWJtTjBhVzl1SnlrZ1kyRnNiR0poWTJzZ1BTQnZjSFJwYjI1elhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25aR1ZzS0NrZ2NtVnhkV2x5WlhNZ1lTQmpZV3hzWW1GamF5QmhjbWQxYldWdWRDY3BYRzRnSUgxY2JseHVJQ0IyWVhJZ1pYSnlJRDBnZEdocGN5NWZZMmhsWTJ0TFpYa29hMlY1S1Z4dUlDQnBaaUFvWlhKeUtTQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z1pYSnlLVnh1WEc0Z0lHdGxlU0E5SUhSb2FYTXVYM05sY21saGJHbDZaVXRsZVNoclpYa3BYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCdmNIUnBiMjV6SUQwOVBTQnVkV3hzS1NCdmNIUnBiMjV6SUQwZ2UzMWNibHh1SUNCMGFHbHpMbDlrWld3b2EyVjVMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWxjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbDlrWld3Z1BTQm1kVzVqZEdsdmJpQW9hMlY1TENCdmNIUnBiMjV6TENCallXeHNZbUZqYXlrZ2UxeHVJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJLVnh1ZlZ4dVhHNUJZbk4wY21GamRFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVZbUYwWTJnZ1BTQm1kVzVqZEdsdmJpQW9ZWEp5WVhrc0lHOXdkR2x2Ym5Nc0lHTmhiR3hpWVdOcktTQjdYRzRnSUdsbUlDZ2hZWEpuZFcxbGJuUnpMbXhsYm1kMGFDa2djbVYwZFhKdUlIUm9hWE11WDJOb1lXbHVaV1JDWVhSamFDZ3BYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCallXeHNZbUZqYXlBOUlHOXdkR2x2Ym5OY2JseHVJQ0JwWmlBb2RIbHdaVzltSUdGeWNtRjVJRDA5UFNBblpuVnVZM1JwYjI0bktTQmpZV3hzWW1GamF5QTlJR0Z5Y21GNVhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25ZbUYwWTJnb1lYSnlZWGtwSUhKbGNYVnBjbVZ6SUdFZ1kyRnNiR0poWTJzZ1lYSm5kVzFsYm5RbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLR0Z5Y21GNUtTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCd2NtOWpaWE56TG01bGVIUlVhV05yS0dOaGJHeGlZV05yTENCdVpYY2dSWEp5YjNJb0oySmhkR05vS0dGeWNtRjVLU0J5WlhGMWFYSmxjeUJoYmlCaGNuSmhlU0JoY21kMWJXVnVkQ2NwS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1eklDRTlQU0FuYjJKcVpXTjBKeUI4ZkNCdmNIUnBiMjV6SUQwOVBTQnVkV3hzS1NCdmNIUnBiMjV6SUQwZ2UzMWNibHh1SUNCMllYSWdjMlZ5YVdGc2FYcGxaQ0E5SUc1bGR5QkJjbkpoZVNoaGNuSmhlUzVzWlc1bmRHZ3BYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmhjbkpoZVM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdZWEp5WVhsYmFWMGdJVDA5SUNkdlltcGxZM1FuSUh4OElHRnljbUY1VzJsZElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z2JtVjNJRVZ5Y205eUtDZGlZWFJqYUNoaGNuSmhlU2tnWld4bGJXVnVkQ0J0ZFhOMElHSmxJR0Z1SUc5aWFtVmpkQ0JoYm1RZ2JtOTBJR0J1ZFd4c1lDY3BLVnh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJsSUQwZ2VIUmxibVFvWVhKeVlYbGJhVjBwWEc1Y2JpQWdJQ0JwWmlBb1pTNTBlWEJsSUNFOVBTQW5jSFYwSnlBbUppQmxMblI1Y0dVZ0lUMDlJQ2RrWld3bktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXloallXeHNZbUZqYXl3Z2JtVjNJRVZ5Y205eUtGd2lZSFI1Y0dWZ0lHMTFjM1FnWW1VZ0ozQjFkQ2NnYjNJZ0oyUmxiQ2RjSWlrcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHVnljaUE5SUhSb2FYTXVYMk5vWldOclMyVjVLR1V1YTJWNUtWeHVJQ0FnSUdsbUlDaGxjbklwSUhKbGRIVnliaUJ3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJMQ0JsY25JcFhHNWNiaUFnSUNCbExtdGxlU0E5SUhSb2FYTXVYM05sY21saGJHbDZaVXRsZVNobExtdGxlU2xjYmx4dUlDQWdJR2xtSUNobExuUjVjR1VnUFQwOUlDZHdkWFFuS1NCN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdWRmNuSWdQU0IwYUdsekxsOWphR1ZqYTFaaGJIVmxLR1V1ZG1Gc2RXVXBYRzRnSUNBZ0lDQnBaaUFvZG1Gc2RXVkZjbklwSUhKbGRIVnliaUJ3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJMQ0IyWVd4MVpVVnljaWxjYmx4dUlDQWdJQ0FnWlM1MllXeDFaU0E5SUhSb2FYTXVYM05sY21saGJHbDZaVlpoYkhWbEtHVXVkbUZzZFdVcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzJWeWFXRnNhWHBsWkZ0cFhTQTlJR1ZjYmlBZ2ZWeHVYRzRnSUhSb2FYTXVYMkpoZEdOb0tITmxjbWxoYkdsNlpXUXNJRzl3ZEdsdmJuTXNJR05oYkd4aVlXTnJLVnh1ZlZ4dVhHNUJZbk4wY21GamRFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVYMkpoZEdOb0lEMGdablZ1WTNScGIyNGdLR0Z5Y21GNUxDQnZjSFJwYjI1ekxDQmpZV3hzWW1GamF5a2dlMXh1SUNCd2NtOWpaWE56TG01bGVIUlVhV05yS0dOaGJHeGlZV05yS1Z4dWZWeHVYRzVCWW5OMGNtRmpkRXhsZG1Wc1JFOVhUaTV3Y205MGIzUjVjR1V1WDNObGRIVndTWFJsY21GMGIzSlBjSFJwYjI1eklEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ2IzQjBhVzl1Y3lBOUlHTnNaV0Z1VW1GdVoyVlBjSFJwYjI1ektIUm9hWE1zSUc5d2RHbHZibk1wWEc1Y2JpQWdiM0IwYVc5dWN5NXlaWFpsY25ObElEMGdJU0Z2Y0hScGIyNXpMbkpsZG1WeWMyVmNiaUFnYjNCMGFXOXVjeTVyWlhseklEMGdiM0IwYVc5dWN5NXJaWGx6SUNFOVBTQm1ZV3h6WlZ4dUlDQnZjSFJwYjI1ekxuWmhiSFZsY3lBOUlHOXdkR2x2Ym5NdWRtRnNkV1Z6SUNFOVBTQm1ZV3h6WlZ4dUlDQnZjSFJwYjI1ekxteHBiV2wwSUQwZ0oyeHBiV2wwSnlCcGJpQnZjSFJwYjI1eklEOGdiM0IwYVc5dWN5NXNhVzFwZENBNklDMHhYRzRnSUc5d2RHbHZibk11YTJWNVFYTkNkV1ptWlhJZ1BTQnZjSFJwYjI1ekxtdGxlVUZ6UW5WbVptVnlJQ0U5UFNCbVlXeHpaVnh1SUNCdmNIUnBiMjV6TG5aaGJIVmxRWE5DZFdabVpYSWdQU0J2Y0hScGIyNXpMblpoYkhWbFFYTkNkV1ptWlhJZ0lUMDlJR1poYkhObFhHNWNiaUFnY21WMGRYSnVJRzl3ZEdsdmJuTmNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyeGxZVzVTWVc1blpVOXdkR2x2Ym5NZ0tHUmlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lIWmhjaUJ5WlhOMWJIUWdQU0I3ZlZ4dVhHNGdJR1p2Y2lBb2RtRnlJR3NnYVc0Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdsbUlDZ2hhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2Y0hScGIyNXpMQ0JyS1NrZ1kyOXVkR2x1ZFdWY2JseHVJQ0FnSUhaaGNpQnZjSFFnUFNCdmNIUnBiMjV6VzJ0ZFhHNWNiaUFnSUNCcFppQW9hWE5TWVc1blpVOXdkR2x2YmlocktTa2dlMXh1SUNBZ0lDQWdMeThnVG05MFpTQjBhR0YwSUhkbElHUnZiaWQwSUhKbGFtVmpkQ0J1ZFd4c2FYTm9JR0Z1WkNCbGJYQjBlU0J2Y0hScGIyNXpJR2hsY21VdUlGZG9hV3hsWEc0Z0lDQWdJQ0F2THlCMGFHOXpaU0IwZVhCbGN5QmhjbVVnYVc1MllXeHBaQ0JoY3lCclpYbHpMQ0IwYUdWNUlHRnlaU0IyWVd4cFpDQmhjeUJ5WVc1blpTQnZjSFJwYjI1ekxseHVJQ0FnSUNBZ2IzQjBJRDBnWkdJdVgzTmxjbWxoYkdsNlpVdGxlU2h2Y0hRcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WemRXeDBXMnRkSUQwZ2IzQjBYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4MFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdselVtRnVaMlZQY0hScGIyNGdLR3NwSUh0Y2JpQWdjbVYwZFhKdUlISmhibWRsVDNCMGFXOXVjeTVwYm1SbGVFOW1LR3NwSUNFOVBTQXRNVnh1ZlZ4dVhHNUJZbk4wY21GamRFeGxkbVZzUkU5WFRpNXdjbTkwYjNSNWNHVXVhWFJsY21GMGIzSWdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdJVDA5SUNkdlltcGxZM1FuSUh4OElHOXdkR2x2Ym5NZ1BUMDlJRzUxYkd3cElHOXdkR2x2Ym5NZ1BTQjdmVnh1SUNCdmNIUnBiMjV6SUQwZ2RHaHBjeTVmYzJWMGRYQkpkR1Z5WVhSdmNrOXdkR2x2Ym5Nb2IzQjBhVzl1Y3lsY2JpQWdjbVYwZFhKdUlIUm9hWE11WDJsMFpYSmhkRzl5S0c5d2RHbHZibk1wWEc1OVhHNWNia0ZpYzNSeVlXTjBUR1YyWld4RVQxZE9MbkJ5YjNSdmRIbHdaUzVmYVhSbGNtRjBiM0lnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3lrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUVGaWMzUnlZV04wU1hSbGNtRjBiM0lvZEdocGN5bGNibjFjYmx4dVFXSnpkSEpoWTNSTVpYWmxiRVJQVjA0dWNISnZkRzkwZVhCbExsOWphR0ZwYm1Wa1FtRjBZMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUhKbGRIVnliaUJ1WlhjZ1FXSnpkSEpoWTNSRGFHRnBibVZrUW1GMFkyZ29kR2hwY3lsY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTGw5elpYSnBZV3hwZW1WTFpYa2dQU0JtZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUhKbGRIVnliaUJyWlhsY2JuMWNibHh1UVdKemRISmhZM1JNWlhabGJFUlBWMDR1Y0hKdmRHOTBlWEJsTGw5elpYSnBZV3hwZW1WV1lXeDFaU0E5SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2RtRnNkV1ZjYm4xY2JseHVRV0p6ZEhKaFkzUk1aWFpsYkVSUFYwNHVjSEp2ZEc5MGVYQmxMbDlqYUdWamEwdGxlU0E5SUdaMWJtTjBhVzl1SUNoclpYa3BJSHRjYmlBZ2FXWWdLR3RsZVNBOVBUMGdiblZzYkNCOGZDQnJaWGtnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dSWEp5YjNJb0oydGxlU0JqWVc1dWIzUWdZbVVnWUc1MWJHeGdJRzl5SUdCMWJtUmxabWx1WldSZ0p5bGNiaUFnZlNCbGJITmxJR2xtSUNoQ2RXWm1aWEl1YVhOQ2RXWm1aWElvYTJWNUtTQW1KaUJyWlhrdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJGY25KdmNpZ25hMlY1SUdOaGJtNXZkQ0JpWlNCaGJpQmxiWEIwZVNCQ2RXWm1aWEluS1Z4dUlDQjlJR1ZzYzJVZ2FXWWdLR3RsZVNBOVBUMGdKeWNwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVWeWNtOXlLQ2RyWlhrZ1kyRnVibTkwSUdKbElHRnVJR1Z0Y0hSNUlGTjBjbWx1WnljcFhHNGdJSDBnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaHJaWGtwSUNZbUlHdGxlUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lFVnljbTl5S0NkclpYa2dZMkZ1Ym05MElHSmxJR0Z1SUdWdGNIUjVJRUZ5Y21GNUp5bGNiaUFnZlZ4dWZWeHVYRzVCWW5OMGNtRmpkRXhsZG1Wc1JFOVhUaTV3Y205MGIzUjVjR1V1WDJOb1pXTnJWbUZzZFdVZ1BTQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnYVdZZ0tIWmhiSFZsSUQwOVBTQnVkV3hzSUh4OElIWmhiSFZsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRVZ5Y205eUtDZDJZV3gxWlNCallXNXViM1FnWW1VZ1lHNTFiR3hnSUc5eUlHQjFibVJsWm1sdVpXUmdKeWxjYmlBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUVGaWMzUnlZV04wVEdWMlpXeEVUMWRPWEc0aUxDSmxlSEJ2Y25SekxrRmljM1J5WVdOMFRHVjJaV3hFVDFkT0lEMGdjbVZ4ZFdseVpTZ25MaTloWW5OMGNtRmpkQzFzWlhabGJHUnZkMjRuS1Z4dVpYaHdiM0owY3k1QlluTjBjbUZqZEVsMFpYSmhkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpOWhZbk4wY21GamRDMXBkR1Z5WVhSdmNpY3BYRzVsZUhCdmNuUnpMa0ZpYzNSeVlXTjBRMmhoYVc1bFpFSmhkR05vSUQwZ2NtVnhkV2x5WlNnbkxpOWhZbk4wY21GamRDMWphR0ZwYm1Wa0xXSmhkR05vSnlsY2JpSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25hVzF0WldScFlYUmxKeWxjYmlJc0lpZDFjMlVnYzNSeWFXTjBKMXh1WEc1MllYSWdkRzlDZFdabVpYSWdQU0J5WlhGMWFYSmxLQ2QwZVhCbFpHRnljbUY1TFhSdkxXSjFabVpsY2ljcFhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUdsbUlDaDJZV3gxWlNCcGJuTjBZVzVqWlc5bUlGVnBiblE0UVhKeVlYa3BJSEpsZEhWeWJpQjBiMEoxWm1abGNpaDJZV3gxWlNsY2JpQWdaV3h6WlNCcFppQW9kbUZzZFdVZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaWtnY21WMGRYSnVJRUoxWm1abGNpNW1jbTl0S0haaGJIVmxLVnh1SUNCbGJITmxJSEpsZEhWeWJpQkNkV1ptWlhJdVpuSnZiU2hUZEhKcGJtY29kbUZzZFdVcEtWeHVmVnh1SWl3aUozVnpaU0J6ZEhKcFkzUW5YRzVjYm1WNGNHOXlkSE11ZEdWemRDQTlJR1oxYm1OMGFXOXVJQ2hyWlhrcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSFJsYzNRZ0tHbHRjR3dwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ2FXMXdiQzVqYlhBb2EyVjVMQ0F3S1Z4dUlDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUnpMbUpwYm1GeWVVdGxlWE1nUFNCbGVIQnZjblJ6TG5SbGMzUW9ibVYzSUZWcGJuUTRRWEp5WVhrb01Da3BYRzVsZUhCdmNuUnpMbUZ5Y21GNVMyVjVjeUE5SUdWNGNHOXlkSE11ZEdWemRDaGJNVjBwWEc0aUxDSjJZWElnVjNKcGRHVkZjbkp2Y2lBOUlISmxjWFZwY21Vb0oyeGxkbVZzTFdWeWNtOXljeWNwTGxkeWFYUmxSWEp5YjNKY2JuWmhjaUJ3Y205dGFYTnBabmtnUFNCeVpYRjFhWEpsS0NjdUwzQnliMjFwYzJsbWVTY3BYRzUyWVhJZ1oyVjBRMkZzYkdKaFkyc2dQU0J5WlhGMWFYSmxLQ2N1TDJOdmJXMXZiaWNwTG1kbGRFTmhiR3hpWVdOclhHNTJZWElnWjJWMFQzQjBhVzl1Y3lBOUlISmxjWFZwY21Vb0p5NHZZMjl0Ylc5dUp5a3VaMlYwVDNCMGFXOXVjMXh1WEc1bWRXNWpkR2x2YmlCQ1lYUmphQ0FvYkdWMlpXeDFjQ2tnZTF4dUlDQjBhR2x6TGw5c1pYWmxiSFZ3SUQwZ2JHVjJaV3gxY0Z4dUlDQjBhR2x6TG1KaGRHTm9JRDBnYkdWMlpXeDFjQzVrWWk1aVlYUmphQ2dwWEc0Z0lIUm9hWE11YjNCeklEMGdXMTFjYmlBZ2RHaHBjeTVzWlc1bmRHZ2dQU0F3WEc1OVhHNWNia0poZEdOb0xuQnliM1J2ZEhsd1pTNXdkWFFnUFNCbWRXNWpkR2x2YmlBb2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lIUm9hWE11WW1GMFkyZ3VjSFYwS0d0bGVTd2dkbUZzZFdVcFhHNGdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVjNKcGRHVkZjbkp2Y2lobEtWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1dmNITXVjSFZ6YUNoN0lIUjVjR1U2SUNkd2RYUW5MQ0JyWlhrNklHdGxlU3dnZG1Gc2RXVTZJSFpoYkhWbElIMHBYRzRnSUhSb2FYTXViR1Z1WjNSb0t5dGNibHh1SUNCeVpYUjFjbTRnZEdocGMxeHVmVnh1WEc1Q1lYUmphQzV3Y205MGIzUjVjR1V1WkdWc0lEMGdablZ1WTNScGIyNGdLR3RsZVNrZ2UxeHVJQ0IwY25rZ2UxeHVJQ0FnSUhSb2FYTXVZbUYwWTJndVpHVnNLR3RsZVNsY2JpQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZkeWFYUmxSWEp5YjNJb1pYSnlLVnh1SUNCOVhHNWNiaUFnZEdocGN5NXZjSE11Y0hWemFDaDdJSFI1Y0dVNklDZGtaV3duTENCclpYazZJR3RsZVNCOUtWeHVJQ0IwYUdsekxteGxibWQwYUNzclhHNWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1UW1GMFkyZ3VjSEp2ZEc5MGVYQmxMbU5zWldGeUlEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjBjbmtnZTF4dUlDQWdJSFJvYVhNdVltRjBZMmd1WTJ4bFlYSW9LVnh1SUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWM0pwZEdWRmNuSnZjaWhsY25JcFhHNGdJSDFjYmx4dUlDQjBhR2x6TG05d2N5QTlJRnRkWEc0Z0lIUm9hWE11YkdWdVozUm9JRDBnTUZ4dVhHNGdJSEpsZEhWeWJpQjBhR2x6WEc1OVhHNWNia0poZEdOb0xuQnliM1J2ZEhsd1pTNTNjbWwwWlNBOUlHWjFibU4wYVc5dUlDaHZjSFJwYjI1ekxDQmpZV3hzWW1GamF5a2dlMXh1SUNCMllYSWdiR1YyWld4MWNDQTlJSFJvYVhNdVgyeGxkbVZzZFhCY2JpQWdkbUZ5SUc5d2N5QTlJSFJvYVhNdWIzQnpYRzRnSUhaaGNpQndjbTl0YVhObFhHNWNiaUFnWTJGc2JHSmhZMnNnUFNCblpYUkRZV3hzWW1GamF5aHZjSFJwYjI1ekxDQmpZV3hzWW1GamF5bGNibHh1SUNCcFppQW9JV05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdZMkZzYkdKaFkyc2dQU0J3Y205dGFYTnBabmtvS1Z4dUlDQWdJSEJ5YjIxcGMyVWdQU0JqWVd4c1ltRmpheTV3Y205dGFYTmxYRzRnSUgxY2JseHVJQ0J2Y0hScGIyNXpJRDBnWjJWMFQzQjBhVzl1Y3lodmNIUnBiMjV6S1Z4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnZEdocGN5NWlZWFJqYUM1M2NtbDBaU2h2Y0hScGIyNXpMQ0JtZFc1amRHbHZiaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQnBaaUFvWlhKeUtTQjdJSEpsZEhWeWJpQmpZV3hzWW1GamF5aHVaWGNnVjNKcGRHVkZjbkp2Y2lobGNuSXBLU0I5WEc0Z0lDQWdJQ0JzWlhabGJIVndMbVZ0YVhRb0oySmhkR05vSnl3Z2IzQnpLVnh1SUNBZ0lDQWdZMkZzYkdKaFkyc29LVnh1SUNBZ0lIMHBYRzRnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlhjbWwwWlVWeWNtOXlLR1Z5Y2lsY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCd2NtOXRhWE5sWEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRbUYwWTJoY2JpSXNJbVY0Y0c5eWRITXVaMlYwUTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlBb2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnZjSFJwYjI1eklEMDlQU0FuWm5WdVkzUnBiMjRuSUQ4Z2IzQjBhVzl1Y3lBNklHTmhiR3hpWVdOclhHNTlYRzVjYm1WNGNHOXlkSE11WjJWMFQzQjBhVzl1Y3lBOUlHWjFibU4wYVc5dUlDaHZjSFJwYjI1ektTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdiM0IwYVc5dWN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2IzQjBhVzl1Y3lBaFBUMGdiblZzYkNBL0lHOXdkR2x2Ym5NZ09pQjdmVnh1ZlZ4dUlpd2lkbUZ5SUVWMlpXNTBSVzFwZEhSbGNpQTlJSEpsY1hWcGNtVW9KMlYyWlc1MGN5Y3BMa1YyWlc1MFJXMXBkSFJsY2x4dWRtRnlJR2x1YUdWeWFYUnpJRDBnY21WeGRXbHlaU2duZFhScGJDY3BMbWx1YUdWeWFYUnpYRzUyWVhJZ1pYaDBaVzVrSUQwZ2NtVnhkV2x5WlNnbmVIUmxibVFuS1Z4dWRtRnlJRVJsWm1WeWNtVmtUR1YyWld4RVQxZE9JRDBnY21WeGRXbHlaU2duWkdWbVpYSnlaV1F0YkdWMlpXeGtiM2R1SnlsY2JuWmhjaUJKZEdWeVlYUnZjbE4wY21WaGJTQTlJSEpsY1hWcGNtVW9KMnhsZG1Wc0xXbDBaWEpoZEc5eUxYTjBjbVZoYlNjcFhHNTJZWElnUW1GMFkyZ2dQU0J5WlhGMWFYSmxLQ2N1TDJKaGRHTm9KeWxjYm5aaGNpQmxjbkp2Y25NZ1BTQnlaWEYxYVhKbEtDZHNaWFpsYkMxbGNuSnZjbk1uS1Z4dWRtRnlJR0Z6YzJWeWRDQTlJSEpsY1hWcGNtVW9KMkZ6YzJWeWRDY3BYRzUyWVhJZ2NISnZiV2x6YVdaNUlEMGdjbVZ4ZFdseVpTZ25MaTl3Y205dGFYTnBabmtuS1Z4dWRtRnlJR2RsZEVOaGJHeGlZV05ySUQwZ2NtVnhkV2x5WlNnbkxpOWpiMjF0YjI0bktTNW5aWFJEWVd4c1ltRmphMXh1ZG1GeUlHZGxkRTl3ZEdsdmJuTWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmJXMXZiaWNwTG1kbGRFOXdkR2x2Ym5OY2JseHVkbUZ5SUZkeWFYUmxSWEp5YjNJZ1BTQmxjbkp2Y25NdVYzSnBkR1ZGY25KdmNseHVkbUZ5SUZKbFlXUkZjbkp2Y2lBOUlHVnljbTl5Y3k1U1pXRmtSWEp5YjNKY2JuWmhjaUJPYjNSR2IzVnVaRVZ5Y205eUlEMGdaWEp5YjNKekxrNXZkRVp2ZFc1a1JYSnliM0pjYm5aaGNpQlBjR1Z1UlhKeWIzSWdQU0JsY25KdmNuTXVUM0JsYmtWeWNtOXlYRzUyWVhJZ1NXNXBkR2xoYkdsNllYUnBiMjVGY25KdmNpQTlJR1Z5Y205eWN5NUpibWwwYVdGc2FYcGhkR2x2YmtWeWNtOXlYRzVjYmk4dklGQnZjM05wWW14bElFRmljM1J5WVdOMFRHVjJaV3hFVDFkT0kzTjBZWFIxY3lCMllXeDFaWE02WEc0dkx5QWdMU0FuYm1WM0p5QWdJQ0FnTFNCdVpYZHNlU0JqY21WaGRHVmtMQ0J1YjNRZ2IzQmxibVZrSUc5eUlHTnNiM05sWkZ4dUx5OGdJQzBnSjI5d1pXNXBibWNuSUMwZ2QyRnBkR2x1WnlCbWIzSWdkR2hsSUdSaGRHRmlZWE5sSUhSdklHSmxJRzl3Wlc1bFpDd2djRzl6ZENCdmNHVnVLQ2xjYmk4dklDQXRJQ2R2Y0dWdUp5QWdJQ0F0SUhOMVkyTmxjM05tZFd4c2VTQnZjR1Z1WldRZ2RHaGxJR1JoZEdGaVlYTmxMQ0JoZG1GcGJHRmliR1VnWm05eUlIVnpaVnh1THk4Z0lDMGdKMk5zYjNOcGJtY25JQzBnZDJGcGRHbHVaeUJtYjNJZ2RHaGxJR1JoZEdGaVlYTmxJSFJ2SUdKbElHTnNiM05sWkN3Z2NHOXpkQ0JqYkc5elpTZ3BYRzR2THlBZ0xTQW5ZMnh2YzJWa0p5QWdMU0JrWVhSaFltRnpaU0JvWVhNZ1ltVmxiaUJ6ZFdOalpYTnpablZzYkhrZ1kyeHZjMlZrTENCemFHOTFiR1FnYm05MElHSmxYRzR2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFpDQmxlR05sY0hRZ1ptOXlJR0Z1YjNSb1pYSWdiM0JsYmlncElHOXdaWEpoZEdsdmJseHVYRzVtZFc1amRHbHZiaUJNWlhabGJGVlFJQ2hrWWl3Z2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcElIdGNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFeGxkbVZzVlZBcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5Qk1aWFpsYkZWUUtHUmlMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWxjYmlBZ2ZWeHVYRzRnSUhaaGNpQmxjbkp2Y2x4dVhHNGdJRVYyWlc1MFJXMXBkSFJsY2k1allXeHNLSFJvYVhNcFhHNGdJSFJvYVhNdWMyVjBUV0Y0VEdsemRHVnVaWEp6S0VsdVptbHVhWFI1S1Z4dVhHNGdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lHTmhiR3hpWVdOcklEMGdiM0IwYVc5dWMxeHVJQ0FnSUc5d2RHbHZibk1nUFNCN2ZWeHVJQ0I5WEc1Y2JpQWdiM0IwYVc5dWN5QTlJRzl3ZEdsdmJuTWdmSHdnZTMxY2JseHVJQ0JwWmlBb0lXUmlJSHg4SUhSNWNHVnZaaUJrWWlBaFBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQmxjbkp2Y2lBOUlHNWxkeUJKYm1sMGFXRnNhWHBoZEdsdmJrVnljbTl5S0NkR2FYSnpkQ0JoY21kMWJXVnVkQ0J0ZFhOMElHSmxJR0Z1SUdGaWMzUnlZV04wTFd4bGRtVnNaRzkzYmlCamIyMXdiR2xoYm5RZ2MzUnZjbVVuS1Z4dUlDQWdJR2xtSUNoMGVYQmxiMllnWTJGc2JHSmhZMnNnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQndjbTlqWlhOekxtNWxlSFJVYVdOcktHTmhiR3hpWVdOckxDQmxjbkp2Y2lsY2JpQWdJQ0I5WEc0Z0lDQWdkR2h5YjNjZ1pYSnliM0pjYmlBZ2ZWeHVYRzRnSUdGemMyVnlkQzV6ZEhKcFkzUkZjWFZoYkNoMGVYQmxiMllnWkdJdWMzUmhkSFZ6TENBbmMzUnlhVzVuSnl3Z0p5NXpkR0YwZFhNZ2NtVnhkV2x5WldRc0lHOXNaQ0JoWW5OMGNtRmpkQzFzWlhabGJHUnZkMjRuS1Z4dVhHNGdJSFJvYVhNdWIzQjBhVzl1Y3lBOUlHZGxkRTl3ZEdsdmJuTW9iM0IwYVc5dWN5bGNiaUFnZEdocGN5NWZaR0lnUFNCa1lseHVJQ0IwYUdsekxtUmlJRDBnYm1WM0lFUmxabVZ5Y21Wa1RHVjJaV3hFVDFkT0tHUmlLVnh1SUNCMGFHbHpMbTl3Wlc0b1kyRnNiR0poWTJzcFhHNTlYRzVjYmt4bGRtVnNWVkF1Y0hKdmRHOTBlWEJsTG1WdGFYUWdQU0JGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExtVnRhWFJjYmt4bGRtVnNWVkF1Y0hKdmRHOTBlWEJsTG05dVkyVWdQU0JGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExtOXVZMlZjYm1sdWFHVnlhWFJ6S0V4bGRtVnNWVkFzSUVWMlpXNTBSVzFwZEhSbGNpbGNibHh1VEdWMlpXeFZVQzV3Y205MGIzUjVjR1V1YjNCbGJpQTlJR1oxYm1OMGFXOXVJQ2hqWVd4c1ltRmpheWtnZTF4dUlDQjJZWElnYzJWc1ppQTlJSFJvYVhOY2JpQWdkbUZ5SUhCeWIyMXBjMlZjYmx4dUlDQnBaaUFvSVdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnWTJGc2JHSmhZMnNnUFNCd2NtOXRhWE5wWm5rb0tWeHVJQ0FnSUhCeWIyMXBjMlVnUFNCallXeHNZbUZqYXk1d2NtOXRhWE5sWEc0Z0lIMWNibHh1SUNCcFppQW9kR2hwY3k1cGMwOXdaVzRvS1NrZ2UxeHVJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTJGc2JHSmhZMnNzSUc1MWJHd3NJSE5sYkdZcFhHNGdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMyVmNiaUFnZlZ4dVhHNGdJR2xtSUNoMGFHbHpMbDlwYzA5d1pXNXBibWNvS1NrZ2UxeHVJQ0FnSUhSb2FYTXViMjVqWlNnbmIzQmxiaWNzSUdaMWJtTjBhVzl1SUNncElIc2dZMkZzYkdKaFkyc29iblZzYkN3Z2MyVnNaaWtnZlNsY2JpQWdJQ0J5WlhSMWNtNGdjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1bGJXbDBLQ2R2Y0dWdWFXNW5KeWxjYmx4dUlDQjBhR2x6TG1SaUxtOXdaVzRvZEdocGN5NXZjSFJwYjI1ekxDQm1kVzVqZEdsdmJpQW9aWEp5S1NCN1hHNGdJQ0FnYVdZZ0tHVnljaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLRzVsZHlCUGNHVnVSWEp5YjNJb1pYSnlLU2xjYmlBZ0lDQjlYRzRnSUNBZ2MyVnNaaTVrWWlBOUlITmxiR1l1WDJSaVhHNGdJQ0FnWTJGc2JHSmhZMnNvYm5Wc2JDd2djMlZzWmlsY2JpQWdJQ0J6Wld4bUxtVnRhWFFvSjI5d1pXNG5LVnh1SUNBZ0lITmxiR1l1WlcxcGRDZ25jbVZoWkhrbktWeHVJQ0I5S1Z4dVhHNGdJSEpsZEhWeWJpQndjbTl0YVhObFhHNTlYRzVjYmt4bGRtVnNWVkF1Y0hKdmRHOTBlWEJsTG1Oc2IzTmxJRDBnWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yS1NCN1hHNGdJSFpoY2lCelpXeG1JRDBnZEdocGMxeHVJQ0IyWVhJZ2NISnZiV2x6WlZ4dVhHNGdJR2xtSUNnaFkyRnNiR0poWTJzcElIdGNiaUFnSUNCallXeHNZbUZqYXlBOUlIQnliMjFwYzJsbWVTZ3BYRzRnSUNBZ2NISnZiV2x6WlNBOUlHTmhiR3hpWVdOckxuQnliMjFwYzJWY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwYUdsekxtbHpUM0JsYmlncEtTQjdYRzRnSUNBZ2RHaHBjeTVrWWk1amJHOXpaU2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCelpXeG1MbVZ0YVhRb0oyTnNiM05sWkNjcFhHNGdJQ0FnSUNCallXeHNZbUZqYXk1aGNIQnNlU2h1ZFd4c0xDQmhjbWQxYldWdWRITXBYRzRnSUNBZ2ZTbGNiaUFnSUNCMGFHbHpMbVZ0YVhRb0oyTnNiM05wYm1jbktWeHVJQ0FnSUhSb2FYTXVaR0lnUFNCdVpYY2dSR1ZtWlhKeVpXUk1aWFpsYkVSUFYwNG9kR2hwY3k1ZlpHSXBYRzRnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVwYzBOc2IzTmxaQ2dwS1NCN1hHNGdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqWVd4c1ltRmpheWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TG1SaUxuTjBZWFIxY3lBOVBUMGdKMk5zYjNOcGJtY25LU0I3WEc0Z0lDQWdkR2hwY3k1dmJtTmxLQ2RqYkc5elpXUW5MQ0JqWVd4c1ltRmpheWxjYmlBZ2ZTQmxiSE5sSUdsbUlDaDBhR2x6TGw5cGMwOXdaVzVwYm1jb0tTa2dlMXh1SUNBZ0lIUm9hWE11YjI1alpTZ25iM0JsYmljc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJSE5sYkdZdVkyeHZjMlVvWTJGc2JHSmhZMnNwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ3Y205dGFYTmxYRzU5WEc1Y2JreGxkbVZzVlZBdWNISnZkRzkwZVhCbExtbHpUM0JsYmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2NtVjBkWEp1SUhSb2FYTXVaR0l1YzNSaGRIVnpJRDA5UFNBbmIzQmxiaWRjYm4xY2JseHVUR1YyWld4VlVDNXdjbTkwYjNSNWNHVXVYMmx6VDNCbGJtbHVaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnY21WMGRYSnVJSFJvYVhNdVpHSXVjM1JoZEhWeklEMDlQU0FuYjNCbGJtbHVaeWRjYm4xY2JseHVUR1YyWld4VlVDNXdjbTkwYjNSNWNHVXVhWE5EYkc5elpXUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSEpsZEhWeWJpQW9MMTVqYkc5emZHNWxkeThwTG5SbGMzUW9kR2hwY3k1a1lpNXpkR0YwZFhNcFhHNTlYRzVjYmt4bGRtVnNWVkF1Y0hKdmRHOTBlWEJsTG1kbGRDQTlJR1oxYm1OMGFXOXVJQ2hyWlhrc0lHOXdkR2x2Ym5Nc0lHTmhiR3hpWVdOcktTQjdYRzRnSUdsbUlDaHJaWGtnUFQwOUlHNTFiR3dnZkh3Z2EyVjVJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtVmhaRVZ5Y205eUtDZG5aWFFvS1NCeVpYRjFhWEpsY3lCaElHdGxlU0JoY21kMWJXVnVkQ2NwWEc0Z0lIMWNibHh1SUNCMllYSWdjSEp2YldselpWeHVYRzRnSUdOaGJHeGlZV05ySUQwZ1oyVjBRMkZzYkdKaFkyc29iM0IwYVc5dWN5d2dZMkZzYkdKaFkyc3BYRzVjYmlBZ2FXWWdLQ0ZqWVd4c1ltRmpheWtnZTF4dUlDQWdJR05oYkd4aVlXTnJJRDBnY0hKdmJXbHphV1o1S0NsY2JpQWdJQ0J3Y205dGFYTmxJRDBnWTJGc2JHSmhZMnN1Y0hKdmJXbHpaVnh1SUNCOVhHNWNiaUFnYVdZZ0tHMWhlV0psUlhKeWIzSW9kR2hwY3l3Z1kyRnNiR0poWTJzcEtTQjdJSEpsZEhWeWJpQndjbTl0YVhObElIMWNibHh1SUNCdmNIUnBiMjV6SUQwZ1oyVjBUM0IwYVc5dWN5aHZjSFJwYjI1ektWeHVYRzRnSUhSb2FYTXVaR0l1WjJWMEtHdGxlU3dnYjNCMGFXOXVjeXdnWm5WdVkzUnBiMjRnS0dWeWNpd2dkbUZzZFdVcElIdGNiaUFnSUNCcFppQW9aWEp5S1NCN1hHNGdJQ0FnSUNCcFppQW9LQzl1YjNSbWIzVnVaQzlwS1M1MFpYTjBLR1Z5Y2lrZ2ZId2daWEp5TG01dmRFWnZkVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHVnljaUE5SUc1bGR5Qk9iM1JHYjNWdVpFVnljbTl5S0NkTFpYa2dibTkwSUdadmRXNWtJR2x1SUdSaGRHRmlZWE5sSUZzbklDc2dhMlY1SUNzZ0oxMG5MQ0JsY25JcFhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCbGNuSWdQU0J1WlhjZ1VtVmhaRVZ5Y205eUtHVnljaWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQmpZV3hzWW1GamF5aGxjbklwWEc0Z0lDQWdmVnh1SUNBZ0lHTmhiR3hpWVdOcktHNTFiR3dzSUhaaGJIVmxLVnh1SUNCOUtWeHVYRzRnSUhKbGRIVnliaUJ3Y205dGFYTmxYRzU5WEc1Y2JreGxkbVZzVlZBdWNISnZkRzkwZVhCbExuQjFkQ0E5SUdaMWJtTjBhVzl1SUNoclpYa3NJSFpoYkhWbExDQnZjSFJwYjI1ekxDQmpZV3hzWW1GamF5a2dlMXh1SUNCcFppQW9hMlY1SUQwOVBTQnVkV3hzSUh4OElHdGxlU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGZHlhWFJsUlhKeWIzSW9KM0IxZENncElISmxjWFZwY21WeklHRWdhMlY1SUdGeVozVnRaVzUwSnlsY2JpQWdmVnh1WEc0Z0lIWmhjaUJ6Wld4bUlEMGdkR2hwYzF4dUlDQjJZWElnY0hKdmJXbHpaVnh1WEc0Z0lHTmhiR3hpWVdOcklEMGdaMlYwUTJGc2JHSmhZMnNvYjNCMGFXOXVjeXdnWTJGc2JHSmhZMnNwWEc1Y2JpQWdhV1lnS0NGallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUdOaGJHeGlZV05ySUQwZ2NISnZiV2x6YVdaNUtDbGNiaUFnSUNCd2NtOXRhWE5sSUQwZ1kyRnNiR0poWTJzdWNISnZiV2x6WlZ4dUlDQjlYRzVjYmlBZ2FXWWdLRzFoZVdKbFJYSnliM0lvZEdocGN5d2dZMkZzYkdKaFkyc3BLU0I3SUhKbGRIVnliaUJ3Y205dGFYTmxJSDFjYmx4dUlDQnZjSFJwYjI1eklEMGdaMlYwVDNCMGFXOXVjeWh2Y0hScGIyNXpLVnh1WEc0Z0lIUm9hWE11WkdJdWNIVjBLR3RsZVN3Z2RtRnNkV1VzSUc5d2RHbHZibk1zSUdaMWJtTjBhVzl1SUNobGNuSXBJSHRjYmlBZ0lDQnBaaUFvWlhKeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb2JtVjNJRmR5YVhSbFJYSnliM0lvWlhKeUtTbGNiaUFnSUNCOVhHNGdJQ0FnYzJWc1ppNWxiV2wwS0Nkd2RYUW5MQ0JyWlhrc0lIWmhiSFZsS1Z4dUlDQWdJR05oYkd4aVlXTnJLQ2xjYmlBZ2ZTbGNibHh1SUNCeVpYUjFjbTRnY0hKdmJXbHpaVnh1ZlZ4dVhHNU1aWFpsYkZWUUxuQnliM1J2ZEhsd1pTNWtaV3dnUFNCbWRXNWpkR2x2YmlBb2EyVjVMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvYTJWNUlEMDlQU0J1ZFd4c0lIeDhJR3RsZVNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRmR5YVhSbFJYSnliM0lvSjJSbGJDZ3BJSEpsY1hWcGNtVnpJR0VnYTJWNUlHRnlaM1Z0Wlc1MEp5bGNiaUFnZlZ4dVhHNGdJSFpoY2lCelpXeG1JRDBnZEdocGMxeHVJQ0IyWVhJZ2NISnZiV2x6WlZ4dVhHNGdJR05oYkd4aVlXTnJJRDBnWjJWMFEyRnNiR0poWTJzb2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcFhHNWNiaUFnYVdZZ0tDRmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHTmhiR3hpWVdOcklEMGdjSEp2YldsemFXWjVLQ2xjYmlBZ0lDQndjbTl0YVhObElEMGdZMkZzYkdKaFkyc3VjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdhV1lnS0cxaGVXSmxSWEp5YjNJb2RHaHBjeXdnWTJGc2JHSmhZMnNwS1NCN0lISmxkSFZ5YmlCd2NtOXRhWE5sSUgxY2JseHVJQ0J2Y0hScGIyNXpJRDBnWjJWMFQzQjBhVzl1Y3lodmNIUnBiMjV6S1Z4dVhHNGdJSFJvYVhNdVpHSXVaR1ZzS0d0bGVTd2diM0IwYVc5dWN5d2dablZ1WTNScGIyNGdLR1Z5Y2lrZ2UxeHVJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWh1WlhjZ1YzSnBkR1ZGY25KdmNpaGxjbklwS1Z4dUlDQWdJSDFjYmlBZ0lDQnpaV3htTG1WdGFYUW9KMlJsYkNjc0lHdGxlU2xjYmlBZ0lDQmpZV3hzWW1GamF5Z3BYRzRnSUgwcFhHNWNiaUFnY21WMGRYSnVJSEJ5YjIxcGMyVmNibjFjYmx4dVRHVjJaV3hWVUM1d2NtOTBiM1I1Y0dVdVltRjBZMmdnUFNCbWRXNWpkR2x2YmlBb1lYSnlMQ0J2Y0hScGIyNXpMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQnBaaUFvSVdGeVozVnRaVzUwY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKaGRHTm9LSFJvYVhNcFhHNGdJSDFjYmx4dUlDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29ZWEp5S1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCWGNtbDBaVVZ5Y205eUtDZGlZWFJqYUNncElISmxjWFZwY21WeklHRnVJR0Z5Y21GNUlHRnlaM1Z0Wlc1MEp5bGNiaUFnZlZ4dVhHNGdJSFpoY2lCelpXeG1JRDBnZEdocGMxeHVJQ0IyWVhJZ2NISnZiV2x6WlZ4dVhHNGdJR05oYkd4aVlXTnJJRDBnWjJWMFEyRnNiR0poWTJzb2IzQjBhVzl1Y3l3Z1kyRnNiR0poWTJzcFhHNWNiaUFnYVdZZ0tDRmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHTmhiR3hpWVdOcklEMGdjSEp2YldsemFXWjVLQ2xjYmlBZ0lDQndjbTl0YVhObElEMGdZMkZzYkdKaFkyc3VjSEp2YldselpWeHVJQ0I5WEc1Y2JpQWdhV1lnS0cxaGVXSmxSWEp5YjNJb2RHaHBjeXdnWTJGc2JHSmhZMnNwS1NCN0lISmxkSFZ5YmlCd2NtOXRhWE5sSUgxY2JseHVJQ0J2Y0hScGIyNXpJRDBnWjJWMFQzQjBhVzl1Y3lodmNIUnBiMjV6S1Z4dVhHNGdJSFJvYVhNdVpHSXVZbUYwWTJnb1lYSnlMQ0J2Y0hScGIyNXpMQ0JtZFc1amRHbHZiaUFvWlhKeUtTQjdYRzRnSUNBZ2FXWWdLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05yS0c1bGR5QlhjbWwwWlVWeWNtOXlLR1Z5Y2lrcFhHNGdJQ0FnZlZ4dUlDQWdJSE5sYkdZdVpXMXBkQ2duWW1GMFkyZ25MQ0JoY25JcFhHNGdJQ0FnWTJGc2JHSmhZMnNvS1Z4dUlDQjlLVnh1WEc0Z0lISmxkSFZ5YmlCd2NtOXRhWE5sWEc1OVhHNWNia3hsZG1Wc1ZWQXVjSEp2ZEc5MGVYQmxMbWwwWlhKaGRHOXlJRDBnWm5WdVkzUnBiMjRnS0c5d2RHbHZibk1wSUh0Y2JpQWdjbVYwZFhKdUlIUm9hWE11WkdJdWFYUmxjbUYwYjNJb2IzQjBhVzl1Y3lsY2JuMWNibHh1VEdWMlpXeFZVQzV3Y205MGIzUjVjR1V1Y21WaFpGTjBjbVZoYlNBOVhHNU1aWFpsYkZWUUxuQnliM1J2ZEhsd1pTNWpjbVZoZEdWU1pXRmtVM1J5WldGdElEMGdablZ1WTNScGIyNGdLRzl3ZEdsdmJuTXBJSHRjYmlBZ2IzQjBhVzl1Y3lBOUlHVjRkR1Z1WkNoN0lHdGxlWE02SUhSeWRXVXNJSFpoYkhWbGN6b2dkSEoxWlNCOUxDQnZjSFJwYjI1ektWeHVJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11YkdsdGFYUWdJVDA5SUNkdWRXMWlaWEluS1NCN0lHOXdkR2x2Ym5NdWJHbHRhWFFnUFNBdE1TQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ1NYUmxjbUYwYjNKVGRISmxZVzBvZEdocGN5NWtZaTVwZEdWeVlYUnZjaWh2Y0hScGIyNXpLU3dnYjNCMGFXOXVjeWxjYm4xY2JseHVUR1YyWld4VlVDNXdjbTkwYjNSNWNHVXVhMlY1VTNSeVpXRnRJRDFjYmt4bGRtVnNWVkF1Y0hKdmRHOTBlWEJsTG1OeVpXRjBaVXRsZVZOMGNtVmhiU0E5SUdaMWJtTjBhVzl1SUNodmNIUnBiMjV6S1NCN1hHNGdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVkpsWVdSVGRISmxZVzBvWlhoMFpXNWtLRzl3ZEdsdmJuTXNJSHNnYTJWNWN6b2dkSEoxWlN3Z2RtRnNkV1Z6T2lCbVlXeHpaU0I5S1NsY2JuMWNibHh1VEdWMlpXeFZVQzV3Y205MGIzUjVjR1V1ZG1Gc2RXVlRkSEpsWVcwZ1BWeHVUR1YyWld4VlVDNXdjbTkwYjNSNWNHVXVZM0psWVhSbFZtRnNkV1ZUZEhKbFlXMGdQU0JtZFc1amRHbHZiaUFvYjNCMGFXOXVjeWtnZTF4dUlDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVlNaV0ZrVTNSeVpXRnRLR1Y0ZEdWdVpDaHZjSFJwYjI1ekxDQjdJR3RsZVhNNklHWmhiSE5sTENCMllXeDFaWE02SUhSeWRXVWdmU2twWEc1OVhHNWNia3hsZG1Wc1ZWQXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5JRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0J5WlhSMWNtNGdKMHhsZG1Wc1ZWQW5YRzU5WEc1Y2JtWjFibU4wYVc5dUlHMWhlV0psUlhKeWIzSWdLR1JpTENCallXeHNZbUZqYXlrZ2UxeHVJQ0JwWmlBb0lXUmlMbDlwYzA5d1pXNXBibWNvS1NBbUppQWhaR0l1YVhOUGNHVnVLQ2twSUh0Y2JpQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR05oYkd4aVlXTnJMQ0J1WlhjZ1VtVmhaRVZ5Y205eUtDZEVZWFJoWW1GelpTQnBjeUJ1YjNRZ2IzQmxiaWNwS1Z4dUlDQWdJSEpsZEhWeWJpQjBjblZsWEc0Z0lIMWNibjFjYmx4dVRHVjJaV3hWVUM1bGNuSnZjbk1nUFNCbGNuSnZjbk5jYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVEdWMlpXeFZVQzVrWldaaGRXeDBJRDBnVEdWMlpXeFZVRnh1SWl3aVpuVnVZM1JwYjI0Z2NISnZiV2x6YVdaNUlDZ3BJSHRjYmlBZ2RtRnlJR05oYkd4aVlXTnJYRzRnSUhaaGNpQndjbTl0YVhObElEMGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJR05oYkd4aVlXTnJJRDBnWm5WdVkzUnBiMjRnWTJGc2JHSmhZMnNnS0dWeWNpd2dkbUZzZFdVcElIdGNiaUFnSUNBZ0lHbG1JQ2hsY25JcElISmxhbVZqZENobGNuSXBYRzRnSUNBZ0lDQmxiSE5sSUhKbGMyOXNkbVVvZG1Gc2RXVXBYRzRnSUNBZ2ZWeHVJQ0I5S1Z4dUlDQmpZV3hzWW1GamF5NXdjbTl0YVhObElEMGdjSEp2YldselpWeHVJQ0J5WlhSMWNtNGdZMkZzYkdKaFkydGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCd2NtOXRhWE5wWm5sY2JpSXNJbHh1Wlhod2IzSjBjeTVqYjIxd1lYSmxJRDBnWm5WdVkzUnBiMjRnS0dFc0lHSXBJSHRjYmx4dUlDQnBaaWhDZFdabVpYSXVhWE5DZFdabVpYSW9ZU2twSUh0Y2JpQWdJQ0IyWVhJZ2JDQTlJRTFoZEdndWJXbHVLR0V1YkdWdVozUm9MQ0JpTG14bGJtZDBhQ2xjYmlBZ0lDQm1iM0lvZG1GeUlHa2dQU0F3T3lCcElEd2diRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnWTIxd0lEMGdZVnRwWFNBdElHSmJhVjFjYmlBZ0lDQWdJR2xtS0dOdGNDa2djbVYwZFhKdUlHTnRjRnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWVM1c1pXNW5kR2dnTFNCaUxteGxibWQwYUZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdFZ1BDQmlJRDhnTFRFZ09pQmhJRDRnWWlBL0lERWdPaUF3WEc1OVhHNWNiaTh2SUhSdklHSmxJR052YlhCaGRHbGliR1VnZDJsMGFDQjBhR1VnWTNWeWNtVnVkQ0JoWW5OMGNtRmpkQzFzWlhabGJHUnZkMjRnZEdWemRITmNiaTh2SUc1MWJHeHBjMmdnYjNJZ1pXMXdkSGtnYzNSeWFXNW5jeTVjYmk4dklFa2dZMjkxYkdRZ2RYTmxJQ0VoZG1Gc0lHSjFkQ0JKSUhkaGJuUWdkRzhnY0dWeWJXbDBJRzUxYldKbGNuTWdZVzVrSUdKdmIyeGxZVzV6TEZ4dUx5OGdhV1lnY0c5emMybGliR1V1WEc1Y2JtWjFibU4wYVc5dUlHbHpSR1ZtSUNoMllXd3BJSHRjYmlBZ2NtVjBkWEp1SUhaaGJDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIWmhiQ0FoUFQwZ0p5ZGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FHRnpJQ2h5WVc1blpTd2dibUZ0WlNrZ2UxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29jbUZ1WjJVc0lHNWhiV1VwWEc1OVhHNWNibVoxYm1OMGFXOXVJR2hoYzB0bGVTaHlZVzVuWlN3Z2JtRnRaU2tnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2NtRnVaMlVzSUc1aGJXVXBJQ1ltSUc1aGJXVmNibjFjYmx4dWRtRnlJR3h2ZDJWeVFtOTFibVJMWlhrZ1BTQmxlSEJ2Y25SekxteHZkMlZ5UW05MWJtUkxaWGtnUFNCbWRXNWpkR2x2YmlBb2NtRnVaMlVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJR2hoYzB0bGVTaHlZVzVuWlN3Z0oyZDBKeWxjYmlBZ0lDQjhmQ0JvWVhOTFpYa29jbUZ1WjJVc0lDZG5kR1VuS1Z4dUlDQWdJSHg4SUdoaGMwdGxlU2h5WVc1blpTd2dKMjFwYmljcFhHNGdJQ0FnZkh3Z0tISmhibWRsTG5KbGRtVnljMlVnUHlCb1lYTkxaWGtvY21GdVoyVXNJQ2RsYm1RbktTQTZJR2hoYzB0bGVTaHlZVzVuWlN3Z0ozTjBZWEowSnlrcFhHNGdJQ0FnZkh3Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnS1Z4dWZWeHVYRzUyWVhJZ2JHOTNaWEpDYjNWdVpDQTlJR1Y0Y0c5eWRITXViRzkzWlhKQ2IzVnVaQ0E5SUdaMWJtTjBhVzl1SUNoeVlXNW5aU3dnWkdWbUtTQjdYRzRnSUhaaGNpQnJJRDBnYkc5M1pYSkNiM1Z1WkV0bGVTaHlZVzVuWlNsY2JpQWdjbVYwZFhKdUlHc2dQeUJ5WVc1blpWdHJYU0E2SUdSbFpseHVmVnh1WEc1MllYSWdiRzkzWlhKQ2IzVnVaRWx1WTJ4MWMybDJaU0E5SUdWNGNHOXlkSE11Ykc5M1pYSkNiM1Z1WkVsdVkyeDFjMmwyWlNBOUlHWjFibU4wYVc5dUlDaHlZVzVuWlNrZ2UxeHVJQ0J5WlhSMWNtNGdhR0Z6S0hKaGJtZGxMQ0FuWjNRbktTQS9JR1poYkhObElEb2dkSEoxWlZ4dWZWeHVYRzUyWVhJZ2RYQndaWEpDYjNWdVpFbHVZMngxYzJsMlpTQTlJR1Y0Y0c5eWRITXVkWEJ3WlhKQ2IzVnVaRWx1WTJ4MWMybDJaU0E5WEc0Z0lHWjFibU4wYVc5dUlDaHlZVzVuWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvYUdGektISmhibWRsTENBbmJIUW5LU0F2S2lZbUlDRnlZVzVuWlM1dFlYaEZlQ292S1NBL0lHWmhiSE5sSURvZ2RISjFaVnh1SUNCOVhHNWNiblpoY2lCc2IzZGxja0p2ZFc1a1JYaGpiSFZ6YVhabElEMGdaWGh3YjNKMGN5NXNiM2RsY2tKdmRXNWtSWGhqYkhWemFYWmxJRDFjYmlBZ1puVnVZM1JwYjI0Z0tISmhibWRsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0ZzYjNkbGNrSnZkVzVrU1c1amJIVnphWFpsS0hKaGJtZGxLVnh1SUNCOVhHNWNiblpoY2lCMWNIQmxja0p2ZFc1a1JYaGpiSFZ6YVhabElEMGdaWGh3YjNKMGN5NTFjSEJsY2tKdmRXNWtSWGhqYkhWemFYWmxJRDFjYmlBZ1puVnVZM1JwYjI0Z0tISmhibWRsS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ0YxY0hCbGNrSnZkVzVrU1c1amJIVnphWFpsS0hKaGJtZGxLVnh1SUNCOVhHNWNiblpoY2lCMWNIQmxja0p2ZFc1a1MyVjVJRDBnWlhod2IzSjBjeTUxY0hCbGNrSnZkVzVrUzJWNUlEMGdablZ1WTNScGIyNGdLSEpoYm1kbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNCb1lYTkxaWGtvY21GdVoyVXNJQ2RzZENjcFhHNGdJQ0FnZkh3Z2FHRnpTMlY1S0hKaGJtZGxMQ0FuYkhSbEp5bGNiaUFnSUNCOGZDQm9ZWE5MWlhrb2NtRnVaMlVzSUNkdFlYZ25LVnh1SUNBZ0lIeDhJQ2h5WVc1blpTNXlaWFpsY25ObElEOGdhR0Z6UzJWNUtISmhibWRsTENBbmMzUmhjblFuS1NBNklHaGhjMHRsZVNoeVlXNW5aU3dnSjJWdVpDY3BLVnh1SUNBZ0lIeDhJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDbGNibjFjYmx4dWRtRnlJSFZ3Y0dWeVFtOTFibVFnUFNCbGVIQnZjblJ6TG5Wd2NHVnlRbTkxYm1RZ1BTQm1kVzVqZEdsdmJpQW9jbUZ1WjJVc0lHUmxaaWtnZTF4dUlDQjJZWElnYXlBOUlIVndjR1Z5UW05MWJtUkxaWGtvY21GdVoyVXBYRzRnSUhKbGRIVnliaUJySUQ4Z2NtRnVaMlZiYTEwZ09pQmtaV1pjYm4xY2JseHVaWGh3YjNKMGN5NXpkR0Z5ZENBOUlHWjFibU4wYVc5dUlDaHlZVzVuWlN3Z1pHVm1LU0I3WEc0Z0lISmxkSFZ5YmlCeVlXNW5aUzV5WlhabGNuTmxJRDhnZFhCd1pYSkNiM1Z1WkNoeVlXNW5aU3dnWkdWbUtTQTZJR3h2ZDJWeVFtOTFibVFvY21GdVoyVXNJR1JsWmlsY2JuMWNibVY0Y0c5eWRITXVaVzVrSUQwZ1puVnVZM1JwYjI0Z0tISmhibWRsTENCa1pXWXBJSHRjYmlBZ2NtVjBkWEp1SUhKaGJtZGxMbkpsZG1WeWMyVWdQeUJzYjNkbGNrSnZkVzVrS0hKaGJtZGxMQ0JrWldZcElEb2dkWEJ3WlhKQ2IzVnVaQ2h5WVc1blpTd2daR1ZtS1Z4dWZWeHVaWGh3YjNKMGN5NXpkR0Z5ZEVsdVkyeDFjMmwyWlNBOUlHWjFibU4wYVc5dUlDaHlZVzVuWlNrZ2UxeHVJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lISmhibWRsTG5KbGRtVnljMlZjYmlBZ1B5QjFjSEJsY2tKdmRXNWtTVzVqYkhWemFYWmxLSEpoYm1kbEtWeHVJQ0E2SUd4dmQyVnlRbTkxYm1SSmJtTnNkWE5wZG1Vb2NtRnVaMlVwWEc0Z0lDbGNibjFjYm1WNGNHOXlkSE11Wlc1a1NXNWpiSFZ6YVhabElEMGdablZ1WTNScGIyNGdLSEpoYm1kbEtTQjdYRzRnSUhKbGRIVnliaUFvWEc0Z0lDQWdjbUZ1WjJVdWNtVjJaWEp6WlZ4dUlDQS9JR3h2ZDJWeVFtOTFibVJKYm1Oc2RYTnBkbVVvY21GdVoyVXBYRzRnSURvZ2RYQndaWEpDYjNWdVpFbHVZMngxYzJsMlpTaHlZVzVuWlNsY2JpQWdLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBaQ0FvWlNrZ2V5QnlaWFIxY200Z1pTQjlYRzVjYm1WNGNHOXlkSE11ZEc5TWRHZDBJRDBnWm5WdVkzUnBiMjRnS0hKaGJtZGxMQ0JmY21GdVoyVXNJRzFoY0N3Z2JHOTNaWElzSUhWd2NHVnlLU0I3WEc0Z0lGOXlZVzVuWlNBOUlGOXlZVzVuWlNCOGZDQjdmVnh1SUNCdFlYQWdQU0J0WVhBZ2ZId2dhV1JjYmlBZ2RtRnlJR1JsWm1GMWJIUnpJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSUROY2JpQWdkbUZ5SUd4aUlEMGdaWGh3YjNKMGN5NXNiM2RsY2tKdmRXNWtTMlY1S0hKaGJtZGxLVnh1SUNCMllYSWdkV0lnUFNCbGVIQnZjblJ6TG5Wd2NHVnlRbTkxYm1STFpYa29jbUZ1WjJVcFhHNGdJR2xtS0d4aUtTQjdYRzRnSUNBZ2FXWW9iR0lnUFQwOUlDZG5kQ2NwSUY5eVlXNW5aUzVuZENBOUlHMWhjQ2h5WVc1blpTNW5kQ3dnWm1Gc2MyVXBYRzRnSUNBZ1pXeHpaU0FnSUNBZ0lDQWdJQ0FnSUY5eVlXNW5aUzVuZEdVZ1BTQnRZWEFvY21GdVoyVmJiR0pkTENCbVlXeHpaU2xjYmlBZ2ZWeHVJQ0JsYkhObElHbG1LR1JsWm1GMWJIUnpLVnh1SUNBZ0lGOXlZVzVuWlM1bmRHVWdQU0J0WVhBb2JHOTNaWElzSUdaaGJITmxLVnh1WEc0Z0lHbG1LSFZpS1NCN1hHNGdJQ0FnYVdZb2RXSWdQVDA5SUNkc2RDY3BJRjl5WVc1blpTNXNkQ0E5SUcxaGNDaHlZVzVuWlM1c2RDd2dkSEoxWlNsY2JpQWdJQ0JsYkhObElDQWdJQ0FnSUNBZ0lDQWdYM0poYm1kbExteDBaU0E5SUcxaGNDaHlZVzVuWlZ0MVlsMHNJSFJ5ZFdVcFhHNGdJSDFjYmlBZ1pXeHpaU0JwWmloa1pXWmhkV3gwY3lsY2JpQWdJQ0JmY21GdVoyVXViSFJsSUQwZ2JXRndLSFZ3Y0dWeUxDQjBjblZsS1Z4dVhHNGdJR2xtS0hKaGJtZGxMbkpsZG1WeWMyVWdJVDBnYm5Wc2JDbGNiaUFnSUNCZmNtRnVaMlV1Y21WMlpYSnpaU0E5SUNFaGNtRnVaMlV1Y21WMlpYSnpaVnh1WEc0Z0lDOHZhV1lnY21GdVoyVWdkMkZ6SUhWelpXUWdiWFYwWVdKc2VWeHVJQ0F2THlocGJpQnNaWFpsYkMxemRXSnNaWFpsYkNCcGRDZHpJSEJoY25RZ2IyWWdZVzRnYjNCMGFXOXVjeUJ2WW1wbFkzUmNiaUFnTHk5MGFHRjBJR2hoY3lCdGIzSmxJSEJ5YjNCbGNuUnBaWE1nYjI0Z2FYUXVLVnh1SUNCcFppaG9ZWE1vWDNKaGJtZGxMQ0FuYldGNEp5a3BJQ0FnWkdWc1pYUmxJRjl5WVc1blpTNXRZWGhjYmlBZ2FXWW9hR0Z6S0Y5eVlXNW5aU3dnSjIxcGJpY3BLU0FnSUdSbGJHVjBaU0JmY21GdVoyVXViV2x1WEc0Z0lHbG1LR2hoY3loZmNtRnVaMlVzSUNkemRHRnlkQ2NwS1NCa1pXeGxkR1VnWDNKaGJtZGxMbk4wWVhKMFhHNGdJR2xtS0doaGN5aGZjbUZ1WjJVc0lDZGxibVFuS1NrZ0lDQmtaV3hsZEdVZ1gzSmhibWRsTG1WdVpGeHVYRzRnSUhKbGRIVnliaUJmY21GdVoyVmNibjFjYmx4dVpYaHdiM0owY3k1amIyNTBZV2x1Y3lBOUlHWjFibU4wYVc5dUlDaHlZVzVuWlN3Z2EyVjVMQ0JqYjIxd1lYSmxLU0I3WEc0Z0lHTnZiWEJoY21VZ1BTQmpiMjF3WVhKbElIeDhJR1Y0Y0c5eWRITXVZMjl0Y0dGeVpWeHVYRzRnSUhaaGNpQnNZaUE5SUd4dmQyVnlRbTkxYm1Rb2NtRnVaMlVwWEc0Z0lHbG1LR2x6UkdWbUtHeGlLU2tnZTF4dUlDQWdJSFpoY2lCamJYQWdQU0JqYjIxd1lYSmxLR3RsZVN3Z2JHSXBYRzRnSUNBZ2FXWW9ZMjF3SUR3Z01DQjhmQ0FvWTIxd0lEMDlQU0F3SUNZbUlHeHZkMlZ5UW05MWJtUkZlR05zZFhOcGRtVW9jbUZ1WjJVcEtTbGNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNCOVhHNWNiaUFnZG1GeUlIVmlJRDBnZFhCd1pYSkNiM1Z1WkNoeVlXNW5aU2xjYmlBZ2FXWW9hWE5FWldZb2RXSXBLU0I3WEc0Z0lDQWdkbUZ5SUdOdGNDQTlJR052YlhCaGNtVW9hMlY1TENCMVlpbGNiaUFnSUNCcFppaGpiWEFnUGlBd0lIeDhJQ2hqYlhBZ1BUMDlJREFwSUNZbUlIVndjR1Z5UW05MWJtUkZlR05zZFhOcGRtVW9jbUZ1WjJVcEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdkSEoxWlZ4dWZWeHVYRzVsZUhCdmNuUnpMbVpwYkhSbGNpQTlJR1oxYm1OMGFXOXVJQ2h5WVc1blpTd2dZMjl0Y0dGeVpTa2dlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbGVIQnZjblJ6TG1OdmJuUmhhVzV6S0hKaGJtZGxMQ0JyWlhrc0lHTnZiWEJoY21VcFhHNGdJSDFjYm4xY2JseHVYRzRpTENJdkx5QnphR2x0SUdadmNpQjFjMmx1WnlCd2NtOWpaWE56SUdsdUlHSnliM2R6WlhKY2JuWmhjaUJ3Y205alpYTnpJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3ZlR0Y2JseHVMeThnWTJGamFHVmtJR1p5YjIwZ2QyaGhkR1YyWlhJZ1oyeHZZbUZzSUdseklIQnlaWE5sYm5RZ2MyOGdkR2hoZENCMFpYTjBJSEoxYm01bGNuTWdkR2hoZENCemRIVmlJR2wwWEc0dkx5QmtiMjRuZENCaWNtVmhheUIwYUdsdVozTXVJQ0JDZFhRZ2QyVWdibVZsWkNCMGJ5QjNjbUZ3SUdsMElHbHVJR0VnZEhKNUlHTmhkR05vSUdsdUlHTmhjMlVnYVhRZ2FYTmNiaTh2SUhkeVlYQndaV1FnYVc0Z2MzUnlhV04wSUcxdlpHVWdZMjlrWlNCM2FHbGphQ0JrYjJWemJpZDBJR1JsWm1sdVpTQmhibmtnWjJ4dlltRnNjeTRnSUVsMEozTWdhVzV6YVdSbElHRmNiaTh2SUdaMWJtTjBhVzl1SUdKbFkyRjFjMlVnZEhKNUwyTmhkR05vWlhNZ1pHVnZjSFJwYldsNlpTQnBiaUJqWlhKMFlXbHVJR1Z1WjJsdVpYTXVYRzVjYm5aaGNpQmpZV05vWldSVFpYUlVhVzFsYjNWME8xeHVkbUZ5SUdOaFkyaGxaRU5zWldGeVZHbHRaVzkxZER0Y2JseHVablZ1WTNScGIyNGdaR1ZtWVhWc2RGTmxkRlJwYlc5MWRDZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0ozTmxkRlJwYldWdmRYUWdhR0Z6SUc1dmRDQmlaV1Z1SUdSbFptbHVaV1FuS1R0Y2JuMWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnS0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWTJ4bFlYSlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtKeWs3WEc1OVhHNG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdjMlYwVkdsdFpXOTFkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ1pHVm1ZWFZzZEZObGRGUnBiVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJ4bFlYSlVhVzFsYjNWMElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmtaV1poZFd4MFEyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lIMWNibjBnS0NrcFhHNW1kVzVqZEdsdmJpQnlkVzVVYVcxbGIzVjBLR1oxYmlrZ2UxeHVJQ0FnSUdsbUlDaGpZV05vWldSVFpYUlVhVzFsYjNWMElEMDlQU0J6WlhSVWFXMWxiM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZibTl5YldGc0lHVnVkbWx5YjIxbGJuUnpJR2x1SUhOaGJtVWdjMmwwZFdGMGFXOXVjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwVkdsdFpXOTFkQ2htZFc0c0lEQXBPMXh1SUNBZ0lIMWNiaUFnSUNBdkx5QnBaaUJ6WlhSVWFXMWxiM1YwSUhkaGMyNG5kQ0JoZG1GcGJHRmliR1VnWW5WMElIZGhjeUJzWVhSMFpYSWdaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDZ29ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnWkdWbVlYVnNkRk5sZEZScGJXOTFkQ0I4ZkNBaFkyRmphR1ZrVTJWMFZHbHRaVzkxZENrZ0ppWWdjMlYwVkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JUWlhSVWFXMWxiM1YwSUQwZ2MyVjBWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdMeThnZDJobGJpQjNhR1Z1SUhOdmJXVmliMlI1SUdoaGN5QnpZM0psZDJWa0lIZHBkR2dnYzJWMFZHbHRaVzkxZENCaWRYUWdibThnU1M1RkxpQnRZV1JrYm1WemMxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZENobWRXNHNJREFwTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhkbElHRnlaU0JwYmlCSkxrVXVJR0oxZENCMGFHVWdjMk55YVhCMElHaGhjeUJpWldWdUlHVjJZV3hsWkNCemJ5QkpMa1V1SUdSdlpYTnVKM1FnZEhKMWMzUWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdkMmhsYmlCallXeHNaV1FnYm05eWJXRnNiSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXTm9aV1JUWlhSVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z1puVnVMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLSFJvYVhNc0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibHh1ZlZ4dVpuVnVZM1JwYjI0Z2NuVnVRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWtnZTF4dUlDQWdJR2xtSUNoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR05zWldGeVZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwTzF4dUlDQWdJSDFjYmlBZ0lDQXZMeUJwWmlCamJHVmhjbFJwYldWdmRYUWdkMkZ6YmlkMElHRjJZV2xzWVdKc1pTQmlkWFFnZDJGeklHeGhkSFJsY2lCa1pXWnBibVZrWEc0Z0lDQWdhV1lnS0NoallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BUMDlJR1JsWm1GMWJIUkRiR1ZoY2xScGJXVnZkWFFnZkh3Z0lXTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDa2dKaVlnWTJ4bFlYSlVhVzFsYjNWMEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpFTnNaV0Z5VkdsdFpXOTFkQ0E5SUdOc1pXRnlWR2x0Wlc5MWREdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnNaV0Z5VkdsdFpXOTFkQ2h0WVhKclpYSXBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0F2THlCM2FHVnVJSGRvWlc0Z2MyOXRaV0p2WkhrZ2FHRnpJSE5qY21WM1pXUWdkMmwwYUNCelpYUlVhVzFsYjNWMElHSjFkQ0J1YnlCSkxrVXVJRzFoWkdSdVpYTnpYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkMlVnWVhKbElHbHVJRWt1UlM0Z1luVjBJSFJvWlNCelkzSnBjSFFnYUdGeklHSmxaVzRnWlhaaGJHVmtJSE52SUVrdVJTNGdaRzlsYzI0bmRDQWdkSEoxYzNRZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ2QyaGxiaUJqWVd4c1pXUWdibTl5YldGc2JIbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFF1WTJGc2JDaHVkV3hzTENCdFlYSnJaWElwTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklITmhiV1VnWVhNZ1lXSnZkbVVnWW5WMElIZG9aVzRnYVhRbmN5QmhJSFpsY25OcGIyNGdiMllnU1M1RkxpQjBhR0YwSUcxMWMzUWdhR0YyWlNCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZENCbWIzSWdKM1JvYVhNbkxDQm9iM0JtZFd4c2VTQnZkWElnWTI5dWRHVjRkQ0JqYjNKeVpXTjBJRzkwYUdWeWQybHpaU0JwZENCM2FXeHNJSFJvY205M0lHRWdaMnh2WW1Gc0lHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTI5dFpTQjJaWEp6YVc5dWN5QnZaaUJKTGtVdUlHaGhkbVVnWkdsbVptVnlaVzUwSUhKMWJHVnpJR1p2Y2lCamJHVmhjbFJwYldWdmRYUWdkbk1nYzJWMFZHbHRaVzkxZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkVOc1pXRnlWR2x0Wlc5MWRDNWpZV3hzS0hSb2FYTXNJRzFoY210bGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmx4dVhHNTlYRzUyWVhJZ2NYVmxkV1VnUFNCYlhUdGNiblpoY2lCa2NtRnBibWx1WnlBOUlHWmhiSE5sTzF4dWRtRnlJR04xY25KbGJuUlJkV1YxWlR0Y2JuWmhjaUJ4ZFdWMVpVbHVaR1Y0SUQwZ0xURTdYRzVjYm1aMWJtTjBhVzl1SUdOc1pXRnVWWEJPWlhoMFZHbGpheWdwSUh0Y2JpQWdJQ0JwWmlBb0lXUnlZV2x1YVc1bklIeDhJQ0ZqZFhKeVpXNTBVWFZsZFdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUgxY2JpQWdJQ0JrY21GcGJtbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBVWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsSUQwZ1kzVnljbVZ1ZEZGMVpYVmxMbU52Ym1OaGRDaHhkV1YxWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lHUnlZV2x1VVhWbGRXVW9LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHUnlZV2x1VVhWbGRXVW9LU0I3WEc0Z0lDQWdhV1lnS0dSeVlXbHVhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUhScGJXVnZkWFFnUFNCeWRXNVVhVzFsYjNWMEtHTnNaV0Z1VlhCT1pYaDBWR2xqYXlrN1hHNGdJQ0FnWkhKaGFXNXBibWNnUFNCMGNuVmxPMXh1WEc0Z0lDQWdkbUZ5SUd4bGJpQTlJSEYxWlhWbExteGxibWQwYUR0Y2JpQWdJQ0IzYUdsc1pTaHNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxJRDBnY1hWbGRXVTdYRzRnSUNBZ0lDQWdJSEYxWlhWbElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzNGMVpYVmxTVzVrWlhnZ1BDQnNaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVVhWbGRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVWFZsZFdWYmNYVmxkV1ZKYm1SbGVGMHVjblZ1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dUlDQWdJQ0FnSUNCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZlZ4dUlDQWdJR04xY25KbGJuUlJkV1YxWlNBOUlHNTFiR3c3WEc0Z0lDQWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCeWRXNURiR1ZoY2xScGJXVnZkWFFvZEdsdFpXOTFkQ2s3WEc1OVhHNWNibkJ5YjJObGMzTXVibVY0ZEZScFkyc2dQU0JtZFc1amRHbHZiaUFvWm5WdUtTQjdYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQnVaWGNnUVhKeVlYa29ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Uc2dhU0E4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lYSm5jMXRwSUMwZ01WMGdQU0JoY21kMWJXVnVkSE5iYVYwN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY1hWbGRXVXVjSFZ6YUNodVpYY2dTWFJsYlNobWRXNHNJR0Z5WjNNcEtUdGNiaUFnSUNCcFppQW9jWFZsZFdVdWJHVnVaM1JvSUQwOVBTQXhJQ1ltSUNGa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlkVzVVYVcxbGIzVjBLR1J5WVdsdVVYVmxkV1VwTzF4dUlDQWdJSDFjYm4wN1hHNWNiaTh2SUhZNElHeHBhMlZ6SUhCeVpXUnBZM1JwWW14bElHOWlhbVZqZEhOY2JtWjFibU4wYVc5dUlFbDBaVzBvWm5WdUxDQmhjbkpoZVNrZ2UxeHVJQ0FnSUhSb2FYTXVablZ1SUQwZ1puVnVPMXh1SUNBZ0lIUm9hWE11WVhKeVlYa2dQU0JoY25KaGVUdGNibjFjYmtsMFpXMHVjSEp2ZEc5MGVYQmxMbkoxYmlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJpNWhjSEJzZVNodWRXeHNMQ0IwYUdsekxtRnljbUY1S1R0Y2JuMDdYRzV3Y205alpYTnpMblJwZEd4bElEMGdKMkp5YjNkelpYSW5PMXh1Y0hKdlkyVnpjeTVpY205M2MyVnlJRDBnZEhKMVpUdGNibkJ5YjJObGMzTXVaVzUySUQwZ2UzMDdYRzV3Y205alpYTnpMbUZ5WjNZZ1BTQmJYVHRjYm5CeWIyTmxjM011ZG1WeWMybHZiaUE5SUNjbk95QXZMeUJsYlhCMGVTQnpkSEpwYm1jZ2RHOGdZWFp2YVdRZ2NtVm5aWGh3SUdsemMzVmxjMXh1Y0hKdlkyVnpjeTUyWlhKemFXOXVjeUE5SUh0OU8xeHVYRzVtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMzFjYmx4dWNISnZZMlZ6Y3k1dmJpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtRmtaRXhwYzNSbGJtVnlJRDBnYm05dmNEdGNibkJ5YjJObGMzTXViMjVqWlNBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05bVppQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlV4cGMzUmxibVZ5SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011Y21WdGIzWmxRV3hzVEdsemRHVnVaWEp6SUQwZ2JtOXZjRHRjYm5CeWIyTmxjM011WlcxcGRDQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuQnlaWEJsYm1STWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5CeVpYQmxibVJQYm1ObFRHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dVhHNXdjbTlqWlhOekxteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVJQ2h1WVcxbEtTQjdJSEpsZEhWeWJpQmJYU0I5WEc1Y2JuQnliMk5sYzNNdVltbHVaR2x1WnlBOUlHWjFibU4wYVc5dUlDaHVZVzFsS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R3Y205alpYTnpMbUpwYm1ScGJtY2dhWE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1ZlR0Y2JseHVjSEp2WTJWemN5NWpkMlFnUFNCbWRXNWpkR2x2YmlBb0tTQjdJSEpsZEhWeWJpQW5MeWNnZlR0Y2JuQnliMk5sYzNNdVkyaGthWElnUFNCbWRXNWpkR2x2YmlBb1pHbHlLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHdjbTlqWlhOekxtTm9aR2x5SUdseklHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JuMDdYRzV3Y205alpYTnpMblZ0WVhOcklEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUF3T3lCOU8xeHVJaXdpTHlvaFhHNGdJQ29nY0hKeVhHNGdJQ29nS0dNcElESXdNVE1nVW05a0lGWmhaMmNnUEhKdlpFQjJZV2RuTG05eVp6NWNiaUFnS2lCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNuWmhaMmN2Y0hKeVhHNGdJQ29nVEdsalpXNXpaVG9nVFVsVVhHNGdJQ292WEc1Y2JpaG1kVzVqZEdsdmJpQW9ibUZ0WlN3Z1kyOXVkR1Y0ZEN3Z1pHVm1hVzVwZEdsdmJpa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHMXZaSFZzWlNBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCdGIyUjFiR1V1Wlhod2IzSjBjeWxjYmlBZ0lDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHUmxabWx1YVhScGIyNG9LVnh1SUNCbGJITmxYRzRnSUNBZ1kyOXVkR1Y0ZEZ0dVlXMWxYU0E5SUdSbFptbHVhWFJwYjI0b0tWeHVmU2tvSjNCeWNpY3NJSFJvYVhNc0lHWjFibU4wYVc5dUtDa2dlMXh1WEc0Z0lIWmhjaUJ6WlhSUWNtOXdaWEowZVNBOUlIUjVjR1Z2WmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa2dQVDBnSjJaMWJtTjBhVzl1SjF4dUlDQWdJQ0FnUHlCbWRXNWpkR2x2YmlBb2IySnFMQ0JyWlhrc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2IySnFMQ0JyWlhrc0lHOXdkR2x2Ym5NcFhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOWlhbHh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0E2SUdaMWJtTjBhVzl1SUNodlltb3NJR3RsZVN3Z2IzQjBhVzl1Y3lrZ2V5QXZMeUE4SUdWek5WeHVJQ0FnSUNBZ0lDQWdJRzlpYWx0clpYbGRJRDBnYjNCMGFXOXVjeTUyWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbXBjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnTENCdFlXdGxUM0IwYVc5dWN5QTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2IyOGdQU0IwZVhCbGIyWWdiM0IwYVc5dWN5QTlQU0FuYjJKcVpXTjBKMXh1SUNBZ0lDQWdJQ0FnSUN3Z2IzTWdQU0FoYjI4Z0ppWWdkSGx3Wlc5bUlHOXdkR2x2Ym5NZ1BUMGdKM04wY21sdVp5ZGNiaUFnSUNBZ0lDQWdJQ0FzSUc5d0lEMGdablZ1WTNScGIyNGdLSEFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzl2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlBaElXOXdkR2x2Ym5OYmNGMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJRzl6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHOXdkR2x2Ym5NdWFXNWtaWGhQWmlod1d6QmRLU0ErSUMweFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1VnSUNBNklHOXdLQ2RsYm5WdFpYSmhZbXhsSnlsY2JpQWdJQ0FnSUNBZ0lDQXNJR052Ym1acFozVnlZV0pzWlNBNklHOXdLQ2RqYjI1bWFXZDFjbUZpYkdVbktWeHVJQ0FnSUNBZ0lDQWdJQ3dnZDNKcGRHRmliR1VnSUNBZ0lEb2diM0FvSjNkeWFYUmhZbXhsSnlsY2JpQWdJQ0FnSUNBZ0lDQXNJSFpoYkhWbElDQWdJQ0FnSUNBNklIWmhiSFZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUN3Z2NISnlJRDBnWm5WdVkzUnBiMjRnS0c5aWFpd2dhMlY1TENCMllXeDFaU3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdhMXh1WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk1nUFNCdFlXdGxUM0IwYVc5dWN5aDJZV3gxWlN3Z2IzQjBhVzl1Y3lsY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR3RsZVNBOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9heUJwYmlCclpYa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hyWlhrc0lHc3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVkbUZzZFdVZ1BTQnJaWGxiYTExY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFVISnZjR1Z5ZEhrb2IySnFMQ0JyTENCdmNIUnBiMjV6S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2IySnFYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWMFVISnZjR1Z5ZEhrb2IySnFMQ0JyWlhrc0lHOXdkR2x2Ym5NcFhHNGdJQ0FnSUNCOVhHNWNiaUFnY21WMGRYSnVJSEJ5Y2x4dWZTa2lMQ0l2S2lCbGMyeHBiblF0WkdsellXSnNaU0J1YjJSbEwyNXZMV1JsY0hKbFkyRjBaV1F0WVhCcElDb3ZYRzUyWVhJZ1luVm1abVZ5SUQwZ2NtVnhkV2x5WlNnblluVm1abVZ5SnlsY2JuWmhjaUJDZFdabVpYSWdQU0JpZFdabVpYSXVRblZtWm1WeVhHNWNiaTh2SUdGc2RHVnlibUYwYVhabElIUnZJSFZ6YVc1bklFOWlhbVZqZEM1clpYbHpJR1p2Y2lCdmJHUWdZbkp2ZDNObGNuTmNibVoxYm1OMGFXOXVJR052Y0hsUWNtOXdjeUFvYzNKakxDQmtjM1FwSUh0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlITnlZeWtnZTF4dUlDQWdJR1J6ZEZ0clpYbGRJRDBnYzNKalcydGxlVjFjYmlBZ2ZWeHVmVnh1YVdZZ0tFSjFabVpsY2k1bWNtOXRJQ1ltSUVKMVptWmxjaTVoYkd4dll5QW1KaUJDZFdabVpYSXVZV3hzYjJOVmJuTmhabVVnSmlZZ1FuVm1abVZ5TG1Gc2JHOWpWVzV6WVdabFUyeHZkeWtnZTF4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHSjFabVpsY2x4dWZTQmxiSE5sSUh0Y2JpQWdMeThnUTI5d2VTQndjbTl3WlhKMGFXVnpJR1p5YjIwZ2NtVnhkV2x5WlNnblluVm1abVZ5SnlsY2JpQWdZMjl3ZVZCeWIzQnpLR0oxWm1abGNpd2daWGh3YjNKMGN5bGNiaUFnWlhod2IzSjBjeTVDZFdabVpYSWdQU0JUWVdabFFuVm1abVZ5WEc1OVhHNWNibVoxYm1OMGFXOXVJRk5oWm1WQ2RXWm1aWElnS0dGeVp5d2daVzVqYjJScGJtZFBjazltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhKbGRIVnliaUJDZFdabVpYSW9ZWEpuTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNiaTh2SUVOdmNIa2djM1JoZEdsaklHMWxkR2h2WkhNZ1puSnZiU0JDZFdabVpYSmNibU52Y0hsUWNtOXdjeWhDZFdabVpYSXNJRk5oWm1WQ2RXWm1aWElwWEc1Y2JsTmhabVZDZFdabVpYSXVabkp2YlNBOUlHWjFibU4wYVc5dUlDaGhjbWNzSUdWdVkyOWthVzVuVDNKUFptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RCY21kMWJXVnVkQ0J0ZFhOMElHNXZkQ0JpWlNCaElHNTFiV0psY2ljcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUVKMVptWmxjaWhoY21jc0lHVnVZMjlrYVc1blQzSlBabVp6WlhRc0lHeGxibWQwYUNsY2JuMWNibHh1VTJGbVpVSjFabVpsY2k1aGJHeHZZeUE5SUdaMWJtTjBhVzl1SUNoemFYcGxMQ0JtYVd4c0xDQmxibU52WkdsdVp5a2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlITnBlbVVnSVQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJRzUxYldKbGNpY3BYRzRnSUgxY2JpQWdkbUZ5SUdKMVppQTlJRUoxWm1abGNpaHphWHBsS1Z4dUlDQnBaaUFvWm1sc2JDQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJR0oxWmk1bWFXeHNLR1pwYkd3c0lHVnVZMjlrYVc1bktWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JpZFdZdVptbHNiQ2htYVd4c0tWeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCaWRXWXVabWxzYkNnd0tWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWRXWmNibjFjYmx4dVUyRm1aVUoxWm1abGNpNWhiR3h2WTFWdWMyRm1aU0E5SUdaMWJtTjBhVzl1SUNoemFYcGxLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdjMmw2WlNBaFBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RCY21kMWJXVnVkQ0J0ZFhOMElHSmxJR0VnYm5WdFltVnlKeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUtITnBlbVVwWEc1OVhHNWNibE5oWm1WQ2RXWm1aWEl1WVd4c2IyTlZibk5oWm1WVGJHOTNJRDBnWm5WdVkzUnBiMjRnS0hOcGVtVXBJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnphWHBsSUNFOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMEZ5WjNWdFpXNTBJRzExYzNRZ1ltVWdZU0J1ZFcxaVpYSW5LVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1ptWlhJdVUyeHZkMEoxWm1abGNpaHphWHBsS1Z4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFcHZlV1Z1ZEN3Z1NXNWpMaUJoYm1RZ2IzUm9aWElnVG05a1pTQmpiMjUwY21saWRYUnZjbk11WEc0dkwxeHVMeThnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0ZjYmk4dklHTnZjSGtnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmtiMk4xYldWdWRHRjBhVzl1SUdacGJHVnpJQ2gwYUdWY2JpOHZJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd3Z2FXNGdkR2hsSUZOdlpuUjNZWEpsSUhkcGRHaHZkWFFnY21WemRISnBZM1JwYjI0c0lHbHVZMngxWkdsdVoxeHVMeThnZDJsMGFHOTFkQ0JzYVcxcGRHRjBhVzl1SUhSb1pTQnlhV2RvZEhNZ2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xGeHVMeThnWkdsemRISnBZblYwWlN3Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZEZ4dUx5OGdjR1Z5YzI5dWN5QjBieUIzYUc5dElIUm9aU0JUYjJaMGQyRnlaU0JwY3lCbWRYSnVhWE5vWldRZ2RHOGdaRzhnYzI4c0lITjFZbXBsWTNRZ2RHOGdkR2hsWEc0dkx5Qm1iMnhzYjNkcGJtY2dZMjl1WkdsMGFXOXVjenBjYmk4dlhHNHZMeUJVYUdVZ1lXSnZkbVVnWTI5d2VYSnBaMmgwSUc1dmRHbGpaU0JoYm1RZ2RHaHBjeUJ3WlhKdGFYTnphVzl1SUc1dmRHbGpaU0J6YUdGc2JDQmlaU0JwYm1Oc2RXUmxaRnh1THk4Z2FXNGdZV3hzSUdOdmNHbGxjeUJ2Y2lCemRXSnpkR0Z1ZEdsaGJDQndiM0owYVc5dWN5QnZaaUIwYUdVZ1UyOW1kSGRoY21VdVhHNHZMMXh1THk4Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFUxeHVMeThnVDFJZ1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJseHVMeThnVFVWU1EwaEJUbFJCUWtsTVNWUlpMQ0JHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGx4dUx5OGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNYRzR2THlCRVFVMUJSMFZUSUU5U0lFOVVTRVZTSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUpjYmk4dklFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTENCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVmNiaTh2SUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1ZG1GeUlFSjFabVpsY2lBOUlISmxjWFZwY21Vb0ozTmhabVV0WW5WbVptVnlKeWt1UW5WbVptVnlPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJwYzBWdVkyOWthVzVuSUQwZ1FuVm1abVZ5TG1selJXNWpiMlJwYm1jZ2ZId2dablZ1WTNScGIyNGdLR1Z1WTI5a2FXNW5LU0I3WEc0Z0lHVnVZMjlrYVc1bklEMGdKeWNnS3lCbGJtTnZaR2x1Wnp0Y2JpQWdjM2RwZEdOb0lDaGxibU52WkdsdVp5QW1KaUJsYm1OdlpHbHVaeTUwYjB4dmQyVnlRMkZ6WlNncEtTQjdYRzRnSUNBZ1kyRnpaU0FuYUdWNEp6cGpZWE5sSUNkMWRHWTRKenBqWVhObElDZDFkR1l0T0NjNlkyRnpaU0FuWVhOamFXa25PbU5oYzJVZ0oySnBibUZ5ZVNjNlkyRnpaU0FuWW1GelpUWTBKenBqWVhObElDZDFZM015SnpwallYTmxJQ2QxWTNNdE1pYzZZMkZ6WlNBbmRYUm1NVFpzWlNjNlkyRnpaU0FuZFhSbUxURTJiR1VuT21OaGMyVWdKM0poZHljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJmYm05eWJXRnNhWHBsUlc1amIyUnBibWNvWlc1aktTQjdYRzRnSUdsbUlDZ2haVzVqS1NCeVpYUjFjbTRnSjNWMFpqZ25PMXh1SUNCMllYSWdjbVYwY21sbFpEdGNiaUFnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNCemQybDBZMmdnS0dWdVl5a2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1PQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZDFkR1l0T0NjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBbmRYUm1PQ2M3WEc0Z0lDQWdJQ0JqWVhObElDZDFZM015SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3kweUp6cGNiaUFnSUNBZ0lHTmhjMlVnSjNWMFpqRTJiR1VuT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTFRFMmJHVW5PbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKM1YwWmpFMmJHVW5PMXh1SUNBZ0lDQWdZMkZ6WlNBbmJHRjBhVzR4SnpwY2JpQWdJQ0FnSUdOaGMyVWdKMkpwYm1GeWVTYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5iR0YwYVc0eEp6dGNiaUFnSUNBZ0lHTmhjMlVnSjJKaGMyVTJOQ2M2WEc0Z0lDQWdJQ0JqWVhObElDZGhjMk5wYVNjNlhHNGdJQ0FnSUNCallYTmxJQ2RvWlhnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNWpPMXh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGRISnBaV1FwSUhKbGRIVnlianNnTHk4Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBZ0lHVnVZeUE5SUNnbkp5QXJJR1Z1WXlrdWRHOU1iM2RsY2tOaGMyVW9LVHRjYmlBZ0lDQWdJQ0FnY21WMGNtbGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzR2THlCRWJ5QnViM1FnWTJGamFHVWdZRUoxWm1abGNpNXBjMFZ1WTI5a2FXNW5ZQ0IzYUdWdUlHTm9aV05yYVc1bklHVnVZMjlrYVc1bklHNWhiV1Z6SUdGeklITnZiV1ZjYmk4dklHMXZaSFZzWlhNZ2JXOXVhMlY1TFhCaGRHTm9JR2wwSUhSdklITjFjSEJ2Y25RZ1lXUmthWFJwYjI1aGJDQmxibU52WkdsdVozTmNibVoxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVVZ1WTI5a2FXNW5LR1Z1WXlrZ2UxeHVJQ0IyWVhJZ2JtVnVZeUE5SUY5dWIzSnRZV3hwZW1WRmJtTnZaR2x1WnlobGJtTXBPMXh1SUNCcFppQW9kSGx3Wlc5bUlHNWxibU1nSVQwOUlDZHpkSEpwYm1jbklDWW1JQ2hDZFdabVpYSXVhWE5GYm1OdlpHbHVaeUE5UFQwZ2FYTkZibU52WkdsdVp5QjhmQ0FoYVhORmJtTnZaR2x1WnlobGJtTXBLU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RWYm10dWIzZHVJR1Z1WTI5a2FXNW5PaUFuSUNzZ1pXNWpLVHRjYmlBZ2NtVjBkWEp1SUc1bGJtTWdmSHdnWlc1ak8xeHVmVnh1WEc0dkx5QlRkSEpwYm1kRVpXTnZaR1Z5SUhCeWIzWnBaR1Z6SUdGdUlHbHVkR1Z5Wm1GalpTQm1iM0lnWldabWFXTnBaVzUwYkhrZ2MzQnNhWFIwYVc1bklHRWdjMlZ5YVdWeklHOW1YRzR2THlCaWRXWm1aWEp6SUdsdWRHOGdZU0J6WlhKcFpYTWdiMllnU2xNZ2MzUnlhVzVuY3lCM2FYUm9iM1YwSUdKeVpXRnJhVzVuSUdGd1lYSjBJRzExYkhScExXSjVkR1ZjYmk4dklHTm9ZWEpoWTNSbGNuTXVYRzVsZUhCdmNuUnpMbE4wY21sdVowUmxZMjlrWlhJZ1BTQlRkSEpwYm1kRVpXTnZaR1Z5TzF4dVpuVnVZM1JwYjI0Z1UzUnlhVzVuUkdWamIyUmxjaWhsYm1OdlpHbHVaeWtnZTF4dUlDQjBhR2x6TG1WdVkyOWthVzVuSUQwZ2JtOXliV0ZzYVhwbFJXNWpiMlJwYm1jb1pXNWpiMlJwYm1jcE8xeHVJQ0IyWVhJZ2JtSTdYRzRnSUhOM2FYUmphQ0FvZEdocGN5NWxibU52WkdsdVp5a2dlMXh1SUNBZ0lHTmhjMlVnSjNWMFpqRTJiR1VuT2x4dUlDQWdJQ0FnZEdocGN5NTBaWGgwSUQwZ2RYUm1NVFpVWlhoME8xeHVJQ0FnSUNBZ2RHaHBjeTVsYm1RZ1BTQjFkR1l4TmtWdVpEdGNiaUFnSUNBZ0lHNWlJRDBnTkR0Y2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjNWMFpqZ25PbHh1SUNBZ0lDQWdkR2hwY3k1bWFXeHNUR0Z6ZENBOUlIVjBaamhHYVd4c1RHRnpkRHRjYmlBZ0lDQWdJRzVpSUQwZ05EdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oySmhjMlUyTkNjNlhHNGdJQ0FnSUNCMGFHbHpMblJsZUhRZ1BTQmlZWE5sTmpSVVpYaDBPMXh1SUNBZ0lDQWdkR2hwY3k1bGJtUWdQU0JpWVhObE5qUkZibVE3WEc0Z0lDQWdJQ0J1WWlBOUlETTdYRzRnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdkR2hwY3k1M2NtbDBaU0E5SUhOcGJYQnNaVmR5YVhSbE8xeHVJQ0FnSUNBZ2RHaHBjeTVsYm1RZ1BTQnphVzF3YkdWRmJtUTdYRzRnSUNBZ0lDQnlaWFIxY200N1hHNGdJSDFjYmlBZ2RHaHBjeTVzWVhOMFRtVmxaQ0E5SURBN1hHNGdJSFJvYVhNdWJHRnpkRlJ2ZEdGc0lEMGdNRHRjYmlBZ2RHaHBjeTVzWVhOMFEyaGhjaUE5SUVKMVptWmxjaTVoYkd4dlkxVnVjMkZtWlNodVlpazdYRzU5WEc1Y2JsTjBjbWx1WjBSbFkyOWtaWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxJRDBnWm5WdVkzUnBiMjRnS0dKMVppa2dlMXh1SUNCcFppQW9ZblZtTG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlDY25PMXh1SUNCMllYSWdjanRjYmlBZ2RtRnlJR2s3WEc0Z0lHbG1JQ2gwYUdsekxteGhjM1JPWldWa0tTQjdYRzRnSUNBZ2NpQTlJSFJvYVhNdVptbHNiRXhoYzNRb1luVm1LVHRjYmlBZ0lDQnBaaUFvY2lBOVBUMGdkVzVrWldacGJtVmtLU0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdhU0E5SUhSb2FYTXViR0Z6ZEU1bFpXUTdYRzRnSUNBZ2RHaHBjeTVzWVhOMFRtVmxaQ0E5SURBN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2FTQTlJREE3WEc0Z0lIMWNiaUFnYVdZZ0tHa2dQQ0JpZFdZdWJHVnVaM1JvS1NCeVpYUjFjbTRnY2lBL0lISWdLeUIwYUdsekxuUmxlSFFvWW5WbUxDQnBLU0E2SUhSb2FYTXVkR1Y0ZENoaWRXWXNJR2twTzF4dUlDQnlaWFIxY200Z2NpQjhmQ0FuSnp0Y2JuMDdYRzVjYmxOMGNtbHVaMFJsWTI5a1pYSXVjSEp2ZEc5MGVYQmxMbVZ1WkNBOUlIVjBaamhGYm1RN1hHNWNiaTh2SUZKbGRIVnlibk1nYjI1c2VTQmpiMjF3YkdWMFpTQmphR0Z5WVdOMFpYSnpJR2x1SUdFZ1FuVm1abVZ5WEc1VGRISnBibWRFWldOdlpHVnlMbkJ5YjNSdmRIbHdaUzUwWlhoMElEMGdkWFJtT0ZSbGVIUTdYRzVjYmk4dklFRjBkR1Z0Y0hSeklIUnZJR052YlhCc1pYUmxJR0VnY0dGeWRHbGhiQ0J1YjI0dFZWUkdMVGdnWTJoaGNtRmpkR1Z5SUhWemFXNW5JR0o1ZEdWeklHWnliMjBnWVNCQ2RXWm1aWEpjYmxOMGNtbHVaMFJsWTI5a1pYSXVjSEp2ZEc5MGVYQmxMbVpwYkd4TVlYTjBJRDBnWm5WdVkzUnBiMjRnS0dKMVppa2dlMXh1SUNCcFppQW9kR2hwY3k1c1lYTjBUbVZsWkNBOFBTQmlkV1l1YkdWdVozUm9LU0I3WEc0Z0lDQWdZblZtTG1OdmNIa29kR2hwY3k1c1lYTjBRMmhoY2l3Z2RHaHBjeTVzWVhOMFZHOTBZV3dnTFNCMGFHbHpMbXhoYzNST1pXVmtMQ0F3TENCMGFHbHpMbXhoYzNST1pXVmtLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVzWVhOMFEyaGhjaTUwYjFOMGNtbHVaeWgwYUdsekxtVnVZMjlrYVc1bkxDQXdMQ0IwYUdsekxteGhjM1JVYjNSaGJDazdYRzRnSUgxY2JpQWdZblZtTG1OdmNIa29kR2hwY3k1c1lYTjBRMmhoY2l3Z2RHaHBjeTVzWVhOMFZHOTBZV3dnTFNCMGFHbHpMbXhoYzNST1pXVmtMQ0F3TENCaWRXWXViR1Z1WjNSb0tUdGNiaUFnZEdocGN5NXNZWE4wVG1WbFpDQXRQU0JpZFdZdWJHVnVaM1JvTzF4dWZUdGNibHh1THk4Z1EyaGxZMnR6SUhSb1pTQjBlWEJsSUc5bUlHRWdWVlJHTFRnZ1lubDBaU3dnZDJobGRHaGxjaUJwZENkeklFRlRRMGxKTENCaElHeGxZV1JwYm1jZ1lubDBaU3dnYjNJZ1lWeHVMeThnWTI5dWRHbHVkV0YwYVc5dUlHSjVkR1V1SUVsbUlHRnVJR2x1ZG1Gc2FXUWdZbmwwWlNCcGN5QmtaWFJsWTNSbFpDd2dMVElnYVhNZ2NtVjBkWEp1WldRdVhHNW1kVzVqZEdsdmJpQjFkR1k0UTJobFkydENlWFJsS0dKNWRHVXBJSHRjYmlBZ2FXWWdLR0o1ZEdVZ1BEMGdNSGczUmlrZ2NtVjBkWEp1SURBN1pXeHpaU0JwWmlBb1lubDBaU0ErUGlBMUlEMDlQU0F3ZURBMktTQnlaWFIxY200Z01qdGxiSE5sSUdsbUlDaGllWFJsSUQ0K0lEUWdQVDA5SURCNE1FVXBJSEpsZEhWeWJpQXpPMlZzYzJVZ2FXWWdLR0o1ZEdVZ1BqNGdNeUE5UFQwZ01IZ3hSU2tnY21WMGRYSnVJRFE3WEc0Z0lISmxkSFZ5YmlCaWVYUmxJRDQrSURZZ1BUMDlJREI0TURJZ1B5QXRNU0E2SUMweU8xeHVmVnh1WEc0dkx5QkRhR1ZqYTNNZ1lYUWdiVzl6ZENBeklHSjVkR1Z6SUdGMElIUm9aU0JsYm1RZ2IyWWdZU0JDZFdabVpYSWdhVzRnYjNKa1pYSWdkRzhnWkdWMFpXTjBJR0Z1WEc0dkx5QnBibU52YlhCc1pYUmxJRzExYkhScExXSjVkR1VnVlZSR0xUZ2dZMmhoY21GamRHVnlMaUJVYUdVZ2RHOTBZV3dnYm5WdFltVnlJRzltSUdKNWRHVnpJQ2d5TENBekxDQnZjaUEwS1Z4dUx5OGdibVZsWkdWa0lIUnZJR052YlhCc1pYUmxJSFJvWlNCVlZFWXRPQ0JqYUdGeVlXTjBaWElnS0dsbUlHRndjR3hwWTJGaWJHVXBJR0Z5WlNCeVpYUjFjbTVsWkM1Y2JtWjFibU4wYVc5dUlIVjBaamhEYUdWamEwbHVZMjl0Y0d4bGRHVW9jMlZzWml3Z1luVm1MQ0JwS1NCN1hHNGdJSFpoY2lCcUlEMGdZblZtTG14bGJtZDBhQ0F0SURFN1hHNGdJR2xtSUNocUlEd2dhU2tnY21WMGRYSnVJREE3WEc0Z0lIWmhjaUJ1WWlBOUlIVjBaamhEYUdWamEwSjVkR1VvWW5WbVcycGRLVHRjYmlBZ2FXWWdLRzVpSUQ0OUlEQXBJSHRjYmlBZ0lDQnBaaUFvYm1JZ1BpQXdLU0J6Wld4bUxteGhjM1JPWldWa0lEMGdibUlnTFNBeE8xeHVJQ0FnSUhKbGRIVnliaUJ1WWp0Y2JpQWdmVnh1SUNCcFppQW9MUzFxSUR3Z2FTQjhmQ0J1WWlBOVBUMGdMVElwSUhKbGRIVnliaUF3TzF4dUlDQnVZaUE5SUhWMFpqaERhR1ZqYTBKNWRHVW9ZblZtVzJwZEtUdGNiaUFnYVdZZ0tHNWlJRDQ5SURBcElIdGNiaUFnSUNCcFppQW9ibUlnUGlBd0tTQnpaV3htTG14aGMzUk9aV1ZrSUQwZ2JtSWdMU0F5TzF4dUlDQWdJSEpsZEhWeWJpQnVZanRjYmlBZ2ZWeHVJQ0JwWmlBb0xTMXFJRHdnYVNCOGZDQnVZaUE5UFQwZ0xUSXBJSEpsZEhWeWJpQXdPMXh1SUNCdVlpQTlJSFYwWmpoRGFHVmphMEo1ZEdVb1luVm1XMnBkS1R0Y2JpQWdhV1lnS0c1aUlENDlJREFwSUh0Y2JpQWdJQ0JwWmlBb2JtSWdQaUF3S1NCN1hHNGdJQ0FnSUNCcFppQW9ibUlnUFQwOUlESXBJRzVpSUQwZ01EdGxiSE5sSUhObGJHWXViR0Z6ZEU1bFpXUWdQU0J1WWlBdElETTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1WWp0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnTUR0Y2JuMWNibHh1THk4Z1ZtRnNhV1JoZEdWeklHRnpJRzFoYm5rZ1kyOXVkR2x1ZFdGMGFXOXVJR0o1ZEdWeklHWnZjaUJoSUcxMWJIUnBMV0o1ZEdVZ1ZWUkdMVGdnWTJoaGNtRmpkR1Z5SUdGelhHNHZMeUJ1WldWa1pXUWdiM0lnWVhKbElHRjJZV2xzWVdKc1pTNGdTV1lnZDJVZ2MyVmxJR0VnYm05dUxXTnZiblJwYm5WaGRHbHZiaUJpZVhSbElIZG9aWEpsSUhkbElHVjRjR1ZqZEZ4dUx5OGdiMjVsTENCM1pTQmNJbkpsY0d4aFkyVmNJaUIwYUdVZ2RtRnNhV1JoZEdWa0lHTnZiblJwYm5WaGRHbHZiaUJpZVhSbGN5QjNaU2QyWlNCelpXVnVJSE52SUdaaGNpQjNhWFJvWEc0dkx5QmhJSE5wYm1kc1pTQlZWRVl0T0NCeVpYQnNZV05sYldWdWRDQmphR0Z5WVdOMFpYSWdLQ2RjWEhWbVptWmtKeWtzSUhSdklHMWhkR05vSUhZNEozTWdWVlJHTFRnZ1pHVmpiMlJwYm1kY2JpOHZJR0psYUdGMmFXOXlMaUJVYUdVZ1kyOXVkR2x1ZFdGMGFXOXVJR0o1ZEdVZ1kyaGxZMnNnYVhNZ2FXNWpiSFZrWldRZ2RHaHlaV1VnZEdsdFpYTWdhVzRnZEdobElHTmhjMlZjYmk4dklIZG9aWEpsSUdGc2JDQnZaaUIwYUdVZ1kyOXVkR2x1ZFdGMGFXOXVJR0o1ZEdWeklHWnZjaUJoSUdOb1lYSmhZM1JsY2lCbGVHbHpkQ0JwYmlCMGFHVWdjMkZ0WlNCaWRXWm1aWEl1WEc0dkx5QkpkQ0JwY3lCaGJITnZJR1J2Ym1VZ2RHaHBjeUIzWVhrZ1lYTWdZU0J6YkdsbmFIUWdjR1Z5Wm05eWJXRnVZMlVnYVc1amNtVmhjMlVnYVc1emRHVmhaQ0J2WmlCMWMybHVaeUJoWEc0dkx5QnNiMjl3TGx4dVpuVnVZM1JwYjI0Z2RYUm1PRU5vWldOclJYaDBjbUZDZVhSbGN5aHpaV3htTENCaWRXWXNJSEFwSUh0Y2JpQWdhV1lnS0NoaWRXWmJNRjBnSmlBd2VFTXdLU0FoUFQwZ01IZzRNQ2tnZTF4dUlDQWdJSE5sYkdZdWJHRnpkRTVsWldRZ1BTQXdPMXh1SUNBZ0lISmxkSFZ5YmlBblhGeDFabVptWkNjN1hHNGdJSDFjYmlBZ2FXWWdLSE5sYkdZdWJHRnpkRTVsWldRZ1BpQXhJQ1ltSUdKMVppNXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdhV1lnS0NoaWRXWmJNVjBnSmlBd2VFTXdLU0FoUFQwZ01IZzRNQ2tnZTF4dUlDQWdJQ0FnYzJWc1ppNXNZWE4wVG1WbFpDQTlJREU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMXhjZFdabVptUW5PMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jMlZzWmk1c1lYTjBUbVZsWkNBK0lESWdKaVlnWW5WbUxteGxibWQwYUNBK0lESXBJSHRjYmlBZ0lDQWdJR2xtSUNnb1luVm1XekpkSUNZZ01IaERNQ2tnSVQwOUlEQjRPREFwSUh0Y2JpQWdJQ0FnSUNBZ2MyVnNaaTVzWVhOMFRtVmxaQ0E5SURJN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBblhGeDFabVptWkNjN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JpOHZJRUYwZEdWdGNIUnpJSFJ2SUdOdmJYQnNaWFJsSUdFZ2JYVnNkR2t0WW5sMFpTQlZWRVl0T0NCamFHRnlZV04wWlhJZ2RYTnBibWNnWW5sMFpYTWdabkp2YlNCaElFSjFabVpsY2k1Y2JtWjFibU4wYVc5dUlIVjBaamhHYVd4c1RHRnpkQ2hpZFdZcElIdGNiaUFnZG1GeUlIQWdQU0IwYUdsekxteGhjM1JVYjNSaGJDQXRJSFJvYVhNdWJHRnpkRTVsWldRN1hHNGdJSFpoY2lCeUlEMGdkWFJtT0VOb1pXTnJSWGgwY21GQ2VYUmxjeWgwYUdsekxDQmlkV1lzSUhBcE8xeHVJQ0JwWmlBb2NpQWhQVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnY2p0Y2JpQWdhV1lnS0hSb2FYTXViR0Z6ZEU1bFpXUWdQRDBnWW5WbUxteGxibWQwYUNrZ2UxeHVJQ0FnSUdKMVppNWpiM0I1S0hSb2FYTXViR0Z6ZEVOb1lYSXNJSEFzSURBc0lIUm9hWE11YkdGemRFNWxaV1FwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG14aGMzUkRhR0Z5TG5SdlUzUnlhVzVuS0hSb2FYTXVaVzVqYjJScGJtY3NJREFzSUhSb2FYTXViR0Z6ZEZSdmRHRnNLVHRjYmlBZ2ZWeHVJQ0JpZFdZdVkyOXdlU2gwYUdsekxteGhjM1JEYUdGeUxDQndMQ0F3TENCaWRXWXViR1Z1WjNSb0tUdGNiaUFnZEdocGN5NXNZWE4wVG1WbFpDQXRQU0JpZFdZdWJHVnVaM1JvTzF4dWZWeHVYRzR2THlCU1pYUjFjbTV6SUdGc2JDQmpiMjF3YkdWMFpTQlZWRVl0T0NCamFHRnlZV04wWlhKeklHbHVJR0VnUW5WbVptVnlMaUJKWmlCMGFHVWdRblZtWm1WeUlHVnVaR1ZrSUc5dUlHRmNiaTh2SUhCaGNuUnBZV3dnWTJoaGNtRmpkR1Z5TENCMGFHVWdZMmhoY21GamRHVnlKM01nWW5sMFpYTWdZWEpsSUdKMVptWmxjbVZrSUhWdWRHbHNJSFJvWlNCeVpYRjFhWEpsWkZ4dUx5OGdiblZ0WW1WeUlHOW1JR0o1ZEdWeklHRnlaU0JoZG1GcGJHRmliR1V1WEc1bWRXNWpkR2x2YmlCMWRHWTRWR1Y0ZENoaWRXWXNJR2twSUh0Y2JpQWdkbUZ5SUhSdmRHRnNJRDBnZFhSbU9FTm9aV05yU1c1amIyMXdiR1YwWlNoMGFHbHpMQ0JpZFdZc0lHa3BPMXh1SUNCcFppQW9JWFJvYVhNdWJHRnpkRTVsWldRcElISmxkSFZ5YmlCaWRXWXVkRzlUZEhKcGJtY29KM1YwWmpnbkxDQnBLVHRjYmlBZ2RHaHBjeTVzWVhOMFZHOTBZV3dnUFNCMGIzUmhiRHRjYmlBZ2RtRnlJR1Z1WkNBOUlHSjFaaTVzWlc1bmRHZ2dMU0FvZEc5MFlXd2dMU0IwYUdsekxteGhjM1JPWldWa0tUdGNiaUFnWW5WbUxtTnZjSGtvZEdocGN5NXNZWE4wUTJoaGNpd2dNQ3dnWlc1a0tUdGNiaUFnY21WMGRYSnVJR0oxWmk1MGIxTjBjbWx1WnlnbmRYUm1PQ2NzSUdrc0lHVnVaQ2s3WEc1OVhHNWNiaTh2SUVadmNpQlZWRVl0T0N3Z1lTQnlaWEJzWVdObGJXVnVkQ0JqYUdGeVlXTjBaWElnYVhNZ1lXUmtaV1FnZDJobGJpQmxibVJwYm1jZ2IyNGdZU0J3WVhKMGFXRnNYRzR2THlCamFHRnlZV04wWlhJdVhHNW1kVzVqZEdsdmJpQjFkR1k0Ulc1a0tHSjFaaWtnZTF4dUlDQjJZWElnY2lBOUlHSjFaaUFtSmlCaWRXWXViR1Z1WjNSb0lEOGdkR2hwY3k1M2NtbDBaU2hpZFdZcElEb2dKeWM3WEc0Z0lHbG1JQ2gwYUdsekxteGhjM1JPWldWa0tTQnlaWFIxY200Z2NpQXJJQ2RjWEhWbVptWmtKenRjYmlBZ2NtVjBkWEp1SUhJN1hHNTlYRzVjYmk4dklGVlVSaTB4Tmt4RklIUjVjR2xqWVd4c2VTQnVaV1ZrY3lCMGQyOGdZbmwwWlhNZ2NHVnlJR05vWVhKaFkzUmxjaXdnWW5WMElHVjJaVzRnYVdZZ2QyVWdhR0YyWlNCaGJpQmxkbVZ1WEc0dkx5QnVkVzFpWlhJZ2IyWWdZbmwwWlhNZ1lYWmhhV3hoWW14bExDQjNaU0J1WldWa0lIUnZJR05vWldOcklHbG1JSGRsSUdWdVpDQnZiaUJoSUd4bFlXUnBibWN2YUdsbmFGeHVMeThnYzNWeWNtOW5ZWFJsTGlCSmJpQjBhR0YwSUdOaGMyVXNJSGRsSUc1bFpXUWdkRzhnZDJGcGRDQm1iM0lnZEdobElHNWxlSFFnZEhkdklHSjVkR1Z6SUdsdUlHOXlaR1Z5SUhSdlhHNHZMeUJrWldOdlpHVWdkR2hsSUd4aGMzUWdZMmhoY21GamRHVnlJSEJ5YjNCbGNteDVMbHh1Wm5WdVkzUnBiMjRnZFhSbU1UWlVaWGgwS0dKMVppd2dhU2tnZTF4dUlDQnBaaUFvS0dKMVppNXNaVzVuZEdnZ0xTQnBLU0FsSURJZ1BUMDlJREFwSUh0Y2JpQWdJQ0IyWVhJZ2NpQTlJR0oxWmk1MGIxTjBjbWx1WnlnbmRYUm1NVFpzWlNjc0lHa3BPMXh1SUNBZ0lHbG1JQ2h5S1NCN1hHNGdJQ0FnSUNCMllYSWdZeUE5SUhJdVkyaGhja052WkdWQmRDaHlMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJQ0FnYVdZZ0tHTWdQajBnTUhoRU9EQXdJQ1ltSUdNZ1BEMGdNSGhFUWtaR0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHRnpkRTVsWldRZ1BTQXlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGhjM1JVYjNSaGJDQTlJRFE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZEVOb1lYSmJNRjBnUFNCaWRXWmJZblZtTG14bGJtZDBhQ0F0SURKZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14aGMzUkRhR0Z5V3pGZElEMGdZblZtVzJKMVppNXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEl1YzJ4cFkyVW9NQ3dnTFRFcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjanRjYmlBZ2ZWeHVJQ0IwYUdsekxteGhjM1JPWldWa0lEMGdNVHRjYmlBZ2RHaHBjeTVzWVhOMFZHOTBZV3dnUFNBeU8xeHVJQ0IwYUdsekxteGhjM1JEYUdGeVd6QmRJRDBnWW5WbVcySjFaaTVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdjbVYwZFhKdUlHSjFaaTUwYjFOMGNtbHVaeWduZFhSbU1UWnNaU2NzSUdrc0lHSjFaaTVzWlc1bmRHZ2dMU0F4S1R0Y2JuMWNibHh1THk4Z1JtOXlJRlZVUmkweE5reEZJSGRsSUdSdklHNXZkQ0JsZUhCc2FXTnBkR3g1SUdGd2NHVnVaQ0J6Y0dWamFXRnNJSEpsY0d4aFkyVnRaVzUwSUdOb1lYSmhZM1JsY25NZ2FXWWdkMlZjYmk4dklHVnVaQ0J2YmlCaElIQmhjblJwWVd3Z1kyaGhjbUZqZEdWeUxDQjNaU0J6YVcxd2JIa2diR1YwSUhZNElHaGhibVJzWlNCMGFHRjBMbHh1Wm5WdVkzUnBiMjRnZFhSbU1UWkZibVFvWW5WbUtTQjdYRzRnSUhaaGNpQnlJRDBnWW5WbUlDWW1JR0oxWmk1c1pXNW5kR2dnUHlCMGFHbHpMbmR5YVhSbEtHSjFaaWtnT2lBbkp6dGNiaUFnYVdZZ0tIUm9hWE11YkdGemRFNWxaV1FwSUh0Y2JpQWdJQ0IyWVhJZ1pXNWtJRDBnZEdocGN5NXNZWE4wVkc5MFlXd2dMU0IwYUdsekxteGhjM1JPWldWa08xeHVJQ0FnSUhKbGRIVnliaUJ5SUNzZ2RHaHBjeTVzWVhOMFEyaGhjaTUwYjFOMGNtbHVaeWduZFhSbU1UWnNaU2NzSURBc0lHVnVaQ2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEk3WEc1OVhHNWNibVoxYm1OMGFXOXVJR0poYzJVMk5GUmxlSFFvWW5WbUxDQnBLU0I3WEc0Z0lIWmhjaUJ1SUQwZ0tHSjFaaTVzWlc1bmRHZ2dMU0JwS1NBbElETTdYRzRnSUdsbUlDaHVJRDA5UFNBd0tTQnlaWFIxY200Z1luVm1MblJ2VTNSeWFXNW5LQ2RpWVhObE5qUW5MQ0JwS1R0Y2JpQWdkR2hwY3k1c1lYTjBUbVZsWkNBOUlETWdMU0J1TzF4dUlDQjBhR2x6TG14aGMzUlViM1JoYkNBOUlETTdYRzRnSUdsbUlDaHVJRDA5UFNBeEtTQjdYRzRnSUNBZ2RHaHBjeTVzWVhOMFEyaGhjbHN3WFNBOUlHSjFabHRpZFdZdWJHVnVaM1JvSUMwZ01WMDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdkR2hwY3k1c1lYTjBRMmhoY2xzd1hTQTlJR0oxWmx0aWRXWXViR1Z1WjNSb0lDMGdNbDA3WEc0Z0lDQWdkR2hwY3k1c1lYTjBRMmhoY2xzeFhTQTlJR0oxWmx0aWRXWXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJR0oxWmk1MGIxTjBjbWx1WnlnblltRnpaVFkwSnl3Z2FTd2dZblZtTG14bGJtZDBhQ0F0SUc0cE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCaVlYTmxOalJGYm1Rb1luVm1LU0I3WEc0Z0lIWmhjaUJ5SUQwZ1luVm1JQ1ltSUdKMVppNXNaVzVuZEdnZ1B5QjBhR2x6TG5keWFYUmxLR0oxWmlrZ09pQW5KenRjYmlBZ2FXWWdLSFJvYVhNdWJHRnpkRTVsWldRcElISmxkSFZ5YmlCeUlDc2dkR2hwY3k1c1lYTjBRMmhoY2k1MGIxTjBjbWx1WnlnblltRnpaVFkwSnl3Z01Dd2dNeUF0SUhSb2FYTXViR0Z6ZEU1bFpXUXBPMXh1SUNCeVpYUjFjbTRnY2p0Y2JuMWNibHh1THk4Z1VHRnpjeUJpZVhSbGN5QnZiaUIwYUhKdmRXZG9JR1p2Y2lCemFXNW5iR1V0WW5sMFpTQmxibU52WkdsdVozTWdLR1V1Wnk0Z1lYTmphV2tzSUd4aGRHbHVNU3dnYUdWNEtWeHVablZ1WTNScGIyNGdjMmx0Y0d4bFYzSnBkR1VvWW5WbUtTQjdYRzRnSUhKbGRIVnliaUJpZFdZdWRHOVRkSEpwYm1jb2RHaHBjeTVsYm1OdlpHbHVaeWs3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5wYlhCc1pVVnVaQ2hpZFdZcElIdGNiaUFnY21WMGRYSnVJR0oxWmlBbUppQmlkV1l1YkdWdVozUm9JRDhnZEdocGN5NTNjbWwwWlNoaWRXWXBJRG9nSnljN1hHNTlJaXdpTHlvcVhHNGdLaUJEYjI1MlpYSjBJR0VnZEhsd1pXUWdZWEp5WVhrZ2RHOGdZU0JDZFdabVpYSWdkMmwwYUc5MWRDQmhJR052Y0hsY2JpQXFYRzRnS2lCQmRYUm9iM0k2SUNBZ1JtVnliM056SUVGaWIzVnJhR0ZrYVdwbGFDQThhSFIwY0hNNkx5OW1aWEp2YzNNdWIzSm5QbHh1SUNvZ1RHbGpaVzV6WlRvZ0lFMUpWRnh1SUNwY2JpQXFJR0J1Y0cwZ2FXNXpkR0ZzYkNCMGVYQmxaR0Z5Y21GNUxYUnZMV0oxWm1abGNtQmNiaUFxTDF4dVhHNTJZWElnYVhOVWVYQmxaRUZ5Y21GNUlEMGdjbVZ4ZFdseVpTZ25hWE10ZEhsd1pXUmhjbkpoZVNjcExuTjBjbWxqZEZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlIUjVjR1ZrWVhKeVlYbFViMEoxWm1abGNpQW9ZWEp5S1NCN1hHNGdJR2xtSUNocGMxUjVjR1ZrUVhKeVlYa29ZWEp5S1NrZ2UxeHVJQ0FnSUM4dklGUnZJR0YyYjJsa0lHRWdZMjl3ZVN3Z2RYTmxJSFJvWlNCMGVYQmxaQ0JoY25KaGVTZHpJSFZ1WkdWeWJIbHBibWNnUVhKeVlYbENkV1ptWlhJZ2RHOGdZbUZqYXlCdVpYY2dRblZtWm1WeVhHNGdJQ0FnZG1GeUlHSjFaaUE5SUVKMVptWmxjaTVtY205dEtHRnljaTVpZFdabVpYSXBYRzRnSUNBZ2FXWWdLR0Z5Y2k1aWVYUmxUR1Z1WjNSb0lDRTlQU0JoY25JdVluVm1abVZ5TG1KNWRHVk1aVzVuZEdncElIdGNiaUFnSUNBZ0lDOHZJRkpsYzNCbFkzUWdkR2hsSUZ3aWRtbGxkMXdpTENCcExtVXVJR0o1ZEdWUFptWnpaWFFnWVc1a0lHSjVkR1ZNWlc1bmRHZ3NJSGRwZEdodmRYUWdaRzlwYm1jZ1lTQmpiM0I1WEc0Z0lDQWdJQ0JpZFdZZ1BTQmlkV1l1YzJ4cFkyVW9ZWEp5TG1KNWRHVlBabVp6WlhRc0lHRnljaTVpZVhSbFQyWm1jMlYwSUNzZ1lYSnlMbUo1ZEdWTVpXNW5kR2dwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaWRXWmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJRWVhOeklIUm9jbTkxWjJnZ1lXeHNJRzkwYUdWeUlIUjVjR1Z6SUhSdklHQkNkV1ptWlhJdVpuSnZiV0JjYmlBZ0lDQnlaWFIxY200Z1FuVm1abVZ5TG1aeWIyMG9ZWEp5S1Z4dUlDQjlYRzU5WEc0aUxDSmNiaThxS2x4dUlDb2dUVzlrZFd4bElHVjRjRzl5ZEhNdVhHNGdLaTljYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCa1pYQnlaV05oZEdVN1hHNWNiaThxS2x4dUlDb2dUV0Z5YXlCMGFHRjBJR0VnYldWMGFHOWtJSE5vYjNWc1pDQnViM1FnWW1VZ2RYTmxaQzVjYmlBcUlGSmxkSFZ5Ym5NZ1lTQnRiMlJwWm1sbFpDQm1kVzVqZEdsdmJpQjNhR2xqYUNCM1lYSnVjeUJ2Ym1ObElHSjVJR1JsWm1GMWJIUXVYRzRnS2x4dUlDb2dTV1lnWUd4dlkyRnNVM1J2Y21GblpTNXViMFJsY0hKbFkyRjBhVzl1SUQwZ2RISjFaV0FnYVhNZ2MyVjBMQ0IwYUdWdUlHbDBJR2x6SUdFZ2JtOHRiM0F1WEc0Z0tseHVJQ29nU1dZZ1lHeHZZMkZzVTNSdmNtRm5aUzUwYUhKdmQwUmxjSEpsWTJGMGFXOXVJRDBnZEhKMVpXQWdhWE1nYzJWMExDQjBhR1Z1SUdSbGNISmxZMkYwWldRZ1puVnVZM1JwYjI1elhHNGdLaUIzYVd4c0lIUm9jbTkzSUdGdUlFVnljbTl5SUhkb1pXNGdhVzUyYjJ0bFpDNWNiaUFxWEc0Z0tpQkpaaUJnYkc5allXeFRkRzl5WVdkbExuUnlZV05sUkdWd2NtVmpZWFJwYjI0Z1BTQjBjblZsWUNCcGN5QnpaWFFzSUhSb1pXNGdaR1Z3Y21WallYUmxaQ0JtZFc1amRHbHZibk5jYmlBcUlIZHBiR3dnYVc1MmIydGxJR0JqYjI1emIyeGxMblJ5WVdObEtDbGdJR2x1YzNSbFlXUWdiMllnWUdOdmJuTnZiR1V1WlhKeWIzSW9LV0F1WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm00Z0xTQjBhR1VnWm5WdVkzUnBiMjRnZEc4Z1pHVndjbVZqWVhSbFhHNGdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdiWE5uSUMwZ2RHaGxJSE4wY21sdVp5QjBieUJ3Y21sdWRDQjBieUIwYUdVZ1kyOXVjMjlzWlNCM2FHVnVJR0JtYm1BZ2FYTWdhVzUyYjJ0bFpGeHVJQ29nUUhKbGRIVnlibk1nZTBaMWJtTjBhVzl1ZlNCaElHNWxkeUJjSW1SbGNISmxZMkYwWldSY0lpQjJaWEp6YVc5dUlHOW1JR0JtYm1CY2JpQXFJRUJoY0drZ2NIVmliR2xqWEc0Z0tpOWNibHh1Wm5WdVkzUnBiMjRnWkdWd2NtVmpZWFJsSUNobWJpd2diWE5uS1NCN1hHNGdJR2xtSUNoamIyNW1hV2NvSjI1dlJHVndjbVZqWVhScGIyNG5LU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1ianRjYmlBZ2ZWeHVYRzRnSUhaaGNpQjNZWEp1WldRZ1BTQm1ZV3h6WlR0Y2JpQWdablZ1WTNScGIyNGdaR1Z3Y21WallYUmxaQ2dwSUh0Y2JpQWdJQ0JwWmlBb0lYZGhjbTVsWkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLR052Ym1acFp5Z25kR2h5YjNkRVpYQnlaV05oZEdsdmJpY3BLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWh0YzJjcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpiMjVtYVdjb0ozUnlZV05sUkdWd2NtVmpZWFJwYjI0bktTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMblJ5WVdObEtHMXpaeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b2JYTm5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRoY201bFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQm1iaTVoY0hCc2VTaDBhR2x6TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHUmxjSEpsWTJGMFpXUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnR6SUdCc2IyTmhiRk4wYjNKaFoyVmdJR1p2Y2lCaWIyOXNaV0Z1SUhaaGJIVmxjeUJtYjNJZ2RHaGxJR2RwZG1WdUlHQnVZVzFsWUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpWeHVJQ29nUUhKbGRIVnlibk1nZTBKdmIyeGxZVzU5WEc0Z0tpQkFZWEJwSUhCeWFYWmhkR1ZjYmlBcUwxeHVYRzVtZFc1amRHbHZiaUJqYjI1bWFXY2dLRzVoYldVcElIdGNiaUFnTHk4Z1lXTmpaWE56YVc1bklHZHNiMkpoYkM1c2IyTmhiRk4wYjNKaFoyVWdZMkZ1SUhSeWFXZG5aWElnWVNCRVQwMUZlR05sY0hScGIyNGdhVzRnYzJGdVpHSnZlR1ZrSUdsbWNtRnRaWE5jYmlBZ2RISjVJSHRjYmlBZ0lDQnBaaUFvSVdkc2IySmhiQzVzYjJOaGJGTjBiM0poWjJVcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZTQmpZWFJqYUNBb1h5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0IyWVhJZ2RtRnNJRDBnWjJ4dlltRnNMbXh2WTJGc1UzUnZjbUZuWlZ0dVlXMWxYVHRjYmlBZ2FXWWdLRzUxYkd3Z1BUMGdkbUZzS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUhKbGRIVnliaUJUZEhKcGJtY29kbUZzS1M1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNBbmRISjFaU2M3WEc1OVhHNGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJR2x6UW5WbVptVnlLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdZWEpuSUNZbUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkdlltcGxZM1FuWEc0Z0lDQWdKaVlnZEhsd1pXOW1JR0Z5Wnk1amIzQjVJRDA5UFNBblpuVnVZM1JwYjI0blhHNGdJQ0FnSmlZZ2RIbHdaVzltSUdGeVp5NW1hV3hzSUQwOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNBZ0ppWWdkSGx3Wlc5bUlHRnlaeTV5WldGa1ZVbHVkRGdnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzVjYm5aaGNpQm1iM0p0WVhSU1pXZEZlSEFnUFNBdkpWdHpaR29sWFM5bk8xeHVaWGh3YjNKMGN5NW1iM0p0WVhRZ1BTQm1kVzVqZEdsdmJpaG1LU0I3WEc0Z0lHbG1JQ2doYVhOVGRISnBibWNvWmlrcElIdGNiaUFnSUNCMllYSWdiMkpxWldOMGN5QTlJRnRkTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnZZbXBsWTNSekxuQjFjMmdvYVc1emNHVmpkQ2hoY21kMWJXVnVkSE5iYVYwcEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzlpYW1WamRITXVhbTlwYmlnbklDY3BPMXh1SUNCOVhHNWNiaUFnZG1GeUlHa2dQU0F4TzF4dUlDQjJZWElnWVhKbmN5QTlJR0Z5WjNWdFpXNTBjenRjYmlBZ2RtRnlJR3hsYmlBOUlHRnlaM011YkdWdVozUm9PMXh1SUNCMllYSWdjM1J5SUQwZ1UzUnlhVzVuS0dZcExuSmxjR3hoWTJVb1ptOXliV0YwVW1WblJYaHdMQ0JtZFc1amRHbHZiaWg0S1NCN1hHNGdJQ0FnYVdZZ0tIZ2dQVDA5SUNjbEpTY3BJSEpsZEhWeWJpQW5KU2M3WEc0Z0lDQWdhV1lnS0drZ1BqMGdiR1Z1S1NCeVpYUjFjbTRnZUR0Y2JpQWdJQ0J6ZDJsMFkyZ2dLSGdwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKeVZ6SnpvZ2NtVjBkWEp1SUZOMGNtbHVaeWhoY21kelcya3JLMTBwTzF4dUlDQWdJQ0FnWTJGelpTQW5KV1FuT2lCeVpYUjFjbTRnVG5WdFltVnlLR0Z5WjNOYmFTc3JYU2s3WEc0Z0lDQWdJQ0JqWVhObElDY2xhaWM2WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWMzUnlhVzVuYVdaNUtHRnlaM05iYVNzclhTazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLRjhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0oxdERhWEpqZFd4aGNsMG5PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlRHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVJQ0JtYjNJZ0tIWmhjaUI0SUQwZ1lYSm5jMXRwWFRzZ2FTQThJR3hsYmpzZ2VDQTlJR0Z5WjNOYkt5dHBYU2tnZTF4dUlDQWdJR2xtSUNocGMwNTFiR3dvZUNrZ2ZId2dJV2x6VDJKcVpXTjBLSGdwS1NCN1hHNGdJQ0FnSUNCemRISWdLejBnSnlBbklDc2dlRHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MzUnlJQ3M5SUNjZ0p5QXJJR2x1YzNCbFkzUW9lQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnpkSEk3WEc1OU8xeHVYRzVjYmk4dklFMWhjbXNnZEdoaGRDQmhJRzFsZEdodlpDQnphRzkxYkdRZ2JtOTBJR0psSUhWelpXUXVYRzR2THlCU1pYUjFjbTV6SUdFZ2JXOWthV1pwWldRZ1puVnVZM1JwYjI0Z2QyaHBZMmdnZDJGeWJuTWdiMjVqWlNCaWVTQmtaV1poZFd4MExseHVMeThnU1dZZ0xTMXVieTFrWlhCeVpXTmhkR2x2YmlCcGN5QnpaWFFzSUhSb1pXNGdhWFFnYVhNZ1lTQnVieTF2Y0M1Y2JtVjRjRzl5ZEhNdVpHVndjbVZqWVhSbElEMGdablZ1WTNScGIyNG9abTRzSUcxelp5a2dlMXh1SUNBdkx5QkJiR3h2ZHlCbWIzSWdaR1Z3Y21WallYUnBibWNnZEdocGJtZHpJR2x1SUhSb1pTQndjbTlqWlhOeklHOW1JSE4wWVhKMGFXNW5JSFZ3TGx4dUlDQnBaaUFvYVhOVmJtUmxabWx1WldRb1oyeHZZbUZzTG5CeWIyTmxjM01wS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1Y0Y0c5eWRITXVaR1Z3Y21WallYUmxLR1p1TENCdGMyY3BMbUZ3Y0d4NUtIUm9hWE1zSUdGeVozVnRaVzUwY3lrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2h3Y205alpYTnpMbTV2UkdWd2NtVmpZWFJwYjI0Z1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnWm00N1hHNGdJSDFjYmx4dUlDQjJZWElnZDJGeWJtVmtJRDBnWm1Gc2MyVTdYRzRnSUdaMWJtTjBhVzl1SUdSbGNISmxZMkYwWldRb0tTQjdYRzRnSUNBZ2FXWWdLQ0YzWVhKdVpXUXBJSHRjYmlBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG5Sb2NtOTNSR1Z3Y21WallYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0cxelp5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5YjJObGMzTXVkSEpoWTJWRVpYQnlaV05oZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMblJ5WVdObEtHMXpaeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHMXpaeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IzWVhKdVpXUWdQU0IwY25WbE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdabTR1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmtaWEJ5WldOaGRHVmtPMXh1ZlR0Y2JseHVYRzUyWVhJZ1pHVmlkV2R6SUQwZ2UzMDdYRzUyWVhJZ1pHVmlkV2RGYm5acGNtOXVPMXh1Wlhod2IzSjBjeTVrWldKMVoyeHZaeUE5SUdaMWJtTjBhVzl1S0hObGRDa2dlMXh1SUNCcFppQW9hWE5WYm1SbFptbHVaV1FvWkdWaWRXZEZiblpwY205dUtTbGNiaUFnSUNCa1pXSjFaMFZ1ZG1seWIyNGdQU0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFJGUWxWSElIeDhJQ2NuTzF4dUlDQnpaWFFnUFNCelpYUXVkRzlWY0hCbGNrTmhjMlVvS1R0Y2JpQWdhV1lnS0NGa1pXSjFaM05iYzJWMFhTa2dlMXh1SUNBZ0lHbG1JQ2h1WlhjZ1VtVm5SWGh3S0NkY1hGeGNZaWNnS3lCelpYUWdLeUFuWEZ4Y1hHSW5MQ0FuYVNjcExuUmxjM1FvWkdWaWRXZEZiblpwY205dUtTa2dlMXh1SUNBZ0lDQWdkbUZ5SUhCcFpDQTlJSEJ5YjJObGMzTXVjR2xrTzF4dUlDQWdJQ0FnWkdWaWRXZHpXM05sZEYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXpaeUE5SUdWNGNHOXlkSE11Wm05eWJXRjBMbUZ3Y0d4NUtHVjRjRzl5ZEhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0p5VnpJQ1ZrT2lBbGN5Y3NJSE5sZEN3Z2NHbGtMQ0J0YzJjcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWkdWaWRXZHpXM05sZEYwZ1BTQm1kVzVqZEdsdmJpZ3BJSHQ5TzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaR1ZpZFdkelczTmxkRjA3WEc1OU8xeHVYRzVjYmk4cUtseHVJQ29nUldOb2IzTWdkR2hsSUhaaGJIVmxJRzltSUdFZ2RtRnNkV1V1SUZSeWVYTWdkRzhnY0hKcGJuUWdkR2hsSUhaaGJIVmxJRzkxZEZ4dUlDb2dhVzRnZEdobElHSmxjM1FnZDJGNUlIQnZjM05wWW14bElHZHBkbVZ1SUhSb1pTQmthV1ptWlhKbGJuUWdkSGx3WlhNdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5aWFpQlVhR1VnYjJKcVpXTjBJSFJ2SUhCeWFXNTBJRzkxZEM1Y2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJ6SUU5d2RHbHZibUZzSUc5d2RHbHZibk1nYjJKcVpXTjBJSFJvWVhRZ1lXeDBaWEp6SUhSb1pTQnZkWFJ3ZFhRdVhHNGdLaTljYmk4cUlHeGxaMkZqZVRvZ2IySnFMQ0J6YUc5M1NHbGtaR1Z1TENCa1pYQjBhQ3dnWTI5c2IzSnpLaTljYm1aMWJtTjBhVzl1SUdsdWMzQmxZM1FvYjJKcUxDQnZjSFJ6S1NCN1hHNGdJQzh2SUdSbFptRjFiSFFnYjNCMGFXOXVjMXh1SUNCMllYSWdZM1I0SUQwZ2UxeHVJQ0FnSUhObFpXNDZJRnRkTEZ4dUlDQWdJSE4wZVd4cGVtVTZJSE4wZVd4cGVtVk9iME52Ykc5eVhHNGdJSDA3WEc0Z0lDOHZJR3hsWjJGamVTNHVMbHh1SUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStQU0F6S1NCamRIZ3VaR1Z3ZEdnZ1BTQmhjbWQxYldWdWRITmJNbDA3WEc0Z0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDQ5SURRcElHTjBlQzVqYjJ4dmNuTWdQU0JoY21kMWJXVnVkSE5iTTEwN1hHNGdJR2xtSUNocGMwSnZiMnhsWVc0b2IzQjBjeWtwSUh0Y2JpQWdJQ0F2THlCc1pXZGhZM2t1TGk1Y2JpQWdJQ0JqZEhndWMyaHZkMGhwWkdSbGJpQTlJRzl3ZEhNN1hHNGdJSDBnWld4elpTQnBaaUFvYjNCMGN5a2dlMXh1SUNBZ0lDOHZJR2R2ZENCaGJpQmNJbTl3ZEdsdmJuTmNJaUJ2WW1wbFkzUmNiaUFnSUNCbGVIQnZjblJ6TGw5bGVIUmxibVFvWTNSNExDQnZjSFJ6S1R0Y2JpQWdmVnh1SUNBdkx5QnpaWFFnWkdWbVlYVnNkQ0J2Y0hScGIyNXpYRzRnSUdsbUlDaHBjMVZ1WkdWbWFXNWxaQ2hqZEhndWMyaHZkMGhwWkdSbGJpa3BJR04wZUM1emFHOTNTR2xrWkdWdUlEMGdabUZzYzJVN1hHNGdJR2xtSUNocGMxVnVaR1ZtYVc1bFpDaGpkSGd1WkdWd2RHZ3BLU0JqZEhndVpHVndkR2dnUFNBeU8xeHVJQ0JwWmlBb2FYTlZibVJsWm1sdVpXUW9ZM1I0TG1OdmJHOXljeWtwSUdOMGVDNWpiMnh2Y25NZ1BTQm1ZV3h6WlR0Y2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHTjBlQzVqZFhOMGIyMUpibk53WldOMEtTa2dZM1I0TG1OMWMzUnZiVWx1YzNCbFkzUWdQU0IwY25WbE8xeHVJQ0JwWmlBb1kzUjRMbU52Ykc5eWN5a2dZM1I0TG5OMGVXeHBlbVVnUFNCemRIbHNhWHBsVjJsMGFFTnZiRzl5TzF4dUlDQnlaWFIxY200Z1ptOXliV0YwVm1Gc2RXVW9ZM1I0TENCdlltb3NJR04wZUM1a1pYQjBhQ2s3WEc1OVhHNWxlSEJ2Y25SekxtbHVjM0JsWTNRZ1BTQnBibk53WldOME8xeHVYRzVjYmk4dklHaDBkSEE2THk5bGJpNTNhV3RwY0dWa2FXRXViM0puTDNkcGEya3ZRVTVUU1Y5bGMyTmhjR1ZmWTI5a1pTTm5jbUZ3YUdsamMxeHVhVzV6Y0dWamRDNWpiMnh2Y25NZ1BTQjdYRzRnSUNkaWIyeGtKeUE2SUZzeExDQXlNbDBzWEc0Z0lDZHBkR0ZzYVdNbklEb2dXek1zSURJelhTeGNiaUFnSjNWdVpHVnliR2x1WlNjZ09pQmJOQ3dnTWpSZExGeHVJQ0FuYVc1MlpYSnpaU2NnT2lCYk55d2dNamRkTEZ4dUlDQW5kMmhwZEdVbklEb2dXek0zTENBek9WMHNYRzRnSUNkbmNtVjVKeUE2SUZzNU1Dd2dNemxkTEZ4dUlDQW5ZbXhoWTJzbklEb2dXek13TENBek9WMHNYRzRnSUNkaWJIVmxKeUE2SUZzek5Dd2dNemxkTEZ4dUlDQW5ZM2xoYmljZ09pQmJNellzSURNNVhTeGNiaUFnSjJkeVpXVnVKeUE2SUZzek1pd2dNemxkTEZ4dUlDQW5iV0ZuWlc1MFlTY2dPaUJiTXpVc0lETTVYU3hjYmlBZ0ozSmxaQ2NnT2lCYk16RXNJRE01WFN4Y2JpQWdKM2xsYkd4dmR5Y2dPaUJiTXpNc0lETTVYVnh1ZlR0Y2JseHVMeThnUkc5dUozUWdkWE5sSUNkaWJIVmxKeUJ1YjNRZ2RtbHphV0pzWlNCdmJpQmpiV1F1WlhobFhHNXBibk53WldOMExuTjBlV3hsY3lBOUlIdGNiaUFnSjNOd1pXTnBZV3duT2lBblkzbGhiaWNzWEc0Z0lDZHVkVzFpWlhJbk9pQW5lV1ZzYkc5M0p5eGNiaUFnSjJKdmIyeGxZVzRuT2lBbmVXVnNiRzkzSnl4Y2JpQWdKM1Z1WkdWbWFXNWxaQ2M2SUNkbmNtVjVKeXhjYmlBZ0oyNTFiR3duT2lBblltOXNaQ2NzWEc0Z0lDZHpkSEpwYm1jbk9pQW5aM0psWlc0bkxGeHVJQ0FuWkdGMFpTYzZJQ2R0WVdkbGJuUmhKeXhjYmlBZ0x5OGdYQ0p1WVcxbFhDSTZJR2x1ZEdWdWRHbHZibUZzYkhrZ2JtOTBJSE4wZVd4cGJtZGNiaUFnSjNKbFoyVjRjQ2M2SUNkeVpXUW5YRzU5TzF4dVhHNWNibVoxYm1OMGFXOXVJSE4wZVd4cGVtVlhhWFJvUTI5c2IzSW9jM1J5TENCemRIbHNaVlI1Y0dVcElIdGNiaUFnZG1GeUlITjBlV3hsSUQwZ2FXNXpjR1ZqZEM1emRIbHNaWE5iYzNSNWJHVlVlWEJsWFR0Y2JseHVJQ0JwWmlBb2MzUjViR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKMXhjZFRBd01XSmJKeUFySUdsdWMzQmxZM1F1WTI5c2IzSnpXM04wZVd4bFhWc3dYU0FySUNkdEp5QXJJSE4wY2lBclhHNGdJQ0FnSUNBZ0lDQWdJQ2RjWEhVd01ERmlXeWNnS3lCcGJuTndaV04wTG1OdmJHOXljMXR6ZEhsc1pWMWJNVjBnS3lBbmJTYzdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlITjBjanRjYmlBZ2ZWeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlITjBlV3hwZW1WT2IwTnZiRzl5S0hOMGNpd2djM1I1YkdWVWVYQmxLU0I3WEc0Z0lISmxkSFZ5YmlCemRISTdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdZWEp5WVhsVWIwaGhjMmdvWVhKeVlYa3BJSHRjYmlBZ2RtRnlJR2hoYzJnZ1BTQjdmVHRjYmx4dUlDQmhjbkpoZVM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0haaGJDd2dhV1I0S1NCN1hHNGdJQ0FnYUdGemFGdDJZV3hkSUQwZ2RISjFaVHRjYmlBZ2ZTazdYRzVjYmlBZ2NtVjBkWEp1SUdoaGMyZzdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFZtRnNkV1VvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpLU0I3WEc0Z0lDOHZJRkJ5YjNacFpHVWdZU0JvYjI5cklHWnZjaUIxYzJWeUxYTndaV05wWm1sbFpDQnBibk53WldOMElHWjFibU4wYVc5dWN5NWNiaUFnTHk4Z1EyaGxZMnNnZEdoaGRDQjJZV3gxWlNCcGN5QmhiaUJ2WW1wbFkzUWdkMmwwYUNCaGJpQnBibk53WldOMElHWjFibU4wYVc5dUlHOXVJR2wwWEc0Z0lHbG1JQ2hqZEhndVkzVnpkRzl0U1c1emNHVmpkQ0FtSmx4dUlDQWdJQ0FnZG1Gc2RXVWdKaVpjYmlBZ0lDQWdJR2x6Um5WdVkzUnBiMjRvZG1Gc2RXVXVhVzV6Y0dWamRDa2dKaVpjYmlBZ0lDQWdJQzh2SUVacGJIUmxjaUJ2ZFhRZ2RHaGxJSFYwYVd3Z2JXOWtkV3hsTENCcGRDZHpJR2x1YzNCbFkzUWdablZ1WTNScGIyNGdhWE1nYzNCbFkybGhiRnh1SUNBZ0lDQWdkbUZzZFdVdWFXNXpjR1ZqZENBaFBUMGdaWGh3YjNKMGN5NXBibk53WldOMElDWW1YRzRnSUNBZ0lDQXZMeUJCYkhOdklHWnBiSFJsY2lCdmRYUWdZVzU1SUhCeWIzUnZkSGx3WlNCdlltcGxZM1J6SUhWemFXNW5JSFJvWlNCamFYSmpkV3hoY2lCamFHVmpheTVjYmlBZ0lDQWdJQ0VvZG1Gc2RXVXVZMjl1YzNSeWRXTjBiM0lnSmlZZ2RtRnNkV1V1WTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbElEMDlQU0IyWVd4MVpTa3BJSHRjYmlBZ0lDQjJZWElnY21WMElEMGdkbUZzZFdVdWFXNXpjR1ZqZENoeVpXTjFjbk5sVkdsdFpYTXNJR04wZUNrN1hHNGdJQ0FnYVdZZ0tDRnBjMU4wY21sdVp5aHlaWFFwS1NCN1hHNGdJQ0FnSUNCeVpYUWdQU0JtYjNKdFlYUldZV3gxWlNoamRIZ3NJSEpsZEN3Z2NtVmpkWEp6WlZScGJXVnpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnZlZ4dVhHNGdJQzh2SUZCeWFXMXBkR2wyWlNCMGVYQmxjeUJqWVc1dWIzUWdhR0YyWlNCd2NtOXdaWEowYVdWelhHNGdJSFpoY2lCd2NtbHRhWFJwZG1VZ1BTQm1iM0p0WVhSUWNtbHRhWFJwZG1Vb1kzUjRMQ0IyWVd4MVpTazdYRzRnSUdsbUlDaHdjbWx0YVhScGRtVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NISnBiV2wwYVhabE8xeHVJQ0I5WEc1Y2JpQWdMeThnVEc5dmF5QjFjQ0IwYUdVZ2EyVjVjeUJ2WmlCMGFHVWdiMkpxWldOMExseHVJQ0IyWVhJZ2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektIWmhiSFZsS1R0Y2JpQWdkbUZ5SUhacGMybGliR1ZMWlhseklEMGdZWEp5WVhsVWIwaGhjMmdvYTJWNWN5azdYRzVjYmlBZ2FXWWdLR04wZUM1emFHOTNTR2xrWkdWdUtTQjdYRzRnSUNBZ2EyVjVjeUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0haaGJIVmxLVHRjYmlBZ2ZWeHVYRzRnSUM4dklFbEZJR1J2WlhOdUozUWdiV0ZyWlNCbGNuSnZjaUJtYVdWc1pITWdibTl1TFdWdWRXMWxjbUZpYkdWY2JpQWdMeThnYUhSMGNEb3ZMMjF6Wkc0dWJXbGpjbTl6YjJaMExtTnZiUzlsYmkxMWN5OXNhV0p5WVhKNUwybGxMMlIzZHpVeWMySjBLSFk5ZG5NdU9UUXBMbUZ6Y0hoY2JpQWdhV1lnS0dselJYSnliM0lvZG1Gc2RXVXBYRzRnSUNBZ0lDQW1KaUFvYTJWNWN5NXBibVJsZUU5bUtDZHRaWE56WVdkbEp5a2dQajBnTUNCOGZDQnJaWGx6TG1sdVpHVjRUMllvSjJSbGMyTnlhWEIwYVc5dUp5a2dQajBnTUNrcElIdGNiaUFnSUNCeVpYUjFjbTRnWm05eWJXRjBSWEp5YjNJb2RtRnNkV1VwTzF4dUlDQjlYRzVjYmlBZ0x5OGdVMjl0WlNCMGVYQmxJRzltSUc5aWFtVmpkQ0IzYVhSb2IzVjBJSEJ5YjNCbGNuUnBaWE1nWTJGdUlHSmxJSE5vYjNKMFkzVjBkR1ZrTGx4dUlDQnBaaUFvYTJWNWN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0JwWmlBb2FYTkdkVzVqZEdsdmJpaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lIWmhjaUJ1WVcxbElEMGdkbUZzZFdVdWJtRnRaU0EvSUNjNklDY2dLeUIyWVd4MVpTNXVZVzFsSURvZ0p5YzdYRzRnSUNBZ0lDQnlaWFIxY200Z1kzUjRMbk4wZVd4cGVtVW9KMXRHZFc1amRHbHZiaWNnS3lCdVlXMWxJQ3NnSjEwbkxDQW5jM0JsWTJsaGJDY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9hWE5TWldkRmVIQW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kzUjRMbk4wZVd4cGVtVW9VbVZuUlhod0xuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0haaGJIVmxLU3dnSjNKbFoyVjRjQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvYVhORVlYUmxLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLRVJoZEdVdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bkxtTmhiR3dvZG1Gc2RXVXBMQ0FuWkdGMFpTY3BPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9hWE5GY25KdmNpaDJZV3gxWlNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWIzSnRZWFJGY25KdmNpaDJZV3gxWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJR0poYzJVZ1BTQW5KeXdnWVhKeVlYa2dQU0JtWVd4elpTd2dZbkpoWTJWeklEMGdXeWQ3Snl3Z0ozMG5YVHRjYmx4dUlDQXZMeUJOWVd0bElFRnljbUY1SUhOaGVTQjBhR0YwSUhSb1pYa2dZWEpsSUVGeWNtRjVYRzRnSUdsbUlDaHBjMEZ5Y21GNUtIWmhiSFZsS1NrZ2UxeHVJQ0FnSUdGeWNtRjVJRDBnZEhKMVpUdGNiaUFnSUNCaWNtRmpaWE1nUFNCYkoxc25MQ0FuWFNkZE8xeHVJQ0I5WEc1Y2JpQWdMeThnVFdGclpTQm1kVzVqZEdsdmJuTWdjMkY1SUhSb1lYUWdkR2hsZVNCaGNtVWdablZ1WTNScGIyNXpYRzRnSUdsbUlDaHBjMFoxYm1OMGFXOXVLSFpoYkhWbEtTa2dlMXh1SUNBZ0lIWmhjaUJ1SUQwZ2RtRnNkV1V1Ym1GdFpTQS9JQ2M2SUNjZ0t5QjJZV3gxWlM1dVlXMWxJRG9nSnljN1hHNGdJQ0FnWW1GelpTQTlJQ2NnVzBaMWJtTjBhVzl1SnlBcklHNGdLeUFuWFNjN1hHNGdJSDFjYmx4dUlDQXZMeUJOWVd0bElGSmxaMFY0Y0hNZ2MyRjVJSFJvWVhRZ2RHaGxlU0JoY21VZ1VtVm5SWGh3YzF4dUlDQnBaaUFvYVhOU1pXZEZlSEFvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdZbUZ6WlNBOUlDY2dKeUFySUZKbFowVjRjQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaDJZV3gxWlNrN1hHNGdJSDFjYmx4dUlDQXZMeUJOWVd0bElHUmhkR1Z6SUhkcGRHZ2djSEp2Y0dWeWRHbGxjeUJtYVhKemRDQnpZWGtnZEdobElHUmhkR1ZjYmlBZ2FXWWdLR2x6UkdGMFpTaDJZV3gxWlNrcElIdGNiaUFnSUNCaVlYTmxJRDBnSnlBbklDc2dSR0YwWlM1d2NtOTBiM1I1Y0dVdWRHOVZWRU5UZEhKcGJtY3VZMkZzYkNoMllXeDFaU2s3WEc0Z0lIMWNibHh1SUNBdkx5Qk5ZV3RsSUdWeWNtOXlJSGRwZEdnZ2JXVnpjMkZuWlNCbWFYSnpkQ0J6WVhrZ2RHaGxJR1Z5Y205eVhHNGdJR2xtSUNocGMwVnljbTl5S0haaGJIVmxLU2tnZTF4dUlDQWdJR0poYzJVZ1BTQW5JQ2NnS3lCbWIzSnRZWFJGY25KdmNpaDJZV3gxWlNrN1hHNGdJSDFjYmx4dUlDQnBaaUFvYTJWNWN5NXNaVzVuZEdnZ1BUMDlJREFnSmlZZ0tDRmhjbkpoZVNCOGZDQjJZV3gxWlM1c1pXNW5kR2dnUFQwZ01Da3BJSHRjYmlBZ0lDQnlaWFIxY200Z1luSmhZMlZ6V3pCZElDc2dZbUZ6WlNBcklHSnlZV05sYzFzeFhUdGNiaUFnZlZ4dVhHNGdJR2xtSUNoeVpXTjFjbk5sVkdsdFpYTWdQQ0F3S1NCN1hHNGdJQ0FnYVdZZ0tHbHpVbVZuUlhod0tIWmhiSFZsS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa3NJQ2R5WldkbGVIQW5LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOMGVDNXpkSGxzYVhwbEtDZGJUMkpxWldOMFhTY3NJQ2R6Y0dWamFXRnNKeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWTNSNExuTmxaVzR1Y0hWemFDaDJZV3gxWlNrN1hHNWNiaUFnZG1GeUlHOTFkSEIxZER0Y2JpQWdhV1lnS0dGeWNtRjVLU0I3WEc0Z0lDQWdiM1YwY0hWMElEMGdabTl5YldGMFFYSnlZWGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l3Z2EyVjVjeWs3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYjNWMGNIVjBJRDBnYTJWNWN5NXRZWEFvWm5WdVkzUnBiMjRvYTJWNUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptOXliV0YwVUhKdmNHVnlkSGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l3Z2EyVjVMQ0JoY25KaGVTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JqZEhndWMyVmxiaTV3YjNBb0tUdGNibHh1SUNCeVpYUjFjbTRnY21Wa2RXTmxWRzlUYVc1bmJHVlRkSEpwYm1jb2IzVjBjSFYwTENCaVlYTmxMQ0JpY21GalpYTXBPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR1p2Y20xaGRGQnlhVzFwZEdsMlpTaGpkSGdzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2hwYzFWdVpHVm1hVzVsWkNoMllXeDFaU2twWEc0Z0lDQWdjbVYwZFhKdUlHTjBlQzV6ZEhsc2FYcGxLQ2QxYm1SbFptbHVaV1FuTENBbmRXNWtaV1pwYm1Wa0p5azdYRzRnSUdsbUlDaHBjMU4wY21sdVp5aDJZV3gxWlNrcElIdGNiaUFnSUNCMllYSWdjMmx0Y0d4bElEMGdKMXhjSnljZ0t5QktVMDlPTG5OMGNtbHVaMmxtZVNoMllXeDFaU2t1Y21Wd2JHRmpaU2d2WGx3aWZGd2lKQzluTENBbkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzhuTDJjc0lGd2lYRnhjWENkY0lpbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzljWEZ4Y1hDSXZaeXdnSjF3aUp5a2dLeUFuWEZ3bkp6dGNiaUFnSUNCeVpYUjFjbTRnWTNSNExuTjBlV3hwZW1Vb2MybHRjR3hsTENBbmMzUnlhVzVuSnlrN1hHNGdJSDFjYmlBZ2FXWWdLR2x6VG5WdFltVnlLSFpoYkhWbEtTbGNiaUFnSUNCeVpYUjFjbTRnWTNSNExuTjBlV3hwZW1Vb0p5Y2dLeUIyWVd4MVpTd2dKMjUxYldKbGNpY3BPMXh1SUNCcFppQW9hWE5DYjI5c1pXRnVLSFpoYkhWbEtTbGNiaUFnSUNCeVpYUjFjbTRnWTNSNExuTjBlV3hwZW1Vb0p5Y2dLeUIyWVd4MVpTd2dKMkp2YjJ4bFlXNG5LVHRjYmlBZ0x5OGdSbTl5SUhOdmJXVWdjbVZoYzI5dUlIUjVjR1Z2WmlCdWRXeHNJR2x6SUZ3aWIySnFaV04wWENJc0lITnZJSE53WldOcFlXd2dZMkZ6WlNCb1pYSmxMbHh1SUNCcFppQW9hWE5PZFd4c0tIWmhiSFZsS1NsY2JpQWdJQ0J5WlhSMWNtNGdZM1I0TG5OMGVXeHBlbVVvSjI1MWJHd25MQ0FuYm5Wc2JDY3BPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJR1p2Y20xaGRFVnljbTl5S0haaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlBbld5Y2dLeUJGY25KdmNpNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoMllXeDFaU2tnS3lBblhTYzdYRzU5WEc1Y2JseHVablZ1WTNScGIyNGdabTl5YldGMFFYSnlZWGtvWTNSNExDQjJZV3gxWlN3Z2NtVmpkWEp6WlZScGJXVnpMQ0IyYVhOcFlteGxTMlY1Y3l3Z2EyVjVjeWtnZTF4dUlDQjJZWElnYjNWMGNIVjBJRDBnVzEwN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnZG1Gc2RXVXViR1Z1WjNSb095QnBJRHdnYkRzZ0t5dHBLU0I3WEc0Z0lDQWdhV1lnS0doaGMwOTNibEJ5YjNCbGNuUjVLSFpoYkhWbExDQlRkSEpwYm1jb2FTa3BLU0I3WEc0Z0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNobWIzSnRZWFJRY205d1pYSjBlU2hqZEhnc0lIWmhiSFZsTENCeVpXTjFjbk5sVkdsdFpYTXNJSFpwYzJsaWJHVkxaWGx6TEZ4dUlDQWdJQ0FnSUNBZ0lGTjBjbWx1WnlocEtTd2dkSEoxWlNrcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNnbkp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHdGxlWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWhyWlhrcElIdGNiaUFnSUNCcFppQW9JV3RsZVM1dFlYUmphQ2d2WGx4Y1pDc2tMeWtwSUh0Y2JpQWdJQ0FnSUc5MWRIQjFkQzV3ZFhOb0tHWnZjbTFoZEZCeWIzQmxjblI1S0dOMGVDd2dkbUZzZFdVc0lISmxZM1Z5YzJWVWFXMWxjeXdnZG1semFXSnNaVXRsZVhNc1hHNGdJQ0FnSUNBZ0lDQWdhMlY1TENCMGNuVmxLU2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnY21WMGRYSnVJRzkxZEhCMWREdGNibjFjYmx4dVhHNW1kVzVqZEdsdmJpQm1iM0p0WVhSUWNtOXdaWEowZVNoamRIZ3NJSFpoYkhWbExDQnlaV04xY25ObFZHbHRaWE1zSUhacGMybGliR1ZMWlhsekxDQnJaWGtzSUdGeWNtRjVLU0I3WEc0Z0lIWmhjaUJ1WVcxbExDQnpkSElzSUdSbGMyTTdYRzRnSUdSbGMyTWdQU0JQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtIWmhiSFZsTENCclpYa3BJSHg4SUhzZ2RtRnNkV1U2SUhaaGJIVmxXMnRsZVYwZ2ZUdGNiaUFnYVdZZ0tHUmxjMk11WjJWMEtTQjdYRzRnSUNBZ2FXWWdLR1JsYzJNdWMyVjBLU0I3WEc0Z0lDQWdJQ0J6ZEhJZ1BTQmpkSGd1YzNSNWJHbDZaU2duVzBkbGRIUmxjaTlUWlhSMFpYSmRKeXdnSjNOd1pXTnBZV3duS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjM1J5SUQwZ1kzUjRMbk4wZVd4cGVtVW9KMXRIWlhSMFpYSmRKeXdnSjNOd1pXTnBZV3duS1R0Y2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYVdZZ0tHUmxjMk11YzJWMEtTQjdYRzRnSUNBZ0lDQnpkSElnUFNCamRIZ3VjM1I1YkdsNlpTZ25XMU5sZEhSbGNsMG5MQ0FuYzNCbFkybGhiQ2NwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JwWmlBb0lXaGhjMDkzYmxCeWIzQmxjblI1S0hacGMybGliR1ZMWlhsekxDQnJaWGtwS1NCN1hHNGdJQ0FnYm1GdFpTQTlJQ2RiSnlBcklHdGxlU0FySUNkZEp6dGNiaUFnZlZ4dUlDQnBaaUFvSVhOMGNpa2dlMXh1SUNBZ0lHbG1JQ2hqZEhndWMyVmxiaTVwYm1SbGVFOW1LR1JsYzJNdWRtRnNkV1VwSUR3Z01Da2dlMXh1SUNBZ0lDQWdhV1lnS0dselRuVnNiQ2h5WldOMWNuTmxWR2x0WlhNcEtTQjdYRzRnSUNBZ0lDQWdJSE4wY2lBOUlHWnZjbTFoZEZaaGJIVmxLR04wZUN3Z1pHVnpZeTUyWVd4MVpTd2diblZzYkNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCemRISWdQU0JtYjNKdFlYUldZV3gxWlNoamRIZ3NJR1JsYzJNdWRtRnNkV1VzSUhKbFkzVnljMlZVYVcxbGN5QXRJREVwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tITjBjaTVwYm1SbGVFOW1LQ2RjWEc0bktTQStJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoY25KaGVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhOMGNpQTlJSE4wY2k1emNHeHBkQ2duWEZ4dUp5a3ViV0Z3S0daMWJtTjBhVzl1S0d4cGJtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBbklDQW5JQ3NnYkdsdVpUdGNiaUFnSUNBZ0lDQWdJQ0I5S1M1cWIybHVLQ2RjWEc0bktTNXpkV0p6ZEhJb01pazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYzNSeUlEMGdKMXhjYmljZ0t5QnpkSEl1YzNCc2FYUW9KMXhjYmljcExtMWhjQ2htZFc1amRHbHZiaWhzYVc1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnSnlBZ0lDY2dLeUJzYVc1bE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTG1wdmFXNG9KMXhjYmljcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhOMGNpQTlJR04wZUM1emRIbHNhWHBsS0NkYlEybHlZM1ZzWVhKZEp5d2dKM053WldOcFlXd25LVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdhV1lnS0dselZXNWtaV1pwYm1Wa0tHNWhiV1VwS1NCN1hHNGdJQ0FnYVdZZ0tHRnljbUY1SUNZbUlHdGxlUzV0WVhSamFDZ3ZYbHhjWkNza0x5a3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpkSEk3WEc0Z0lDQWdmVnh1SUNBZ0lHNWhiV1VnUFNCS1UwOU9Mbk4wY21sdVoybG1lU2duSnlBcklHdGxlU2s3WEc0Z0lDQWdhV1lnS0c1aGJXVXViV0YwWTJnb0wxNWNJaWhiWVMxNlFTMWFYMTFiWVMxNlFTMWFYekF0T1YwcUtWd2lKQzhwS1NCN1hHNGdJQ0FnSUNCdVlXMWxJRDBnYm1GdFpTNXpkV0p6ZEhJb01Td2dibUZ0WlM1c1pXNW5kR2dnTFNBeUtUdGNiaUFnSUNBZ0lHNWhiV1VnUFNCamRIZ3VjM1I1YkdsNlpTaHVZVzFsTENBbmJtRnRaU2NwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnVZVzFsSUQwZ2JtRnRaUzV5WlhCc1lXTmxLQzhuTDJjc0lGd2lYRnhjWENkY0lpbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MMXhjWEZ4Y0lpOW5MQ0FuWENJbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjbVZ3YkdGalpTZ3ZLRjVjSW54Y0lpUXBMMmNzSUZ3aUoxd2lLVHRjYmlBZ0lDQWdJRzVoYldVZ1BTQmpkSGd1YzNSNWJHbDZaU2h1WVcxbExDQW5jM1J5YVc1bkp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHNWhiV1VnS3lBbk9pQW5JQ3NnYzNSeU8xeHVmVnh1WEc1Y2JtWjFibU4wYVc5dUlISmxaSFZqWlZSdlUybHVaMnhsVTNSeWFXNW5LRzkxZEhCMWRDd2dZbUZ6WlN3Z1luSmhZMlZ6S1NCN1hHNGdJSFpoY2lCdWRXMU1hVzVsYzBWemRDQTlJREE3WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0J2ZFhSd2RYUXVjbVZrZFdObEtHWjFibU4wYVc5dUtIQnlaWFlzSUdOMWNpa2dlMXh1SUNBZ0lHNTFiVXhwYm1WelJYTjBLeXM3WEc0Z0lDQWdhV1lnS0dOMWNpNXBibVJsZUU5bUtDZGNYRzRuS1NBK1BTQXdLU0J1ZFcxTWFXNWxjMFZ6ZENzck8xeHVJQ0FnSUhKbGRIVnliaUJ3Y21WMklDc2dZM1Z5TG5KbGNHeGhZMlVvTDF4Y2RUQXdNV0pjWEZ0Y1hHUmNYR1EvYlM5bkxDQW5KeWt1YkdWdVozUm9JQ3NnTVR0Y2JpQWdmU3dnTUNrN1hHNWNiaUFnYVdZZ0tHeGxibWQwYUNBK0lEWXdLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHSnlZV05sYzFzd1hTQXJYRzRnSUNBZ0lDQWdJQ0FnSUNoaVlYTmxJRDA5UFNBbkp5QS9JQ2NuSURvZ1ltRnpaU0FySUNkY1hHNGdKeWtnSzF4dUlDQWdJQ0FnSUNBZ0lDQW5JQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWFtOXBiaWduTEZ4Y2JpQWdKeWtnSzF4dUlDQWdJQ0FnSUNBZ0lDQW5JQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQmljbUZqWlhOYk1WMDdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZbkpoWTJWeld6QmRJQ3NnWW1GelpTQXJJQ2NnSnlBcklHOTFkSEIxZEM1cWIybHVLQ2NzSUNjcElDc2dKeUFuSUNzZ1luSmhZMlZ6V3pGZE8xeHVmVnh1WEc1Y2JpOHZJRTVQVkVVNklGUm9aWE5sSUhSNWNHVWdZMmhsWTJ0cGJtY2dablZ1WTNScGIyNXpJR2x1ZEdWdWRHbHZibUZzYkhrZ1pHOXVKM1FnZFhObElHQnBibk4wWVc1alpXOW1ZRnh1THk4Z1ltVmpZWFZ6WlNCcGRDQnBjeUJtY21GbmFXeGxJR0Z1WkNCallXNGdZbVVnWldGemFXeDVJR1poYTJWa0lIZHBkR2dnWUU5aWFtVmpkQzVqY21WaGRHVW9LV0F1WEc1bWRXNWpkR2x2YmlCcGMwRnljbUY1S0dGeUtTQjdYRzRnSUhKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHRnlLVHRjYm4xY2JtVjRjRzl5ZEhNdWFYTkJjbkpoZVNBOUlHbHpRWEp5WVhrN1hHNWNibVoxYm1OMGFXOXVJR2x6UW05dmJHVmhiaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZGliMjlzWldGdUp6dGNibjFjYm1WNGNHOXlkSE11YVhOQ2IyOXNaV0Z1SUQwZ2FYTkNiMjlzWldGdU8xeHVYRzVtZFc1amRHbHZiaUJwYzA1MWJHd29ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnUFQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUblZzYkNBOUlHbHpUblZzYkR0Y2JseHVablZ1WTNScGIyNGdhWE5PZFd4c1QzSlZibVJsWm1sdVpXUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnUFQwZ2JuVnNiRHRjYm4xY2JtVjRjRzl5ZEhNdWFYTk9kV3hzVDNKVmJtUmxabWx1WldRZ1BTQnBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpEdGNibHh1Wm5WdVkzUnBiMjRnYVhOT2RXMWlaWElvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp6dGNibjFjYm1WNGNHOXlkSE11YVhOT2RXMWlaWElnUFNCcGMwNTFiV0psY2p0Y2JseHVablZ1WTNScGIyNGdhWE5UZEhKcGJtY29ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmMzUnlhVzVuSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5UZEhKcGJtY2dQU0JwYzFOMGNtbHVaenRjYmx4dVpuVnVZM1JwYjI0Z2FYTlRlVzFpYjJ3b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYzNsdFltOXNKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlRlVzFpYjJ3Z1BTQnBjMU41YldKdmJEdGNibHh1Wm5WdVkzUnBiMjRnYVhOVmJtUmxabWx1WldRb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCaGNtY2dQVDA5SUhadmFXUWdNRHRjYm4xY2JtVjRjRzl5ZEhNdWFYTlZibVJsWm1sdVpXUWdQU0JwYzFWdVpHVm1hVzVsWkR0Y2JseHVablZ1WTNScGIyNGdhWE5TWldkRmVIQW9jbVVwSUh0Y2JpQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtISmxLU0FtSmlCdlltcGxZM1JVYjFOMGNtbHVaeWh5WlNrZ1BUMDlJQ2RiYjJKcVpXTjBJRkpsWjBWNGNGMG5PMXh1ZlZ4dVpYaHdiM0owY3k1cGMxSmxaMFY0Y0NBOUlHbHpVbVZuUlhod08xeHVYRzVtZFc1amRHbHZiaUJwYzA5aWFtVmpkQ2hoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZHZZbXBsWTNRbklDWW1JR0Z5WnlBaFBUMGdiblZzYkR0Y2JuMWNibVY0Y0c5eWRITXVhWE5QWW1wbFkzUWdQU0JwYzA5aWFtVmpkRHRjYmx4dVpuVnVZM1JwYjI0Z2FYTkVZWFJsS0dRcElIdGNiaUFnY21WMGRYSnVJR2x6VDJKcVpXTjBLR1FwSUNZbUlHOWlhbVZqZEZSdlUzUnlhVzVuS0dRcElEMDlQU0FuVzI5aWFtVmpkQ0JFWVhSbFhTYzdYRzU5WEc1bGVIQnZjblJ6TG1selJHRjBaU0E5SUdselJHRjBaVHRjYmx4dVpuVnVZM1JwYjI0Z2FYTkZjbkp2Y2lobEtTQjdYRzRnSUhKbGRIVnliaUJwYzA5aWFtVmpkQ2hsS1NBbUpseHVJQ0FnSUNBZ0tHOWlhbVZqZEZSdlUzUnlhVzVuS0dVcElEMDlQU0FuVzI5aWFtVmpkQ0JGY25KdmNsMG5JSHg4SUdVZ2FXNXpkR0Z1WTJWdlppQkZjbkp2Y2lrN1hHNTlYRzVsZUhCdmNuUnpMbWx6UlhKeWIzSWdQU0JwYzBWeWNtOXlPMXh1WEc1bWRXNWpkR2x2YmlCcGMwWjFibU4wYVc5dUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjJaMWJtTjBhVzl1Snp0Y2JuMWNibVY0Y0c5eWRITXVhWE5HZFc1amRHbHZiaUE5SUdselJuVnVZM1JwYjI0N1hHNWNibVoxYm1OMGFXOXVJR2x6VUhKcGJXbDBhWFpsS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnWVhKbklEMDlQU0J1ZFd4c0lIeDhYRzRnSUNBZ0lDQWdJQ0IwZVhCbGIyWWdZWEpuSUQwOVBTQW5ZbTl2YkdWaGJpY2dmSHhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2R1ZFcxaVpYSW5JSHg4WEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuYzNSeWFXNW5KeUI4ZkZ4dUlDQWdJQ0FnSUNBZ2RIbHdaVzltSUdGeVp5QTlQVDBnSjNONWJXSnZiQ2NnZkh3Z0lDOHZJRVZUTmlCemVXMWliMnhjYmlBZ0lDQWdJQ0FnSUhSNWNHVnZaaUJoY21jZ1BUMDlJQ2QxYm1SbFptbHVaV1FuTzF4dWZWeHVaWGh3YjNKMGN5NXBjMUJ5YVcxcGRHbDJaU0E5SUdselVISnBiV2wwYVhabE8xeHVYRzVsZUhCdmNuUnpMbWx6UW5WbVptVnlJRDBnY21WeGRXbHlaU2duTGk5emRYQndiM0owTDJselFuVm1abVZ5SnlrN1hHNWNibVoxYm1OMGFXOXVJRzlpYW1WamRGUnZVM1J5YVc1bktHOHBJSHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWN1WTJGc2JDaHZLVHRjYm4xY2JseHVYRzVtZFc1amRHbHZiaUJ3WVdRb2Jpa2dlMXh1SUNCeVpYUjFjbTRnYmlBOElERXdJRDhnSnpBbklDc2diaTUwYjFOMGNtbHVaeWd4TUNrZ09pQnVMblJ2VTNSeWFXNW5LREV3S1R0Y2JuMWNibHh1WEc1MllYSWdiVzl1ZEdoeklEMGdXeWRLWVc0bkxDQW5SbVZpSnl3Z0owMWhjaWNzSUNkQmNISW5MQ0FuVFdGNUp5d2dKMHAxYmljc0lDZEtkV3duTENBblFYVm5KeXdnSjFObGNDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFBZM1FuTENBblRtOTJKeXdnSjBSbFl5ZGRPMXh1WEc0dkx5QXlOaUJHWldJZ01UWTZNVGs2TXpSY2JtWjFibU4wYVc5dUlIUnBiV1Z6ZEdGdGNDZ3BJSHRjYmlBZ2RtRnlJR1FnUFNCdVpYY2dSR0YwWlNncE8xeHVJQ0IyWVhJZ2RHbHRaU0E5SUZ0d1lXUW9aQzVuWlhSSWIzVnljeWdwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGa0tHUXVaMlYwVFdsdWRYUmxjeWdwS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGa0tHUXVaMlYwVTJWamIyNWtjeWdwS1YwdWFtOXBiaWduT2ljcE8xeHVJQ0J5WlhSMWNtNGdXMlF1WjJWMFJHRjBaU2dwTENCdGIyNTBhSE5iWkM1blpYUk5iMjUwYUNncFhTd2dkR2x0WlYwdWFtOXBiaWduSUNjcE8xeHVmVnh1WEc1Y2JpOHZJR3h2WnlCcGN5QnFkWE4wSUdFZ2RHaHBiaUIzY21Gd2NHVnlJSFJ2SUdOdmJuTnZiR1V1Ykc5bklIUm9ZWFFnY0hKbGNHVnVaSE1nWVNCMGFXMWxjM1JoYlhCY2JtVjRjRzl5ZEhNdWJHOW5JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJR052Ym5OdmJHVXViRzluS0NjbGN5QXRJQ1Z6Snl3Z2RHbHRaWE4wWVcxd0tDa3NJR1Y0Y0c5eWRITXVabTl5YldGMExtRndjR3g1S0dWNGNHOXlkSE1zSUdGeVozVnRaVzUwY3lrcE8xeHVmVHRjYmx4dVhHNHZLaXBjYmlBcUlFbHVhR1Z5YVhRZ2RHaGxJSEJ5YjNSdmRIbHdaU0J0WlhSb2IyUnpJR1p5YjIwZ2IyNWxJR052Ym5OMGNuVmpkRzl5SUdsdWRHOGdZVzV2ZEdobGNpNWNiaUFxWEc0Z0tpQlVhR1VnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTG1sdWFHVnlhWFJ6SUdaeWIyMGdiR0Z1Wnk1cWN5QnlaWGR5YVhSMFpXNGdZWE1nWVNCemRHRnVaR0ZzYjI1bFhHNGdLaUJtZFc1amRHbHZiaUFvYm05MElHOXVJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaU2t1SUU1UFZFVTZJRWxtSUhSb2FYTWdabWxzWlNCcGN5QjBieUJpWlNCc2IyRmtaV1JjYmlBcUlHUjFjbWx1WnlCaWIyOTBjM1J5WVhCd2FXNW5JSFJvYVhNZ1puVnVZM1JwYjI0Z2JtVmxaSE1nZEc4Z1ltVWdjbVYzY21sMGRHVnVJSFZ6YVc1bklITnZiV1VnYm1GMGFYWmxYRzRnS2lCbWRXNWpkR2x2Ym5NZ1lYTWdjSEp2ZEc5MGVYQmxJSE5sZEhWd0lIVnphVzVuSUc1dmNtMWhiQ0JLWVhaaFUyTnlhWEIwSUdSdlpYTWdibTkwSUhkdmNtc2dZWE5jYmlBcUlHVjRjR1ZqZEdWa0lHUjFjbWx1WnlCaWIyOTBjM1J5WVhCd2FXNW5JQ2h6WldVZ2JXbHljbTl5TG1weklHbHVJSEl4TVRRNU1ETXBMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNTlJR04wYjNJZ1EyOXVjM1J5ZFdOMGIzSWdablZ1WTNScGIyNGdkMmhwWTJnZ2JtVmxaSE1nZEc4Z2FXNW9aWEpwZENCMGFHVmNiaUFxSUNBZ0lDQndjbTkwYjNSNWNHVXVYRzRnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1ZlNCemRYQmxja04wYjNJZ1EyOXVjM1J5ZFdOMGIzSWdablZ1WTNScGIyNGdkRzhnYVc1b1pYSnBkQ0J3Y205MGIzUjVjR1VnWm5KdmJTNWNiaUFxTDF4dVpYaHdiM0owY3k1cGJtaGxjbWwwY3lBOUlISmxjWFZwY21Vb0oybHVhR1Z5YVhSekp5azdYRzVjYm1WNGNHOXlkSE11WDJWNGRHVnVaQ0E5SUdaMWJtTjBhVzl1S0c5eWFXZHBiaXdnWVdSa0tTQjdYRzRnSUM4dklFUnZiaWQwSUdSdklHRnVlWFJvYVc1bklHbG1JR0ZrWkNCcGMyNG5kQ0JoYmlCdlltcGxZM1JjYmlBZ2FXWWdLQ0ZoWkdRZ2ZId2dJV2x6VDJKcVpXTjBLR0ZrWkNrcElISmxkSFZ5YmlCdmNtbG5hVzQ3WEc1Y2JpQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loaFpHUXBPMXh1SUNCMllYSWdhU0E5SUd0bGVYTXViR1Z1WjNSb08xeHVJQ0IzYUdsc1pTQW9hUzB0S1NCN1hHNGdJQ0FnYjNKcFoybHVXMnRsZVhOYmFWMWRJRDBnWVdSa1cydGxlWE5iYVYxZE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdmNtbG5hVzQ3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJvWVhOUGQyNVFjbTl3WlhKMGVTaHZZbW9zSUhCeWIzQXBJSHRjYmlBZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltb3NJSEJ5YjNBcE8xeHVmVnh1SWl3aWRtRnlJR2M3WEc1Y2JpOHZJRlJvYVhNZ2QyOXlhM01nYVc0Z2JtOXVMWE4wY21samRDQnRiMlJsWEc1bklEMGdLR1oxYm1OMGFXOXVLQ2tnZTF4dVhIUnlaWFIxY200Z2RHaHBjenRjYm4wcEtDazdYRzVjYm5SeWVTQjdYRzVjZEM4dklGUm9hWE1nZDI5eWEzTWdhV1lnWlhaaGJDQnBjeUJoYkd4dmQyVmtJQ2h6WldVZ1ExTlFLVnh1WEhSbklEMGdaeUI4ZkNCdVpYY2dSblZ1WTNScGIyNG9YQ0p5WlhSMWNtNGdkR2hwYzF3aUtTZ3BPMXh1ZlNCallYUmphQ0FvWlNrZ2UxeHVYSFF2THlCVWFHbHpJSGR2Y210eklHbG1JSFJvWlNCM2FXNWtiM2NnY21WbVpYSmxibU5sSUdseklHRjJZV2xzWVdKc1pWeHVYSFJwWmlBb2RIbHdaVzltSUhkcGJtUnZkeUE5UFQwZ1hDSnZZbXBsWTNSY0lpa2daeUE5SUhkcGJtUnZkenRjYm4xY2JseHVMeThnWnlCallXNGdjM1JwYkd3Z1ltVWdkVzVrWldacGJtVmtMQ0JpZFhRZ2JtOTBhR2x1WnlCMGJ5QmtieUJoWW05MWRDQnBkQzR1TGx4dUx5OGdWMlVnY21WMGRYSnVJSFZ1WkdWbWFXNWxaQ3dnYVc1emRHVmhaQ0J2WmlCdWIzUm9hVzVuSUdobGNtVXNJSE52SUdsMEozTmNiaTh2SUdWaGMybGxjaUIwYnlCb1lXNWtiR1VnZEdocGN5QmpZWE5sTGlCcFppZ2haMnh2WW1Gc0tTQjdJQzR1TG4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm5PMXh1SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbGVIUmxibVJjYmx4dWRtRnlJR2hoYzA5M2JsQnliM0JsY25SNUlEMGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVR0Y2JseHVablZ1WTNScGIyNGdaWGgwWlc1a0tDa2dlMXh1SUNBZ0lIWmhjaUIwWVhKblpYUWdQU0I3ZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlITnZkWEpqWlNBOUlHRnlaM1Z0Wlc1MGMxdHBYVnh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUd0bGVTQnBiaUJ6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0hOdmRYSmpaU3dnYTJWNUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRGdHJaWGxkSUQwZ2MyOTFjbU5sVzJ0bGVWMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwWVhKblpYUmNibjFjYmlJc0ltbHRjRzl5ZENCN1JtVjBZMmdzSUZCT1J5d2dVM1J5WldGdGZTQm1jbTl0SUNkallYVnpZV3d0Ym1WMExuVjBhV3h6Snp0Y2JseHVZMjl1YzNRZ1VFNUhSbWxzWlUxcGVHbHVjeUE5SUNoVGRHOXlZV2RsUTJ4aGMzTXBQVDRnWTJ4aGMzTWdaWGgwWlc1a2N5QlRkRzl5WVdkbFEyeGhjM043WEc0Z1hHNGdJQ0FnWVhONWJtTWdjbVZoWkZCT1IwWnBiR1VvWm1sc1pWQmhkR2dwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdkR2hwY3k1eVpXRmtSbWxzWlNobWFXeGxVR0YwYUN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQWdlMzBnWm1sc1pWQmhkR2hjYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHQ5SUdSaGRHRmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGMzbHVZeUIzY21sMFpWQk9SMFpwYkdVb1ptbHNaVkJoZEdnc0lHbHRaMEoxWm1abGNpbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhkMkZwZENCMGFHbHpMbmR5YVhSbFJtbHNaU2htYVd4bFVHRjBhQ3dnYVcxblFuVm1abVZ5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoYzNsdVl5Qm1aWFJqYUZCT1J5aDFjbXdwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1lYTjVibU1nS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2s5UG50Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCeVpXRmtaWElnUFNCaGQyRnBkQ0JHWlhSamFDNXpkSEpsWVcxRVlYUmhLSFZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NHNW5JRDBnYm1WM0lGQk9SeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzVuTG05dUtDZHdZWEp6WldRbkxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9kR2hwY3k1a1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHNW5MbTl1S0NkbGNuSnZjaWNzS0dWeWNpazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWVdSbGNpNXdhWEJsS0hCdVp5azdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0Z6ZVc1aklHWmxkR05vVUU1SFJtbHNaU2gxY213c0lHWnBiR1ZRWVhSb0tYdGNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRWdQU0JoZDJGcGRDQjBhR2x6TG1abGRHTm9VRTVIS0hWeWJDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmhkMkZwZENCMGFHbHpMbmR5YVhSbFVFNUhSbWxzWlNobWFXeGxVR0YwYUN3Z1pHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZWE41Ym1NZ2MzUnlaV0Z0VUU1SFJtbHNaU2gxY213c0lHWnBiR1ZRWVhSb0xDQjBjbUZ1YzJaeWIyMUdiaWw3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRVZ5Y205eUtDZHBiWEJzWlcxbGJuUWdjbVZ4ZFdseVpXUW5LVHRjYmlBZ0lDQjlYRzU5TzF4dVpYaHdiM0owSUdSbFptRjFiSFFnVUU1SFJtbHNaVTFwZUdsdWN6dGNiaUFnSUNBaUxDSmxlSEJ2Y25RZ1pHVm1ZWFZzZENCamJHRnpjeUJpWVhObFUzUnZjbUZuWlh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loemRHOXlZV2RsS1h0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5eVlXZGxJRDBnYzNSdmNtRm5aVHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBJRU52Y21WVGRHOXlZV2RsS0NsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wYjNKaFoyVTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUh0UWJHRjBabTl5YlN3Z1JtVjBZMmg5SUdaeWIyMGdKMk5oZFhOaGJDMXVaWFF1ZFhScGJITW5PMXh1YVcxd2IzSjBJSHRrWldaaGRXeDBJR0Z6SUVKaGMyVlRkRzl5WVdkbGZTQm1jbTl0SUNjdUwySmhjMlZUZEc5eVlXZGxKenRjYm1sdGNHOXlkQ0I3WkdWbVlYVnNkQ0JoY3lCUVRrZEdhV3hsVFdsNGFXNXpmU0JtY205dElDY3VMMUJPUjBacGJHVk5hWGhwYm5Nbk8xeHVhVzF3YjNKMElIdGtaV1poZFd4MElHRnpJRXhsZG1Wc1JHOTNiazFwZUdsdWMzMGdabkp2YlNBbkxpOXBibVJsZUVSQ1UzUnZjbUZuWlM1dGFYaHBibk11Ym05a1pTYzdYRzVwYlhCdmNuUWdlMlJsWm1GMWJIUWdZWE1nVEdWMlpXeEtVMDFwZUdsdWMzMGdabkp2YlNBbkxpOXBibVJsZUVSQ1UzUnZjbUZuWlM1dGFYaHBibk11ZDJWaUp6dGNibHh1WEc1amJHRnpjeUJKYm1SbGVFUkNVM1J2Y21GblpTQmxlSFJsYm1SeklGQnNZWFJtYjNKdExtMXBlRmRwZEdnb1FtRnpaVk4wYjNKaFoyVXNJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdKMjV2WkdVbk9pQmJUR1YyWld4RWIzZHVUV2w0YVc1ekxDQlFUa2RHYVd4bFRXbDRhVzV6WFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmQyVmlKem9nVzB4bGRtVnNTbE5OYVhocGJuTXNJRkJPUjBacGJHVk5hWGhwYm5OZGZTbDdYRzVjYmlBZ0lDQnlaV1p2Y20xaGRHVk9ZVzFsS0d0bGVTbDdYRzRnSUNBZ0lDQWdJR3RsZVNBOUlHdGxlUzV5WlhCc1lXTmxLQzljWEM5N01pd3pMRFFzTlgwdlp5d25MeWNwTzF4dUlDQWdJQ0FnSUNCcFppaHJaWGxiTUYwOVBUMG5MeWNwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHdGxlVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNjdkp5QXJJR3RsZVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCamNtVmhkR1ZEYUdWamEwWnBiR1ZPWVcxbFJtNG9ibUZ0WlNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVhSMFpYSnVJRDBnYm1GdFpUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFoyVjRJRDBnYm1WM0lGSmxaMFY0Y0NoZ1hpUjdjR0YwZEdWeWJuMHVLbUFzSjJjbktUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaG1hV3hsVG1GdFpTazlQbVpwYkdWT1lXMWxMbTFoZEdOb0tISmxaMlY0S1NCOGZDQmJYVHRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZWE41Ym1NZ1oyVjBTWFJsYlNoclpYa3NJR0Z6UW5WbVptVnlQV1poYkhObEtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzSmhaMlV1WjJWMEtHdGxlU3dnZTJGelFuVm1abVZ5ZlN3Z0tHVnljaXdnWkdGMFlTazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlobGNuSXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLSHRsY25KOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsY25KdmNpQnlaV0ZrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2UxdHJaWGxkT2lCa1lYUmhmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQmNiaUFnSUNCaGMzbHVZeUJ6WlhSSmRHVnRLR3RsZVN3Z1pHRjBZU2w3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTQTlJSFJvYVhNdWNtVm1iM0p0WVhSbFRtRnRaU2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpkRzl5WVdkbExuQjFkQ2hyWlhrc0lHUmhkR0VzSUNobGNuSXBQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pYSnlLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWg3WlhKeWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWlhKeWIzSWdkM0pwZEdVbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV3h6Wlh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHJaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCaGMzbHVZeUJrWld4SmRHVnRLR3RsZVNsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtUMCtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVJRDBnZEdocGN5NXlaV1p2Y20xaGRHVk9ZVzFsS0d0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wYjNKaFoyVXVaR1ZzS0d0bGVTd2dLR1Z5Y2lrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWhsY25JcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtIdGxjbko5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGxjbkp2Y2lCM2NtbDBaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0d0bGVTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0Z6ZVc1aklHSmhkR05vS0c5d2N5bDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLVDArZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1emRHOXlZV2RsTG1KaGRHTm9LRzl3Y3l3Z0tHVnljaXdnWkdGMFlTazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlobGNuSXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLSHRsY25KOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsY25KdmNpQnZjSE1uS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodmNITXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUdGemVXNWpJR1JsYkdWMFpVbDBaVzBvWm1sc1pWQmhkR2dwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J2Y21GblpTNWtaV3dvWm1sc1pWQmhkR2dzSUNobGNuSXBQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pYSnlLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWg3WlhKeWZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duWlhKeWIzSWdiM0J6SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2IzQnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVhONWJtTWdaR1ZzWlhSbFJtbHNaVUo1VUhKbFptbDRLR1pwYkdWUVlYUm9LWHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdSR1ZzVDNBZ1BTQW9hMlY1S1QwK0tIdDBlWEJsT2lBblpHVnNKeXdnYTJWNU9pQnJaWGw5S1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1pwYkdWTWFYTjBJRDBnWVhkaGFYUWdkR2hwY3k1blpYUkdhV3hsVEdsemRDaG1hV3hsVUdGMGFDazdYRzRnSUNBZ0lDQWdJR3hsZENCa1pXeEdhV3hsVDNCeklEMGdabWxzWlV4cGMzUXViV0Z3S0dZOVBrUmxiRTl3S0dZcEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRjNZV2wwSUhSb2FYTXVZbUYwWTJnb1pHVnNSbWxzWlU5d2N5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lYTjVibU1nWjJWMFJtbHNaVXhwYzNRb1ptbHNaVkJoZEdnOUp5OG5LWHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdUbUZ0WlZSbGMzUmxjaUE5SUhSb2FYTXVZM0psWVhSbFEyaGxZMnRHYVd4bFRtRnRaVVp1S0dacGJHVlFZWFJvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcFBUNTdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdabWxzWlV4cGMzUWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUnZjbUZuWlM1amNtVmhkR1ZMWlhsVGRISmxZVzBvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1dmJpZ25aR0YwWVNjc0lDaHJaWGtwSUQwK2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ1BTQnJaWGt1ZEc5VGRISnBibWNvSjNWMFpqZ25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9UbUZ0WlZSbGMzUmxjaWhyWlhrcExteGxibWQwYUQwOVBURXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabWxzWlV4cGMzUXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXViMjRvSjJOc2IzTmxKeXdnS0NrZ1BUNGdjbVZ6YjJ4MlpTaG1hV3hsVEdsemRDa2dLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV2YmlnblpXNWtKeXdnSUNncElEMCtJSEpsYzI5c2RtVW9abWxzWlV4cGMzUXBJQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YjI0b0oyVnljbTl5Snl3Z0tHVnljaWtnUFQ1N0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblpYSnliM0lnWjJWMFJtbHNaVXhwYzNRbktTQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQVlYTjVibU5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdJSHQ5SUdacGJHVlFZWFJvWEc0Z0lDQWdJQ292WEc0Z0lDQWdZWE41Ym1NZ2NtVmhaRVpwYkdVb1ptbHNaVkJoZEdncGUxeHVJQ0FnSUNBZ0lDQnNaWFFnYVhSbGJTQTlJR0YzWVdsMElIUm9hWE11WjJWMFNYUmxiU2htYVd4bFVHRjBhQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWdFcyWnBiR1ZRWVhSb1hUdGNiaUFnSUNCOVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUNCN2ZTQm1hV3hsVUdGMGFGeHVJQ0FnSUNBcUlFQndZWEpoYlNBZ2UzMGdaR0YwWVZ4dUlDQWdJQ0FxTDF4dUlDQWdJR0Z6ZVc1aklIZHlhWFJsUm1sc1pTaG1hV3hsVUdGMGFDd2daR0YwWVNsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaGQyRnBkQ0IwYUdsekxuTmxkRWwwWlcwb1ptbHNaVkJoZEdnc0lHUmhkR0VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0Z6ZVc1aklHUmxiR1YwWlVacGJHVW9abWxzWlZCaGRHZ3BlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWGRoYVhRZ2RHaHBjeTVrWld4SmRHVnRLR1pwYkdWUVlYUm9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmhjM2x1WXlCbVpYUmphRVpwYkdVb2RYSnNMQ0JtYVd4bFVHRjBhQ2w3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE53YjI1elpTQTlJR0YzWVdsMElFWmxkR05vTG1abGRHTm9SR0YwWVNoMWNtd3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWGRoYVhRZ2RHaHBjeTUzY21sMFpVWnBiR1VvWm1sc1pWQmhkR2dzSUhKbGMzQnZibk5sS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoYzNsdVl5QnpkSEpsWVcxR2FXeGxLSFZ5YkN3Z1ptbHNaVkJoZEdnc0lIUnlZVzV6Wm05eWJXVnlQVzUxYkd3cGUxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduYVcxd2JHVnRaVzUwSUhKbGNYVnBjbVZrSnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnVaWGNnU1c1a1pYaEVRbE4wYjNKaFoyVW9LVHNpTENKcGJYQnZjblFnYkdWMlpXeDFjQ0JtY205dElDZHNaWFpsYkhWd0p6dGNibU52Ym5OMElFeGxkbVZzUkc5M2JrMXBlR2x1Y3lBOUlDaFRkRzl5WVdkbFEyeGhjM01wUFQ0Z1kyeGhjM01nWlhoMFpXNWtjeUJUZEc5eVlXZGxRMnhoYzNON0lGeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pYWmxiR1J2ZDI0Z1BTQnlaWEYxYVhKbEtDZHNaWFpsYkdSdmQyNG5LVHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9iR1YyWld4MWNDaHNaWFpsYkdSdmQyNG9KMlJoZEdFbktTa3BPMXh1SUNBZ0lIMWNibjA3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JNWlhabGJFUnZkMjVOYVhocGJuTTdYRzRpTENKcGJYQnZjblFnYkdWMlpXeDFjQ0JtY205dElDZHNaWFpsYkhWd0p6dGNibHh1WTI5dWMzUWdUR1YyWld4S1UwMXBlR2x1Y3lBOUlDaFRkRzl5WVdkbFEyeGhjM01wUFQ0Z1kyeGhjM01nWlhoMFpXNWtjeUJUZEc5eVlXZGxRMnhoYzNON0lGeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDbDdYRzRnSUNBZ0lDQWdJSFpoY2lCc1pYWmxiR3B6SUQwZ2NtVnhkV2x5WlNnbmJHVjJaV3d0YW5NbktUdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb2JHVjJaV3gxY0Noc1pYWmxiR3B6S0Nka1lYUmhKeWtwS1R0Y2JpQWdJQ0I5WEc1OU8xeHVaWGh3YjNKMElHUmxabUYxYkhRZ1RHVjJaV3hLVTAxcGVHbHVjenNpTENKamIyNXpkQ0JUZEc5eVlXZGxUV2w0YVc1eklEMGdLRUpoYzJWRGJHRnpjeWs5UGlCamJHRnpjeUJsZUhSbGJtUnpJRUpoYzJWRGJHRnpjM3RjYmlBZ0lDQmhjM2x1WXlCemRHOXlZV2RsVTNWdGJXRnllU2dwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWVhkaGFYUWdkR2hwY3k1emRHOXlZV2RsTG1kbGRFWnBiR1ZNYVhOMEtDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhObGRDQlRkRzl5WVdkbEtITjBiM0poWjJVcGUxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzSmhaMlVnUFNCemRHOXlZV2RsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZENCVGRHOXlZV2RsS0NsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wYjNKaFoyVTdYRzRnSUNBZ2ZWeHVmVHRjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4wYjNKaFoyVk5hWGhwYm5NN0lpd2lMeW9nS0dsbmJtOXlaV1FwSUNvdklpd2lMeW9nS0dsbmJtOXlaV1FwSUNvdklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZYMWRGUWxCQlEwdGZSVmhVUlZKT1FVeGZUVTlFVlV4RlgyTmhkWE5oYkY5dVpYUmZkWFJwYkhOZlh6c2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZiR1YyWld4a2IzZHVYMTg3SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PSIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImNyb3NzLWZldGNoXCIpLCByZXF1aXJlKFwicGxhdGZvcm1cIiksIHJlcXVpcmUoXCJmZXRjaC1yZWFkYWJsZXN0cmVhbVwiKSwgcmVxdWlyZShcInBuZ2pzM1wiKSwgcmVxdWlyZShcInJhbmRvbVwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJjcm9zcy1mZXRjaFwiLCBcInBsYXRmb3JtXCIsIFwiZmV0Y2gtcmVhZGFibGVzdHJlYW1cIiwgXCJwbmdqczNcIiwgXCJyYW5kb21cIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQGNhdXNhbE5ldC91dGlsc1wiXSA9IGZhY3RvcnkocmVxdWlyZShcImNyb3NzLWZldGNoXCIpLCByZXF1aXJlKFwicGxhdGZvcm1cIiksIHJlcXVpcmUoXCJmZXRjaC1yZWFkYWJsZXN0cmVhbVwiKSwgcmVxdWlyZShcInBuZ2pzM1wiKSwgcmVxdWlyZShcInJhbmRvbVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiQGNhdXNhbE5ldC91dGlsc1wiXSA9IGZhY3Rvcnkocm9vdFtcImNyb3NzLWZldGNoXCJdLCByb290W1wicGxhdGZvcm1cIl0sIHJvb3RbXCJmZXRjaC1yZWFkYWJsZXN0cmVhbVwiXSwgcm9vdFtcInBuZ2pzM1wiXSwgcm9vdFtcInJhbmRvbVwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nyb3NzX2ZldGNoX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcGxhdGZvcm1fXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9mZXRjaF9yZWFkYWJsZXN0cmVhbV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3BuZ2pzM19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JhbmRvbV9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoe1xuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIGRlZmF1bHQ6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cblxuXG52YXIgYmFzZTY0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYmFzZTY0LWpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qc1wiKVxudmFyIGllZWU3NTQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpZWVlNzU0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanNcIilcbnZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaXNhcnJheSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzXCIpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cblxuZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpO1xuICB9XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuZXhwb3J0cy5pc1ByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuXG5leHBvcnRzLmlzQnVmZmVyID0gQnVmZmVyLmlzQnVmZmVyO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uL2J1ZmZlci9pbmRleC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanNcIikuQnVmZmVyKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4gKCcgKyBlciArICcpJyk7XG4gICAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge1xuXG5pZiAoIXByb2Nlc3MudmVyc2lvbiB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fFxuICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFRpY2s6IG5leHRUaWNrIH07XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3Ncbn1cblxuZnVuY3Rpb24gbmV4dFRpY2soZm4sIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiY2FsbGJhY2tcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGFyZ3MsIGk7XG4gIHN3aXRjaCAobGVuKSB7XG4gIGNhc2UgMDpcbiAgY2FzZSAxOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZuKTtcbiAgY2FzZSAyOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja09uZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSk7XG4gICAgfSk7XG4gIGNhc2UgMzpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUd28oKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIpO1xuICAgIH0pO1xuICBjYXNlIDQ6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVGhyZWUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH0pO1xuICBkZWZhdWx0OlxuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmdzLmxlbmd0aCkge1xuICAgICAgYXJnc1tpKytdID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2soKSB7XG4gICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3Byb2Nlc3MvYnJvd3Nlci5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxuXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9jZXNzLW5leHRpY2stYXJncyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfXJldHVybiBrZXlzO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleDtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY29yZS11dGlsLWlzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qc1wiKTtcbnV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3N0cmVhbV9yZWFkYWJsZSAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcmVhZGFibGUuanNcIik7XG52YXIgV3JpdGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zdHJlYW1fd3JpdGFibGUgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG57XG4gIC8vIGF2b2lkIHNjb3BlIGNyZWVwLCB0aGUga2V5cyBhcnJheSBjYW4gdGhlbiBiZSBjb2xsZWN0ZWRcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG4gIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICAgIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnd3JpdGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHBuYS5uZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcG5hLm5leHRUaWNrKGNiLCBlcnIpO1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zdHJlYW1fdHJhbnNmb3JtICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanNcIik7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNvcmUtdXRpbC1pcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanNcIik7XG51dGlsLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaW5oZXJpdHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwsIHByb2Nlc3MpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9jZXNzLW5leHRpY2stYXJncyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpc2FycmF5ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanNcIik7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRUUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBldmVudHMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qc1wiKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBFRWxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzXCIpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzYWZlLWJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXI7XG52YXIgT3VyVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5IHx8IGZ1bmN0aW9uICgpIHt9O1xuZnVuY3Rpb24gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuaykge1xuICByZXR1cm4gQnVmZmVyLmZyb20oY2h1bmspO1xufVxuZnVuY3Rpb24gX2lzVWludDhBcnJheShvYmopIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihvYmopIHx8IG9iaiBpbnN0YW5jZW9mIE91clVpbnQ4QXJyYXk7XG59XG5cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBjb3JlLXV0aWwtaXMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzXCIpO1xudXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGluaGVyaXRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanNcIik7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISB1dGlsICovIDApO1xudmFyIGRlYnVnID0gdm9pZCAwO1xuaWYgKGRlYnVnVXRpbCAmJiBkZWJ1Z1V0aWwuZGVidWdsb2cpIHtcbiAgZGVidWcgPSBkZWJ1Z1V0aWwuZGVidWdsb2coJ3N0cmVhbScpO1xufSBlbHNlIHtcbiAgZGVidWcgPSBmdW5jdGlvbiAoKSB7fTtcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzXCIpO1xudmFyIGRlc3Ryb3lJbXBsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanNcIik7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpbmdfZGVjb2Rlci8gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzXCIpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzdHJpbmdfZGVjb2Rlci8gKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzXCIpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHtcbiAgaWYgKG4gPj0gTUFYX0hXTSkge1xuICAgIG4gPSBNQVhfSFdNO1xuICB9IGVsc2Uge1xuICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpblxuICAgIC8vIHRpbnkgYW1vdW50c1xuICAgIG4tLTtcbiAgICBuIHw9IG4gPj4+IDE7XG4gICAgbiB8PSBuID4+PiAyO1xuICAgIG4gfD0gbiA+Pj4gNDtcbiAgICBuIHw9IG4gPj4+IDg7XG4gICAgbiB8PSBuID4+PiAxNjtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAobiA8PSAwIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgcmV0dXJuIDA7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXR1cm4gMTtcbiAgaWYgKG4gIT09IG4pIHtcbiAgICAvLyBPbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGgpIHJldHVybiBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhLmxlbmd0aDtlbHNlIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIGN1cnJlbnQgaHdtLCB0aGVuIHJhaXNlIHRoZSBod20uXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaykgc3RhdGUuaGlnaFdhdGVyTWFyayA9IGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pO1xuICBpZiAobiA8PSBzdGF0ZS5sZW5ndGgpIHJldHVybiBuO1xuICAvLyBEb24ndCBoYXZlIGVub3VnaFxuICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICByZXR1cm4gc3RhdGUubGVuZ3RoO1xufVxuXG4vLyB5b3UgY2FuIG92ZXJyaWRlIGVpdGhlciB0aGlzIG1ldGhvZCwgb3IgdGhlIGFzeW5jIF9yZWFkKG4pIGJlbG93LlxuUmVhZGFibGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobikge1xuICBkZWJ1ZygncmVhZCcsIG4pO1xuICBuID0gcGFyc2VJbnQobiwgMTApO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgbk9yaWcgPSBuO1xuXG4gIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmIHN0YXRlLm5lZWRSZWFkYWJsZSAmJiAoc3RhdGUubGVuZ3RoID49IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUuZW5kZWQpKSB7XG4gICAgZGVidWcoJ3JlYWQ6IGVtaXRSZWFkYWJsZScsIHN0YXRlLmxlbmd0aCwgc3RhdGUuZW5kZWQpO1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO2Vsc2UgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbiA9IGhvd011Y2hUb1JlYWQobiwgc3RhdGUpO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuICBkZWJ1ZygnbmVlZCByZWFkYWJsZScsIGRvUmVhZCk7XG5cbiAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkb1JlYWQgPSB0cnVlO1xuICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7XG4gIH1cblxuICAvLyBob3dldmVyLCBpZiB3ZSd2ZSBlbmRlZCwgdGhlbiB0aGVyZSdzIG5vIHBvaW50LCBhbmQgaWYgd2UncmUgYWxyZWFkeVxuICAvLyByZWFkaW5nLCB0aGVuIGl0J3MgdW5uZWNlc3NhcnkuXG4gIGlmIChzdGF0ZS5lbmRlZCB8fCBzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZG9SZWFkID0gZmFsc2U7XG4gICAgZGVidWcoJ3JlYWRpbmcgb3IgZW5kZWQnLCBkb1JlYWQpO1xuICB9IGVsc2UgaWYgKGRvUmVhZCkge1xuICAgIGRlYnVnKCdkbyByZWFkJyk7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIC8vIGNhbGwgaW50ZXJuYWwgcmVhZCBtZXRob2RcbiAgICB0aGlzLl9yZWFkKHN0YXRlLmhpZ2hXYXRlck1hcmspO1xuICAgIHN0YXRlLnN5bmMgPSBmYWxzZTtcbiAgICAvLyBJZiBfcmVhZCBwdXNoZWQgZGF0YSBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYCB3aWxsIGJlIGZhbHNlLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2UgY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIG4gPSBob3dNdWNoVG9SZWFkKG5PcmlnLCBzdGF0ZSk7XG4gIH1cblxuICB2YXIgcmV0O1xuICBpZiAobiA+IDApIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtlbHNlIHJldCA9IG51bGw7XG5cbiAgaWYgKHJldCA9PT0gbnVsbCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgbiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUubGVuZ3RoIC09IG47XG4gIH1cblxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gICAgLy8gYXMgc29vbiBhcyB3ZSAqZG8qIGdldCBzb21ldGhpbmcgaW50byB0aGUgYnVmZmVyLlxuICAgIGlmICghc3RhdGUuZW5kZWQpIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgICAvLyBJZiB3ZSB0cmllZCB0byByZWFkKCkgcGFzdCB0aGUgRU9GLCB0aGVuIGVtaXQgZW5kIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgaWYgKG5PcmlnICE9PSBuICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtcbiAgfVxuXG4gIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgcG5hLm5leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgZGVidWcoJ2VtaXQgcmVhZGFibGUnKTtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gIGZsb3coc3RyZWFtKTtcbn1cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2sobWF5YmVSZWFkTW9yZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB9XG4gIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7XG59XG5cbi8vIGFic3RyYWN0IG1ldGhvZC4gIHRvIGJlIG92ZXJyaWRkZW4gaW4gc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vIGNhbGwgY2IoZXIsIGRhdGEpIHdoZXJlIGRhdGEgaXMgPD0gbiBpbiBsZW5ndGguXG4vLyBmb3IgdmlydHVhbCAobm9uLXN0cmluZywgbm9uLWJ1ZmZlcikgc3RyZWFtcywgXCJsZW5ndGhcIiBpcyBzb21ld2hhdFxuLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLlxuUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcbiAgZGVidWcoJ3BpcGUgY291bnQ9JWQgb3B0cz0laicsIHN0YXRlLnBpcGVzQ291bnQsIHBpcGVPcHRzKTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiB1bnBpcGU7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwbmEubmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTtcblxuICBkZXN0Lm9uKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gIGZ1bmN0aW9uIG9udW5waXBlKHJlYWRhYmxlLCB1bnBpcGVJbmZvKSB7XG4gICAgZGVidWcoJ29udW5waXBlJyk7XG4gICAgaWYgKHJlYWRhYmxlID09PSBzcmMpIHtcbiAgICAgIGlmICh1bnBpcGVJbmZvICYmIHVucGlwZUluZm8uaGFzVW5waXBlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdW5waXBlSW5mby5oYXNVbnBpcGVkID0gdHJ1ZTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgdW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2RhdGEnLCBvbmRhdGEpO1xuXG4gICAgY2xlYW5lZFVwID0gdHJ1ZTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gJiYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKSkgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZXIgcHVzaGVzIG1vcmUgZGF0YSB3aGlsZSB3ZSdyZSB3cml0aW5nIHRvIGRlc3QgdGhlbiB3ZSdsbCBlbmQgdXBcbiAgLy8gaW4gb25kYXRhIGFnYWluLiBIb3dldmVyLCB3ZSBvbmx5IHdhbnQgdG8gaW5jcmVhc2UgYXdhaXREcmFpbiBvbmNlIGJlY2F1c2VcbiAgLy8gZGVzdCB3aWxsIG9ubHkgZW1pdCBvbmUgJ2RyYWluJyBldmVudCBmb3IgdGhlIG11bHRpcGxlIHdyaXRlcy5cbiAgLy8gPT4gSW50cm9kdWNlIGEgZ3VhcmQgb24gaW5jcmVhc2luZyBhd2FpdERyYWluLlxuICB2YXIgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICBzcmMub24oJ2RhdGEnLCBvbmRhdGEpO1xuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBkZWJ1Zygnb25kYXRhJyk7XG4gICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IGZhbHNlO1xuICAgIHZhciByZXQgPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHJldCAmJiAhaW5jcmVhc2VkQXdhaXREcmFpbikge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdW5waXBlZCBkdXJpbmcgYGRlc3Qud3JpdGUoKWAsIGl0IGlzIHBvc3NpYmxlXG4gICAgICAvLyB0byBnZXQgc3R1Y2sgaW4gYSBwZXJtYW5lbnRseSBwYXVzZWQgc3RhdGUgaWYgdGhhdCB3cml0ZVxuICAgICAgLy8gYWxzbyByZXR1cm5lZCBmYWxzZS5cbiAgICAgIC8vID0+IENoZWNrIHdoZXRoZXIgYGRlc3RgIGlzIHN0aWxsIGEgcGlwaW5nIGRlc3RpbmF0aW9uLlxuICAgICAgaWYgKChzdGF0ZS5waXBlc0NvdW50ID09PSAxICYmIHN0YXRlLnBpcGVzID09PSBkZXN0IHx8IHN0YXRlLnBpcGVzQ291bnQgPiAxICYmIGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpICE9PSAtMSkgJiYgIWNsZWFuZWRVcCkge1xuICAgICAgICBkZWJ1ZygnZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlJywgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4pO1xuICAgICAgICBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbisrO1xuICAgICAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNyYy5wYXVzZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LlxuICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTtcbiAgICB1bnBpcGUoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIHVzZXJsYW5kIG9uZXMuXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlYnVnKCdvbmZpbmlzaCcpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIGRlYnVnKCd1bnBpcGUnKTtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwaXBlIHJlc3VtZScpO1xuICAgIHNyYy5yZXN1bWUoKTtcbiAgfVxuXG4gIHJldHVybiBkZXN0O1xufTtcblxuZnVuY3Rpb24gcGlwZU9uRHJhaW4oc3JjKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXRlID0gc3JjLl9yZWFkYWJsZVN0YXRlO1xuICAgIGRlYnVnKCdwaXBlT25EcmFpbicsIHN0YXRlLmF3YWl0RHJhaW4pO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluKSBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDAgJiYgRUVsaXN0ZW5lckNvdW50KHNyYywgJ2RhdGEnKSkge1xuICAgICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfVxuICB9O1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUudW5waXBlID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHVucGlwZUluZm8gPSB7IGhhc1VucGlwZWQ6IGZhbHNlIH07XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMCkgcmV0dXJuIHRoaXM7XG5cbiAgLy8ganVzdCBvbmUgZGVzdGluYXRpb24uICBtb3N0IGNvbW1vbiBjYXNlLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkge1xuICAgIC8vIHBhc3NlZCBpbiBvbmUsIGJ1dCBpdCdzIG5vdCB0aGUgcmlnaHQgb25lLlxuICAgIGlmIChkZXN0ICYmIGRlc3QgIT09IHN0YXRlLnBpcGVzKSByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdCkgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNsb3cgY2FzZS4gbXVsdGlwbGUgcGlwZSBkZXN0aW5hdGlvbnMuXG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgLy8gcmVtb3ZlIGFsbC5cbiAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlcztcbiAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDtcbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgfXJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gdHJ5IHRvIGZpbmQgdGhlIHJpZ2h0IG9uZS5cbiAgdmFyIGluZGV4ID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7XG4gIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTtcblxuICBpZiAoZXYgPT09ICdkYXRhJykge1xuICAgIC8vIFN0YXJ0IGZsb3dpbmcgb24gbmV4dCB0aWNrIGlmIHN0cmVhbSBpc24ndCBleHBsaWNpdGx5IHBhdXNlZFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgIT09IGZhbHNlKSB0aGlzLnJlc3VtZSgpO1xuICB9IGVsc2UgaWYgKGV2ID09PSAncmVhZGFibGUnKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgIXN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nKSB7XG4gICAgICBzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZyA9IHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICBwbmEubmV4dFRpY2soblJlYWRpbmdOZXh0VGljaywgdGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbmZ1bmN0aW9uIG5SZWFkaW5nTmV4dFRpY2soc2VsZikge1xuICBkZWJ1ZygncmVhZGFibGUgbmV4dHRpY2sgcmVhZCAwJyk7XG4gIHNlbGYucmVhZCgwKTtcbn1cblxuLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSVxuLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLlxuUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZScpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiByZXN1bWUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlc3VtZVNjaGVkdWxlZCkge1xuICAgIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKHJlc3VtZV8sIHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3VtZV8oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICB9XG5cbiAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG4gIHN0YXRlLmF3YWl0RHJhaW4gPSAwO1xuICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7XG4gIGZsb3coc3RyZWFtKTtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApO1xufVxuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjYWxsIHBhdXNlIGZsb3dpbmc9JWonLCB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpO1xuICBpZiAoZmFsc2UgIT09IHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdwYXVzZScpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGZsb3coc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgZGVidWcoJ2Zsb3cnLCBzdGF0ZS5mbG93aW5nKTtcbiAgd2hpbGUgKHN0YXRlLmZsb3dpbmcgJiYgc3RyZWFtLnJlYWQoKSAhPT0gbnVsbCkge31cbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIGRlYnVnKCd3cmFwcGVkIGVuZCcpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIF90aGlzLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIF90aGlzLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICBmb3IgKHZhciBuID0gMDsgbiA8IGtQcm94eUV2ZW50cy5sZW5ndGg7IG4rKykge1xuICAgIHN0cmVhbS5vbihrUHJveHlFdmVudHNbbl0sIHRoaXMuZW1pdC5iaW5kKHRoaXMsIGtQcm94eUV2ZW50c1tuXSkpO1xuICB9XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgdGhpcy5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGUucHJvdG90eXBlLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywge1xuICAvLyBtYWtpbmcgaXQgZXhwbGljaXQgdGhpcyBwcm9wZXJ0eSBpcyBub3QgZW51bWVyYWJsZVxuICAvLyBiZWNhdXNlIG90aGVyd2lzZSBzb21lIHByb3RvdHlwZSBtYW5pcHVsYXRpb24gaW5cbiAgLy8gdXNlcmxhbmQgd2lsbCBmYWlsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICB9XG59KTtcblxuLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LlxuUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7XG5cbi8vIFBsdWNrIG9mZiBuIGJ5dGVzIGZyb20gYW4gYXJyYXkgb2YgYnVmZmVycy5cbi8vIExlbmd0aCBpcyB0aGUgY29tYmluZWQgbGVuZ3RocyBvZiBhbGwgdGhlIGJ1ZmZlcnMgaW4gdGhlIGxpc3QuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIC8vIG5vdGhpbmcgYnVmZmVyZWRcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHJldDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldCA9IHN0YXRlLmJ1ZmZlci5zaGlmdCgpO2Vsc2UgaWYgKCFuIHx8IG4gPj0gc3RhdGUubGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBsaXN0XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIHJldCA9IHN0YXRlLmJ1ZmZlci5qb2luKCcnKTtlbHNlIGlmIChzdGF0ZS5idWZmZXIubGVuZ3RoID09PSAxKSByZXQgPSBzdGF0ZS5idWZmZXIuaGVhZC5kYXRhO2Vsc2UgcmV0ID0gc3RhdGUuYnVmZmVyLmNvbmNhdChzdGF0ZS5sZW5ndGgpO1xuICAgIHN0YXRlLmJ1ZmZlci5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQgcGFydCBvZiBsaXN0XG4gICAgcmV0ID0gZnJvbUxpc3RQYXJ0aWFsKG4sIHN0YXRlLmJ1ZmZlciwgc3RhdGUuZGVjb2Rlcik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBFeHRyYWN0cyBvbmx5IGVub3VnaCBidWZmZXJlZCBkYXRhIHRvIHNhdGlzZnkgdGhlIGFtb3VudCByZXF1ZXN0ZWQuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGZyb21MaXN0UGFydGlhbChuLCBsaXN0LCBoYXNTdHJpbmdzKSB7XG4gIHZhciByZXQ7XG4gIGlmIChuIDwgbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gc2xpY2UgaXMgdGhlIHNhbWUgZm9yIGJ1ZmZlcnMgYW5kIHN0cmluZ3NcbiAgICByZXQgPSBsaXN0LmhlYWQuZGF0YS5zbGljZSgwLCBuKTtcbiAgICBsaXN0LmhlYWQuZGF0YSA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKG4pO1xuICB9IGVsc2UgaWYgKG4gPT09IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIGZpcnN0IGNodW5rIGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZXN1bHQgc3BhbnMgbW9yZSB0aGFuIG9uZSBidWZmZXJcbiAgICByZXQgPSBoYXNTdHJpbmdzID8gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkgOiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGNoYXJhY3RlcnMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhXG4vLyBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIHtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgdmFyIHJldCA9IHAuZGF0YTtcbiAgbiAtPSByZXQubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBzdHIgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IHN0ci5sZW5ndGggPyBzdHIubGVuZ3RoIDogbjtcbiAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHJldCArPSBzdHI7ZWxzZSByZXQgKz0gc3RyLnNsaWNlKDAsIG4pO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBzdHIuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG4vLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHtcbiAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuKTtcbiAgdmFyIHAgPSBsaXN0LmhlYWQ7XG4gIHZhciBjID0gMTtcbiAgcC5kYXRhLmNvcHkocmV0KTtcbiAgbiAtPSBwLmRhdGEubGVuZ3RoO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHZhciBidWYgPSBwLmRhdGE7XG4gICAgdmFyIG5iID0gbiA+IGJ1Zi5sZW5ndGggPyBidWYubGVuZ3RoIDogbjtcbiAgICBidWYuY29weShyZXQsIHJldC5sZW5ndGggLSBuLCAwLCBuYik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBidWYubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IGJ1Zi5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKSB0aHJvdyBuZXcgRXJyb3IoJ1wiZW5kUmVhZGFibGUoKVwiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7XG5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhlbmRSZWFkYWJsZU5ULCBzdGF0ZSwgc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZU5UKHN0YXRlLCBzdHJlYW0pIHtcbiAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICBzdGF0ZS5lbmRFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uL3Byb2Nlc3MvYnJvd3Nlci5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vX3N0cmVhbV9kdXBsZXggKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qc1wiKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY29yZS11dGlsLWlzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qc1wiKTtcbnV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fd3JpdGFibGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MsIHNldEltbWVkaWF0ZSwgZ2xvYmFsKSB7Ly8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9jZXNzLW5leHRpY2stYXJncyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY29yZS11dGlsLWlzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qc1wiKTtcbnV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBpbmhlcml0cyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzXCIpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IF9fd2VicGFja19yZXF1aXJlX18oLyohIHV0aWwtZGVwcmVjYXRlICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanNcIilcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qc1wiKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgc2FmZS1idWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanNcIikuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanNcIik7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL19zdHJlYW1fZHVwbGV4ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanNcIik7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9fc3RyZWFtX2R1cGxleCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi9wcm9jZXNzL2Jyb3dzZXIuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1wiKS5zZXRJbW1lZGlhdGUsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC9ob21lL2h1eW5obmd1eWVuL2dpdGh1Yi9jYXVzYWxpdHkvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzYWZlLWJ1ZmZlciAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qc1wiKS5CdWZmZXI7XG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHV0aWwgKi8gMSk7XG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7XG5cbmlmICh1dGlsICYmIHV0aWwuaW5zcGVjdCAmJiB1dGlsLmluc3BlY3QuY3VzdG9tKSB7XG4gIG1vZHVsZS5leHBvcnRzLnByb3RvdHlwZVt1dGlsLmluc3BlY3QuY3VzdG9tXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2JqID0gdXRpbC5pbnNwZWN0KHsgbGVuZ3RoOiB0aGlzLmxlbmd0aCB9KTtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnICsgb2JqO1xuICB9O1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3kuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHByb2Nlc3MtbmV4dGljay1hcmdzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtbmV4dGljay1hcmdzL2luZGV4LmpzXCIpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8vIHVuZG9jdW1lbnRlZCBjYigpIEFQSSwgbmVlZGVkIGZvciBjb3JlLCBub3QgZm9yIHB1YmxpYyBBUElcbmZ1bmN0aW9uIGRlc3Ryb3koZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciByZWFkYWJsZURlc3Ryb3llZCA9IHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIHZhciB3cml0YWJsZURlc3Ryb3llZCA9IHRoaXMuX3dyaXRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG5cbiAgaWYgKHJlYWRhYmxlRGVzdHJveWVkIHx8IHdyaXRhYmxlRGVzdHJveWVkKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH0gZWxzZSBpZiAoZXJyICYmICghdGhpcy5fd3JpdGFibGVTdGF0ZSB8fCAhdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQpKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIHRoaXMsIGVycik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gd2Ugc2V0IGRlc3Ryb3llZCB0byB0cnVlIGJlZm9yZSBmaXJpbmcgZXJyb3IgY2FsbGJhY2tzIGluIG9yZGVyXG4gIC8vIHRvIG1ha2UgaXQgcmUtZW50cmFuY2Ugc2FmZSBpbiBjYXNlIGRlc3Ryb3koKSBpcyBjYWxsZWQgd2l0aGluIGNhbGxiYWNrc1xuXG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhIGR1cGxleCBzdHJlYW0gbWFyayB0aGUgd3JpdGFibGUgcGFydCBhcyBkZXN0cm95ZWQgYXMgd2VsbFxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuX2Rlc3Ryb3koZXJyIHx8IG51bGwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoIWNiICYmIGVycikge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCBfdGhpcywgZXJyKTtcbiAgICAgIGlmIChfdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICBfdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdW5kZXN0cm95KCkge1xuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFcnJvck5UKHNlbGYsIGVycikge1xuICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gIHVuZGVzdHJveTogdW5kZXN0cm95XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbS1icm93c2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLWJyb3dzZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZXZlbnRzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanNcIikuRXZlbnRFbWl0dGVyO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUtYnJvd3Nlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qc1wiKTtcbmV4cG9ydHMuU3RyZWFtID0gZXhwb3J0cztcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL19zdHJlYW1fd3JpdGFibGUuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzXCIpO1xuZXhwb3J0cy5EdXBsZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2xpYi9fc3RyZWFtX2R1cGxleC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzXCIpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzXCIpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzXCIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYnVmZmVyICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qc1wiKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCwgcHJvY2VzcykgeyhmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKHRoaXMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3Byb2Nlc3MvYnJvd3Nlci5qcyAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvbGliL3N0cmluZ19kZWNvZGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAvaG9tZS9odXluaG5ndXllbi9naXRodWIvY2F1c2FsaXR5L25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgc2FmZS1idWZmZXIgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanNcIikuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHt2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxuX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgc2V0aW1tZWRpYXRlICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanNcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9icm93c2VyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogL2hvbWUvaHV5bmhuZ3V5ZW4vZ2l0aHViL2NhdXNhbGl0eS9ub2RlX21vZHVsZXMvdXRpbC1kZXByZWNhdGUvYnJvd3Nlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qc1wiKSkpXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbnZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9mZXRjaC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9mZXRjaC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHJ1ZSkge1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBjcm9zcy1mZXRjaCAqLyBcImNyb3NzLWZldGNoXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3N0cmVhbSAqLyBcIi4vc3JjL3N0cmVhbS5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wbGF0Zm9ybSAqLyBcIi4vc3JjL3BsYXRmb3JtLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBmZXRjaC1yZWFkYWJsZXN0cmVhbSAqLyBcImZldGNoLXJlYWRhYmxlc3RyZWFtXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH0gZWxzZSB7IHZhciBtb2Q7IH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChfZXhwb3J0cywgX2Nyb3NzRmV0Y2gsIF9zdHJlYW0sIF9wbGF0Zm9ybSwgX2ZldGNoUmVhZGFibGVzdHJlYW0pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdCAqLyBcIi4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIF9leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIF9jcm9zc0ZldGNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3Jvc3NGZXRjaCk7XG4gIF9zdHJlYW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJlYW0pO1xuICBfcGxhdGZvcm0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF0Zm9ybSk7XG4gIF9mZXRjaFJlYWRhYmxlc3RyZWFtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmV0Y2hSZWFkYWJsZXN0cmVhbSk7XG5cbiAgY29uc3QgTm9kZVN0cmVhbU1peGlucyA9IEZldGNoQ2xhc3MgPT4gY2xhc3MgZXh0ZW5kcyBGZXRjaENsYXNzIHtcbiAgICBzdGF0aWMgYXN5bmMgc3RyZWFtRGF0YSh1cmwpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIF9jcm9zc0ZldGNoLmRlZmF1bHQpKHVybCk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgIHRocm93IEVycm9yKFwiQmFkIHJlc3BvbnNlIGZyb20gc2VydmVyXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzcG9uc2UuYm9keTtcbiAgICB9XG5cbiAgfTtcblxuICBjb25zdCBXZWJTdHJlYW1NaXhpbnMgPSBGZXRjaENsYXNzID0+IGNsYXNzIGV4dGVuZHMgRmV0Y2hDbGFzcyB7XG4gICAgc3RhdGljIGFzeW5jIHN0cmVhbURhdGEodXJsKSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCAoMCwgX2ZldGNoUmVhZGFibGVzdHJlYW0uZGVmYXVsdCkodXJsKTtcblxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICByZWplY3QoXCJCYWQgcmVzcG9uc2UgZnJvbSBzZXJ2ZXJcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0cmVhbVJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG5cbiAgICAgIGxldCByZWFkZXIgPSBfc3RyZWFtLmRlZmF1bHQubWFrZVJlYWRhYmxlKCk7XG5cbiAgICAgIGNvbnN0IHJlY3VzaXZlUmVhZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBzdHJlYW1SZWFkZXIucmVhZCgpLnRoZW4oKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZG9uZVxuICAgICAgICAgIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIHJlYWRlci5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICByZXNvbHZlKDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVhZGVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICByZXNvbHZlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IFJlYWROZXh0ID0gcmVjdXNpdmVSZWFkID0+IHtcbiAgICAgICAgcmVjdXNpdmVSZWFkKCkudGhlbihoYXNOZXh0ID0+IHtcbiAgICAgICAgICBpZiAoaGFzTmV4dCkge1xuICAgICAgICAgICAgUmVhZE5leHQocmVjdXNpdmVSZWFkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgUmVhZE5leHQocmVjdXNpdmVSZWFkKTtcbiAgICAgIHJldHVybiByZWFkZXI7XG4gICAgfVxuXG4gIH07XG5cbiAgY2xhc3MgRmV0Y2ggZXh0ZW5kcyBfcGxhdGZvcm0uZGVmYXVsdC5taXhXaXRoKF9jcm9zc0ZldGNoLmRlZmF1bHQsIHtcbiAgICAnbm9kZSc6IFtOb2RlU3RyZWFtTWl4aW5zXSxcbiAgICAnd2ViJzogW1dlYlN0cmVhbU1peGluc11cbiAgfSkge1xuICAgIGNvbnN0cnVjdG9yKCkge31cblxuICAgIHN0YXRpYyBhc3luYyBmZXRjaERhdGEodXJsKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAoMCwgX2Nyb3NzRmV0Y2guZGVmYXVsdCkodXJsKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDQwMCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgICAgICAgICAgcmVqZWN0KFwiQmFkIHJlc3BvbnNlIGZyb20gc2VydmVyXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UudGV4dCgpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgZmV0Y2hKc29uKHVybCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgKDAsIF9jcm9zc0ZldGNoLmRlZmF1bHQpKHVybCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVzcG9uc2Uuc3RhdHVzKTtcbiAgICAgICAgICAgIHJlamVjdChcIkJhZCByZXNwb25zZSBmcm9tIHNlcnZlclwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlLmpzb24oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gIH1cblxuICBfZXhwb3J0cy5kZWZhdWx0ID0gRmV0Y2g7XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9wbGF0Zm9ybSAqLyBcIi4vc3JjL3BsYXRmb3JtLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2ZldGNoICovIFwiLi9zcmMvZmV0Y2guanNcIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcG5nICovIFwiLi9zcmMvcG5nLmpzXCIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3N0cmVhbSAqLyBcIi4vc3JjL3N0cmVhbS5qc1wiKSwgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zYW1wbGluZyAqLyBcIi4vc3JjL3NhbXBsaW5nLmpzXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH0gZWxzZSB7IHZhciBtb2Q7IH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChfZXhwb3J0cywgX3BsYXRmb3JtLCBfZmV0Y2gsIF9wbmcsIF9zdHJlYW0sIF9zYW1wbGluZykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIlBsYXRmb3JtXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wbGF0Zm9ybS5kZWZhdWx0O1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJGZXRjaFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfZmV0Y2guZGVmYXVsdDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiUE5HXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wbmcuZGVmYXVsdDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiU3RyZWFtXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zdHJlYW0uZGVmYXVsdDtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiU2FtcGxpbmdcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3NhbXBsaW5nLmRlZmF1bHQ7XG4gICAgfVxuICB9KTtcbiAgX3BsYXRmb3JtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxhdGZvcm0pO1xuICBfZmV0Y2ggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mZXRjaCk7XG4gIF9wbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbmcpO1xuICBfc3RyZWFtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyZWFtKTtcbiAgX3NhbXBsaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2FtcGxpbmcpO1xufSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL3BsYXRmb3JtLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3BsYXRmb3JtLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0cnVlKSB7XG4gICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIHBsYXRmb3JtICovIFwicGxhdGZvcm1cIiksIF9fd2VicGFja19yZXF1aXJlX18oLyohIHByb2Nlc3MgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH0gZWxzZSB7IHZhciBtb2Q7IH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChfZXhwb3J0cywgX3BsYXRmb3JtLCBfcHJvY2Vzcykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgX2V4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbiAgX3BsYXRmb3JtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxhdGZvcm0pO1xuICBfcHJvY2VzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb2Nlc3MpO1xuXG4gIGNvbnN0IFBsYXRmb3JtTWFwcGluZyA9IG5hbWUgPT4ge1xuICAgIGlmIChuYW1lID09PSAnTm9kZS5qcycpIHtcbiAgICAgIHJldHVybiAnbm9kZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnd2ViJztcbiAgICB9XG4gIH07XG5cbiAgY2xhc3MgUGxhdGZvcm0ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5wbGF0Zm9ybSA9IF9wbGF0Zm9ybS5kZWZhdWx0O1xuICAgIH1cblxuICAgIHN0YXRpYyBQSUQoKSB7XG4gICAgICBpZiAodHlwZW9mIF9wcm9jZXNzLmRlZmF1bHQgIT09ICd1bmRlZmluZWQnICYmIF9wcm9jZXNzLmRlZmF1bHQucGlkKSB7XG4gICAgICAgIHJldHVybiBfcHJvY2Vzcy5kZWZhdWx0LnBpZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjdXJyZW50UGxhdGZvcm0oKSB7XG4gICAgICByZXR1cm4gX3BsYXRmb3JtLmRlZmF1bHQucGFyc2UoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWl4V2l0aChCYXNlQ2xhc3MsIG1peGlucykge1xuICAgICAgdmFyIG1peGluc0xpc3QgPSBbXTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWl4aW5zKSkge1xuICAgICAgICBtaXhpbnNMaXN0ID0gbWl4aW5zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgUGZOYW1lID0gUGxhdGZvcm1NYXBwaW5nKF9wbGF0Zm9ybS5kZWZhdWx0LnBhcnNlKClbJ25hbWUnXSk7XG4gICAgICAgIG1peGluc0xpc3QgPSBtaXhpbnNbUGZOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1peGluc0xpc3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBFcnJvcihgJHtQZk5hbWV9IG5vdCBmb3VuZCBpbiBtaXhpbnNgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1peGluc0xpc3QucmVkdWNlKChjLCBtaXhpbikgPT4gbWl4aW4oYyksIEJhc2VDbGFzcyk7XG4gICAgfVxuXG4gIH1cblxuICBfZXhwb3J0cy5kZWZhdWx0ID0gUGxhdGZvcm07XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvcG5nLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9wbmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0cnVlKSB7XG4gICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oLyohIHBuZ2pzMyAqLyBcInBuZ2pzM1wiKV0sIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9IChmYWN0b3J5KSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/XG5cdFx0XHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpO1xuICB9IGVsc2UgeyB2YXIgbW9kOyB9XG59KSh0aGlzLCBmdW5jdGlvbiAoX2V4cG9ydHMsIF9wbmdqcykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2V4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIF9leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4gIHZhciBfZGVmYXVsdCA9IF9wbmdqcy5QTkc7XG4gIF9leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9zYW1wbGluZy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9zYW1wbGluZy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHJ1ZSkge1xuICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByYW5kb20gKi8gXCJyYW5kb21cIildLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdFx0XHQoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTtcbiAgfSBlbHNlIHsgdmFyIG1vZDsgfVxufSkodGhpcywgZnVuY3Rpb24gKF9leHBvcnRzLCBfcmFuZG9tKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBfcmFuZG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmFuZG9tKTtcblxuICBjbGFzcyBTYW1wbGluZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB0aGlzLnJhbmRvbSA9IF9yYW5kb20uZGVmYXVsdDtcbiAgICB9XG5cbiAgICBnZXQgQ29yZVJhbmRvbSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJhbmRvbTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZUNoZWNrRW5vdWdoKHNpemUpIHtcbiAgICAgIHJldHVybiBzYW1wbGUgPT4gc2FtcGxlLmxlbmd0aCA8IHNpemU7XG4gICAgfVxuXG4gICAgc3RhdGljIHJhbmdlKHNpemUpIHtcbiAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSkpLm1hcCgodiwgaSkgPT4gaSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGNob2ljZShhLCBzaXplLCByZXBsYWNlID0gZmFsc2UsIHAgPSBudWxsKSB7XG4gICAgICBsZXQgZG9tYWluID0gQXJyYXkuaXNBcnJheShhKSA/IGEuc2xpY2UoMCkgOiBTYW1wbGluZy5yYW5nZShhKTtcblxuICAgICAgaWYgKHNpemUgPiBkb21haW4ubGVuZ3RoICYmIHJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ3NhbXBsZSBzaXplIHNoYWxsIG5vdCBiaWdnZXIgdGhhbiBkb21haW4gbGVuZ3RoIHdpdGhvdXQgcmVwbGFjaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGxldCBzYW1wbGVzID0gW107XG4gICAgICBjb25zdCBHZXRVdGlsRW5vdWdoID0gU2FtcGxpbmcubWFrZUNoZWNrRW5vdWdoKHNpemUpO1xuICAgICAgbGV0IGlkeCA9IC0xO1xuXG4gICAgICB3aGlsZSAoR2V0VXRpbEVub3VnaChzYW1wbGVzKSkge1xuICAgICAgICBpZHggPSBfcmFuZG9tLmRlZmF1bHQuaW50KDAsIGRvbWFpbi5sZW5ndGggLSAxKTtcblxuICAgICAgICBpZiAoZG9tYWluW2lkeF0gIT09IG51bGwpIHtcbiAgICAgICAgICBzYW1wbGVzID0gWy4uLnNhbXBsZXMsIGRvbWFpbltpZHhdXTtcblxuICAgICAgICAgIGlmICghcmVwbGFjZSkge1xuICAgICAgICAgICAgZG9tYWluW2lkeF0gPSBudWxsOyAvL25vbiByZXBsYWNlYWJsZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2FtcGxlcztcbiAgICB9XG5cbiAgfVxuXG4gIF9leHBvcnRzLmRlZmF1bHQgPSBTYW1wbGluZztcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9zdHJlYW0uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL3N0cmVhbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHRydWUpIHtcbiAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhZGFibGUtc3RyZWFtICovIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS1icm93c2VyLmpzXCIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID9cblx0XHRcdFx0KF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLFxuXHRcdFx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7XG4gIH0gZWxzZSB7IHZhciBtb2Q7IH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChfZXhwb3J0cywgX3JlYWRhYmxlU3RyZWFtKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuLi8uLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9leHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICBfZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuICBfcmVhZGFibGVTdHJlYW0gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFkYWJsZVN0cmVhbSk7XG5cbiAgY2xhc3MgU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuc3RyZWFtID0gX3JlYWRhYmxlU3RyZWFtLmRlZmF1bHQ7XG4gICAgfVxuXG4gICAgZ2V0IGNvcmVTdHJlYW0oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJlYW07XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VSZWFkYWJsZShyZWFkRm4gPSBudWxsKSB7XG4gICAgICBsZXQgcmVhZGVyID0gbmV3IF9yZWFkYWJsZVN0cmVhbS5kZWZhdWx0LlJlYWRhYmxlKHtcbiAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IERlZmF1bHRSZWFkZXIgPSAoKSA9PiB7fTtcblxuICAgICAgcmVhZGVyLl9yZWFkID0gcmVhZEZuIHx8IERlZmF1bHRSZWFkZXI7XG4gICAgICByZXR1cm4gcmVhZGVyO1xuICAgIH1cblxuICAgIHN0YXRpYyB3cmFwUmVhZGFibGUocmVhZGFibGVPYmopIHtcbiAgICAgIGxldCByZWFkZXIgPSBuZXcgX3JlYWRhYmxlU3RyZWFtLmRlZmF1bHQuUmVhZGFibGUoKTtcbiAgICAgIHJlYWRlci53cmFwKHJlYWRhYmxlT2JqKTtcbiAgICAgIHJldHVybiByZWFkZXI7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VXcml0YWJsZSh3cml0ZUZuKSB7XG4gICAgICBsZXQgd3JpdGVyID0gbmV3IF9yZWFkYWJsZVN0cmVhbS5kZWZhdWx0LldyaXRhYmxlKHtcbiAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB3cml0ZXIuX3dyaXRlID0gd3JpdGVGbjtcbiAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfVxuXG4gICAgc3RhdGljIG1ha2VEdXBsZXgod3JpdGVGbiwgcmVhZEZuID0gbnVsbCkge1xuICAgICAgbGV0IGR1cGxleCA9IG5ldyBfcmVhZGFibGVTdHJlYW0uZGVmYXVsdC5EdXBsZXgoe1xuICAgICAgICBvYmplY3RNb2RlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGR1cGxleC5fd3JpdGUgPSB3cml0ZUZuO1xuXG4gICAgICBjb25zdCBEZWZhdWx0UmVhZGVyID0gKCkgPT4ge307XG5cbiAgICAgIGR1cGxleC5fcmVhZCA9IHJlYWRGbiB8fCBEZWZhdWx0UmVhZGVyO1xuICAgICAgcmV0dXJuIGR1cGxleDtcbiAgICB9XG5cbiAgICBzdGF0aWMgbWFrZVRyYW5zZm9ybSh0cmFuZm9ybUZuKSB7XG4gICAgICBsZXQgdHJhbnNmb3JtZXIgPSBuZXcgX3JlYWRhYmxlU3RyZWFtLmRlZmF1bHQuVHJhbnNmb3JtKHtcbiAgICAgICAgb2JqZWN0TW9kZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB0cmFuc2Zvcm1lci5fdHJhbnNmb3JtID0gdHJhbmZvcm1GbjtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1lcjtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgbWFrZVBpcGVsaW5lKHN0cmVhbXMsIG9uRGF0YUZuID0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbGV0IHdyaXRlciA9IHN0cmVhbXMuc2xpY2UoLTEpWzBdO1xuICAgICAgICBsZXQgcmVhZGVyID0gc3RyZWFtc1swXTtcbiAgICAgICAgd3JpdGVyLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSgnc3VjY2VzcycpO1xuICAgICAgICB9KTtcbiAgICAgICAgd3JpdGVyLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGBQaXBlbGluZSBmYWlsZWQuICR7ZXJyfWApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVhZGVyLm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgICAgaWYgKG9uRGF0YUZuKSB7XG4gICAgICAgICAgICBvbkRhdGFGbihkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3RyZWFtcy5yZWR1Y2UoKHAsIHMpID0+IHAucGlwZShzKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIF9leHBvcnRzLmRlZmF1bHQgPSBTdHJlYW07XG59KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDA6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIHV0aWwgKGlnbm9yZWQpICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIChpZ25vcmVkKSAqL1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTpcbi8qISoqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogdXRpbCAoaWdub3JlZCkgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyogKGlnbm9yZWQpICovXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImNyb3NzLWZldGNoXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJjcm9zcy1mZXRjaFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nyb3NzX2ZldGNoX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcImZldGNoLXJlYWRhYmxlc3RyZWFtXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJmZXRjaC1yZWFkYWJsZXN0cmVhbVwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2ZldGNoX3JlYWRhYmxlc3RyZWFtX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInBsYXRmb3JtXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwgXCJwbGF0Zm9ybVwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3BsYXRmb3JtX187XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInBuZ2pzM1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcInBuZ2pzM1wiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9wbmdqczNfXztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwicmFuZG9tXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwicmFuZG9tXCIgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JhbmRvbV9fO1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzVjBhV3h6TDNkbFluQmhZMnN2ZFc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzVjBhV3h6TDNkbFluQmhZMnN2WW05dmRITjBjbUZ3SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OWlZWE5sTmpRdGFuTXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2UUdOaGRYTmhiRTVsZEM5MWRHbHNjeTh2YUc5dFpTOW9kWGx1YUc1bmRYbGxiaTluYVhSb2RXSXZZMkYxYzJGc2FYUjVMMjV2WkdWZmJXOWtkV3hsY3k5aWRXWm1aWEl2YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFhWMGFXd3RhWE12YkdsaUwzVjBhV3d1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzkxZEdsc2N5OHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTlsZG1WdWRITXZaWFpsYm5SekxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmRYUnBiSE12TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdmFXVmxaVGMxTkM5cGJtUmxlQzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM1YwYVd4ekx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMMmx1YUdWeWFYUnpMMmx1YUdWeWFYUnpYMkp5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXBjMkZ5Y21GNUwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZMMmh2YldVdmFIVjVibWh1WjNWNVpXNHZaMmwwYUhWaUwyTmhkWE5oYkdsMGVTOXViMlJsWDIxdlpIVnNaWE12Y0hKdlkyVnpjeTF1WlhoMGFXTnJMV0Z5WjNNdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzkxZEdsc2N5OHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTl3Y205alpYTnpMMkp5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmJHbGlMMTl6ZEhKbFlXMWZaSFZ3YkdWNExtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmRYUnBiSE12TDJodmJXVXZhSFY1Ym1odVozVjVaVzR2WjJsMGFIVmlMMk5oZFhOaGJHbDBlUzl1YjJSbFgyMXZaSFZzWlhNdmNtVmhaR0ZpYkdVdGMzUnlaV0Z0TDJ4cFlpOWZjM1J5WldGdFgzQmhjM04wYUhKdmRXZG9MbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlmYzNSeVpXRnRYM0psWVdSaFlteGxMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdkwyaHZiV1V2YUhWNWJtaHVaM1Y1Wlc0dloybDBhSFZpTDJOaGRYTmhiR2wwZVM5dWIyUmxYMjF2WkhWc1pYTXZjbVZoWkdGaWJHVXRjM1J5WldGdEwyeHBZaTlmYzNSeVpXRnRYM1J5WVc1elptOXliUzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM1YwYVd4ekx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdSaFlteGxMWE4wY21WaGJTOXNhV0l2WDNOMGNtVmhiVjkzY21sMFlXSnNaUzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM1YwYVd4ekx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM0psWVdSaFlteGxMWE4wY21WaGJTOXNhV0l2YVc1MFpYSnVZV3d2YzNSeVpXRnRjeTlDZFdabVpYSk1hWE4wTG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZMMmh2YldVdmFIVjVibWh1WjNWNVpXNHZaMmwwYUhWaUwyTmhkWE5oYkdsMGVTOXViMlJsWDIxdlpIVnNaWE12Y21WaFpHRmliR1V0YzNSeVpXRnRMMnhwWWk5cGJuUmxjbTVoYkM5emRISmxZVzF6TDJSbGMzUnliM2t1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzkxZEdsc2N5OHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTl5WldGa1lXSnNaUzF6ZEhKbFlXMHZiR2xpTDJsdWRHVnlibUZzTDNOMGNtVmhiWE12YzNSeVpXRnRMV0p5YjNkelpYSXVhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dmFHOXRaUzlvZFhsdWFHNW5kWGxsYmk5bmFYUm9kV0l2WTJGMWMyRnNhWFI1TDI1dlpHVmZiVzlrZFd4bGN5OXlaV0ZrWVdKc1pTMXpkSEpsWVcwdmNtVmhaR0ZpYkdVdFluSnZkM05sY2k1cWN5SXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNWMGFXeHpMeTlvYjIxbEwyaDFlVzVvYm1kMWVXVnVMMmRwZEdoMVlpOWpZWFZ6WVd4cGRIa3ZibTlrWlY5dGIyUjFiR1Z6TDNOaFptVXRZblZtWm1WeUwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZMMmh2YldVdmFIVjVibWh1WjNWNVpXNHZaMmwwYUhWaUwyTmhkWE5oYkdsMGVTOXViMlJsWDIxdlpIVnNaWE12YzJWMGFXMXRaV1JwWVhSbEwzTmxkRWx0YldWa2FXRjBaUzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM1YwYVd4ekx5OW9iMjFsTDJoMWVXNW9ibWQxZVdWdUwyZHBkR2gxWWk5allYVnpZV3hwZEhrdmJtOWtaVjl0YjJSMWJHVnpMM04wY21sdVoxOWtaV052WkdWeUwyeHBZaTl6ZEhKcGJtZGZaR1ZqYjJSbGNpNXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzVjBhV3h6THk5b2IyMWxMMmgxZVc1b2JtZDFlV1Z1TDJkcGRHaDFZaTlqWVhWellXeHBkSGt2Ym05a1pWOXRiMlIxYkdWekwzUnBiV1Z5Y3kxaWNtOTNjMlZ5YVdaNUwyMWhhVzR1YW5NaUxDSjNaV0p3WVdOck9pOHZRR05oZFhOaGJFNWxkQzkxZEdsc2N5OHZhRzl0WlM5b2RYbHVhRzVuZFhsbGJpOW5hWFJvZFdJdlkyRjFjMkZzYVhSNUwyNXZaR1ZmYlc5a2RXeGxjeTkxZEdsc0xXUmxjSEpsWTJGMFpTOWljbTkzYzJWeUxtcHpJaXdpZDJWaWNHRmphem92TDBCallYVnpZV3hPWlhRdmRYUnBiSE12S0hkbFluQmhZMnNwTDJKMWFXeGthVzR2WjJ4dlltRnNMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdkxpOXpjbU12Wm1WMFkyZ3Vhbk1pTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k4dUwzTnlZeTl3YkdGMFptOXliUzVxY3lJc0luZGxZbkJoWTJzNkx5OUFZMkYxYzJGc1RtVjBMM1YwYVd4ekx5NHZjM0pqTDNCdVp5NXFjeUlzSW5kbFluQmhZMnM2THk5QVkyRjFjMkZzVG1WMEwzVjBhV3h6THk0dmMzSmpMM05oYlhCc2FXNW5MbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdkxpOXpjbU12YzNSeVpXRnRMbXB6SWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdmRYUnBiQ0FvYVdkdWIzSmxaQ2tpTENKM1pXSndZV05yT2k4dlFHTmhkWE5oYkU1bGRDOTFkR2xzY3k5MWRHbHNJQ2hwWjI1dmNtVmtLVDh3TWpabElpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZaWGgwWlhKdVlXd2dYQ0pqY205emN5MW1aWFJqYUZ3aUlpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZaWGgwWlhKdVlXd2dYQ0ptWlhSamFDMXlaV0ZrWVdKc1pYTjBjbVZoYlZ3aUlpd2lkMlZpY0dGamF6b3ZMMEJqWVhWellXeE9aWFF2ZFhScGJITXZaWGgwWlhKdVlXd2dYQ0p3YkdGMFptOXliVndpSWl3aWQyVmljR0ZqYXpvdkwwQmpZWFZ6WVd4T1pYUXZkWFJwYkhNdlpYaDBaWEp1WVd3Z1hDSndibWRxY3pOY0lpSXNJbmRsWW5CaFkyczZMeTlBWTJGMWMyRnNUbVYwTDNWMGFXeHpMMlY0ZEdWeWJtRnNJRndpY21GdVpHOXRYQ0lpWFN3aWJtRnRaWE1pT2xzaVRtOWtaVk4wY21WaGJVMXBlR2x1Y3lJc0lrWmxkR05vUTJ4aGMzTWlMQ0p6ZEhKbFlXMUVZWFJoSWl3aWRYSnNJaXdpY21WemNHOXVjMlVpTENKemRHRjBkWE1pTENKRmNuSnZjaUlzSW1KdlpIa2lMQ0pYWldKVGRISmxZVzFOYVhocGJuTWlMQ0pqYjI1emIyeGxJaXdpWlhKeWIzSWlMQ0p5WldwbFkzUWlMQ0p6ZEhKbFlXMVNaV0ZrWlhJaUxDSm5aWFJTWldGa1pYSWlMQ0p5WldGa1pYSWlMQ0pUZEhKbFlXMGlMQ0p0WVd0bFVtVmhaR0ZpYkdVaUxDSnlaV04xYzJsMlpWSmxZV1FpTENKUWNtOXRhWE5sSWl3aWNtVnpiMngyWlNJc0luSmxZV1FpTENKMGFHVnVJaXdpZG1Gc2RXVWlMQ0prYjI1bElpd2ljSFZ6YUNJc0lsSmxZV1JPWlhoMElpd2lhR0Z6VG1WNGRDSXNJa1psZEdOb0lpd2lVR3hoZEdadmNtMGlMQ0p0YVhoWGFYUm9JaXdpWm1WMFkyZ2lMQ0pqYjI1emRISjFZM1J2Y2lJc0ltWmxkR05vUkdGMFlTSXNJblJsZUhRaUxDSm1aWFJqYUVwemIyNGlMQ0pxYzI5dUlpd2lVR3hoZEdadmNtMU5ZWEJ3YVc1bklpd2libUZ0WlNJc0luQnNZWFJtYjNKdElpd2lVRWxFSWl3aWNISnZZMlZ6Y3lJc0luQnBaQ0lzSW1OMWNuSmxiblJRYkdGMFptOXliU0lzSW5CaGNuTmxJaXdpUW1GelpVTnNZWE56SWl3aWJXbDRhVzV6SWl3aWJXbDRhVzV6VEdsemRDSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbEJtVG1GdFpTSXNJblZ1WkdWbWFXNWxaQ0lzSW5KbFpIVmpaU0lzSW1NaUxDSnRhWGhwYmlJc0lsQk9SeUlzSWxOaGJYQnNhVzVuSWl3aWNtRnVaRzl0SWl3aVEyOXlaVkpoYm1SdmJTSXNJbTFoYTJWRGFHVmphMFZ1YjNWbmFDSXNJbk5wZW1VaUxDSnpZVzF3YkdVaUxDSnNaVzVuZEdnaUxDSnlZVzVuWlNJc0ltWnliMjBpTENKR2JHOWhkRE15UVhKeVlYa2lMQ0p0WVhBaUxDSjJJaXdpYVNJc0ltTm9iMmxqWlNJc0ltRWlMQ0p5WlhCc1lXTmxJaXdpY0NJc0ltUnZiV0ZwYmlJc0luTnNhV05sSWl3aWMyRnRjR3hsY3lJc0lrZGxkRlYwYVd4RmJtOTFaMmdpTENKcFpIZ2lMQ0pwYm5RaUxDSnpkSEpsWVcwaUxDSmpiM0psVTNSeVpXRnRJaXdpY21WaFpFWnVJaXdpVW1WaFpHRmliR1VpTENKdlltcGxZM1JOYjJSbElpd2lSR1ZtWVhWc2RGSmxZV1JsY2lJc0lsOXlaV0ZrSWl3aWQzSmhjRkpsWVdSaFlteGxJaXdpY21WaFpHRmliR1ZQWW1vaUxDSjNjbUZ3SWl3aWJXRnJaVmR5YVhSaFlteGxJaXdpZDNKcGRHVkdiaUlzSW5keWFYUmxjaUlzSWxkeWFYUmhZbXhsSWl3aVgzZHlhWFJsSWl3aWJXRnJaVVIxY0d4bGVDSXNJbVIxY0d4bGVDSXNJa1IxY0d4bGVDSXNJbTFoYTJWVWNtRnVjMlp2Y20waUxDSjBjbUZ1Wm05eWJVWnVJaXdpZEhKaGJuTm1iM0p0WlhJaUxDSlVjbUZ1YzJadmNtMGlMQ0pmZEhKaGJuTm1iM0p0SWl3aWJXRnJaVkJwY0dWc2FXNWxJaXdpYzNSeVpXRnRjeUlzSW05dVJHRjBZVVp1SWl3aWIyNGlMQ0psY25JaUxDSmtZWFJoSWl3aWN5SXNJbkJwY0dVaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFTkJRVU03UVVGRFJDeFBPMEZEVmtFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hyUkVGQk1FTXNaME5CUVdkRE8wRkJRekZGTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBWQlFYZEVMR3RDUVVGclFqdEJRVU14UlR0QlFVTkJMSGxFUVVGcFJDeGpRVUZqTzBGQlF5OUVPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBSRUZCZVVNc2FVTkJRV2xETzBGQlF6RkZMSGRJUVVGblNDeHRRa0ZCYlVJc1JVRkJSVHRCUVVOeVNUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHMURRVUV5UWl3d1FrRkJNRUlzUlVGQlJUdEJRVU4yUkN4NVEwRkJhVU1zWlVGQlpUdEJRVU5vUkR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzRSRUZCYzBRc0swUkJRU3RFT3p0QlFVVnlTRHRCUVVOQk96czdRVUZIUVR0QlFVTkJPenM3T3pzN096czdPenM3UVVOc1JrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDNRenM3T3pzN096czdPenM3TzBGRFRsazdPMEZCUlZvN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHdERRVUZyUXl4VFFVRlRPMEZCUXpORE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4cFFrRkJhVUlzVTBGQlV6dEJRVU14UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjVUpCUVhGQ0xGTkJRVk03UVVGRE9VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3d1EwRkJNRU1zVlVGQlZUdEJRVU53UkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN096czdPenM3T3pzN096dEJRM1JLUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGV1RzN1FVRkZXaXhoUVVGaExHMUNRVUZQTEVOQlFVTXNkMFJCUVZjN1FVRkRhRU1zWTBGQll5eHRRa0ZCVHl4RFFVRkRMRzlFUVVGVE8wRkJReTlDTEdOQlFXTXNiVUpCUVU4c1EwRkJReXh2UkVGQlV6czdRVUZGTDBJN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMSEZDUVVGeFFpeHRSRUZCYlVRN1FVRkRlRVU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeFZRVUZWTzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFpeFpRVUZaTzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3d3UWtGQk1FSTdRVUZETVVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNkVU5CUVhWRExGTkJRVk03UVVGRGFFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaU3hwUWtGQmFVSTdRVUZEYUVNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4aFFVRmhMR2xDUVVGcFFqdEJRVU01UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUlzVTBGQlV6dEJRVU14UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTEZOQlFWTTdRVUZETVVJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVKQlFXbENMRk5CUVZNN1FVRkRNVUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeG5SRUZCWjBRc1JVRkJSVHRCUVVOc1JEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3hwUWtGQmFVSXNVMEZCVXp0QlFVTXhRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZVVOQlFYbERPMEZCUTNwRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4M1FrRkJkMElzWlVGQlpUdEJRVU4yUXp0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRU3gzUWtGQmQwSXNVVUZCVVR0QlFVTm9RenRCUVVOQkxIRkNRVUZ4UWl4bFFVRmxPMEZCUTNCRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFpeFpRVUZaTzBGQlF6ZENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4eFFrRkJjVUlzVTBGQlV6dEJRVU01UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2NVSkJRWEZDTEZOQlFWTTdRVUZET1VJN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNjVUpCUVhGQ0xGTkJRVk03UVVGRE9VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xHdENRVUZyUWp0QlFVTnVRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRXNiVUpCUVcxQ0xHTkJRV003UVVGRGFrTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWRVFVRjFSQ3hQUVVGUE8wRkJRemxFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4MVJFRkJkVVFzVDBGQlR6dEJRVU01UkR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHJRa0ZCYTBJN1FVRkRiRUk3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSXNVVUZCVVR0QlFVTTNRanRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRXNaVUZCWlN4VFFVRlRPMEZCUTNoQ08wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEZOQlFWTTdRVUZETlVJN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR1ZCUVdVc2FVSkJRV2xDTzBGQlEyaERPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYVVKQlFXbENMRmxCUVZrN1FVRkROMEk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHbENRVUZwUWl4blFrRkJaMEk3UVVGRGFrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUlzWjBKQlFXZENPMEZCUTJwRE96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdsQ1FVRnBRaXhaUVVGWk8wRkJRemRDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN08wRkROWFpFUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPenRCUXpGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUk3UVVGRGFrSXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRU3hsUVVGbExGTkJRVk03UVVGRGVFSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxFZEJRVWM3UVVGRFNDeHZRa0ZCYjBJc1UwRkJVenRCUVVNM1FqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPMEZETjFOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hSUVVGUkxGZEJRVmM3TzBGQlJXNUNPMEZCUTBFN1FVRkRRVHRCUVVOQkxGRkJRVkVzVjBGQlZ6czdRVUZGYmtJN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxGRkJRVkVzVjBGQlZ6czdRVUZGYmtJN1FVRkRRVHRCUVVOQkxGRkJRVkVzVlVGQlZUczdRVUZGYkVJN1FVRkRRVHM3T3pzN096czdPenM3TzBGRGJrWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN1FVTjBRa0VzYVVKQlFXbENPenRCUVVWcVFqdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3UVVOS1FTd3JRMEZCWVRzN1FVRkZZanRCUVVOQk8wRkJRMEU3UVVGRFFTeHZRa0ZCYjBJN1FVRkRjRUlzUTBGQlF6dEJRVU5FTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN096czdPenM3T3pzN096czdPMEZETVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFc1EwRkJRenRCUVVORU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4MVFrRkJkVUlzYzBKQlFYTkNPMEZCUXpkRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjVUpCUVhGQ08wRkJRM0pDT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHhRMEZCY1VNN08wRkJSWEpETzBGQlEwRTdRVUZEUVRzN1FVRkZRU3d5UWtGQk1rSTdRVUZETTBJN1FVRkRRVHRCUVVOQk8wRkJRMEVzTkVKQlFUUkNMRlZCUVZVN096czdPenM3T3pzN096czdRVU4yVEhSRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSV0U3TzBGQlJXSTdPMEZCUlVFc1ZVRkJWU3h0UWtGQlR5eERRVUZETERoRlFVRnpRanRCUVVONFF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFTeFhRVUZYTEcxQ1FVRlBMRU5CUVVNc2FVVkJRV003UVVGRGFrTXNaMEpCUVdkQ0xHMUNRVUZQTEVOQlFVTXNhVVZCUVZVN1FVRkRiRU03TzBGQlJVRXNaVUZCWlN4dFFrRkJUeXhEUVVGRExITkdRVUZ2UWp0QlFVTXpReXhsUVVGbExHMUNRVUZQTEVOQlFVTXNjMFpCUVc5Q096dEJRVVV6UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBRa0ZCYVVJc2FVSkJRV2xDTzBGQlEyeERPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN08wRkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4Rk96czdPenM3T3pzN096czdRVU5zU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUldFN08wRkJSV0k3TzBGQlJVRXNaMEpCUVdkQ0xHMUNRVUZQTEVOQlFVTXNkMFpCUVhGQ096dEJRVVUzUXp0QlFVTkJMRmRCUVZjc2JVSkJRVThzUTBGQlF5eHBSVUZCWXp0QlFVTnFReXhuUWtGQlowSXNiVUpCUVU4c1EwRkJReXhwUlVGQlZUdEJRVU5zUXpzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVVN096czdPenM3T3pzN096dEJRemxEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWaE96dEJRVVZpT3p0QlFVVkJMRlZCUVZVc2JVSkJRVThzUTBGQlF5dzRSVUZCYzBJN1FVRkRlRU03TzBGQlJVRTdPMEZCUlVFN1FVRkRRU3hqUVVGakxHMUNRVUZQTEVOQlFVTXNiMFJCUVZNN1FVRkRMMEk3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNVMEZCVXl4dFFrRkJUeXhEUVVGRExHMUVRVUZST3p0QlFVVjZRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR0ZCUVdFc2JVSkJRVThzUTBGQlF5dzBSMEZCTWtJN1FVRkRhRVE3TzBGQlJVRTdPMEZCUlVFc1lVRkJZU3h0UWtGQlR5eERRVUZETERSRVFVRmhPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNWMEZCVnl4dFFrRkJUeXhEUVVGRExHbEZRVUZqTzBGQlEycERMR2RDUVVGblFpeHRRa0ZCVHl4RFFVRkRMR2xGUVVGVk8wRkJRMnhET3p0QlFVVkJPMEZCUTBFc1owSkJRV2RDTEcxQ1FVRlBMRU5CUVVNc1lVRkJUVHRCUVVNNVFqdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk96dEJRVVZCTEdsQ1FVRnBRaXh0UWtGQlR5eERRVUZETERSSFFVRXJRanRCUVVONFJDeHJRa0ZCYTBJc2JVSkJRVThzUTBGQlF5eHpSMEZCTkVJN1FVRkRkRVE3TzBGQlJVRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDVSVUZCZVVVc05rVkJRVFpGTzBGQlEzUktPenRCUVVWQk8wRkJRMEVzY1VKQlFYRkNMRzFDUVVGUExFTkJRVU1zYTBaQlFXdENPenRCUVVVdlF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYVVSQlFXbEVMREJHUVVFd1JqczdRVUZGTTBrN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGREUVVGM1F5eHRRa0ZCVHl4RFFVRkRMR2RHUVVGcFFqdEJRVU5xUlR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEhGQ1FVRnhRaXh0UWtGQlR5eERRVUZETEd0R1FVRnJRanM3UVVGRkwwTTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEd0SFFVRnJSenRCUVVOc1J5eFBRVUZQTzBGQlExQTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEVzTkVaQlFUUkdPMEZCUXpWR0xGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJMR2RFUVVGblJEczdRVUZGYUVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4elEwRkJjME1zYlVKQlFVOHNRMEZCUXl4blJrRkJhVUk3UVVGREwwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTdzBSVUZCTkVVN1FVRkROVVU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERaRVFVRTJSRHRCUVVNM1JEdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYzBOQlFYTkRPenRCUVVWMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzZDBSQlFYZEVPMEZCUTNoRU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4WlFVRlpPMEZCUTFvN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxEUkRRVUUwUXpzN1FVRkZOVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2IwSkJRVzlDT3p0QlFVVndRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeFRRVUZUTzBGQlF6VkNPMEZCUTBFc1MwRkJTenRCUVVOTU96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNSMEZCUnpzN1FVRkZTRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3MFJVRkJORVU3TzBGQlJUVkZPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZIT3p0QlFVVklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdsQ1FVRnBRaXg1UWtGQmVVSTdRVUZETVVNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenM3UVVGRlJEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2JVUkJRVzFFTzBGQlEyNUVPMEZCUTBFc2JVUkJRVzFFTEdsRlFVRnBSVHRCUVVOd1NEdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhORFFVRnpRenRCUVVOMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSFZEUVVGMVF6dEJRVU4yUXl4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIVkRRVUYxUXp0QlFVTjJReXhQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNaME5CUVdkRExFOUJRVTg3UVVGRGRrTTdRVUZEUVR0QlFVTkJPMEZCUTBFc1F6czdPenM3T3pzN096czdPenRCUXpFdlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERCRFFVRXdReXhaUVVGWk8wRkJRM1JFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGWVRzN1FVRkZZanM3UVVGRlFTeGhRVUZoTEcxQ1FVRlBMRU5CUVVNc2EwWkJRV3RDT3p0QlFVVjJRenRCUVVOQkxGZEJRVmNzYlVKQlFVOHNRMEZCUXl4cFJVRkJZenRCUVVOcVF5eG5Ra0ZCWjBJc2JVSkJRVThzUTBGQlF5eHBSVUZCVlR0QlFVTnNRenM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVEN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTEVNN096czdPenM3T3pzN096dEJRM0pPUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGWVRzN1FVRkZZanM3UVVGRlFTeFZRVUZWTEcxQ1FVRlBMRU5CUVVNc09FVkJRWE5DTzBGQlEzaERPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4WFFVRlhMRzFDUVVGUExFTkJRVU1zYVVWQlFXTTdRVUZEYWtNc1owSkJRV2RDTEcxQ1FVRlBMRU5CUVVNc2FVVkJRVlU3UVVGRGJFTTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHRkJRV0VzYlVKQlFVOHNRMEZCUXl4dlJVRkJaMEk3UVVGRGNrTTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHRkJRV0VzYlVKQlFVOHNRMEZCUXl3MFIwRkJNa0k3UVVGRGFFUTdPMEZCUlVFN08wRkJSVUVzWVVGQllTeHRRa0ZCVHl4RFFVRkRMRFJFUVVGaE8wRkJRMnhETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJMR3RDUVVGclFpeHRRa0ZCVHl4RFFVRkRMSE5IUVVFMFFqczdRVUZGZEVRN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4eFFrRkJjVUlzYlVKQlFVOHNRMEZCUXl4clJrRkJhMEk3TzBGQlJTOURPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMR2xFUVVGcFJDd3dSa0ZCTUVZN08wRkJSVE5KTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVQ3hMUVVGTE8wRkJRMHdzUjBGQlJ6dEJRVU5JTEVOQlFVTTdPMEZCUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNjVUpCUVhGQ0xHMUNRVUZQTEVOQlFVTXNhMFpCUVd0Q096dEJRVVV2UXp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2FVTkJRV2xET3p0QlFVVnFRenM3UVVGRlFTd3lRMEZCTWtNN1FVRkRNME03UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZET3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzFFUVVGdFJEdEJRVU51UkR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRU3h2UkVGQmIwUTdRVUZEY0VRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxEUVVGNVF6dEJRVU42UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN096czdPenM3T3p0QlF6bHhRbUU3TzBGQlJXSXNhVVJCUVdsRUxEQkRRVUV3UXl3d1JFRkJNRVFzUlVGQlJUczdRVUZGZGtvc1lVRkJZU3h0UWtGQlR5eERRVUZETERSRVFVRmhPMEZCUTJ4RExGZEJRVmNzYlVKQlFVOHNRMEZCUXl4aFFVRk5PenRCUVVWNlFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYVVKQlFXbENPMEZCUTJwQ0xHZEVRVUZuUkR0QlFVTm9SRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4cFFrRkJhVUk3UVVGRGFrSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkMFJCUVhkRU8wRkJRM2hFTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4RFFVRkRPenRCUVVWRU8wRkJRMEU3UVVGRFFTdzBRa0ZCTkVJc2MwSkJRWE5DTzBGQlEyeEVPMEZCUTBFN1FVRkRRU3hET3pzN096czdPenM3T3pzN1FVTTVSV0U3TzBGQlJXSTdPMEZCUlVFc1ZVRkJWU3h0UWtGQlR5eERRVUZETERoRlFVRnpRanRCUVVONFF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVN4SFFVRkhPenRCUVVWSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN096czdPenM3UVVONlJVRXNhVUpCUVdsQ0xHMUNRVUZQTEVOQlFVTXNiVVJCUVZFN096czdPenM3T3pzN096dEJRMEZxUXl3eVFrRkJNa0lzYlVKQlFVOHNRMEZCUXl3MlJrRkJNa0k3UVVGRE9VUTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeHRRa0ZCVHl4RFFVRkRMRFpHUVVFeVFqdEJRVU4wUkN4cFFrRkJhVUlzYlVKQlFVOHNRMEZCUXl4NVJrRkJlVUk3UVVGRGJFUXNiMEpCUVc5Q0xHMUNRVUZQTEVOQlFVTXNLMFpCUVRSQ08wRkJRM2hFTEhOQ1FVRnpRaXh0UWtGQlR5eERRVUZETEcxSFFVRTRRanM3T3pzN096czdPenM3TzBGRFRqVkVPMEZCUTBFc1lVRkJZU3h0UWtGQlR5eERRVUZETEd0RVFVRlJPMEZCUXpkQ096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3UVVNM1JFRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNkVUpCUVhWQ08wRkJRM1pDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2NVSkJRWEZDTEdsQ1FVRnBRanRCUVVOMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVN4clFrRkJhMEk3UVVGRGJFSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTzBGQlEycENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc01FTkJRVEJETEhOQ1FVRnpRaXhGUVVGRk8wRkJRMnhGTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2VVTkJRWGxETzBGQlEzcERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4VlFVRlZPMEZCUTFZN1FVRkRRVHM3UVVGRlFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeERRVUZET3pzN096czdPenM3T3pzN096dEJRM3BNUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWaE96dEJRVVZpT3p0QlFVVkJMR0ZCUVdFc2JVSkJRVThzUTBGQlF5dzBSRUZCWVR0QlFVTnNRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc05FSkJRVFJDTzBGQlF6VkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNOa0pCUVRaQ0xITkRRVUZ6UXl4elEwRkJjME03UVVGRGVrYzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTd3lRa0ZCTWtJN1FVRkRNMEk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRU03T3pzN096czdPenM3TzBGRGRsTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4dFFrRkJUeXhEUVVGRExIRkZRVUZqTzBGQlEzUkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdRVU0zUkVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGZEJRVmNzVTBGQlV6dEJRVU53UWl4WFFVRlhMRTlCUVU4N1FVRkRiRUlzWVVGQllTeFRRVUZUTzBGQlEzUkNPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4WFFVRlhMRTlCUVU4N1FVRkRiRUlzWVVGQllUdEJRVU5pTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdPMEZEYkVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNN08wRkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNORU5CUVRSRE96dEJRVVUxUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEWkVFc1VVRkJUVUVzWjBKQlFXZENMRWRCUVVsRExGVkJRVVFzU1VGQlpTeGpRVUZqUVN4VlFVRmtMRU5CUVhkQ08wRkJRelZFTEdsQ1FVRmhReXhWUVVGaUxFTkJRWGRDUXl4SFFVRjRRaXhGUVVFMFFqdEJRVU40UWl4WlFVRk5ReXhSUVVGUkxFZEJRVWNzVFVGQlRTeDVRa0ZCVFVRc1IwRkJUaXhEUVVGMlFqczdRVUZEUVN4VlFVRkpReXhSUVVGUkxFTkJRVU5ETEUxQlFWUXNTVUZCYlVJc1IwRkJka0lzUlVGQk5FSTdRVUZEZUVJc1kwRkJUVU1zUzBGQlN5eERRVUZETERCQ1FVRkVMRU5CUVZnN1FVRkRTRHM3UVVGRFJDeGhRVUZQUml4UlFVRlJMRU5CUVVOSExFbEJRV2hDTzBGQlEwZzdPMEZCVURKRUxFZEJRV2hGT3p0QlFWVkJMRkZCUVUxRExHVkJRV1VzUjBGQlNWQXNWVUZCUkN4SlFVRmxMR05CUVdOQkxGVkJRV1FzUTBGQmQwSTdRVUZETTBRc2FVSkJRV0ZETEZWQlFXSXNRMEZCZDBKRExFZEJRWGhDTEVWQlFUUkNPMEZCUTNoQ0xGVkJRVWxETEZGQlFWRXNSMEZCUnl4TlFVRk5MR3REUVVGWlJDeEhRVUZhTEVOQlFYSkNPenRCUVVOQkxGVkJRVWRETEZGQlFWRXNRMEZCUTBNc1RVRkJWQ3hKUVVGdFFpeEhRVUYwUWl4RlFVRXdRanRCUVVOMFFra3NaVUZCVHl4RFFVRkRReXhMUVVGU0xFTkJRV05PTEZGQlFWRXNRMEZCUTBNc1RVRkJka0k3UVVGRFFVMHNZMEZCVFN4RFFVRkRMREJDUVVGRUxFTkJRVTQ3UVVGRFNEczdRVUZEUkN4WlFVRk5ReXhaUVVGWkxFZEJRVWRTTEZGQlFWRXNRMEZCUTBjc1NVRkJWQ3hEUVVGalRTeFRRVUZrTEVWQlFYSkNPenRCUVVOQkxGVkJRVWxETEUxQlFVMHNSMEZCUjBNc1owSkJRVTlETEZsQlFWQXNSVUZCWWpzN1FVRkRRU3haUVVGTlF5eFpRVUZaTEVkQlFVY3NUVUZCU1R0QlFVTnlRaXhsUVVGUExFbEJRVWxETEU5QlFVb3NRMEZCV1N4RFFVRkRReXhQUVVGRUxFVkJRVlZTTEUxQlFWWXNTMEZCYlVJN1FVRkRiRU5ETEhOQ1FVRlpMRU5CUVVOUkxFbEJRV0lzUjBGQmIwSkRMRWxCUVhCQ0xFTkJRWGxDTEVOQlFVTTdRVUZCUlVNc2FVSkJRVVk3UVVGQlUwTTdRVUZCVkN4WFFVRkVMRXRCUVcxQ08wRkJRM2hETEdkQ1FVRkpRU3hKUVVGS0xFVkJRVlU3UVVGRFRsUXNiMEpCUVUwc1EwRkJRMVVzU1VGQlVDeERRVUZaTEVsQlFWbzdRVUZEUVV3c2NVSkJRVThzUTBGQlF5eERRVUZFTEVOQlFWQTdRVUZEU0N4aFFVaEVMRTFCU1VrN1FVRkRRVXdzYjBKQlFVMHNRMEZCUTFVc1NVRkJVQ3hEUVVGWlJpeExRVUZhTzBGQlEwRklMSEZDUVVGUExFTkJRVU1zUTBGQlJDeERRVUZRTzBGQlEwZzdRVUZEU2l4WFFWUkVPMEZCVlVnc1UwRllUU3hEUVVGUU8wRkJXVWdzVDBGaVJEczdRVUZqUVN4WlFVRk5UU3hSUVVGUkxFZEJRVWxTTEZsQlFVUXNTVUZCWjBJN1FVRkROMEpCTEc5Q1FVRlpMRWRCUVVkSkxFbEJRV1lzUTBGQmIwSkxMRTlCUVU4c1NVRkJSVHRCUVVONlFpeGpRVUZIUVN4UFFVRklMRVZCUVZjN1FVRkRVRVFzYjBKQlFWRXNRMEZCUTFJc1dVRkJSQ3hEUVVGU08wRkJRMGc3UVVGRFNpeFRRVXBFTzBGQlMwZ3NUMEZPUkRzN1FVRlBRVkVzWTBGQlVTeERRVUZEVWl4WlFVRkVMRU5CUVZJN1FVRkRRU3hoUVVGUFNDeE5RVUZRTzBGQlEwZzdPMEZCYUVNd1JDeEhRVUV2UkRzN1FVRnRRMlVzVVVGQlRXRXNTMEZCVGl4VFFVRnZRa01zYTBKQlFWTkRMRTlCUVZRc1EwRkJhVUpETEcxQ1FVRnFRaXhGUVVGM1FqdEJRVUZETEZsQlFWRXNRMEZCUXpsQ0xHZENRVUZFTEVOQlFWUTdRVUZCTmtJc1YwRkJUU3hEUVVGRFVTeGxRVUZFTzBGQlFXNURMRWRCUVhoQ0xFTkJRWEJDTEVOQlFXdEhPMEZCUXpkSGRVSXNaVUZCVnl4SFFVRkZMRU5CUVVVN08wRkJRMllzYVVKQlFXRkRMRk5CUVdJc1EwRkJkVUkzUWl4SFFVRjJRaXhGUVVFeVFqdEJRVU4yUWl4aFFVRlBMRWxCUVVsbExFOUJRVW9zUTBGQldTeERRVUZEUXl4UFFVRkVMRVZCUVZWU0xFMUJRVllzUzBGQmJVSTdRVUZEYkVNc2FVTkJRVTFTTEVkQlFVNHNSVUZCVjJ0Q0xFbEJRVmdzUTBGQlowSnFRaXhSUVVGUkxFbEJRVVU3UVVGRGRFSXNZMEZCU1VFc1VVRkJVU3hEUVVGRFF5eE5RVUZVTEVsQlFXMUNMRWRCUVhaQ0xFVkJRVFJDTzBGQlEzaENTU3h0UWtGQlR5eERRVUZEUXl4TFFVRlNMRU5CUVdOT0xGRkJRVkVzUTBGQlEwTXNUVUZCZGtJN1FVRkRRVTBzYTBKQlFVMHNRMEZCUXl3d1FrRkJSQ3hEUVVGT08wRkJRMGc3TzBGQlEwUlJMR2xDUVVGUExFTkJRVU5tTEZGQlFWRXNRMEZCUXpaQ0xFbEJRVlFzUlVGQlJDeERRVUZRTzBGQlEwZ3NVMEZPUkR0QlFVOUlMRTlCVWswc1EwRkJVRHRCUVZOSU96dEJRVVZFTEdsQ1FVRmhReXhUUVVGaUxFTkJRWFZDTDBJc1IwRkJka0lzUlVGQk1rSTdRVUZEZGtJc1lVRkJUeXhKUVVGSlpTeFBRVUZLTEVOQlFWa3NUMEZCVDBNc1QwRkJVQ3hGUVVGblFsSXNUVUZCYUVJc1MwRkJlVUk3UVVGRGVFTXNhVU5CUVUxU0xFZEJRVTRzUlVGQlYydENMRWxCUVZnc1EwRkJaMEpxUWl4UlFVRlJMRWxCUVVVN1FVRkRkRUlzWTBGQlNVRXNVVUZCVVN4RFFVRkRReXhOUVVGVUxFbEJRVzFDTEVkQlFYWkNMRVZCUVRSQ08wRkJRM2hDU1N4dFFrRkJUeXhEUVVGRFF5eExRVUZTTEVOQlFXTk9MRkZCUVZFc1EwRkJRME1zVFVGQmRrSTdRVUZEUVUwc2EwSkJRVTBzUTBGQlF5d3dRa0ZCUkN4RFFVRk9PMEZCUTBnN08wRkJRMFJSTEdsQ1FVRlBMRU5CUVVObUxGRkJRVkVzUTBGQlF5dENMRWxCUVZRc1JVRkJSQ3hEUVVGUU8wRkJRMGdzVTBGT1JEdEJRVTlJTEU5QlVrMHNRMEZCVUR0QlFWTklPenRCUVhoQ05FYzdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNdlEycElMRkZCUVUxRExHVkJRV1VzUjBGQlNVTXNTVUZCUkN4SlFVRlJPMEZCUXpWQ0xGRkJRVWRCTEVsQlFVa3NTMEZCU3l4VFFVRmFMRVZCUVhOQ08wRkJRMnhDTEdGQlFVOHNUVUZCVUR0QlFVTklMRXRCUmtRc1RVRkhTVHRCUVVOQkxHRkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwb3NSMEZRUkRzN1FVRlRaU3hSUVVGTlZDeFJRVUZPTEVOQlFXTTdRVUZEZWtKSExHVkJRVmNzUjBGQlJUdEJRVU5VTEZkQlFVdFBMRkZCUVV3c1IwRkJaMEpCTEdsQ1FVRm9RanRCUVVOSU96dEJRVU5FTEZkQlFVOURMRWRCUVZBc1IwRkJXVHRCUVVOU0xGVkJRVWNzVDBGQlQwTXNaMEpCUVZBc1MwRkJiVUlzVjBGQmJrSXNTVUZCYTBOQkxHbENRVUZSUXl4SFFVRTNReXhGUVVGclJEdEJRVU01UXl4bFFVRlBSQ3hwUWtGQlVVTXNSMEZCWmp0QlFVTklMRTlCUmtRc1RVRkhTVHRCUVVOQkxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1YwRkJUME1zWlVGQlVDeEhRVUYzUWp0QlFVTndRaXhoUVVGUFNpeHJRa0ZCVTBzc1MwRkJWQ3hGUVVGUU8wRkJRMGc3TzBGQlJVUXNWMEZCVDJRc1QwRkJVQ3hEUVVGbFpTeFRRVUZtTEVWQlFUQkNReXhOUVVFeFFpeEZRVUZwUXp0QlFVTTNRaXhWUVVGSlF5eFZRVUZWTEVkQlFVY3NSVUZCYWtJN08wRkJRMEVzVlVGQlIwTXNTMEZCU3l4RFFVRkRReXhQUVVGT0xFTkJRV05JTEUxQlFXUXNRMEZCU0N4RlFVRjVRanRCUVVOeVFrTXNhMEpCUVZVc1IwRkJSMFFzVFVGQllqdEJRVU5JTEU5QlJrUXNUVUZIU1R0QlFVTkJMR05CUVUxSkxFMUJRVTBzUjBGQlIySXNaVUZCWlN4RFFVRkRSU3hyUWtGQlUwc3NTMEZCVkN4SFFVRnBRaXhOUVVGcVFpeERRVUZFTEVOQlFUbENPMEZCUTBGSExHdENRVUZWTEVkQlFVZEVMRTFCUVUwc1EwRkJRMGtzVFVGQlJDeERRVUZ1UWp0QlFVTklPenRCUVVORUxGVkJRVWRJTEZWQlFWVXNTMEZCUzBrc1UwRkJiRUlzUlVGQk5FSTdRVUZEZUVJc1kwRkJUVFZETEV0QlFVc3NRMEZCUlN4SFFVRkZNa01zVFVGQlR5eHpRa0ZCV0N4RFFVRllPMEZCUTBnN08wRkJRMFFzWVVGQlQwZ3NWVUZCVlN4RFFVRkRTeXhOUVVGWUxFTkJRV3RDTEVOQlFVTkRMRU5CUVVRc1JVRkJTVU1zUzBGQlNpeExRVUZqUVN4TFFVRkxMRU5CUVVORUxFTkJRVVFzUTBGQmNrTXNSVUZCTUVOU0xGTkJRVEZETEVOQlFWQTdRVUZEU0RzN1FVRTVRbmRDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzJsQ1ExaGtWU3hWT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRRVUVzVVVGQlRVTXNVVUZCVGl4RFFVRmpPMEZCUTNwQ2VFSXNaVUZCVnl4SFFVRkZPMEZCUTFRc1YwRkJTM2xDTEUxQlFVd3NSMEZCWTBFc1pVRkJaRHRCUVVOSU96dEJRVU5FTEZGQlFVbERMRlZCUVVvc1IwRkJaMEk3UVVGRFdpeGhRVUZQTEV0QlFVdEVMRTFCUVZvN1FVRkRTRHM3UVVGRFJDeFhRVUZQUlN4bFFVRlFMRU5CUVhWQ1F5eEpRVUYyUWl4RlFVRTBRanRCUVVONFFpeGhRVUZSUXl4TlFVRkVMRWxCUVZWQkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4SFFVRmpSaXhKUVVFdlFqdEJRVU5JT3p0QlFVTkVMRmRCUVU5SExFdEJRVkFzUTBGQllVZ3NTVUZCWWl4RlFVRnJRanRCUVVOa0xHRkJRVTlhTEV0QlFVc3NRMEZCUTJkQ0xFbEJRVTRzUTBGQlZ5eEpRVUZKUXl4WlFVRktMRU5CUVdsQ1RDeEpRVUZxUWl4RFFVRllMRVZCUVcxRFRTeEhRVUZ1UXl4RFFVRjFReXhEUVVGRFF5eERRVUZFTEVWQlFVZERMRU5CUVVnc1MwRkJUMEVzUTBGQk9VTXNRMEZCVUR0QlFVTklPenRCUVVWRUxGZEJRVTlETEUxQlFWQXNRMEZCWTBNc1EwRkJaQ3hGUVVGcFFsWXNTVUZCYWtJc1JVRkJkVUpYTEU5QlFVOHNSMEZCUXl4TFFVRXZRaXhGUVVGelEwTXNRMEZCUXl4SFFVRkRMRWxCUVhoRExFVkJRVFpETzBGQlEzcERMRlZCUVVsRExFMUJRVTBzUjBGQlIzcENMRXRCUVVzc1EwRkJRME1zVDBGQlRpeERRVUZqY1VJc1EwRkJaQ3hKUVVGcFFrRXNRMEZCUXl4RFFVRkRTU3hMUVVGR0xFTkJRVkVzUTBGQlVpeERRVUZxUWl4SFFVRTBRbXhDTEZGQlFWRXNRMEZCUTA4c1MwRkJWQ3hEUVVGbFR5eERRVUZtTEVOQlFYcERPenRCUVVOQkxGVkJRVWRXTEVsQlFVa3NSMEZCUTJFc1RVRkJUU3hEUVVGRFdDeE5RVUZhTEVsQlFYTkNVeXhQUVVGUExFdEJRVXNzU1VGQmNrTXNSVUZCTUVNN1FVRkRkRU1zWTBGQlRXaEZMRXRCUVVzc1EwRkJReXh0UlVGQlJDeERRVUZZTzBGQlEwZzdPMEZCUTBRc1ZVRkJTVzlGTEU5QlFVOHNSMEZCUnl4RlFVRmtPMEZCUTBFc1dVRkJUVU1zWVVGQllTeEhRVUZIY0VJc1VVRkJVU3hEUVVGRFJ5eGxRVUZVTEVOQlFYbENReXhKUVVGNlFpeERRVUYwUWp0QlFVTkJMRlZCUVVscFFpeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRllPenRCUVVOQkxHRkJRVTFFTEdGQlFXRXNRMEZCUTBRc1QwRkJSQ3hEUVVGdVFpeEZRVUUyUWp0QlFVTjZRa1VzVjBGQlJ5eEhRVUZIY0VJc1owSkJRVTl4UWl4SFFVRlFMRU5CUVZjc1EwRkJXQ3hGUVVGalRDeE5RVUZOTEVOQlFVTllMRTFCUVZBc1IwRkJZeXhEUVVFMVFpeERRVUZPT3p0QlFVTkJMRmxCUVVkWExFMUJRVTBzUTBGQlEwa3NSMEZCUkN4RFFVRk9MRXRCUVdNc1NVRkJha0lzUlVGQmMwSTdRVUZEYkVKR0xHbENRVUZQTEVkQlFVY3NRMEZCUXl4SFFVRkhRU3hQUVVGS0xFVkJRV0ZHTEUxQlFVMHNRMEZCUTBrc1IwRkJSQ3hEUVVGdVFpeERRVUZXT3p0QlFVTkJMR05CUVVjc1EwRkJRMDRzVDBGQlNpeEZRVUZaTzBGQlExSkZMR3RDUVVGTkxFTkJRVU5KTEVkQlFVUXNRMEZCVGl4SFFVRlpMRWxCUVZvc1EwRkVVU3hEUVVOVE8wRkJRM0JDTzBGQlEwbzdRVUZEU2pzN1FVRkRSQ3hoUVVGUFJpeFBRVUZRTzBGQlEwZzdPMEZCYUVOM1FqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOQlpDeFJRVUZOTTBRc1RVRkJUaXhEUVVGWk8wRkJRM1pDWjBJc1pVRkJWeXhIUVVGRk8wRkJRMVFzVjBGQlN5dERMRTFCUVV3c1IwRkJZMEVzZFVKQlFXUTdRVUZEU0RzN1FVRkRSQ3hSUVVGSlF5eFZRVUZLTEVkQlFXZENPMEZCUTFvc1lVRkJUeXhMUVVGTFJDeE5RVUZhTzBGQlEwZzdPMEZCUTBRc1YwRkJUemxFTEZsQlFWQXNRMEZCYjBKblJTeE5RVUZOTEVkQlFVTXNTVUZCTTBJc1JVRkJaME03UVVGRE5VSXNWVUZCU1d4RkxFMUJRVTBzUjBGQlJ5eEpRVUZKWjBVc2QwSkJRVTlITEZGQlFWZ3NRMEZCYjBJN1FVRkJRME1zYTBKQlFWVXNSVUZCUlR0QlFVRmlMRTlCUVhCQ0xFTkJRV0k3TzBGQlEwRXNXVUZCVFVNc1lVRkJZU3hIUVVGSExFMUJRVWtzUTBGQlJTeERRVUUxUWpzN1FVRkRRWEpGTEZsQlFVMHNRMEZCUTNORkxFdEJRVkFzUjBGQlpVb3NUVUZCVFN4SlFVRkpSeXhoUVVGNlFqdEJRVU5CTEdGQlFVOXlSU3hOUVVGUU8wRkJRMGc3TzBGQlEwUXNWMEZCVDNWRkxGbEJRVkFzUTBGQmIwSkRMRmRCUVhCQ0xFVkJRV2RETzBGQlF6VkNMRlZCUVVsNFJTeE5RVUZOTEVkQlFVY3NTVUZCU1dkRkxIZENRVUZQUnl4UlFVRllMRVZCUVdJN1FVRkRRVzVGTEZsQlFVMHNRMEZCUTNsRkxFbEJRVkFzUTBGQldVUXNWMEZCV2p0QlFVTkJMR0ZCUVU5NFJTeE5RVUZRTzBGQlEwZzdPMEZCUTBRc1YwRkJUekJGTEZsQlFWQXNRMEZCYjBKRExFOUJRWEJDTEVWQlFUUkNPMEZCUTNoQ0xGVkJRVWxETEUxQlFVMHNSMEZCUnl4SlFVRkpXaXgzUWtGQlQyRXNVVUZCV0N4RFFVRnZRanRCUVVGRFZDeHJRa0ZCVlN4RlFVRkZPMEZCUVdJc1QwRkJjRUlzUTBGQllqdEJRVU5CVVN4WlFVRk5MRU5CUVVORkxFMUJRVkFzUjBGQlowSklMRTlCUVdoQ08wRkJRMEVzWVVGQlQwTXNUVUZCVUR0QlFVTklPenRCUVVORUxGZEJRVTlITEZWQlFWQXNRMEZCYTBKS0xFOUJRV3hDTEVWQlFUSkNWQ3hOUVVGTkxFZEJRVU1zU1VGQmJFTXNSVUZCZFVNN1FVRkRia01zVlVGQlNXTXNUVUZCVFN4SFFVRkhMRWxCUVVsb1FpeDNRa0ZCVDJsQ0xFMUJRVmdzUTBGQmEwSTdRVUZCUTJJc2EwSkJRVlVzUlVGQlJUdEJRVUZpTEU5QlFXeENMRU5CUVdJN1FVRkRRVmtzV1VGQlRTeERRVUZEUml4TlFVRlFMRWRCUVdkQ1NDeFBRVUZvUWpzN1FVRkRRU3haUVVGTlRpeGhRVUZoTEVkQlFVY3NUVUZCU1N4RFFVRkZMRU5CUVRWQ096dEJRVU5CVnl4WlFVRk5MRU5CUVVOV0xFdEJRVkFzUjBGQlpVb3NUVUZCVFN4SlFVRkpSeXhoUVVGNlFqdEJRVU5CTEdGQlFVOVhMRTFCUVZBN1FVRkRTRHM3UVVGRFJDeFhRVUZQUlN4aFFVRlFMRU5CUVhGQ1F5eFZRVUZ5UWl4RlFVRm5RenRCUVVNMVFpeFZRVUZKUXl4WFFVRlhMRWRCUVVjc1NVRkJTWEJDTEhkQ1FVRlBjVUlzVTBGQldDeERRVUZ4UWp0QlFVRkRha0lzYTBKQlFWVXNSVUZCUlR0QlFVRmlMRTlCUVhKQ0xFTkJRV3hDTzBGQlEwRm5RaXhwUWtGQlZ5eERRVUZEUlN4VlFVRmFMRWRCUVhsQ1NDeFZRVUY2UWp0QlFVTkJMR0ZCUVU5RExGZEJRVkE3UVVGRFNEczdRVUZGUkN4cFFrRkJZVWNzV1VGQllpeERRVUV3UWtNc1QwRkJNVUlzUlVGQmJVTkRMRkZCUVZFc1IwRkJReXhKUVVFMVF5eEZRVUZwUkR0QlFVTTNReXhoUVVGUExFbEJRVWx5Uml4UFFVRktMRU5CUVZrc1EwRkJRME1zVDBGQlJDeEZRVUZWVWl4TlFVRldMRXRCUVcxQ08wRkJRMnhETEZsQlFVa3JSU3hOUVVGTkxFZEJRVWRaTEU5QlFVOHNRMEZCUXpkQ0xFdEJRVklzUTBGQll5eERRVUZETEVOQlFXWXNSVUZCYTBJc1EwRkJiRUlzUTBGQllqdEJRVU5CTEZsQlFVa3pSQ3hOUVVGTkxFZEJRVWQzUml4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGd1FqdEJRVU5CV2l4alFVRk5MRU5CUVVOakxFVkJRVkFzUTBGQlZTeFJRVUZXTEVWQlFXMUNMRTFCUVVrN1FVRkRia0p5Uml4cFFrRkJUeXhEUVVGRExGTkJRVVFzUTBGQlVEdEJRVU5JTEZOQlJrUTdRVUZIUVhWRkxHTkJRVTBzUTBGQlEyTXNSVUZCVUN4RFFVRlZMRTlCUVZZc1JVRkJiVUpETEVkQlFVUXNTVUZCVHp0QlFVTnlRamxHTEdkQ1FVRk5MRU5CUVVVc2IwSkJRVzFDT0VZc1IwRkJTU3hGUVVGNlFpeERRVUZPTzBGQlEwZ3NVMEZHUkR0QlFVZEJNMFlzWTBGQlRTeERRVUZETUVZc1JVRkJVQ3hEUVVGVkxFMUJRVllzUlVGQmEwSkZMRWxCUVVRc1NVRkJVVHRCUVVOeVFpeGpRVUZIU0N4UlFVRklMRVZCUVZrN1FVRkRVa0VzYjBKQlFWRXNRMEZCUTBjc1NVRkJSQ3hEUVVGU08wRkJRMGc3UVVGRFNpeFRRVXBFTzBGQlMwRXNaVUZCVDBvc1QwRkJUeXhEUVVGRGJrUXNUVUZCVWl4RFFVRmxMRU5CUVVOdlFpeERRVUZFTEVWQlFVbHZReXhEUVVGS0xFdEJRVkZ3UXl4RFFVRkRMRU5CUVVOeFF5eEpRVUZHTEVOQlFVOUVMRU5CUVZBc1EwRkJka0lzUTBGQlVEdEJRVU5JTEU5QlprMHNRMEZCVUR0QlFXZENTRHM3UVVGeVJITkNPenM3T3pzN096czdPenM3T3p0QlEwUXpRaXhsT3pzN096czdPenM3T3p0QlEwRkJMR1U3T3pzN096czdPenM3TzBGRFFVRXNlVVE3T3pzN096czdPenM3TzBGRFFVRXNhMFU3T3pzN096czdPenM3TzBGRFFVRXNjMFE3T3pzN096czdPenM3TzBGRFFVRXNiMFE3T3pzN096czdPenM3TzBGRFFVRXNiMFFpTENKbWFXeGxJam9pUUdOaGRYTmhiRTVsZEM5MWRHbHNjeTUzWldJdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUlvWm5WdVkzUnBiMjRnZDJWaWNHRmphMVZ1YVhabGNuTmhiRTF2WkhWc1pVUmxabWx1YVhScGIyNG9jbTl2ZEN3Z1ptRmpkRzl5ZVNrZ2UxeHVYSFJwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzVjZEZ4MGJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbVlXTjBiM0o1S0hKbGNYVnBjbVVvWENKamNtOXpjeTFtWlhSamFGd2lLU3dnY21WeGRXbHlaU2hjSW5Cc1lYUm1iM0p0WENJcExDQnlaWEYxYVhKbEtGd2labVYwWTJndGNtVmhaR0ZpYkdWemRISmxZVzFjSWlrc0lISmxjWFZwY21Vb1hDSndibWRxY3pOY0lpa3NJSEpsY1hWcGNtVW9YQ0p5WVc1a2IyMWNJaWtwTzF4dVhIUmxiSE5sSUdsbUtIUjVjR1Z2WmlCa1pXWnBibVVnUFQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnWkdWbWFXNWxMbUZ0WkNsY2JseDBYSFJrWldacGJtVW9XMXdpWTNKdmMzTXRabVYwWTJoY0lpd2dYQ0p3YkdGMFptOXliVndpTENCY0ltWmxkR05vTFhKbFlXUmhZbXhsYzNSeVpXRnRYQ0lzSUZ3aWNHNW5hbk16WENJc0lGd2ljbUZ1Wkc5dFhDSmRMQ0JtWVdOMGIzSjVLVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwWlhod2IzSjBjMXRjSWtCallYVnpZV3hPWlhRdmRYUnBiSE5jSWwwZ1BTQm1ZV04wYjNKNUtISmxjWFZwY21Vb1hDSmpjbTl6Y3kxbVpYUmphRndpS1N3Z2NtVnhkV2x5WlNoY0luQnNZWFJtYjNKdFhDSXBMQ0J5WlhGMWFYSmxLRndpWm1WMFkyZ3RjbVZoWkdGaWJHVnpkSEpsWVcxY0lpa3NJSEpsY1hWcGNtVW9YQ0p3Ym1kcWN6TmNJaWtzSUhKbGNYVnBjbVVvWENKeVlXNWtiMjFjSWlrcE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJa0JqWVhWellXeE9aWFF2ZFhScGJITmNJbDBnUFNCbVlXTjBiM0o1S0hKdmIzUmJYQ0pqY205emN5MW1aWFJqYUZ3aVhTd2djbTl2ZEZ0Y0luQnNZWFJtYjNKdFhDSmRMQ0J5YjI5MFcxd2labVYwWTJndGNtVmhaR0ZpYkdWemRISmxZVzFjSWwwc0lISnZiM1JiWENKd2JtZHFjek5jSWwwc0lISnZiM1JiWENKeVlXNWtiMjFjSWwwcE8xeHVmU2tvZEdocGN5d2dablZ1WTNScGIyNG9YMTlYUlVKUVFVTkxYMFZZVkVWU1RrRk1YMDFQUkZWTVJWOWpjbTl6YzE5bVpYUmphRjlmTENCZlgxZEZRbEJCUTB0ZlJWaFVSVkpPUVV4ZlRVOUVWVXhGWDNCc1lYUm1iM0p0WDE4c0lGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlptVjBZMmhmY21WaFpHRmliR1Z6ZEhKbFlXMWZYeXdnWDE5WFJVSlFRVU5MWDBWWVZFVlNUa0ZNWDAxUFJGVk1SVjl3Ym1kcWN6TmZYeXdnWDE5WFJVSlFRVU5MWDBWWVZFVlNUa0ZNWDAxUFJGVk1SVjl5WVc1a2IyMWZYeWtnZTF4dWNtVjBkWEp1SUNJc0lpQmNkQzh2SUZSb1pTQnRiMlIxYkdVZ1kyRmphR1ZjYmlCY2RIWmhjaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpJRDBnZTMwN1hHNWNiaUJjZEM4dklGUm9aU0J5WlhGMWFYSmxJR1oxYm1OMGFXOXVYRzRnWEhSbWRXNWpkR2x2YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktHMXZaSFZzWlVsa0tTQjdYRzVjYmlCY2RGeDBMeThnUTJobFkyc2dhV1lnYlc5a2RXeGxJR2x6SUdsdUlHTmhZMmhsWEc0Z1hIUmNkR2xtS0dsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkS1NCN1hHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc0Z1hIUmNkSDFjYmlCY2RGeDBMeThnUTNKbFlYUmxJR0VnYm1WM0lHMXZaSFZzWlNBb1lXNWtJSEIxZENCcGRDQnBiblJ2SUhSb1pTQmpZV05vWlNsY2JpQmNkRngwZG1GeUlHMXZaSFZzWlNBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZElEMGdlMXh1SUZ4MFhIUmNkR2s2SUcxdlpIVnNaVWxrTEZ4dUlGeDBYSFJjZEd3NklHWmhiSE5sTEZ4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OVhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHBPMXh1WEc0Z1hIUmNkQzh2SUVac1lXY2dkR2hsSUcxdlpIVnNaU0JoY3lCc2IyRmtaV1JjYmlCY2RGeDBiVzlrZFd4bExtd2dQU0IwY25WbE8xeHVYRzRnWEhSY2RDOHZJRkpsZEhWeWJpQjBhR1VnWlhod2IzSjBjeUJ2WmlCMGFHVWdiVzlrZFd4bFhHNGdYSFJjZEhKbGRIVnliaUJ0YjJSMWJHVXVaWGh3YjNKMGN6dGNiaUJjZEgxY2JseHVYRzRnWEhRdkx5QmxlSEJ2YzJVZ2RHaGxJRzF2WkhWc1pYTWdiMkpxWldOMElDaGZYM2RsWW5CaFkydGZiVzlrZFd4bGMxOWZLVnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXRJRDBnYlc5a2RXeGxjenRjYmx4dUlGeDBMeThnWlhod2IzTmxJSFJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVl5QTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1JsWm1sdVpTQm5aWFIwWlhJZ1puVnVZM1JwYjI0Z1ptOXlJR2hoY20xdmJua2daWGh3YjNKMGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0lEMGdablZ1WTNScGIyNG9aWGh3YjNKMGN5d2dibUZ0WlN3Z1oyVjBkR1Z5S1NCN1hHNGdYSFJjZEdsbUtDRmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThvWlhod2IzSjBjeXdnYm1GdFpTa3BJSHRjYmlCY2RGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z2JtRnRaU3dnZXlCbGJuVnRaWEpoWW14bE9pQjBjblZsTENCblpYUTZJR2RsZEhSbGNpQjlLVHRjYmlCY2RGeDBmVnh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdaR1ZtYVc1bElGOWZaWE5OYjJSMWJHVWdiMjRnWlhod2IzSjBjMXh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXlJRDBnWm5WdVkzUnBiMjRvWlhod2IzSjBjeWtnZTF4dUlGeDBYSFJwWmloMGVYQmxiMllnVTNsdFltOXNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NwSUh0Y2JpQmNkRngwWEhSUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5MQ0I3SUhaaGJIVmxPaUFuVFc5a2RXeGxKeUI5S1R0Y2JpQmNkRngwZlZ4dUlGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdZM0psWVhSbElHRWdabUZyWlNCdVlXMWxjM0JoWTJVZ2IySnFaV04wWEc0Z1hIUXZMeUJ0YjJSbElDWWdNVG9nZG1Gc2RXVWdhWE1nWVNCdGIyUjFiR1VnYVdRc0lISmxjWFZwY21VZ2FYUmNiaUJjZEM4dklHMXZaR1VnSmlBeU9pQnRaWEpuWlNCaGJHd2djSEp2Y0dWeWRHbGxjeUJ2WmlCMllXeDFaU0JwYm5SdklIUm9aU0J1YzF4dUlGeDBMeThnYlc5a1pTQW1JRFE2SUhKbGRIVnliaUIyWVd4MVpTQjNhR1Z1SUdGc2NtVmhaSGtnYm5NZ2IySnFaV04wWEc0Z1hIUXZMeUJ0YjJSbElDWWdPSHd4T2lCaVpXaGhkbVVnYkdsclpTQnlaWEYxYVhKbFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5RZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2JXOWtaU2tnZTF4dUlGeDBYSFJwWmlodGIyUmxJQ1lnTVNrZ2RtRnNkV1VnUFNCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktIWmhiSFZsS1R0Y2JpQmNkRngwYVdZb2JXOWtaU0FtSURncElISmxkSFZ5YmlCMllXeDFaVHRjYmlCY2RGeDBhV1lvS0cxdlpHVWdKaUEwS1NBbUppQjBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZHZZbXBsWTNRbklDWW1JSFpoYkhWbElDWW1JSFpoYkhWbExsOWZaWE5OYjJSMWJHVXBJSEpsZEhWeWJpQjJZV3gxWlR0Y2JpQmNkRngwZG1GeUlHNXpJRDBnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1R0Y2JpQmNkRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eUtHNXpLVHRjYmlCY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0c1ekxDQW5aR1ZtWVhWc2RDY3NJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnZG1Gc2RXVTZJSFpoYkhWbElIMHBPMXh1SUZ4MFhIUnBaaWh0YjJSbElDWWdNaUFtSmlCMGVYQmxiMllnZG1Gc2RXVWdJVDBnSjNOMGNtbHVaeWNwSUdadmNpaDJZWElnYTJWNUlHbHVJSFpoYkhWbEtTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbVFvYm5Nc0lHdGxlU3dnWm5WdVkzUnBiMjRvYTJWNUtTQjdJSEpsZEhWeWJpQjJZV3gxWlZ0clpYbGRPeUI5TG1KcGJtUW9iblZzYkN3Z2EyVjVLU2s3WEc0Z1hIUmNkSEpsZEhWeWJpQnVjenRjYmlCY2RIMDdYRzVjYmlCY2RDOHZJR2RsZEVSbFptRjFiSFJGZUhCdmNuUWdablZ1WTNScGIyNGdabTl5SUdOdmJYQmhkR2xpYVd4cGRIa2dkMmwwYUNCdWIyNHRhR0Z5Ylc5dWVTQnRiMlIxYkdWelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG00Z1BTQm1kVzVqZEdsdmJpaHRiMlIxYkdVcElIdGNiaUJjZEZ4MGRtRnlJR2RsZEhSbGNpQTlJRzF2WkhWc1pTQW1KaUJ0YjJSMWJHVXVYMTlsYzAxdlpIVnNaU0EvWEc0Z1hIUmNkRngwWm5WdVkzUnBiMjRnWjJWMFJHVm1ZWFZzZENncElIc2djbVYwZFhKdUlHMXZaSFZzWlZzblpHVm1ZWFZzZENkZE95QjlJRHBjYmlCY2RGeDBYSFJtZFc1amRHbHZiaUJuWlhSTmIyUjFiR1ZGZUhCdmNuUnpLQ2tnZXlCeVpYUjFjbTRnYlc5a2RXeGxPeUI5TzF4dUlGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1Rb1oyVjBkR1Z5TENBbllTY3NJR2RsZEhSbGNpazdYRzRnWEhSY2RISmxkSFZ5YmlCblpYUjBaWEk3WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3hjYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnY0hKdmNHVnlkSGtwSUhzZ2NtVjBkWEp1SUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltcGxZM1FzSUhCeWIzQmxjblI1S1RzZ2ZUdGNibHh1SUZ4MEx5OGdYMTkzWldKd1lXTnJYM0IxWW14cFkxOXdZWFJvWDE5Y2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y0NBOUlGd2lYQ0k3WEc1Y2JseHVJRngwTHk4Z1RHOWhaQ0JsYm5SeWVTQnRiMlIxYkdVZ1lXNWtJSEpsZEhWeWJpQmxlSEJ2Y25SelhHNGdYSFJ5WlhSMWNtNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWhmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5NZ1BTQmNJaTR2YzNKakwybHVaR1Y0TG1welhDSXBPMXh1SWl3aVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIdGNiaUFnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUh0Y2JpQWdJQ0JrWldaaGRXeDBPaUJ2WW1wY2JpQWdmVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwT3lJc0lpZDFjMlVnYzNSeWFXTjBKMXh1WEc1bGVIQnZjblJ6TG1KNWRHVk1aVzVuZEdnZ1BTQmllWFJsVEdWdVozUm9YRzVsZUhCdmNuUnpMblJ2UW5sMFpVRnljbUY1SUQwZ2RHOUNlWFJsUVhKeVlYbGNibVY0Y0c5eWRITXVabkp2YlVKNWRHVkJjbkpoZVNBOUlHWnliMjFDZVhSbFFYSnlZWGxjYmx4dWRtRnlJR3h2YjJ0MWNDQTlJRnRkWEc1MllYSWdjbVYyVEc5dmEzVndJRDBnVzExY2JuWmhjaUJCY25JZ1BTQjBlWEJsYjJZZ1ZXbHVkRGhCY25KaGVTQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ1B5QlZhVzUwT0VGeWNtRjVJRG9nUVhKeVlYbGNibHh1ZG1GeUlHTnZaR1VnUFNBblFVSkRSRVZHUjBoSlNrdE1UVTVQVUZGU1UxUlZWbGRZV1ZwaFltTmtaV1puYUdscWEyeHRibTl3Y1hKemRIVjJkM2g1ZWpBeE1qTTBOVFkzT0Rrckx5ZGNibVp2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzRnUFNCamIyUmxMbXhsYm1kMGFEc2dhU0E4SUd4bGJqc2dLeXRwS1NCN1hHNGdJR3h2YjJ0MWNGdHBYU0E5SUdOdlpHVmJhVjFjYmlBZ2NtVjJURzl2YTNWd1cyTnZaR1V1WTJoaGNrTnZaR1ZCZENocEtWMGdQU0JwWEc1OVhHNWNiaTh2SUZOMWNIQnZjblFnWkdWamIyUnBibWNnVlZKTUxYTmhabVVnWW1GelpUWTBJSE4wY21sdVozTXNJR0Z6SUU1dlpHVXVhbk1nWkc5bGN5NWNiaTh2SUZObFpUb2dhSFIwY0hNNkx5OWxiaTUzYVd0cGNHVmthV0V1YjNKbkwzZHBhMmt2UW1GelpUWTBJMVZTVEY5aGNIQnNhV05oZEdsdmJuTmNibkpsZGt4dmIydDFjRnNuTFNjdVkyaGhja052WkdWQmRDZ3dLVjBnUFNBMk1seHVjbVYyVEc5dmEzVndXeWRmSnk1amFHRnlRMjlrWlVGMEtEQXBYU0E5SURZelhHNWNibVoxYm1OMGFXOXVJR2RsZEV4bGJuTWdLR0kyTkNrZ2UxeHVJQ0IyWVhJZ2JHVnVJRDBnWWpZMExteGxibWQwYUZ4dVhHNGdJR2xtSUNoc1pXNGdKU0EwSUQ0Z01Da2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNXNTJZV3hwWkNCemRISnBibWN1SUV4bGJtZDBhQ0J0ZFhOMElHSmxJR0VnYlhWc2RHbHdiR1VnYjJZZ05DY3BYRzRnSUgxY2JseHVJQ0F2THlCVWNtbHRJRzltWmlCbGVIUnlZU0JpZVhSbGN5QmhablJsY2lCd2JHRmpaV2h2YkdSbGNpQmllWFJsY3lCaGNtVWdabTkxYm1SY2JpQWdMeThnVTJWbE9pQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZZbVZoZEdkaGJXMXBkQzlpWVhObE5qUXRhbk12YVhOemRXVnpMelF5WEc0Z0lIWmhjaUIyWVd4cFpFeGxiaUE5SUdJMk5DNXBibVJsZUU5bUtDYzlKeWxjYmlBZ2FXWWdLSFpoYkdsa1RHVnVJRDA5UFNBdE1Ta2dkbUZzYVdSTVpXNGdQU0JzWlc1Y2JseHVJQ0IyWVhJZ2NHeGhZMlZJYjJ4a1pYSnpUR1Z1SUQwZ2RtRnNhV1JNWlc0Z1BUMDlJR3hsYmx4dUlDQWdJRDhnTUZ4dUlDQWdJRG9nTkNBdElDaDJZV3hwWkV4bGJpQWxJRFFwWEc1Y2JpQWdjbVYwZFhKdUlGdDJZV3hwWkV4bGJpd2djR3hoWTJWSWIyeGtaWEp6VEdWdVhWeHVmVnh1WEc0dkx5QmlZWE5sTmpRZ2FYTWdOQzh6SUNzZ2RYQWdkRzhnZEhkdklHTm9ZWEpoWTNSbGNuTWdiMllnZEdobElHOXlhV2RwYm1Gc0lHUmhkR0ZjYm1aMWJtTjBhVzl1SUdKNWRHVk1aVzVuZEdnZ0tHSTJOQ2tnZTF4dUlDQjJZWElnYkdWdWN5QTlJR2RsZEV4bGJuTW9ZalkwS1Z4dUlDQjJZWElnZG1Gc2FXUk1aVzRnUFNCc1pXNXpXekJkWEc0Z0lIWmhjaUJ3YkdGalpVaHZiR1JsY25OTVpXNGdQU0JzWlc1eld6RmRYRzRnSUhKbGRIVnliaUFvS0haaGJHbGtUR1Z1SUNzZ2NHeGhZMlZJYjJ4a1pYSnpUR1Z1S1NBcUlETWdMeUEwS1NBdElIQnNZV05sU0c5c1pHVnljMHhsYmx4dWZWeHVYRzVtZFc1amRHbHZiaUJmWW5sMFpVeGxibWQwYUNBb1lqWTBMQ0IyWVd4cFpFeGxiaXdnY0d4aFkyVkliMnhrWlhKelRHVnVLU0I3WEc0Z0lISmxkSFZ5YmlBb0tIWmhiR2xrVEdWdUlDc2djR3hoWTJWSWIyeGtaWEp6VEdWdUtTQXFJRE1nTHlBMEtTQXRJSEJzWVdObFNHOXNaR1Z5YzB4bGJseHVmVnh1WEc1bWRXNWpkR2x2YmlCMGIwSjVkR1ZCY25KaGVTQW9ZalkwS1NCN1hHNGdJSFpoY2lCMGJYQmNiaUFnZG1GeUlHeGxibk1nUFNCblpYUk1aVzV6S0dJMk5DbGNiaUFnZG1GeUlIWmhiR2xrVEdWdUlEMGdiR1Z1YzFzd1hWeHVJQ0IyWVhJZ2NHeGhZMlZJYjJ4a1pYSnpUR1Z1SUQwZ2JHVnVjMXN4WFZ4dVhHNGdJSFpoY2lCaGNuSWdQU0J1WlhjZ1FYSnlLRjlpZVhSbFRHVnVaM1JvS0dJMk5Dd2dkbUZzYVdSTVpXNHNJSEJzWVdObFNHOXNaR1Z5YzB4bGJpa3BYRzVjYmlBZ2RtRnlJR04xY2tKNWRHVWdQU0F3WEc1Y2JpQWdMeThnYVdZZ2RHaGxjbVVnWVhKbElIQnNZV05sYUc5c1pHVnljeXdnYjI1c2VTQm5aWFFnZFhBZ2RHOGdkR2hsSUd4aGMzUWdZMjl0Y0d4bGRHVWdOQ0JqYUdGeWMxeHVJQ0IyWVhJZ2JHVnVJRDBnY0d4aFkyVkliMnhrWlhKelRHVnVJRDRnTUZ4dUlDQWdJRDhnZG1Gc2FXUk1aVzRnTFNBMFhHNGdJQ0FnT2lCMllXeHBaRXhsYmx4dVhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYkdWdU95QnBJQ3M5SURRcElIdGNiaUFnSUNCMGJYQWdQVnh1SUNBZ0lDQWdLSEpsZGt4dmIydDFjRnRpTmpRdVkyaGhja052WkdWQmRDaHBLVjBnUER3Z01UZ3BJSHhjYmlBZ0lDQWdJQ2h5WlhaTWIyOXJkWEJiWWpZMExtTm9ZWEpEYjJSbFFYUW9hU0FySURFcFhTQThQQ0F4TWlrZ2ZGeHVJQ0FnSUNBZ0tISmxka3h2YjJ0MWNGdGlOalF1WTJoaGNrTnZaR1ZCZENocElDc2dNaWxkSUR3OElEWXBJSHhjYmlBZ0lDQWdJSEpsZGt4dmIydDFjRnRpTmpRdVkyaGhja052WkdWQmRDaHBJQ3NnTXlsZFhHNGdJQ0FnWVhKeVcyTjFja0o1ZEdVcksxMGdQU0FvZEcxd0lENCtJREUyS1NBbUlEQjRSa1pjYmlBZ0lDQmhjbkpiWTNWeVFubDBaU3NyWFNBOUlDaDBiWEFnUGo0Z09Da2dKaUF3ZUVaR1hHNGdJQ0FnWVhKeVcyTjFja0o1ZEdVcksxMGdQU0IwYlhBZ0ppQXdlRVpHWEc0Z0lIMWNibHh1SUNCcFppQW9jR3hoWTJWSWIyeGtaWEp6VEdWdUlEMDlQU0F5S1NCN1hHNGdJQ0FnZEcxd0lEMWNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTbGRJRHc4SURJcElIeGNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTQXJJREVwWFNBK1BpQTBLVnh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ2RHMXdJQ1lnTUhoR1JseHVJQ0I5WEc1Y2JpQWdhV1lnS0hCc1lXTmxTRzlzWkdWeWMweGxiaUE5UFQwZ01Ta2dlMXh1SUNBZ0lIUnRjQ0E5WEc0Z0lDQWdJQ0FvY21WMlRHOXZhM1Z3VzJJMk5DNWphR0Z5UTI5a1pVRjBLR2twWFNBOFBDQXhNQ2tnZkZ4dUlDQWdJQ0FnS0hKbGRreHZiMnQxY0Z0aU5qUXVZMmhoY2tOdlpHVkJkQ2hwSUNzZ01TbGRJRHc4SURRcElIeGNiaUFnSUNBZ0lDaHlaWFpNYjI5cmRYQmJZalkwTG1Ob1lYSkRiMlJsUVhRb2FTQXJJRElwWFNBK1BpQXlLVnh1SUNBZ0lHRnljbHRqZFhKQ2VYUmxLeXRkSUQwZ0tIUnRjQ0ErUGlBNEtTQW1JREI0UmtaY2JpQWdJQ0JoY25KYlkzVnlRbmwwWlNzclhTQTlJSFJ0Y0NBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJoY25KY2JuMWNibHh1Wm5WdVkzUnBiMjRnZEhKcGNHeGxkRlJ2UW1GelpUWTBJQ2h1ZFcwcElIdGNiaUFnY21WMGRYSnVJR3h2YjJ0MWNGdHVkVzBnUGo0Z01UZ2dKaUF3ZUROR1hTQXJYRzRnSUNBZ2JHOXZhM1Z3VzI1MWJTQStQaUF4TWlBbUlEQjRNMFpkSUN0Y2JpQWdJQ0JzYjI5cmRYQmJiblZ0SUQ0K0lEWWdKaUF3ZUROR1hTQXJYRzRnSUNBZ2JHOXZhM1Z3VzI1MWJTQW1JREI0TTBaZFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWdVkyOWtaVU5vZFc1cklDaDFhVzUwT0N3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCMllYSWdkRzF3WEc0Z0lIWmhjaUJ2ZFhSd2RYUWdQU0JiWFZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnYzNSaGNuUTdJR2tnUENCbGJtUTdJR2tnS3owZ015a2dlMXh1SUNBZ0lIUnRjQ0E5WEc0Z0lDQWdJQ0FvS0hWcGJuUTRXMmxkSUR3OElERTJLU0FtSURCNFJrWXdNREF3S1NBclhHNGdJQ0FnSUNBb0tIVnBiblE0VzJrZ0t5QXhYU0E4UENBNEtTQW1JREI0UmtZd01Da2dLMXh1SUNBZ0lDQWdLSFZwYm5RNFcya2dLeUF5WFNBbUlEQjRSa1lwWEc0Z0lDQWdiM1YwY0hWMExuQjFjMmdvZEhKcGNHeGxkRlJ2UW1GelpUWTBLSFJ0Y0NrcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5MWRIQjFkQzVxYjJsdUtDY25LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm1jbTl0UW5sMFpVRnljbUY1SUNoMWFXNTBPQ2tnZTF4dUlDQjJZWElnZEcxd1hHNGdJSFpoY2lCc1pXNGdQU0IxYVc1ME9DNXNaVzVuZEdoY2JpQWdkbUZ5SUdWNGRISmhRbmwwWlhNZ1BTQnNaVzRnSlNBeklDOHZJR2xtSUhkbElHaGhkbVVnTVNCaWVYUmxJR3hsWm5Rc0lIQmhaQ0F5SUdKNWRHVnpYRzRnSUhaaGNpQndZWEowY3lBOUlGdGRYRzRnSUhaaGNpQnRZWGhEYUhWdWEweGxibWQwYUNBOUlERTJNemd6SUM4dklHMTFjM1FnWW1VZ2JYVnNkR2x3YkdVZ2IyWWdNMXh1WEc0Z0lDOHZJR2R2SUhSb2NtOTFaMmdnZEdobElHRnljbUY1SUdWMlpYSjVJSFJvY21WbElHSjVkR1Z6TENCM1pTZHNiQ0JrWldGc0lIZHBkR2dnZEhKaGFXeHBibWNnYzNSMVptWWdiR0YwWlhKY2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHeGxiaklnUFNCc1pXNGdMU0JsZUhSeVlVSjVkR1Z6T3lCcElEd2diR1Z1TWpzZ2FTQXJQU0J0WVhoRGFIVnVhMHhsYm1kMGFDa2dlMXh1SUNBZ0lIQmhjblJ6TG5CMWMyZ29aVzVqYjJSbFEyaDFibXNvWEc0Z0lDQWdJQ0IxYVc1ME9Dd2dhU3dnS0drZ0t5QnRZWGhEYUhWdWEweGxibWQwYUNrZ1BpQnNaVzR5SUQ4Z2JHVnVNaUE2SUNocElDc2diV0Y0UTJoMWJtdE1aVzVuZEdncFhHNGdJQ0FnS1NsY2JpQWdmVnh1WEc0Z0lDOHZJSEJoWkNCMGFHVWdaVzVrSUhkcGRHZ2dlbVZ5YjNNc0lHSjFkQ0J0WVd0bElITjFjbVVnZEc4Z2JtOTBJR1p2Y21kbGRDQjBhR1VnWlhoMGNtRWdZbmwwWlhOY2JpQWdhV1lnS0dWNGRISmhRbmwwWlhNZ1BUMDlJREVwSUh0Y2JpQWdJQ0IwYlhBZ1BTQjFhVzUwT0Z0c1pXNGdMU0F4WFZ4dUlDQWdJSEJoY25SekxuQjFjMmdvWEc0Z0lDQWdJQ0JzYjI5cmRYQmJkRzF3SUQ0K0lESmRJQ3RjYmlBZ0lDQWdJR3h2YjJ0MWNGc29kRzF3SUR3OElEUXBJQ1lnTUhnelJsMGdLMXh1SUNBZ0lDQWdKejA5SjF4dUlDQWdJQ2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaGxlSFJ5WVVKNWRHVnpJRDA5UFNBeUtTQjdYRzRnSUNBZ2RHMXdJRDBnS0hWcGJuUTRXMnhsYmlBdElESmRJRHc4SURncElDc2dkV2x1ZERoYmJHVnVJQzBnTVYxY2JpQWdJQ0J3WVhKMGN5NXdkWE5vS0Z4dUlDQWdJQ0FnYkc5dmEzVndXM1J0Y0NBK1BpQXhNRjBnSzF4dUlDQWdJQ0FnYkc5dmEzVndXeWgwYlhBZ1BqNGdOQ2tnSmlBd2VETkdYU0FyWEc0Z0lDQWdJQ0JzYjI5cmRYQmJLSFJ0Y0NBOFBDQXlLU0FtSURCNE0wWmRJQ3RjYmlBZ0lDQWdJQ2M5SjF4dUlDQWdJQ2xjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ3WVhKMGN5NXFiMmx1S0NjbktWeHVmVnh1SWl3aUx5b2hYRzRnS2lCVWFHVWdZblZtWm1WeUlHMXZaSFZzWlNCbWNtOXRJRzV2WkdVdWFuTXNJR1p2Y2lCMGFHVWdZbkp2ZDNObGNpNWNiaUFxWEc0Z0tpQkFZWFYwYUc5eUlDQWdSbVZ5YjNOeklFRmliM1ZyYUdGa2FXcGxhQ0E4Wm1WeWIzTnpRR1psY205emN5NXZjbWMrSUR4b2RIUndPaTh2Wm1WeWIzTnpMbTl5Wno1Y2JpQXFJRUJzYVdObGJuTmxJQ0JOU1ZSY2JpQXFMMXh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnYm04dGNISnZkRzhnS2k5Y2JseHVKM1Z6WlNCemRISnBZM1FuWEc1Y2JuWmhjaUJpWVhObE5qUWdQU0J5WlhGMWFYSmxLQ2RpWVhObE5qUXRhbk1uS1Z4dWRtRnlJR2xsWldVM05UUWdQU0J5WlhGMWFYSmxLQ2RwWldWbE56VTBKeWxjYm5aaGNpQnBjMEZ5Y21GNUlEMGdjbVZ4ZFdseVpTZ25hWE5oY25KaGVTY3BYRzVjYm1WNGNHOXlkSE11UW5WbVptVnlJRDBnUW5WbVptVnlYRzVsZUhCdmNuUnpMbE5zYjNkQ2RXWm1aWElnUFNCVGJHOTNRblZtWm1WeVhHNWxlSEJ2Y25SekxrbE9VMUJGUTFSZlRVRllYMEpaVkVWVElEMGdOVEJjYmx4dUx5b3FYRzRnS2lCSlppQmdRblZtWm1WeUxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUmdPbHh1SUNvZ0lDQTlQVDBnZEhKMVpTQWdJQ0JWYzJVZ1ZXbHVkRGhCY25KaGVTQnBiWEJzWlcxbGJuUmhkR2x2YmlBb1ptRnpkR1Z6ZENsY2JpQXFJQ0FnUFQwOUlHWmhiSE5sSUNBZ1ZYTmxJRTlpYW1WamRDQnBiWEJzWlcxbGJuUmhkR2x2YmlBb2JXOXpkQ0JqYjIxd1lYUnBZbXhsTENCbGRtVnVJRWxGTmlsY2JpQXFYRzRnS2lCQ2NtOTNjMlZ5Y3lCMGFHRjBJSE4xY0hCdmNuUWdkSGx3WldRZ1lYSnlZWGx6SUdGeVpTQkpSU0F4TUNzc0lFWnBjbVZtYjNnZ05Dc3NJRU5vY205dFpTQTNLeXdnVTJGbVlYSnBJRFV1TVNzc1hHNGdLaUJQY0dWeVlTQXhNUzQyS3l3Z2FVOVRJRFF1TWlzdVhHNGdLbHh1SUNvZ1JIVmxJSFJ2SUhaaGNtbHZkWE1nWW5KdmQzTmxjaUJpZFdkekxDQnpiMjFsZEdsdFpYTWdkR2hsSUU5aWFtVmpkQ0JwYlhCc1pXMWxiblJoZEdsdmJpQjNhV3hzSUdKbElIVnpaV1FnWlhabGJseHVJQ29nZDJobGJpQjBhR1VnWW5KdmQzTmxjaUJ6ZFhCd2IzSjBjeUIwZVhCbFpDQmhjbkpoZVhNdVhHNGdLbHh1SUNvZ1RtOTBaVHBjYmlBcVhHNGdLaUFnSUMwZ1JtbHlaV1p2ZUNBMExUSTVJR3hoWTJ0eklITjFjSEJ2Y25RZ1ptOXlJR0ZrWkdsdVp5QnVaWGNnY0hKdmNHVnlkR2xsY3lCMGJ5QmdWV2x1ZERoQmNuSmhlV0FnYVc1emRHRnVZMlZ6TEZ4dUlDb2dJQ0FnSUZObFpUb2dhSFIwY0hNNkx5OWlkV2Q2YVd4c1lTNXRiM3BwYkd4aExtOXlaeTl6YUc5M1gySjFaeTVqWjJrL2FXUTlOamsxTkRNNExseHVJQ3BjYmlBcUlDQWdMU0JEYUhKdmJXVWdPUzB4TUNCcGN5QnRhWE56YVc1bklIUm9aU0JnVkhsd1pXUkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMzVmlZWEp5WVhsZ0lHWjFibU4wYVc5dUxseHVJQ3BjYmlBcUlDQWdMU0JKUlRFd0lHaGhjeUJoSUdKeWIydGxiaUJnVkhsd1pXUkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMzVmlZWEp5WVhsZ0lHWjFibU4wYVc5dUlIZG9hV05vSUhKbGRIVnlibk1nWVhKeVlYbHpJRzltWEc0Z0tpQWdJQ0FnYVc1amIzSnlaV04wSUd4bGJtZDBhQ0JwYmlCemIyMWxJSE5wZEhWaGRHbHZibk11WEc1Y2JpQXFJRmRsSUdSbGRHVmpkQ0IwYUdWelpTQmlkV2RuZVNCaWNtOTNjMlZ5Y3lCaGJtUWdjMlYwSUdCQ2RXWm1aWEl1VkZsUVJVUmZRVkpTUVZsZlUxVlFVRTlTVkdBZ2RHOGdZR1poYkhObFlDQnpieUIwYUdWNVhHNGdLaUJuWlhRZ2RHaGxJRTlpYW1WamRDQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2QyaHBZMmdnYVhNZ2MyeHZkMlZ5SUdKMWRDQmlaV2hoZG1WeklHTnZjbkpsWTNSc2VTNWNiaUFxTDF4dVFuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRZ1BTQm5iRzlpWVd3dVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lEOGdaMnh2WW1Gc0xsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUmNiaUFnT2lCMGVYQmxaRUZ5Y21GNVUzVndjRzl5ZENncFhHNWNiaThxWEc0Z0tpQkZlSEJ2Y25RZ2EwMWhlRXhsYm1kMGFDQmhablJsY2lCMGVYQmxaQ0JoY25KaGVTQnpkWEJ3YjNKMElHbHpJR1JsZEdWeWJXbHVaV1F1WEc0Z0tpOWNibVY0Y0c5eWRITXVhMDFoZUV4bGJtZDBhQ0E5SUd0TllYaE1aVzVuZEdnb0tWeHVYRzVtZFc1amRHbHZiaUIwZVhCbFpFRnljbUY1VTNWd2NHOXlkQ0FvS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHRnljaUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLREVwWEc0Z0lDQWdZWEp5TGw5ZmNISnZkRzlmWHlBOUlIdGZYM0J5YjNSdlgxODZJRlZwYm5RNFFYSnlZWGt1Y0hKdmRHOTBlWEJsTENCbWIyODZJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SURReUlIMTlYRzRnSUNBZ2NtVjBkWEp1SUdGeWNpNW1iMjhvS1NBOVBUMGdORElnSmlZZ0x5OGdkSGx3WldRZ1lYSnlZWGtnYVc1emRHRnVZMlZ6SUdOaGJpQmlaU0JoZFdkdFpXNTBaV1JjYmlBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5Y2k1emRXSmhjbkpoZVNBOVBUMGdKMloxYm1OMGFXOXVKeUFtSmlBdkx5QmphSEp2YldVZ09TMHhNQ0JzWVdOcklHQnpkV0poY25KaGVXQmNiaUFnSUNBZ0lDQWdZWEp5TG5OMVltRnljbUY1S0RFc0lERXBMbUo1ZEdWTVpXNW5kR2dnUFQwOUlEQWdMeThnYVdVeE1DQm9ZWE1nWW5KdmEyVnVJR0J6ZFdKaGNuSmhlV0JjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUd0TllYaE1aVzVuZEdnZ0tDa2dlMXh1SUNCeVpYUjFjbTRnUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFJjYmlBZ0lDQS9JREI0TjJabVptWm1abVpjYmlBZ0lDQTZJREI0TTJabVptWm1abVpjYm4xY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFFuVm1abVZ5SUNoMGFHRjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2FXWWdLR3ROWVhoTVpXNW5kR2dvS1NBOElHeGxibWQwYUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZEpiblpoYkdsa0lIUjVjR1ZrSUdGeWNtRjVJR3hsYm1kMGFDY3BYRzRnSUgxY2JpQWdhV1lnS0VKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVS1NCN1hHNGdJQ0FnTHk4Z1VtVjBkWEp1SUdGdUlHRjFaMjFsYm5SbFpDQmdWV2x1ZERoQmNuSmhlV0FnYVc1emRHRnVZMlVzSUdadmNpQmlaWE4wSUhCbGNtWnZjbTFoYm1ObFhHNGdJQ0FnZEdoaGRDQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHeGxibWQwYUNsY2JpQWdJQ0IwYUdGMExsOWZjSEp2ZEc5Zlh5QTlJRUoxWm1abGNpNXdjbTkwYjNSNWNHVmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJHWVd4c1ltRmphem9nVW1WMGRYSnVJR0Z1SUc5aWFtVmpkQ0JwYm5OMFlXNWpaU0J2WmlCMGFHVWdRblZtWm1WeUlHTnNZWE56WEc0Z0lDQWdhV1lnS0hSb1lYUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSFJvWVhRZ1BTQnVaWGNnUW5WbVptVnlLR3hsYm1kMGFDbGNiaUFnSUNCOVhHNGdJQ0FnZEdoaGRDNXNaVzVuZEdnZ1BTQnNaVzVuZEdoY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCMGFHRjBYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJRUoxWm1abGNpQmpiMjV6ZEhKMVkzUnZjaUJ5WlhSMWNtNXpJR2x1YzNSaGJtTmxjeUJ2WmlCZ1ZXbHVkRGhCY25KaGVXQWdkR2hoZENCb1lYWmxJSFJvWldseVhHNGdLaUJ3Y205MGIzUjVjR1VnWTJoaGJtZGxaQ0IwYnlCZ1FuVm1abVZ5TG5CeWIzUnZkSGx3WldBdUlFWjFjblJvWlhKdGIzSmxMQ0JnUW5WbVptVnlZQ0JwY3lCaElITjFZbU5zWVhOeklHOW1YRzRnS2lCZ1ZXbHVkRGhCY25KaGVXQXNJSE52SUhSb1pTQnlaWFIxY201bFpDQnBibk4wWVc1alpYTWdkMmxzYkNCb1lYWmxJR0ZzYkNCMGFHVWdibTlrWlNCZ1FuVm1abVZ5WUNCdFpYUm9iMlJ6WEc0Z0tpQmhibVFnZEdobElHQlZhVzUwT0VGeWNtRjVZQ0J0WlhSb2IyUnpMaUJUY1hWaGNtVWdZbkpoWTJ0bGRDQnViM1JoZEdsdmJpQjNiM0pyY3lCaGN5QmxlSEJsWTNSbFpDQXRMU0JwZEZ4dUlDb2djbVYwZFhKdWN5QmhJSE5wYm1kc1pTQnZZM1JsZEM1Y2JpQXFYRzRnS2lCVWFHVWdZRlZwYm5RNFFYSnlZWGxnSUhCeWIzUnZkSGx3WlNCeVpXMWhhVzV6SUhWdWJXOWthV1pwWldRdVhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1FuVm1abVZ5SUNoaGNtY3NJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCcFppQW9JVUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVJQ1ltSUNFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUVKMVptWmxjaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVKMVptWmxjaWhoY21jc0lHVnVZMjlrYVc1blQzSlBabVp6WlhRc0lHeGxibWQwYUNsY2JpQWdmVnh1WEc0Z0lDOHZJRU52YlcxdmJpQmpZWE5sTGx4dUlDQnBaaUFvZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1Z1WTI5a2FXNW5UM0pQWm1aelpYUWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNkSlppQmxibU52WkdsdVp5QnBjeUJ6Y0dWamFXWnBaV1FnZEdobGJpQjBhR1VnWm1seWMzUWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJSE4wY21sdVp5ZGNiaUFnSUNBZ0lDbGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR0ZzYkc5alZXNXpZV1psS0hSb2FYTXNJR0Z5WnlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWm5KdmJTaDBhR2x6TENCaGNtY3NJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDbGNibjFjYmx4dVFuVm1abVZ5TG5CdmIyeFRhWHBsSUQwZ09ERTVNaUF2THlCdWIzUWdkWE5sWkNCaWVTQjBhR2x6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzVjYmk4dklGUlBSRTg2SUV4bFoyRmplU3dnYm05MElHNWxaV1JsWkNCaGJubHRiM0psTGlCU1pXMXZkbVVnYVc0Z2JtVjRkQ0J0WVdwdmNpQjJaWEp6YVc5dUxseHVRblZtWm1WeUxsOWhkV2R0Wlc1MElEMGdablZ1WTNScGIyNGdLR0Z5Y2lrZ2UxeHVJQ0JoY25JdVgxOXdjbTkwYjE5ZklEMGdRblZtWm1WeUxuQnliM1J2ZEhsd1pWeHVJQ0J5WlhSMWNtNGdZWEp5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1p5YjIwZ0tIUm9ZWFFzSUhaaGJIVmxMQ0JsYm1OdlpHbHVaMDl5VDJabWMyVjBMQ0JzWlc1bmRHZ3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RjSW5aaGJIVmxYQ0lnWVhKbmRXMWxiblFnYlhWemRDQnViM1FnWW1VZ1lTQnVkVzFpWlhJbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJCY25KaGVVSjFabVpsY2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2RtRnNkV1VnYVc1emRHRnVZMlZ2WmlCQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWNtOXRRWEp5WVhsQ2RXWm1aWElvZEdoaGRDd2dkbUZzZFdVc0lHVnVZMjlrYVc1blQzSlBabVp6WlhRc0lHeGxibWQwYUNsY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWnliMjFUZEhKcGJtY29kR2hoZEN3Z2RtRnNkV1VzSUdWdVkyOWthVzVuVDNKUFptWnpaWFFwWEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnWm5KdmJVOWlhbVZqZENoMGFHRjBMQ0IyWVd4MVpTbGNibjFjYmx4dUx5b3FYRzRnS2lCR2RXNWpkR2x2Ym1Gc2JIa2daWEYxYVhaaGJHVnVkQ0IwYnlCQ2RXWm1aWElvWVhKbkxDQmxibU52WkdsdVp5a2dZblYwSUhSb2NtOTNjeUJoSUZSNWNHVkZjbkp2Y2x4dUlDb2dhV1lnZG1Gc2RXVWdhWE1nWVNCdWRXMWlaWEl1WEc0Z0tpQkNkV1ptWlhJdVpuSnZiU2h6ZEhKYkxDQmxibU52WkdsdVoxMHBYRzRnS2lCQ2RXWm1aWEl1Wm5KdmJTaGhjbkpoZVNsY2JpQXFJRUoxWm1abGNpNW1jbTl0S0dKMVptWmxjaWxjYmlBcUlFSjFabVpsY2k1bWNtOXRLR0Z5Y21GNVFuVm1abVZ5V3l3Z1lubDBaVTltWm5ObGRGc3NJR3hsYm1kMGFGMWRLVnh1SUNvcUwxeHVRblZtWm1WeUxtWnliMjBnUFNCbWRXNWpkR2x2YmlBb2RtRnNkV1VzSUdWdVkyOWthVzVuVDNKUFptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQnlaWFIxY200Z1puSnZiU2h1ZFd4c0xDQjJZV3gxWlN3Z1pXNWpiMlJwYm1kUGNrOW1abk5sZEN3Z2JHVnVaM1JvS1Z4dWZWeHVYRzVwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcElIdGNiaUFnUW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVmWDNCeWIzUnZYMThnUFNCVmFXNTBPRUZ5Y21GNUxuQnliM1J2ZEhsd1pWeHVJQ0JDZFdabVpYSXVYMTl3Y205MGIxOWZJRDBnVldsdWREaEJjbkpoZVZ4dUlDQnBaaUFvZEhsd1pXOW1JRk41YldKdmJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdVM2x0WW05c0xuTndaV05wWlhNZ0ppWmNiaUFnSUNBZ0lFSjFabVpsY2x0VGVXMWliMnd1YzNCbFkybGxjMTBnUFQwOUlFSjFabVpsY2lrZ2UxeHVJQ0FnSUM4dklFWnBlQ0J6ZFdKaGNuSmhlU2dwSUdsdUlFVlRNakF4Tmk0Z1UyVmxPaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Wm1WeWIzTnpMMkoxWm1abGNpOXdkV3hzTHprM1hHNGdJQ0FnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFSjFabVpsY2l3Z1UzbHRZbTlzTG5Od1pXTnBaWE1zSUh0Y2JpQWdJQ0FnSUhaaGJIVmxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbFhHNGdJQ0FnZlNsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmhjM05sY25SVGFYcGxJQ2h6YVhwbEtTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ2MybDZaU0FoUFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZGNJbk5wZW1WY0lpQmhjbWQxYldWdWRDQnRkWE4wSUdKbElHRWdiblZ0WW1WeUp5bGNiaUFnZlNCbGJITmxJR2xtSUNoemFYcGxJRHdnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZGNJbk5wZW1WY0lpQmhjbWQxYldWdWRDQnRkWE4wSUc1dmRDQmlaU0J1WldkaGRHbDJaU2NwWEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1lXeHNiMk1nS0hSb1lYUXNJSE5wZW1Vc0lHWnBiR3dzSUdWdVkyOWthVzVuS1NCN1hHNGdJR0Z6YzJWeWRGTnBlbVVvYzJsNlpTbGNiaUFnYVdZZ0tITnBlbVVnUEQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZDZFdabVpYSW9kR2hoZEN3Z2MybDZaU2xjYmlBZ2ZWeHVJQ0JwWmlBb1ptbHNiQ0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0x5OGdUMjVzZVNCd1lYa2dZWFIwWlc1MGFXOXVJSFJ2SUdWdVkyOWthVzVuSUdsbUlHbDBKM01nWVNCemRISnBibWN1SUZSb2FYTmNiaUFnSUNBdkx5QndjbVYyWlc1MGN5QmhZMk5wWkdWdWRHRnNiSGtnYzJWdVpHbHVaeUJwYmlCaElHNTFiV0psY2lCMGFHRjBJSGR2ZFd4a1hHNGdJQ0FnTHk4Z1ltVWdhVzUwWlhKd2NtVjBkR1ZrSUdGeklHRWdjM1JoY25RZ2IyWm1jMlYwTGx4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ1pXNWpiMlJwYm1jZ1BUMDlJQ2R6ZEhKcGJtY25YRzRnSUNBZ0lDQS9JR055WldGMFpVSjFabVpsY2loMGFHRjBMQ0J6YVhwbEtTNW1hV3hzS0dacGJHd3NJR1Z1WTI5a2FXNW5LVnh1SUNBZ0lDQWdPaUJqY21WaGRHVkNkV1ptWlhJb2RHaGhkQ3dnYzJsNlpTa3VabWxzYkNobWFXeHNLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmpjbVZoZEdWQ2RXWm1aWElvZEdoaGRDd2djMmw2WlNsY2JuMWNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnYm1WM0lHWnBiR3hsWkNCQ2RXWm1aWElnYVc1emRHRnVZMlV1WEc0Z0tpQmhiR3h2WXloemFYcGxXeXdnWm1sc2JGc3NJR1Z1WTI5a2FXNW5YVjBwWEc0Z0tpb3ZYRzVDZFdabVpYSXVZV3hzYjJNZ1BTQm1kVzVqZEdsdmJpQW9jMmw2WlN3Z1ptbHNiQ3dnWlc1amIyUnBibWNwSUh0Y2JpQWdjbVYwZFhKdUlHRnNiRzlqS0c1MWJHd3NJSE5wZW1Vc0lHWnBiR3dzSUdWdVkyOWthVzVuS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJoYkd4dlkxVnVjMkZtWlNBb2RHaGhkQ3dnYzJsNlpTa2dlMXh1SUNCaGMzTmxjblJUYVhwbEtITnBlbVVwWEc0Z0lIUm9ZWFFnUFNCamNtVmhkR1ZDZFdabVpYSW9kR2hoZEN3Z2MybDZaU0E4SURBZ1B5QXdJRG9nWTJobFkydGxaQ2h6YVhwbEtTQjhJREFwWEc0Z0lHbG1JQ2doUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOcGVtVTdJQ3NyYVNrZ2UxeHVJQ0FnSUNBZ2RHaGhkRnRwWFNBOUlEQmNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhSb1lYUmNibjFjYmx4dUx5b3FYRzRnS2lCRmNYVnBkbUZzWlc1MElIUnZJRUoxWm1abGNpaHVkVzBwTENCaWVTQmtaV1poZFd4MElHTnlaV0YwWlhNZ1lTQnViMjR0ZW1WeWJ5MW1hV3hzWldRZ1FuVm1abVZ5SUdsdWMzUmhibU5sTGx4dUlDb2dLaTljYmtKMVptWmxjaTVoYkd4dlkxVnVjMkZtWlNBOUlHWjFibU4wYVc5dUlDaHphWHBsS1NCN1hHNGdJSEpsZEhWeWJpQmhiR3h2WTFWdWMyRm1aU2h1ZFd4c0xDQnphWHBsS1Z4dWZWeHVMeW9xWEc0Z0tpQkZjWFZwZG1Gc1pXNTBJSFJ2SUZOc2IzZENkV1ptWlhJb2JuVnRLU3dnWW5rZ1pHVm1ZWFZzZENCamNtVmhkR1Z6SUdFZ2JtOXVMWHBsY204dFptbHNiR1ZrSUVKMVptWmxjaUJwYm5OMFlXNWpaUzVjYmlBcUwxeHVRblZtWm1WeUxtRnNiRzlqVlc1ellXWmxVMnh2ZHlBOUlHWjFibU4wYVc5dUlDaHphWHBsS1NCN1hHNGdJSEpsZEhWeWJpQmhiR3h2WTFWdWMyRm1aU2h1ZFd4c0xDQnphWHBsS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJtY205dFUzUnlhVzVuSUNoMGFHRjBMQ0J6ZEhKcGJtY3NJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaVzVqYjJScGJtY2dJVDA5SUNkemRISnBibWNuSUh4OElHVnVZMjlrYVc1bklEMDlQU0FuSnlrZ2UxeHVJQ0FnSUdWdVkyOWthVzVuSUQwZ0ozVjBaamduWEc0Z0lIMWNibHh1SUNCcFppQW9JVUoxWm1abGNpNXBjMFZ1WTI5a2FXNW5LR1Z1WTI5a2FXNW5LU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjF3aVpXNWpiMlJwYm1kY0lpQnRkWE4wSUdKbElHRWdkbUZzYVdRZ2MzUnlhVzVuSUdWdVkyOWthVzVuSnlsY2JpQWdmVnh1WEc0Z0lIWmhjaUJzWlc1bmRHZ2dQU0JpZVhSbFRHVnVaM1JvS0hOMGNtbHVaeXdnWlc1amIyUnBibWNwSUh3Z01GeHVJQ0IwYUdGMElEMGdZM0psWVhSbFFuVm1abVZ5S0hSb1lYUXNJR3hsYm1kMGFDbGNibHh1SUNCMllYSWdZV04wZFdGc0lEMGdkR2hoZEM1M2NtbDBaU2h6ZEhKcGJtY3NJR1Z1WTI5a2FXNW5LVnh1WEc0Z0lHbG1JQ2hoWTNSMVlXd2dJVDA5SUd4bGJtZDBhQ2tnZTF4dUlDQWdJQzh2SUZkeWFYUnBibWNnWVNCb1pYZ2djM1J5YVc1bkxDQm1iM0lnWlhoaGJYQnNaU3dnZEdoaGRDQmpiMjUwWVdsdWN5QnBiblpoYkdsa0lHTm9ZWEpoWTNSbGNuTWdkMmxzYkZ4dUlDQWdJQzh2SUdOaGRYTmxJR1YyWlhKNWRHaHBibWNnWVdaMFpYSWdkR2hsSUdacGNuTjBJR2x1ZG1Gc2FXUWdZMmhoY21GamRHVnlJSFJ2SUdKbElHbG5ibTl5WldRdUlDaGxMbWN1WEc0Z0lDQWdMeThnSjJGaWVIaGpaQ2NnZDJsc2JDQmlaU0IwY21WaGRHVmtJR0Z6SUNkaFlpY3BYRzRnSUNBZ2RHaGhkQ0E5SUhSb1lYUXVjMnhwWTJVb01Dd2dZV04wZFdGc0tWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUm9ZWFJjYm4xY2JseHVablZ1WTNScGIyNGdabkp2YlVGeWNtRjVUR2xyWlNBb2RHaGhkQ3dnWVhKeVlYa3BJSHRjYmlBZ2RtRnlJR3hsYm1kMGFDQTlJR0Z5Y21GNUxteGxibWQwYUNBOElEQWdQeUF3SURvZ1kyaGxZMnRsWkNoaGNuSmhlUzVzWlc1bmRHZ3BJSHdnTUZ4dUlDQjBhR0YwSUQwZ1kzSmxZWFJsUW5WbVptVnlLSFJvWVhRc0lHeGxibWQwYUNsY2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JzWlc1bmRHZzdJR2tnS3owZ01Ta2dlMXh1SUNBZ0lIUm9ZWFJiYVYwZ1BTQmhjbkpoZVZ0cFhTQW1JREkxTlZ4dUlDQjlYRzRnSUhKbGRIVnliaUIwYUdGMFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdaeWIyMUJjbkpoZVVKMVptWmxjaUFvZEdoaGRDd2dZWEp5WVhrc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCaGNuSmhlUzVpZVhSbFRHVnVaM1JvSUM4dklIUm9hWE1nZEdoeWIzZHpJR2xtSUdCaGNuSmhlV0FnYVhNZ2JtOTBJR0VnZG1Gc2FXUWdRWEp5WVhsQ2RXWm1aWEpjYmx4dUlDQnBaaUFvWW5sMFpVOW1abk5sZENBOElEQWdmSHdnWVhKeVlYa3VZbmwwWlV4bGJtZDBhQ0E4SUdKNWRHVlBabVp6WlhRcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25YRnduYjJabWMyVjBYRnduSUdseklHOTFkQ0J2WmlCaWIzVnVaSE1uS1Z4dUlDQjlYRzVjYmlBZ2FXWWdLR0Z5Y21GNUxtSjVkR1ZNWlc1bmRHZ2dQQ0JpZVhSbFQyWm1jMlYwSUNzZ0tHeGxibWQwYUNCOGZDQXdLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkY1hDZHNaVzVuZEdoY1hDY2dhWE1nYjNWMElHOW1JR0p2ZFc1a2N5Y3BYRzRnSUgxY2JseHVJQ0JwWmlBb1lubDBaVTltWm5ObGRDQTlQVDBnZFc1a1pXWnBibVZrSUNZbUlHeGxibWQwYUNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdZWEp5WVhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoaGNuSmhlU2xjYmlBZ2ZTQmxiSE5sSUdsbUlDaHNaVzVuZEdnZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJR0Z5Y21GNUlEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1lYSnlZWGtzSUdKNWRHVlBabVp6WlhRcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1lYSnlZWGtnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hoY25KaGVTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVnh1SUNCOVhHNWNiaUFnYVdZZ0tFSjFabVpsY2k1VVdWQkZSRjlCVWxKQldWOVRWVkJRVDFKVUtTQjdYRzRnSUNBZ0x5OGdVbVYwZFhKdUlHRnVJR0YxWjIxbGJuUmxaQ0JnVldsdWREaEJjbkpoZVdBZ2FXNXpkR0Z1WTJVc0lHWnZjaUJpWlhOMElIQmxjbVp2Y20xaGJtTmxYRzRnSUNBZ2RHaGhkQ0E5SUdGeWNtRjVYRzRnSUNBZ2RHaGhkQzVmWDNCeWIzUnZYMThnUFNCQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsWEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z1JtRnNiR0poWTJzNklGSmxkSFZ5YmlCaGJpQnZZbXBsWTNRZ2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUVKMVptWmxjaUJqYkdGemMxeHVJQ0FnSUhSb1lYUWdQU0JtY205dFFYSnlZWGxNYVd0bEtIUm9ZWFFzSUdGeWNtRjVLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBhR0YwWEc1OVhHNWNibVoxYm1OMGFXOXVJR1p5YjIxUFltcGxZM1FnS0hSb1lYUXNJRzlpYWlrZ2UxeHVJQ0JwWmlBb1FuVm1abVZ5TG1selFuVm1abVZ5S0c5aWFpa3BJSHRjYmlBZ0lDQjJZWElnYkdWdUlEMGdZMmhsWTJ0bFpDaHZZbW91YkdWdVozUm9LU0I4SURCY2JpQWdJQ0IwYUdGMElEMGdZM0psWVhSbFFuVm1abVZ5S0hSb1lYUXNJR3hsYmlsY2JseHVJQ0FnSUdsbUlDaDBhR0YwTG14bGJtZDBhQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9ZWFJjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZZbW91WTI5d2VTaDBhR0YwTENBd0xDQXdMQ0JzWlc0cFhHNGdJQ0FnY21WMGRYSnVJSFJvWVhSY2JpQWdmVnh1WEc0Z0lHbG1JQ2h2WW1vcElIdGNiaUFnSUNCcFppQW9LSFI1Y0dWdlppQkJjbkpoZVVKMVptWmxjaUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVpjYmlBZ0lDQWdJQ0FnYjJKcUxtSjFabVpsY2lCcGJuTjBZVzVqWlc5bUlFRnljbUY1UW5WbVptVnlLU0I4ZkNBbmJHVnVaM1JvSnlCcGJpQnZZbW9wSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IySnFMbXhsYm1kMGFDQWhQVDBnSjI1MWJXSmxjaWNnZkh3Z2FYTnVZVzRvYjJKcUxteGxibWQwYUNrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVKMVptWmxjaWgwYUdGMExDQXdLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWnliMjFCY25KaGVVeHBhMlVvZEdoaGRDd2diMkpxS1Z4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodlltb3VkSGx3WlNBOVBUMGdKMEoxWm1abGNpY2dKaVlnYVhOQmNuSmhlU2h2WW1vdVpHRjBZU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtY205dFFYSnlZWGxNYVd0bEtIUm9ZWFFzSUc5aWFpNWtZWFJoS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owWnBjbk4wSUdGeVozVnRaVzUwSUcxMWMzUWdZbVVnWVNCemRISnBibWNzSUVKMVptWmxjaXdnUVhKeVlYbENkV1ptWlhJc0lFRnljbUY1TENCdmNpQmhjbkpoZVMxc2FXdGxJRzlpYW1WamRDNG5LVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmphR1ZqYTJWa0lDaHNaVzVuZEdncElIdGNiaUFnTHk4Z1RtOTBaVG9nWTJGdWJtOTBJSFZ6WlNCZ2JHVnVaM1JvSUR3Z2EwMWhlRXhsYm1kMGFDZ3BZQ0JvWlhKbElHSmxZMkYxYzJVZ2RHaGhkQ0JtWVdsc2N5QjNhR1Z1WEc0Z0lDOHZJR3hsYm1kMGFDQnBjeUJPWVU0Z0tIZG9hV05vSUdseklHOTBhR1Z5ZDJselpTQmpiMlZ5WTJWa0lIUnZJSHBsY204dUtWeHVJQ0JwWmlBb2JHVnVaM1JvSUQ0OUlHdE5ZWGhNWlc1bmRHZ29LU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkQmRIUmxiWEIwSUhSdklHRnNiRzlqWVhSbElFSjFabVpsY2lCc1lYSm5aWElnZEdoaGJpQnRZWGhwYlhWdElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R6YVhwbE9pQXdlQ2NnS3lCclRXRjRUR1Z1WjNSb0tDa3VkRzlUZEhKcGJtY29NVFlwSUNzZ0p5QmllWFJsY3ljcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUd4bGJtZDBhQ0I4SURCY2JuMWNibHh1Wm5WdVkzUnBiMjRnVTJ4dmQwSjFabVpsY2lBb2JHVnVaM1JvS1NCN1hHNGdJR2xtSUNncmJHVnVaM1JvSUNFOUlHeGxibWQwYUNrZ2V5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUdWeFpYRmxjVnh1SUNBZ0lHeGxibWQwYUNBOUlEQmNiaUFnZlZ4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1Gc2JHOWpLQ3RzWlc1bmRHZ3BYRzU5WEc1Y2JrSjFabVpsY2k1cGMwSjFabVpsY2lBOUlHWjFibU4wYVc5dUlHbHpRblZtWm1WeUlDaGlLU0I3WEc0Z0lISmxkSFZ5YmlBaElTaGlJQ0U5SUc1MWJHd2dKaVlnWWk1ZmFYTkNkV1ptWlhJcFhHNTlYRzVjYmtKMVptWmxjaTVqYjIxd1lYSmxJRDBnWm5WdVkzUnBiMjRnWTI5dGNHRnlaU0FvWVN3Z1lpa2dlMXh1SUNCcFppQW9JVUoxWm1abGNpNXBjMEoxWm1abGNpaGhLU0I4ZkNBaFFuVm1abVZ5TG1selFuVm1abVZ5S0dJcEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25RWEpuZFcxbGJuUnpJRzExYzNRZ1ltVWdRblZtWm1WeWN5Y3BYRzRnSUgxY2JseHVJQ0JwWmlBb1lTQTlQVDBnWWlrZ2NtVjBkWEp1SURCY2JseHVJQ0IyWVhJZ2VDQTlJR0V1YkdWdVozUm9YRzRnSUhaaGNpQjVJRDBnWWk1c1pXNW5kR2hjYmx4dUlDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JHVnVJRDBnVFdGMGFDNXRhVzRvZUN3Z2VTazdJR2tnUENCc1pXNDdJQ3NyYVNrZ2UxeHVJQ0FnSUdsbUlDaGhXMmxkSUNFOVBTQmlXMmxkS1NCN1hHNGdJQ0FnSUNCNElEMGdZVnRwWFZ4dUlDQWdJQ0FnZVNBOUlHSmJhVjFjYmlBZ0lDQWdJR0p5WldGclhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLSGdnUENCNUtTQnlaWFIxY200Z0xURmNiaUFnYVdZZ0tIa2dQQ0I0S1NCeVpYUjFjbTRnTVZ4dUlDQnlaWFIxY200Z01GeHVmVnh1WEc1Q2RXWm1aWEl1YVhORmJtTnZaR2x1WnlBOUlHWjFibU4wYVc5dUlHbHpSVzVqYjJScGJtY2dLR1Z1WTI5a2FXNW5LU0I3WEc0Z0lITjNhWFJqYUNBb1UzUnlhVzVuS0dWdVkyOWthVzVuS1M1MGIweHZkMlZ5UTJGelpTZ3BLU0I3WEc0Z0lDQWdZMkZ6WlNBbmFHVjRKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWTRKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdZMkZ6WlNBbllYTmphV2tuT2x4dUlDQWdJR05oYzJVZ0oyeGhkR2x1TVNjNlhHNGdJQ0FnWTJGelpTQW5ZbWx1WVhKNUp6cGNiaUFnSUNCallYTmxJQ2RpWVhObE5qUW5PbHh1SUNBZ0lHTmhjMlVnSjNWamN6SW5PbHh1SUNBZ0lHTmhjMlVnSjNWamN5MHlKenBjYmlBZ0lDQmpZWE5sSUNkMWRHWXhObXhsSnpwY2JpQWdJQ0JqWVhObElDZDFkR1l0TVRac1pTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z2RISjFaVnh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnZlZ4dWZWeHVYRzVDZFdabVpYSXVZMjl1WTJGMElEMGdablZ1WTNScGIyNGdZMjl1WTJGMElDaHNhWE4wTENCc1pXNW5kR2dwSUh0Y2JpQWdhV1lnS0NGcGMwRnljbUY1S0d4cGMzUXBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWENKc2FYTjBYQ0lnWVhKbmRXMWxiblFnYlhWemRDQmlaU0JoYmlCQmNuSmhlU0J2WmlCQ2RXWm1aWEp6SnlsY2JpQWdmVnh1WEc0Z0lHbG1JQ2hzYVhOMExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQkNkV1ptWlhJdVlXeHNiMk1vTUNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwWEc0Z0lHbG1JQ2hzWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUd4bGJtZDBhQ0E5SURCY2JpQWdJQ0JtYjNJZ0tHa2dQU0F3T3lCcElEd2diR2x6ZEM1c1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lDQWdiR1Z1WjNSb0lDczlJR3hwYzNSYmFWMHViR1Z1WjNSb1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2RtRnlJR0oxWm1abGNpQTlJRUoxWm1abGNpNWhiR3h2WTFWdWMyRm1aU2hzWlc1bmRHZ3BYRzRnSUhaaGNpQndiM01nUFNBd1hHNGdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnNhWE4wTG14bGJtZDBhRHNnS3l0cEtTQjdYRzRnSUNBZ2RtRnlJR0oxWmlBOUlHeHBjM1JiYVYxY2JpQWdJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2loaWRXWXBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkY0lteHBjM1JjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdGdUlFRnljbUY1SUc5bUlFSjFabVpsY25NbktWeHVJQ0FnSUgxY2JpQWdJQ0JpZFdZdVkyOXdlU2hpZFdabVpYSXNJSEJ2Y3lsY2JpQWdJQ0J3YjNNZ0t6MGdZblZtTG14bGJtZDBhRnh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1ptWlhKY2JuMWNibHh1Wm5WdVkzUnBiMjRnWW5sMFpVeGxibWQwYUNBb2MzUnlhVzVuTENCbGJtTnZaR2x1WnlrZ2UxeHVJQ0JwWmlBb1FuVm1abVZ5TG1selFuVm1abVZ5S0hOMGNtbHVaeWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjM1J5YVc1bkxteGxibWQwYUZ4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ1FYSnlZWGxDZFdabVpYSWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JSFI1Y0dWdlppQkJjbkpoZVVKMVptWmxjaTVwYzFacFpYY2dQVDA5SUNkbWRXNWpkR2x2YmljZ0ppWmNiaUFnSUNBZ0lDaEJjbkpoZVVKMVptWmxjaTVwYzFacFpYY29jM1J5YVc1bktTQjhmQ0J6ZEhKcGJtY2dhVzV6ZEdGdVkyVnZaaUJCY25KaGVVSjFabVpsY2lrcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSeWFXNW5MbUo1ZEdWTVpXNW5kR2hjYmlBZ2ZWeHVJQ0JwWmlBb2RIbHdaVzltSUhOMGNtbHVaeUFoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCemRISnBibWNnUFNBbkp5QXJJSE4wY21sdVoxeHVJQ0I5WEc1Y2JpQWdkbUZ5SUd4bGJpQTlJSE4wY21sdVp5NXNaVzVuZEdoY2JpQWdhV1lnS0d4bGJpQTlQVDBnTUNrZ2NtVjBkWEp1SURCY2JseHVJQ0F2THlCVmMyVWdZU0JtYjNJZ2JHOXZjQ0IwYnlCaGRtOXBaQ0J5WldOMWNuTnBiMjVjYmlBZ2RtRnlJR3h2ZDJWeVpXUkRZWE5sSUQwZ1ptRnNjMlZjYmlBZ1ptOXlJQ2c3T3lrZ2UxeHVJQ0FnSUhOM2FYUmphQ0FvWlc1amIyUnBibWNwSUh0Y2JpQWdJQ0FnSUdOaGMyVWdKMkZ6WTJscEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJ4aGRHbHVNU2M2WEc0Z0lDQWdJQ0JqWVhObElDZGlhVzVoY25rbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JHVnVYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWTRKenBjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaaTA0SnpwY2JpQWdJQ0FnSUdOaGMyVWdkVzVrWldacGJtVmtPbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkWFJtT0ZSdlFubDBaWE1vYzNSeWFXNW5LUzVzWlc1bmRHaGNiaUFnSUNBZ0lHTmhjMlVnSjNWamN6SW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRXTnpMVEluT2x4dUlDQWdJQ0FnWTJGelpTQW5kWFJtTVRac1pTYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXRNVFpzWlNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1pXNGdLaUF5WEc0Z0lDQWdJQ0JqWVhObElDZG9aWGduT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYkdWdUlENCtQaUF4WEc0Z0lDQWdJQ0JqWVhObElDZGlZWE5sTmpRbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ltRnpaVFkwVkc5Q2VYUmxjeWh6ZEhKcGJtY3BMbXhsYm1kMGFGeHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ2FXWWdLR3h2ZDJWeVpXUkRZWE5sS1NCeVpYUjFjbTRnZFhSbU9GUnZRbmwwWlhNb2MzUnlhVzVuS1M1c1pXNW5kR2dnTHk4Z1lYTnpkVzFsSUhWMFpqaGNiaUFnSUNBZ0lDQWdaVzVqYjJScGJtY2dQU0FvSnljZ0t5QmxibU52WkdsdVp5a3VkRzlNYjNkbGNrTmhjMlVvS1Z4dUlDQWdJQ0FnSUNCc2IzZGxjbVZrUTJGelpTQTlJSFJ5ZFdWY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmtKMVptWmxjaTVpZVhSbFRHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFGeHVYRzVtZFc1amRHbHZiaUJ6Ykc5M1ZHOVRkSEpwYm1jZ0tHVnVZMjlrYVc1bkxDQnpkR0Z5ZEN3Z1pXNWtLU0I3WEc0Z0lIWmhjaUJzYjNkbGNtVmtRMkZ6WlNBOUlHWmhiSE5sWEc1Y2JpQWdMeThnVG04Z2JtVmxaQ0IwYnlCMlpYSnBabmtnZEdoaGRDQmNJblJvYVhNdWJHVnVaM1JvSUR3OUlFMUJXRjlWU1U1VU16SmNJaUJ6YVc1alpTQnBkQ2R6SUdFZ2NtVmhaQzF2Ym14NVhHNGdJQzh2SUhCeWIzQmxjblI1SUc5bUlHRWdkSGx3WldRZ1lYSnlZWGt1WEc1Y2JpQWdMeThnVkdocGN5QmlaV2hoZG1WeklHNWxhWFJvWlhJZ2JHbHJaU0JUZEhKcGJtY2dibTl5SUZWcGJuUTRRWEp5WVhrZ2FXNGdkR2hoZENCM1pTQnpaWFFnYzNSaGNuUXZaVzVrWEc0Z0lDOHZJSFJ2SUhSb1pXbHlJSFZ3Y0dWeUwyeHZkMlZ5SUdKdmRXNWtjeUJwWmlCMGFHVWdkbUZzZFdVZ2NHRnpjMlZrSUdseklHOTFkQ0J2WmlCeVlXNW5aUzVjYmlBZ0x5OGdkVzVrWldacGJtVmtJR2x6SUdoaGJtUnNaV1FnYzNCbFkybGhiR3g1SUdGeklIQmxjaUJGUTAxQkxUSTJNaUEyZEdnZ1JXUnBkR2x2Yml4Y2JpQWdMeThnVTJWamRHbHZiaUF4TXk0ekxqTXVOeUJTZFc1MGFXMWxJRk5sYldGdWRHbGpjem9nUzJWNVpXUkNhVzVrYVc1blNXNXBkR2xoYkdsNllYUnBiMjR1WEc0Z0lHbG1JQ2h6ZEdGeWRDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElITjBZWEowSUR3Z01Da2dlMXh1SUNBZ0lITjBZWEowSUQwZ01GeHVJQ0I5WEc0Z0lDOHZJRkpsZEhWeWJpQmxZWEpzZVNCcFppQnpkR0Z5ZENBK0lIUm9hWE11YkdWdVozUm9MaUJFYjI1bElHaGxjbVVnZEc4Z2NISmxkbVZ1ZENCd2IzUmxiblJwWVd3Z2RXbHVkRE15WEc0Z0lDOHZJR052WlhKamFXOXVJR1poYVd3Z1ltVnNiM2N1WEc0Z0lHbG1JQ2h6ZEdGeWRDQStJSFJvYVhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2NuWEc0Z0lIMWNibHh1SUNCcFppQW9aVzVrSUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnWlc1a0lENGdkR2hwY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0JsYm1RZ1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCOVhHNWNiaUFnYVdZZ0tHVnVaQ0E4UFNBd0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUNjblhHNGdJSDFjYmx4dUlDQXZMeUJHYjNKalpTQmpiMlZ5YzJsdmJpQjBieUIxYVc1ME16SXVJRlJvYVhNZ2QybHNiQ0JoYkhOdklHTnZaWEpqWlNCbVlXeHpaWGt2VG1GT0lIWmhiSFZsY3lCMGJ5QXdMbHh1SUNCbGJtUWdQajQrUFNBd1hHNGdJSE4wWVhKMElENCtQajBnTUZ4dVhHNGdJR2xtSUNobGJtUWdQRDBnYzNSaGNuUXBJSHRjYmlBZ0lDQnlaWFIxY200Z0p5ZGNiaUFnZlZ4dVhHNGdJR2xtSUNnaFpXNWpiMlJwYm1jcElHVnVZMjlrYVc1bklEMGdKM1YwWmpnblhHNWNiaUFnZDJocGJHVWdLSFJ5ZFdVcElIdGNiaUFnSUNCemQybDBZMmdnS0dWdVkyOWthVzVuS1NCN1hHNGdJQ0FnSUNCallYTmxJQ2RvWlhnbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHVjRVMnhwWTJVb2RHaHBjeXdnYzNSaGNuUXNJR1Z1WkNsY2JseHVJQ0FnSUNBZ1kyRnpaU0FuZFhSbU9DYzZYRzRnSUNBZ0lDQmpZWE5sSUNkMWRHWXRPQ2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIxZEdZNFUyeHBZMlVvZEdocGN5d2djM1JoY25Rc0lHVnVaQ2xjYmx4dUlDQWdJQ0FnWTJGelpTQW5ZWE5qYVdrbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYTmphV2xUYkdsalpTaDBhR2x6TENCemRHRnlkQ3dnWlc1a0tWeHVYRzRnSUNBZ0lDQmpZWE5sSUNkc1lYUnBiakVuT2x4dUlDQWdJQ0FnWTJGelpTQW5ZbWx1WVhKNUp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHeGhkR2x1TVZOc2FXTmxLSFJvYVhNc0lITjBZWEowTENCbGJtUXBYRzVjYmlBZ0lDQWdJR05oYzJVZ0oySmhjMlUyTkNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaVlYTmxOalJUYkdsalpTaDBhR2x6TENCemRHRnlkQ3dnWlc1a0tWeHVYRzRnSUNBZ0lDQmpZWE5sSUNkMVkzTXlKenBjYmlBZ0lDQWdJR05oYzJVZ0ozVmpjeTB5SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmpFMmJHVW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1MVEUyYkdVbk9seHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYUm1NVFpzWlZOc2FXTmxLSFJvYVhNc0lITjBZWEowTENCbGJtUXBYRzVjYmlBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJR2xtSUNoc2IzZGxjbVZrUTJGelpTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVlc1cmJtOTNiaUJsYm1OdlpHbHVaem9nSnlBcklHVnVZMjlrYVc1bktWeHVJQ0FnSUNBZ0lDQmxibU52WkdsdVp5QTlJQ2hsYm1OdlpHbHVaeUFySUNjbktTNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lDQWdJQ0FnSUd4dmQyVnlaV1JEWVhObElEMGdkSEoxWlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc0dkx5QlVhR1VnY0hKdmNHVnlkSGtnYVhNZ2RYTmxaQ0JpZVNCZ1FuVm1abVZ5TG1selFuVm1abVZ5WUNCaGJtUWdZR2x6TFdKMVptWmxjbUFnS0dsdUlGTmhabUZ5YVNBMUxUY3BJSFJ2SUdSbGRHVmpkRnh1THk4Z1FuVm1abVZ5SUdsdWMzUmhibU5sY3k1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdVgybHpRblZtWm1WeUlEMGdkSEoxWlZ4dVhHNW1kVzVqZEdsdmJpQnpkMkZ3SUNoaUxDQnVMQ0J0S1NCN1hHNGdJSFpoY2lCcElEMGdZbHR1WFZ4dUlDQmlXMjVkSUQwZ1lsdHRYVnh1SUNCaVcyMWRJRDBnYVZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbk4zWVhBeE5pQTlJR1oxYm1OMGFXOXVJSE4zWVhBeE5pQW9LU0I3WEc0Z0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhRnh1SUNCcFppQW9iR1Z1SUNVZ01pQWhQVDBnTUNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtDZENkV1ptWlhJZ2MybDZaU0J0ZFhOMElHSmxJR0VnYlhWc2RHbHdiR1VnYjJZZ01UWXRZbWwwY3ljcFhHNGdJSDFjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrZ0t6MGdNaWtnZTF4dUlDQWdJSE4zWVhBb2RHaHBjeXdnYVN3Z2FTQXJJREVwWEc0Z0lIMWNiaUFnY21WMGRYSnVJSFJvYVhOY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV6ZDJGd016SWdQU0JtZFc1amRHbHZiaUJ6ZDJGd016SWdLQ2tnZTF4dUlDQjJZWElnYkdWdUlEMGdkR2hwY3k1c1pXNW5kR2hjYmlBZ2FXWWdLR3hsYmlBbElEUWdJVDA5SURBcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25RblZtWm1WeUlITnBlbVVnYlhWemRDQmlaU0JoSUcxMWJIUnBjR3hsSUc5bUlETXlMV0pwZEhNbktWeHVJQ0I5WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1T3lCcElDczlJRFFwSUh0Y2JpQWdJQ0J6ZDJGd0tIUm9hWE1zSUdrc0lHa2dLeUF6S1Z4dUlDQWdJSE4zWVhBb2RHaHBjeXdnYVNBcklERXNJR2tnS3lBeUtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGFHbHpYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWMzZGhjRFkwSUQwZ1puVnVZM1JwYjI0Z2MzZGhjRFkwSUNncElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSb2FYTXViR1Z1WjNSb1hHNGdJR2xtSUNoc1pXNGdKU0E0SUNFOVBTQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBKMVptWmxjaUJ6YVhwbElHMTFjM1FnWW1VZ1lTQnRkV3gwYVhCc1pTQnZaaUEyTkMxaWFYUnpKeWxjYmlBZ2ZWeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU0FyUFNBNEtTQjdYRzRnSUNBZ2MzZGhjQ2gwYUdsekxDQnBMQ0JwSUNzZ055bGNiaUFnSUNCemQyRndLSFJvYVhNc0lHa2dLeUF4TENCcElDc2dOaWxjYmlBZ0lDQnpkMkZ3S0hSb2FYTXNJR2tnS3lBeUxDQnBJQ3NnTlNsY2JpQWdJQ0J6ZDJGd0tIUm9hWE1zSUdrZ0t5QXpMQ0JwSUNzZ05DbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2RHaHBjMXh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklEMGdablZ1WTNScGIyNGdkRzlUZEhKcGJtY2dLQ2tnZTF4dUlDQjJZWElnYkdWdVozUm9JRDBnZEdocGN5NXNaVzVuZEdnZ2ZDQXdYRzRnSUdsbUlDaHNaVzVuZEdnZ1BUMDlJREFwSUhKbGRIVnliaUFuSjF4dUlDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlIVjBaamhUYkdsalpTaDBhR2x6TENBd0xDQnNaVzVuZEdncFhHNGdJSEpsZEhWeWJpQnpiRzkzVkc5VGRISnBibWN1WVhCd2JIa29kR2hwY3l3Z1lYSm5kVzFsYm5SektWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1WeGRXRnNjeUE5SUdaMWJtTjBhVzl1SUdWeGRXRnNjeUFvWWlrZ2UxeHVJQ0JwWmlBb0lVSjFabVpsY2k1cGMwSjFabVpsY2loaUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUVhKbmRXMWxiblFnYlhWemRDQmlaU0JoSUVKMVptWmxjaWNwWEc0Z0lHbG1JQ2gwYUdseklEMDlQU0JpS1NCeVpYUjFjbTRnZEhKMVpWeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUxtTnZiWEJoY21Vb2RHaHBjeXdnWWlrZ1BUMDlJREJjYm4xY2JseHVRblZtWm1WeUxuQnliM1J2ZEhsd1pTNXBibk53WldOMElEMGdablZ1WTNScGIyNGdhVzV6Y0dWamRDQW9LU0I3WEc0Z0lIWmhjaUJ6ZEhJZ1BTQW5KMXh1SUNCMllYSWdiV0Y0SUQwZ1pYaHdiM0owY3k1SlRsTlFSVU5VWDAxQldGOUNXVlJGVTF4dUlDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdjM1J5SUQwZ2RHaHBjeTUwYjFOMGNtbHVaeWduYUdWNEp5d2dNQ3dnYldGNEtTNXRZWFJqYUNndkxuc3lmUzluS1M1cWIybHVLQ2NnSnlsY2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQaUJ0WVhncElITjBjaUFyUFNBbklDNHVMaUFuWEc0Z0lIMWNiaUFnY21WMGRYSnVJQ2M4UW5WbVptVnlJQ2NnS3lCemRISWdLeUFuUGlkY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzVqYjIxd1lYSmxJRDBnWm5WdVkzUnBiMjRnWTI5dGNHRnlaU0FvZEdGeVoyVjBMQ0J6ZEdGeWRDd2daVzVrTENCMGFHbHpVM1JoY25Rc0lIUm9hWE5GYm1RcElIdGNiaUFnYVdZZ0tDRkNkV1ptWlhJdWFYTkNkV1ptWlhJb2RHRnlaMlYwS1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owRnlaM1Z0Wlc1MElHMTFjM1FnWW1VZ1lTQkNkV1ptWlhJbktWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hOMFlYSjBJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCemRHRnlkQ0E5SURCY2JpQWdmVnh1SUNCcFppQW9aVzVrSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQmxibVFnUFNCMFlYSm5aWFFnUHlCMFlYSm5aWFF1YkdWdVozUm9JRG9nTUZ4dUlDQjlYRzRnSUdsbUlDaDBhR2x6VTNSaGNuUWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhSb2FYTlRkR0Z5ZENBOUlEQmNiaUFnZlZ4dUlDQnBaaUFvZEdocGMwVnVaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RHaHBjMFZ1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUgxY2JseHVJQ0JwWmlBb2MzUmhjblFnUENBd0lIeDhJR1Z1WkNBK0lIUmhjbWRsZEM1c1pXNW5kR2dnZkh3Z2RHaHBjMU4wWVhKMElEd2dNQ0I4ZkNCMGFHbHpSVzVrSUQ0Z2RHaHBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduYjNWMElHOW1JSEpoYm1kbElHbHVaR1Y0SnlsY2JpQWdmVnh1WEc0Z0lHbG1JQ2gwYUdselUzUmhjblFnUGowZ2RHaHBjMFZ1WkNBbUppQnpkR0Z5ZENBK1BTQmxibVFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdNRnh1SUNCOVhHNGdJR2xtSUNoMGFHbHpVM1JoY25RZ1BqMGdkR2hwYzBWdVpDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBdE1WeHVJQ0I5WEc0Z0lHbG1JQ2h6ZEdGeWRDQStQU0JsYm1RcElIdGNiaUFnSUNCeVpYUjFjbTRnTVZ4dUlDQjlYRzVjYmlBZ2MzUmhjblFnUGo0K1BTQXdYRzRnSUdWdVpDQStQajQ5SURCY2JpQWdkR2hwYzFOMFlYSjBJRDQrUGowZ01GeHVJQ0IwYUdselJXNWtJRDQrUGowZ01GeHVYRzRnSUdsbUlDaDBhR2x6SUQwOVBTQjBZWEpuWlhRcElISmxkSFZ5YmlBd1hHNWNiaUFnZG1GeUlIZ2dQU0IwYUdselJXNWtJQzBnZEdocGMxTjBZWEowWEc0Z0lIWmhjaUI1SUQwZ1pXNWtJQzBnYzNSaGNuUmNiaUFnZG1GeUlHeGxiaUE5SUUxaGRHZ3ViV2x1S0hnc0lIa3BYRzVjYmlBZ2RtRnlJSFJvYVhORGIzQjVJRDBnZEdocGN5NXpiR2xqWlNoMGFHbHpVM1JoY25Rc0lIUm9hWE5GYm1RcFhHNGdJSFpoY2lCMFlYSm5aWFJEYjNCNUlEMGdkR0Z5WjJWMExuTnNhV05sS0hOMFlYSjBMQ0JsYm1RcFhHNWNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNDdJQ3NyYVNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6UTI5d2VWdHBYU0FoUFQwZ2RHRnlaMlYwUTI5d2VWdHBYU2tnZTF4dUlDQWdJQ0FnZUNBOUlIUm9hWE5EYjNCNVcybGRYRzRnSUNBZ0lDQjVJRDBnZEdGeVoyVjBRMjl3ZVZ0cFhWeHVJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JwWmlBb2VDQThJSGtwSUhKbGRIVnliaUF0TVZ4dUlDQnBaaUFvZVNBOElIZ3BJSEpsZEhWeWJpQXhYRzRnSUhKbGRIVnliaUF3WEc1OVhHNWNiaTh2SUVacGJtUnpJR1ZwZEdobGNpQjBhR1VnWm1seWMzUWdhVzVrWlhnZ2IyWWdZSFpoYkdBZ2FXNGdZR0oxWm1abGNtQWdZWFFnYjJabWMyVjBJRDQ5SUdCaWVYUmxUMlptYzJWMFlDeGNiaTh2SUU5U0lIUm9aU0JzWVhOMElHbHVaR1Y0SUc5bUlHQjJZV3hnSUdsdUlHQmlkV1ptWlhKZ0lHRjBJRzltWm5ObGRDQThQU0JnWW5sMFpVOW1abk5sZEdBdVhHNHZMMXh1THk4Z1FYSm5kVzFsYm5Sek9seHVMeThnTFNCaWRXWm1aWElnTFNCaElFSjFabVpsY2lCMGJ5QnpaV0Z5WTJoY2JpOHZJQzBnZG1Gc0lDMGdZU0J6ZEhKcGJtY3NJRUoxWm1abGNpd2diM0lnYm5WdFltVnlYRzR2THlBdElHSjVkR1ZQWm1aelpYUWdMU0JoYmlCcGJtUmxlQ0JwYm5SdklHQmlkV1ptWlhKZ095QjNhV3hzSUdKbElHTnNZVzF3WldRZ2RHOGdZVzRnYVc1ME16SmNiaTh2SUMwZ1pXNWpiMlJwYm1jZ0xTQmhiaUJ2Y0hScGIyNWhiQ0JsYm1OdlpHbHVaeXdnY21Wc1pYWmhiblFnYVhNZ2RtRnNJR2x6SUdFZ2MzUnlhVzVuWEc0dkx5QXRJR1JwY2lBdElIUnlkV1VnWm05eUlHbHVaR1Y0VDJZc0lHWmhiSE5sSUdadmNpQnNZWE4wU1c1a1pYaFBabHh1Wm5WdVkzUnBiMjRnWW1sa2FYSmxZM1JwYjI1aGJFbHVaR1Y0VDJZZ0tHSjFabVpsY2l3Z2RtRnNMQ0JpZVhSbFQyWm1jMlYwTENCbGJtTnZaR2x1Wnl3Z1pHbHlLU0I3WEc0Z0lDOHZJRVZ0Y0hSNUlHSjFabVpsY2lCdFpXRnVjeUJ1YnlCdFlYUmphRnh1SUNCcFppQW9ZblZtWm1WeUxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVJQzB4WEc1Y2JpQWdMeThnVG05eWJXRnNhWHBsSUdKNWRHVlBabVp6WlhSY2JpQWdhV1lnS0hSNWNHVnZaaUJpZVhSbFQyWm1jMlYwSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdZbmwwWlU5bVpuTmxkRnh1SUNBZ0lHSjVkR1ZQWm1aelpYUWdQU0F3WEc0Z0lIMGdaV3h6WlNCcFppQW9ZbmwwWlU5bVpuTmxkQ0ErSURCNE4yWm1abVptWm1ZcElIdGNiaUFnSUNCaWVYUmxUMlptYzJWMElEMGdNSGczWm1abVptWm1abHh1SUNCOUlHVnNjMlVnYVdZZ0tHSjVkR1ZQWm1aelpYUWdQQ0F0TUhnNE1EQXdNREF3TUNrZ2UxeHVJQ0FnSUdKNWRHVlBabVp6WlhRZ1BTQXRNSGc0TURBd01EQXdNRnh1SUNCOVhHNGdJR0o1ZEdWUFptWnpaWFFnUFNBcllubDBaVTltWm5ObGRDQWdMeThnUTI5bGNtTmxJSFJ2SUU1MWJXSmxjaTVjYmlBZ2FXWWdLR2x6VG1GT0tHSjVkR1ZQWm1aelpYUXBLU0I3WEc0Z0lDQWdMeThnWW5sMFpVOW1abk5sZERvZ2FYUWdhWFFuY3lCMWJtUmxabWx1WldRc0lHNTFiR3dzSUU1aFRpd2dYQ0ptYjI5Y0lpd2daWFJqTENCelpXRnlZMmdnZDJodmJHVWdZblZtWm1WeVhHNGdJQ0FnWW5sMFpVOW1abk5sZENBOUlHUnBjaUEvSURBZ09pQW9ZblZtWm1WeUxteGxibWQwYUNBdElERXBYRzRnSUgxY2JseHVJQ0F2THlCT2IzSnRZV3hwZW1VZ1lubDBaVTltWm5ObGREb2dibVZuWVhScGRtVWdiMlptYzJWMGN5QnpkR0Z5ZENCbWNtOXRJSFJvWlNCbGJtUWdiMllnZEdobElHSjFabVpsY2x4dUlDQnBaaUFvWW5sMFpVOW1abk5sZENBOElEQXBJR0o1ZEdWUFptWnpaWFFnUFNCaWRXWm1aWEl1YkdWdVozUm9JQ3NnWW5sMFpVOW1abk5sZEZ4dUlDQnBaaUFvWW5sMFpVOW1abk5sZENBK1BTQmlkV1ptWlhJdWJHVnVaM1JvS1NCN1hHNGdJQ0FnYVdZZ0tHUnBjaWtnY21WMGRYSnVJQzB4WEc0Z0lDQWdaV3h6WlNCaWVYUmxUMlptYzJWMElEMGdZblZtWm1WeUxteGxibWQwYUNBdElERmNiaUFnZlNCbGJITmxJR2xtSUNoaWVYUmxUMlptYzJWMElEd2dNQ2tnZTF4dUlDQWdJR2xtSUNoa2FYSXBJR0o1ZEdWUFptWnpaWFFnUFNBd1hHNGdJQ0FnWld4elpTQnlaWFIxY200Z0xURmNiaUFnZlZ4dVhHNGdJQzh2SUU1dmNtMWhiR2w2WlNCMllXeGNiaUFnYVdZZ0tIUjVjR1Z2WmlCMllXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnZG1Gc0lEMGdRblZtWm1WeUxtWnliMjBvZG1Gc0xDQmxibU52WkdsdVp5bGNiaUFnZlZ4dVhHNGdJQzh2SUVacGJtRnNiSGtzSUhObFlYSmphQ0JsYVhSb1pYSWdhVzVrWlhoUFppQW9hV1lnWkdseUlHbHpJSFJ5ZFdVcElHOXlJR3hoYzNSSmJtUmxlRTltWEc0Z0lHbG1JQ2hDZFdabVpYSXVhWE5DZFdabVpYSW9kbUZzS1NrZ2UxeHVJQ0FnSUM4dklGTndaV05wWVd3Z1kyRnpaVG9nYkc5dmEybHVaeUJtYjNJZ1pXMXdkSGtnYzNSeWFXNW5MMkoxWm1abGNpQmhiSGRoZVhNZ1ptRnBiSE5jYmlBZ0lDQnBaaUFvZG1Gc0xteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQzB4WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVWx1WkdWNFQyWW9ZblZtWm1WeUxDQjJZV3dzSUdKNWRHVlBabVp6WlhRc0lHVnVZMjlrYVc1bkxDQmthWElwWEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlIWmhiQ0E5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNCMllXd2dQU0IyWVd3Z0ppQXdlRVpHSUM4dklGTmxZWEpqYUNCbWIzSWdZU0JpZVhSbElIWmhiSFZsSUZzd0xUSTFOVjFjYmlBZ0lDQnBaaUFvUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFnSmlaY2JpQWdJQ0FnSUNBZ2RIbHdaVzltSUZWcGJuUTRRWEp5WVhrdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUdsbUlDaGthWElwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUZWcGJuUTRRWEp5WVhrdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZdVkyRnNiQ2hpZFdabVpYSXNJSFpoYkN3Z1lubDBaVTltWm5ObGRDbGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCVmFXNTBPRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXNZWE4wU1c1a1pYaFBaaTVqWVd4c0tHSjFabVpsY2l3Z2RtRnNMQ0JpZVhSbFQyWm1jMlYwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1lYSnlZWGxKYm1SbGVFOW1LR0oxWm1abGNpd2dXeUIyWVd3Z1hTd2dZbmwwWlU5bVpuTmxkQ3dnWlc1amIyUnBibWNzSUdScGNpbGNiaUFnZlZ4dVhHNGdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjNaaGJDQnRkWE4wSUdKbElITjBjbWx1Wnl3Z2JuVnRZbVZ5SUc5eUlFSjFabVpsY2ljcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGeWNtRjVTVzVrWlhoUFppQW9ZWEp5TENCMllXd3NJR0o1ZEdWUFptWnpaWFFzSUdWdVkyOWthVzVuTENCa2FYSXBJSHRjYmlBZ2RtRnlJR2x1WkdWNFUybDZaU0E5SURGY2JpQWdkbUZ5SUdGeWNreGxibWQwYUNBOUlHRnljaTVzWlc1bmRHaGNiaUFnZG1GeUlIWmhiRXhsYm1kMGFDQTlJSFpoYkM1c1pXNW5kR2hjYmx4dUlDQnBaaUFvWlc1amIyUnBibWNnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHVnVZMjlrYVc1bklEMGdVM1J5YVc1bktHVnVZMjlrYVc1bktTNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lDQWdhV1lnS0dWdVkyOWthVzVuSUQwOVBTQW5kV056TWljZ2ZId2daVzVqYjJScGJtY2dQVDA5SUNkMVkzTXRNaWNnZkh4Y2JpQWdJQ0FnSUNBZ1pXNWpiMlJwYm1jZ1BUMDlJQ2QxZEdZeE5teGxKeUI4ZkNCbGJtTnZaR2x1WnlBOVBUMGdKM1YwWmkweE5teGxKeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHRnljaTVzWlc1bmRHZ2dQQ0F5SUh4OElIWmhiQzVzWlc1bmRHZ2dQQ0F5S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBdE1WeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXNWtaWGhUYVhwbElEMGdNbHh1SUNBZ0lDQWdZWEp5VEdWdVozUm9JQzg5SURKY2JpQWdJQ0FnSUhaaGJFeGxibWQwYUNBdlBTQXlYRzRnSUNBZ0lDQmllWFJsVDJabWMyVjBJQzg5SURKY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCeVpXRmtJQ2hpZFdZc0lHa3BJSHRjYmlBZ0lDQnBaaUFvYVc1a1pYaFRhWHBsSUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZblZtVzJsZFhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmlkV1l1Y21WaFpGVkpiblF4TmtKRktHa2dLaUJwYm1SbGVGTnBlbVVwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnZG1GeUlHbGNiaUFnYVdZZ0tHUnBjaWtnZTF4dUlDQWdJSFpoY2lCbWIzVnVaRWx1WkdWNElEMGdMVEZjYmlBZ0lDQm1iM0lnS0drZ1BTQmllWFJsVDJabWMyVjBPeUJwSUR3Z1lYSnlUR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUdsbUlDaHlaV0ZrS0dGeWNpd2dhU2tnUFQwOUlISmxZV1FvZG1Gc0xDQm1iM1Z1WkVsdVpHVjRJRDA5UFNBdE1TQS9JREFnT2lCcElDMGdabTkxYm1SSmJtUmxlQ2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1p2ZFc1a1NXNWtaWGdnUFQwOUlDMHhLU0JtYjNWdVpFbHVaR1Y0SUQwZ2FWeHVJQ0FnSUNBZ0lDQnBaaUFvYVNBdElHWnZkVzVrU1c1a1pYZ2dLeUF4SUQwOVBTQjJZV3hNWlc1bmRHZ3BJSEpsZEhWeWJpQm1iM1Z1WkVsdVpHVjRJQ29nYVc1a1pYaFRhWHBsWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1ptOTFibVJKYm1SbGVDQWhQVDBnTFRFcElHa2dMVDBnYVNBdElHWnZkVzVrU1c1a1pYaGNiaUFnSUNBZ0lDQWdabTkxYm1SSmJtUmxlQ0E5SUMweFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdsbUlDaGllWFJsVDJabWMyVjBJQ3NnZG1Gc1RHVnVaM1JvSUQ0Z1lYSnlUR1Z1WjNSb0tTQmllWFJsVDJabWMyVjBJRDBnWVhKeVRHVnVaM1JvSUMwZ2RtRnNUR1Z1WjNSb1hHNGdJQ0FnWm05eUlDaHBJRDBnWW5sMFpVOW1abk5sZERzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJSFpoY2lCbWIzVnVaQ0E5SUhSeWRXVmNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3T3lCcUlEd2dkbUZzVEdWdVozUm9PeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbFlXUW9ZWEp5TENCcElDc2dhaWtnSVQwOUlISmxZV1FvZG1Gc0xDQnFLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHWnZkVzVrSUQwZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb1ptOTFibVFwSUhKbGRIVnliaUJwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJQzB4WEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVhVzVqYkhWa1pYTWdQU0JtZFc1amRHbHZiaUJwYm1Oc2RXUmxjeUFvZG1Gc0xDQmllWFJsVDJabWMyVjBMQ0JsYm1OdlpHbHVaeWtnZTF4dUlDQnlaWFIxY200Z2RHaHBjeTVwYm1SbGVFOW1LSFpoYkN3Z1lubDBaVTltWm5ObGRDd2daVzVqYjJScGJtY3BJQ0U5UFNBdE1WeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1sdVpHVjRUMllnUFNCbWRXNWpkR2x2YmlCcGJtUmxlRTltSUNoMllXd3NJR0o1ZEdWUFptWnpaWFFzSUdWdVkyOWthVzVuS1NCN1hHNGdJSEpsZEhWeWJpQmlhV1JwY21WamRHbHZibUZzU1c1a1pYaFBaaWgwYUdsekxDQjJZV3dzSUdKNWRHVlBabVp6WlhRc0lHVnVZMjlrYVc1bkxDQjBjblZsS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbXhoYzNSSmJtUmxlRTltSUQwZ1puVnVZM1JwYjI0Z2JHRnpkRWx1WkdWNFQyWWdLSFpoYkN3Z1lubDBaVTltWm5ObGRDd2daVzVqYjJScGJtY3BJSHRjYmlBZ2NtVjBkWEp1SUdKcFpHbHlaV04wYVc5dVlXeEpibVJsZUU5bUtIUm9hWE1zSUhaaGJDd2dZbmwwWlU5bVpuTmxkQ3dnWlc1amIyUnBibWNzSUdaaGJITmxLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9aWGhYY21sMFpTQW9ZblZtTENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LU0I3WEc0Z0lHOW1abk5sZENBOUlFNTFiV0psY2lodlptWnpaWFFwSUh4OElEQmNiaUFnZG1GeUlISmxiV0ZwYm1sdVp5QTlJR0oxWmk1c1pXNW5kR2dnTFNCdlptWnpaWFJjYmlBZ2FXWWdLQ0ZzWlc1bmRHZ3BJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQnlaVzFoYVc1cGJtZGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnNaVzVuZEdnZ1BTQk9kVzFpWlhJb2JHVnVaM1JvS1Z4dUlDQWdJR2xtSUNoc1pXNW5kR2dnUGlCeVpXMWhhVzVwYm1jcElIdGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlISmxiV0ZwYm1sdVoxeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRzExYzNRZ1ltVWdZVzRnWlhabGJpQnVkVzFpWlhJZ2IyWWdaR2xuYVhSelhHNGdJSFpoY2lCemRISk1aVzRnUFNCemRISnBibWN1YkdWdVozUm9YRzRnSUdsbUlDaHpkSEpNWlc0Z0pTQXlJQ0U5UFNBd0tTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2RKYm5aaGJHbGtJR2hsZUNCemRISnBibWNuS1Z4dVhHNGdJR2xtSUNoc1pXNW5kR2dnUGlCemRISk1aVzRnTHlBeUtTQjdYRzRnSUNBZ2JHVnVaM1JvSUQwZ2MzUnlUR1Z1SUM4Z01seHVJQ0I5WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2diR1Z1WjNSb095QXJLMmtwSUh0Y2JpQWdJQ0IyWVhJZ2NHRnljMlZrSUQwZ2NHRnljMlZKYm5Rb2MzUnlhVzVuTG5OMVluTjBjaWhwSUNvZ01pd2dNaWtzSURFMktWeHVJQ0FnSUdsbUlDaHBjMDVoVGlod1lYSnpaV1FwS1NCeVpYUjFjbTRnYVZ4dUlDQWdJR0oxWmx0dlptWnpaWFFnS3lCcFhTQTlJSEJoY25ObFpGeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhWMFpqaFhjbWwwWlNBb1luVm1MQ0J6ZEhKcGJtY3NJRzltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUhKbGRIVnliaUJpYkdsMFFuVm1abVZ5S0hWMFpqaFViMEo1ZEdWektITjBjbWx1Wnl3Z1luVm1MbXhsYm1kMGFDQXRJRzltWm5ObGRDa3NJR0oxWml3Z2IyWm1jMlYwTENCc1pXNW5kR2dwWEc1OVhHNWNibVoxYm1OMGFXOXVJR0Z6WTJscFYzSnBkR1VnS0dKMVppd2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNrZ2UxeHVJQ0J5WlhSMWNtNGdZbXhwZEVKMVptWmxjaWhoYzJOcGFWUnZRbmwwWlhNb2MzUnlhVzVuS1N3Z1luVm1MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2JHRjBhVzR4VjNKcGRHVWdLR0oxWml3Z2MzUnlhVzVuTENCdlptWnpaWFFzSUd4bGJtZDBhQ2tnZTF4dUlDQnlaWFIxY200Z1lYTmphV2xYY21sMFpTaGlkV1lzSUhOMGNtbHVaeXdnYjJabWMyVjBMQ0JzWlc1bmRHZ3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSmhjMlUyTkZkeWFYUmxJQ2hpZFdZc0lITjBjbWx1Wnl3Z2IyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdjbVYwZFhKdUlHSnNhWFJDZFdabVpYSW9ZbUZ6WlRZMFZHOUNlWFJsY3loemRISnBibWNwTENCaWRXWXNJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCMVkzTXlWM0pwZEdVZ0tHSjFaaXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDa2dlMXh1SUNCeVpYUjFjbTRnWW14cGRFSjFabVpsY2loMWRHWXhObXhsVkc5Q2VYUmxjeWh6ZEhKcGJtY3NJR0oxWmk1c1pXNW5kR2dnTFNCdlptWnpaWFFwTENCaWRXWXNJRzltWm5ObGRDd2diR1Z1WjNSb0tWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5keWFYUmxJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVWdLSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdnc0lHVnVZMjlrYVc1bktTQjdYRzRnSUM4dklFSjFabVpsY2lOM2NtbDBaU2h6ZEhKcGJtY3BYRzRnSUdsbUlDaHZabVp6WlhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJR1Z1WTI5a2FXNW5JRDBnSjNWMFpqZ25YRzRnSUNBZ2JHVnVaM1JvSUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnSUNCdlptWnpaWFFnUFNBd1hHNGdJQzh2SUVKMVptWmxjaU4zY21sMFpTaHpkSEpwYm1jc0lHVnVZMjlrYVc1bktWeHVJQ0I5SUdWc2MyVWdhV1lnS0d4bGJtZDBhQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lDWW1JSFI1Y0dWdlppQnZabVp6WlhRZ1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdaVzVqYjJScGJtY2dQU0J2Wm1aelpYUmNiaUFnSUNCc1pXNW5kR2dnUFNCMGFHbHpMbXhsYm1kMGFGeHVJQ0FnSUc5bVpuTmxkQ0E5SURCY2JpQWdMeThnUW5WbVptVnlJM2R5YVhSbEtITjBjbWx1Wnl3Z2IyWm1jMlYwV3l3Z2JHVnVaM1JvWFZzc0lHVnVZMjlrYVc1blhTbGNiaUFnZlNCbGJITmxJR2xtSUNocGMwWnBibWwwWlNodlptWnpaWFFwS1NCN1hHNGdJQ0FnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQWdJR2xtSUNocGMwWnBibWwwWlNoc1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNCc1pXNW5kR2dnUFNCc1pXNW5kR2dnZkNBd1hHNGdJQ0FnSUNCcFppQW9aVzVqYjJScGJtY2dQVDA5SUhWdVpHVm1hVzVsWkNrZ1pXNWpiMlJwYm1jZ1BTQW5kWFJtT0NkY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaVzVqYjJScGJtY2dQU0JzWlc1bmRHaGNiaUFnSUNBZ0lHeGxibWQwYUNBOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUgxY2JpQWdMeThnYkdWbllXTjVJSGR5YVhSbEtITjBjbWx1Wnl3Z1pXNWpiMlJwYm1jc0lHOW1abk5sZEN3Z2JHVnVaM1JvS1NBdElISmxiVzkyWlNCcGJpQjJNQzR4TTF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ2RDZFdabVpYSXVkM0pwZEdVb2MzUnlhVzVuTENCbGJtTnZaR2x1Wnl3Z2IyWm1jMlYwV3l3Z2JHVnVaM1JvWFNrZ2FYTWdibThnYkc5dVoyVnlJSE4xY0hCdmNuUmxaQ2RjYmlBZ0lDQXBYRzRnSUgxY2JseHVJQ0IyWVhJZ2NtVnRZV2x1YVc1bklEMGdkR2hwY3k1c1pXNW5kR2dnTFNCdlptWnpaWFJjYmlBZ2FXWWdLR3hsYm1kMGFDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElHeGxibWQwYUNBK0lISmxiV0ZwYm1sdVp5a2diR1Z1WjNSb0lEMGdjbVZ0WVdsdWFXNW5YRzVjYmlBZ2FXWWdLQ2h6ZEhKcGJtY3ViR1Z1WjNSb0lENGdNQ0FtSmlBb2JHVnVaM1JvSUR3Z01DQjhmQ0J2Wm1aelpYUWdQQ0F3S1NrZ2ZId2diMlptYzJWMElENGdkR2hwY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnblFYUjBaVzF3ZENCMGJ5QjNjbWwwWlNCdmRYUnphV1JsSUdKMVptWmxjaUJpYjNWdVpITW5LVnh1SUNCOVhHNWNiaUFnYVdZZ0tDRmxibU52WkdsdVp5a2daVzVqYjJScGJtY2dQU0FuZFhSbU9DZGNibHh1SUNCMllYSWdiRzkzWlhKbFpFTmhjMlVnUFNCbVlXeHpaVnh1SUNCbWIzSWdLRHM3S1NCN1hHNGdJQ0FnYzNkcGRHTm9JQ2hsYm1OdlpHbHVaeWtnZTF4dUlDQWdJQ0FnWTJGelpTQW5hR1Y0SnpwY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdobGVGZHlhWFJsS0hSb2FYTXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncFhHNWNiaUFnSUNBZ0lHTmhjMlVnSjNWMFpqZ25PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1MVGduT2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFhSbU9GZHlhWFJsS0hSb2FYTXNJSE4wY21sdVp5d2diMlptYzJWMExDQnNaVzVuZEdncFhHNWNiaUFnSUNBZ0lHTmhjMlVnSjJGelkybHBKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z6WTJscFYzSnBkR1VvZEdocGN5d2djM1J5YVc1bkxDQnZabVp6WlhRc0lHeGxibWQwYUNsY2JseHVJQ0FnSUNBZ1kyRnpaU0FuYkdGMGFXNHhKenBjYmlBZ0lDQWdJR05oYzJVZ0oySnBibUZ5ZVNjNlhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc1lYUnBiakZYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1WEc0Z0lDQWdJQ0JqWVhObElDZGlZWE5sTmpRbk9seHVJQ0FnSUNBZ0lDQXZMeUJYWVhKdWFXNW5PaUJ0WVhoTVpXNW5kR2dnYm05MElIUmhhMlZ1SUdsdWRHOGdZV05qYjNWdWRDQnBiaUJpWVhObE5qUlhjbWwwWlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWW1GelpUWTBWM0pwZEdVb2RHaHBjeXdnYzNSeWFXNW5MQ0J2Wm1aelpYUXNJR3hsYm1kMGFDbGNibHh1SUNBZ0lDQWdZMkZ6WlNBbmRXTnpNaWM2WEc0Z0lDQWdJQ0JqWVhObElDZDFZM010TWljNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZeE5teGxKenBjYmlBZ0lDQWdJR05oYzJVZ0ozVjBaaTB4Tm14bEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIVmpjekpYY21sMFpTaDBhR2x6TENCemRISnBibWNzSUc5bVpuTmxkQ3dnYkdWdVozUm9LVnh1WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0JwWmlBb2JHOTNaWEpsWkVOaGMyVXBJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFWdWEyNXZkMjRnWlc1amIyUnBibWM2SUNjZ0t5QmxibU52WkdsdVp5bGNiaUFnSUNBZ0lDQWdaVzVqYjJScGJtY2dQU0FvSnljZ0t5QmxibU52WkdsdVp5a3VkRzlNYjNkbGNrTmhjMlVvS1Z4dUlDQWdJQ0FnSUNCc2IzZGxjbVZrUTJGelpTQTlJSFJ5ZFdWY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1MGIwcFRUMDRnUFNCbWRXNWpkR2x2YmlCMGIwcFRUMDRnS0NrZ2UxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIUjVjR1U2SUNkQ2RXWm1aWEluTEZ4dUlDQWdJR1JoZEdFNklFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tIUm9hWE11WDJGeWNpQjhmQ0IwYUdsekxDQXdLVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdKaGMyVTJORk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnYVdZZ0tITjBZWEowSUQwOVBTQXdJQ1ltSUdWdVpDQTlQVDBnWW5WbUxteGxibWQwYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJpWVhObE5qUXVabkp2YlVKNWRHVkJjbkpoZVNoaWRXWXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjbVYwZFhKdUlHSmhjMlUyTkM1bWNtOXRRbmwwWlVGeWNtRjVLR0oxWmk1emJHbGpaU2h6ZEdGeWRDd2daVzVrS1NsY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQjFkR1k0VTJ4cFkyVWdLR0oxWml3Z2MzUmhjblFzSUdWdVpDa2dlMXh1SUNCbGJtUWdQU0JOWVhSb0xtMXBiaWhpZFdZdWJHVnVaM1JvTENCbGJtUXBYRzRnSUhaaGNpQnlaWE1nUFNCYlhWeHVYRzRnSUhaaGNpQnBJRDBnYzNSaGNuUmNiaUFnZDJocGJHVWdLR2tnUENCbGJtUXBJSHRjYmlBZ0lDQjJZWElnWm1seWMzUkNlWFJsSUQwZ1luVm1XMmxkWEc0Z0lDQWdkbUZ5SUdOdlpHVlFiMmx1ZENBOUlHNTFiR3hjYmlBZ0lDQjJZWElnWW5sMFpYTlFaWEpUWlhGMVpXNWpaU0E5SUNobWFYSnpkRUo1ZEdVZ1BpQXdlRVZHS1NBL0lEUmNiaUFnSUNBZ0lEb2dLR1pwY25OMFFubDBaU0ErSURCNFJFWXBJRDhnTTF4dUlDQWdJQ0FnT2lBb1ptbHljM1JDZVhSbElENGdNSGhDUmlrZ1B5QXlYRzRnSUNBZ0lDQTZJREZjYmx4dUlDQWdJR2xtSUNocElDc2dZbmwwWlhOUVpYSlRaWEYxWlc1alpTQThQU0JsYm1RcElIdGNiaUFnSUNBZ0lIWmhjaUJ6WldOdmJtUkNlWFJsTENCMGFHbHlaRUo1ZEdVc0lHWnZkWEowYUVKNWRHVXNJSFJsYlhCRGIyUmxVRzlwYm5SY2JseHVJQ0FnSUNBZ2MzZHBkR05vSUNoaWVYUmxjMUJsY2xObGNYVmxibU5sS1NCN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnTVRwY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWm1seWMzUkNlWFJsSUR3Z01IZzRNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDBnWm1seWMzUkNlWFJsWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lHTmhjMlVnTWpwY2JpQWdJQ0FnSUNBZ0lDQnpaV052Ym1SQ2VYUmxJRDBnWW5WbVcya2dLeUF4WFZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2dvYzJWamIyNWtRbmwwWlNBbUlEQjRRekFwSUQwOVBTQXdlRGd3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxd1EyOWtaVkJ2YVc1MElEMGdLR1pwY25OMFFubDBaU0FtSURCNE1VWXBJRHc4SURCNE5pQjhJQ2h6WldOdmJtUkNlWFJsSUNZZ01IZ3pSaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWlcxd1EyOWtaVkJ2YVc1MElENGdNSGczUmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUdOaGMyVWdNenBjYmlBZ0lDQWdJQ0FnSUNCelpXTnZibVJDZVhSbElEMGdZblZtVzJrZ0t5QXhYVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYSmtRbmwwWlNBOUlHSjFabHRwSUNzZ01sMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tITmxZMjl1WkVKNWRHVWdKaUF3ZUVNd0tTQTlQVDBnTUhnNE1DQW1KaUFvZEdocGNtUkNlWFJsSUNZZ01IaERNQ2tnUFQwOUlEQjRPREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCRGIyUmxVRzlwYm5RZ1BTQW9abWx5YzNSQ2VYUmxJQ1lnTUhoR0tTQThQQ0F3ZUVNZ2ZDQW9jMlZqYjI1a1FubDBaU0FtSURCNE0wWXBJRHc4SURCNE5pQjhJQ2gwYUdseVpFSjVkR1VnSmlBd2VETkdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJsYlhCRGIyUmxVRzlwYm5RZ1BpQXdlRGRHUmlBbUppQW9kR1Z0Y0VOdlpHVlFiMmx1ZENBOElEQjRSRGd3TUNCOGZDQjBaVzF3UTI5a1pWQnZhVzUwSUQ0Z01IaEVSa1pHS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUdOaGMyVWdORHBjYmlBZ0lDQWdJQ0FnSUNCelpXTnZibVJDZVhSbElEMGdZblZtVzJrZ0t5QXhYVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYSmtRbmwwWlNBOUlHSjFabHRwSUNzZ01sMWNiaUFnSUNBZ0lDQWdJQ0JtYjNWeWRHaENlWFJsSUQwZ1luVm1XMmtnS3lBelhWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnb2MyVmpiMjVrUW5sMFpTQW1JREI0UXpBcElEMDlQU0F3ZURnd0lDWW1JQ2gwYUdseVpFSjVkR1VnSmlBd2VFTXdLU0E5UFQwZ01IZzRNQ0FtSmlBb1ptOTFjblJvUW5sMFpTQW1JREI0UXpBcElEMDlQU0F3ZURnd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdRMjlrWlZCdmFXNTBJRDBnS0dacGNuTjBRbmwwWlNBbUlEQjRSaWtnUER3Z01IZ3hNaUI4SUNoelpXTnZibVJDZVhSbElDWWdNSGd6UmlrZ1BEd2dNSGhESUh3Z0tIUm9hWEprUW5sMFpTQW1JREI0TTBZcElEdzhJREI0TmlCOElDaG1iM1Z5ZEdoQ2VYUmxJQ1lnTUhnelJpbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBaVzF3UTI5a1pWQnZhVzUwSUQ0Z01IaEdSa1pHSUNZbUlIUmxiWEJEYjJSbFVHOXBiblFnUENBd2VERXhNREF3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQjBaVzF3UTI5a1pWQnZhVzUwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoamIyUmxVRzlwYm5RZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDOHZJSGRsSUdScFpDQnViM1FnWjJWdVpYSmhkR1VnWVNCMllXeHBaQ0JqYjJSbFVHOXBiblFnYzI4Z2FXNXpaWEowSUdGY2JpQWdJQ0FnSUM4dklISmxjR3hoWTJWdFpXNTBJR05vWVhJZ0tGVXJSa1pHUkNrZ1lXNWtJR0ZrZG1GdVkyVWdiMjVzZVNBeElHSjVkR1ZjYmlBZ0lDQWdJR052WkdWUWIybHVkQ0E5SURCNFJrWkdSRnh1SUNBZ0lDQWdZbmwwWlhOUVpYSlRaWEYxWlc1alpTQTlJREZjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052WkdWUWIybHVkQ0ErSURCNFJrWkdSaWtnZTF4dUlDQWdJQ0FnTHk4Z1pXNWpiMlJsSUhSdklIVjBaakUySUNoemRYSnliMmRoZEdVZ2NHRnBjaUJrWVc1alpTbGNiaUFnSUNBZ0lHTnZaR1ZRYjJsdWRDQXRQU0F3ZURFd01EQXdYRzRnSUNBZ0lDQnlaWE11Y0hWemFDaGpiMlJsVUc5cGJuUWdQajQrSURFd0lDWWdNSGd6UmtZZ2ZDQXdlRVE0TURBcFhHNGdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BTQXdlRVJETURBZ2ZDQmpiMlJsVUc5cGJuUWdKaUF3ZUROR1JseHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGN5NXdkWE5vS0dOdlpHVlFiMmx1ZENsY2JpQWdJQ0JwSUNzOUlHSjVkR1Z6VUdWeVUyVnhkV1Z1WTJWY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCa1pXTnZaR1ZEYjJSbFVHOXBiblJ6UVhKeVlYa29jbVZ6S1Z4dWZWeHVYRzR2THlCQ1lYTmxaQ0J2YmlCb2RIUndPaTh2YzNSaFkydHZkbVZ5Wm14dmR5NWpiMjB2WVM4eU1qYzBOekkzTWk4Mk9EQTNORElzSUhSb1pTQmljbTkzYzJWeUlIZHBkR2hjYmk4dklIUm9aU0JzYjNkbGMzUWdiR2x0YVhRZ2FYTWdRMmh5YjIxbExDQjNhWFJvSURCNE1UQXdNREFnWVhKbmN5NWNiaTh2SUZkbElHZHZJREVnYldGbmJtbDBkV1JsSUd4bGMzTXNJR1p2Y2lCellXWmxkSGxjYm5aaGNpQk5RVmhmUVZKSFZVMUZUbFJUWDB4RlRrZFVTQ0E5SURCNE1UQXdNRnh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYjJSbFVHOXBiblJ6UVhKeVlYa2dLR052WkdWUWIybHVkSE1wSUh0Y2JpQWdkbUZ5SUd4bGJpQTlJR052WkdWUWIybHVkSE11YkdWdVozUm9YRzRnSUdsbUlDaHNaVzRnUEQwZ1RVRllYMEZTUjFWTlJVNVVVMTlNUlU1SFZFZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTNWhjSEJzZVNoVGRISnBibWNzSUdOdlpHVlFiMmx1ZEhNcElDOHZJR0YyYjJsa0lHVjRkSEpoSUhOc2FXTmxLQ2xjYmlBZ2ZWeHVYRzRnSUM4dklFUmxZMjlrWlNCcGJpQmphSFZ1YTNNZ2RHOGdZWFp2YVdRZ1hDSmpZV3hzSUhOMFlXTnJJSE5wZW1VZ1pYaGpaV1ZrWldSY0lpNWNiaUFnZG1GeUlISmxjeUE5SUNjblhHNGdJSFpoY2lCcElEMGdNRnh1SUNCM2FHbHNaU0FvYVNBOElHeGxiaWtnZTF4dUlDQWdJSEpsY3lBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxMbUZ3Y0d4NUtGeHVJQ0FnSUNBZ1UzUnlhVzVuTEZ4dUlDQWdJQ0FnWTI5a1pWQnZhVzUwY3k1emJHbGpaU2hwTENCcElDczlJRTFCV0Y5QlVrZFZUVVZPVkZOZlRFVk9SMVJJS1Z4dUlDQWdJQ2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNibVoxYm1OMGFXOXVJR0Z6WTJscFUyeHBZMlVnS0dKMVppd2djM1JoY25Rc0lHVnVaQ2tnZTF4dUlDQjJZWElnY21WMElEMGdKeWRjYmlBZ1pXNWtJRDBnVFdGMGFDNXRhVzRvWW5WbUxteGxibWQwYUN3Z1pXNWtLVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dLeXRwS1NCN1hHNGdJQ0FnY21WMElDczlJRk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWW5WbVcybGRJQ1lnTUhnM1JpbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHeGhkR2x1TVZOc2FXTmxJQ2hpZFdZc0lITjBZWEowTENCbGJtUXBJSHRjYmlBZ2RtRnlJSEpsZENBOUlDY25YRzRnSUdWdVpDQTlJRTFoZEdndWJXbHVLR0oxWmk1c1pXNW5kR2dzSUdWdVpDbGNibHh1SUNCbWIzSWdLSFpoY2lCcElEMGdjM1JoY25RN0lHa2dQQ0JsYm1RN0lDc3JhU2tnZTF4dUlDQWdJSEpsZENBclBTQlRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR0oxWmx0cFhTbGNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVjBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaGxlRk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHeGxiaUE5SUdKMVppNXNaVzVuZEdoY2JseHVJQ0JwWmlBb0lYTjBZWEowSUh4OElITjBZWEowSUR3Z01Da2djM1JoY25RZ1BTQXdYRzRnSUdsbUlDZ2haVzVrSUh4OElHVnVaQ0E4SURBZ2ZId2daVzVrSUQ0Z2JHVnVLU0JsYm1RZ1BTQnNaVzVjYmx4dUlDQjJZWElnYjNWMElEMGdKeWRjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJSE4wWVhKME95QnBJRHdnWlc1a095QXJLMmtwSUh0Y2JpQWdJQ0J2ZFhRZ0t6MGdkRzlJWlhnb1luVm1XMmxkS1Z4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZFhSY2JuMWNibHh1Wm5WdVkzUnBiMjRnZFhSbU1UWnNaVk5zYVdObElDaGlkV1lzSUhOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHSjVkR1Z6SUQwZ1luVm1Mbk5zYVdObEtITjBZWEowTENCbGJtUXBYRzRnSUhaaGNpQnlaWE1nUFNBbkoxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU0FyUFNBeUtTQjdYRzRnSUNBZ2NtVnpJQ3M5SUZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1lubDBaWE5iYVYwZ0t5QmllWFJsYzF0cElDc2dNVjBnS2lBeU5UWXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjMXh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuTnNhV05sSUQwZ1puVnVZM1JwYjI0Z2MyeHBZMlVnS0hOMFlYSjBMQ0JsYm1RcElIdGNiaUFnZG1GeUlHeGxiaUE5SUhSb2FYTXViR1Z1WjNSb1hHNGdJSE4wWVhKMElEMGdmbjV6ZEdGeWRGeHVJQ0JsYm1RZ1BTQmxibVFnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JR3hsYmlBNklINStaVzVrWEc1Y2JpQWdhV1lnS0hOMFlYSjBJRHdnTUNrZ2UxeHVJQ0FnSUhOMFlYSjBJQ3M5SUd4bGJseHVJQ0FnSUdsbUlDaHpkR0Z5ZENBOElEQXBJSE4wWVhKMElEMGdNRnh1SUNCOUlHVnNjMlVnYVdZZ0tITjBZWEowSUQ0Z2JHVnVLU0I3WEc0Z0lDQWdjM1JoY25RZ1BTQnNaVzVjYmlBZ2ZWeHVYRzRnSUdsbUlDaGxibVFnUENBd0tTQjdYRzRnSUNBZ1pXNWtJQ3M5SUd4bGJseHVJQ0FnSUdsbUlDaGxibVFnUENBd0tTQmxibVFnUFNBd1hHNGdJSDBnWld4elpTQnBaaUFvWlc1a0lENGdiR1Z1S1NCN1hHNGdJQ0FnWlc1a0lEMGdiR1Z1WEc0Z0lIMWNibHh1SUNCcFppQW9aVzVrSUR3Z2MzUmhjblFwSUdWdVpDQTlJSE4wWVhKMFhHNWNiaUFnZG1GeUlHNWxkMEoxWmx4dUlDQnBaaUFvUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUh0Y2JpQWdJQ0J1WlhkQ2RXWWdQU0IwYUdsekxuTjFZbUZ5Y21GNUtITjBZWEowTENCbGJtUXBYRzRnSUNBZ2JtVjNRblZtTGw5ZmNISnZkRzlmWHlBOUlFSjFabVpsY2k1d2NtOTBiM1I1Y0dWY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdjMnhwWTJWTVpXNGdQU0JsYm1RZ0xTQnpkR0Z5ZEZ4dUlDQWdJRzVsZDBKMVppQTlJRzVsZHlCQ2RXWm1aWElvYzJ4cFkyVk1aVzRzSUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOc2FXTmxUR1Z1T3lBcksya3BJSHRjYmlBZ0lDQWdJRzVsZDBKMVpsdHBYU0E5SUhSb2FYTmJhU0FySUhOMFlYSjBYVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnVaWGRDZFdaY2JuMWNibHh1THlwY2JpQXFJRTVsWldRZ2RHOGdiV0ZyWlNCemRYSmxJSFJvWVhRZ1luVm1abVZ5SUdsemJpZDBJSFJ5ZVdsdVp5QjBieUIzY21sMFpTQnZkWFFnYjJZZ1ltOTFibVJ6TGx4dUlDb3ZYRzVtZFc1amRHbHZiaUJqYUdWamEwOW1abk5sZENBb2IyWm1jMlYwTENCbGVIUXNJR3hsYm1kMGFDa2dlMXh1SUNCcFppQW9LRzltWm5ObGRDQWxJREVwSUNFOVBTQXdJSHg4SUc5bVpuTmxkQ0E4SURBcElIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2R2Wm1aelpYUWdhWE1nYm05MElIVnBiblFuS1Z4dUlDQnBaaUFvYjJabWMyVjBJQ3NnWlhoMElENGdiR1Z1WjNSb0tTQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWduVkhKNWFXNW5JSFJ2SUdGalkyVnpjeUJpWlhsdmJtUWdZblZtWm1WeUlHeGxibWQwYUNjcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpGVkpiblJNUlNBOUlHWjFibU4wYVc5dUlISmxZV1JWU1c1MFRFVWdLRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNCaWVYUmxUR1Z1WjNSb0lEMGdZbmwwWlV4bGJtZDBhQ0I4SURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQmllWFJsVEdWdVozUm9MQ0IwYUdsekxteGxibWQwYUNsY2JseHVJQ0IyWVhJZ2RtRnNJRDBnZEdocGMxdHZabVp6WlhSZFhHNGdJSFpoY2lCdGRXd2dQU0F4WEc0Z0lIWmhjaUJwSUQwZ01GeHVJQ0IzYUdsc1pTQW9LeXRwSUR3Z1lubDBaVXhsYm1kMGFDQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIWmhiQ0FyUFNCMGFHbHpXMjltWm5ObGRDQXJJR2xkSUNvZ2JYVnNYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdkbUZzWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkZWSmJuUkNSU0E5SUdaMWJtTjBhVzl1SUhKbFlXUlZTVzUwUWtVZ0tHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JpZVhSbFRHVnVaM1JvSUQwZ1lubDBaVXhsYm1kMGFDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnZTF4dUlDQWdJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUgxY2JseHVJQ0IyWVhJZ2RtRnNJRDBnZEdocGMxdHZabVp6WlhRZ0t5QXRMV0o1ZEdWTVpXNW5kR2hkWEc0Z0lIWmhjaUJ0ZFd3Z1BTQXhYRzRnSUhkb2FXeGxJQ2hpZVhSbFRHVnVaM1JvSUQ0Z01DQW1KaUFvYlhWc0lDbzlJREI0TVRBd0tTa2dlMXh1SUNBZ0lIWmhiQ0FyUFNCMGFHbHpXMjltWm5ObGRDQXJJQzB0WW5sMFpVeGxibWQwYUYwZ0tpQnRkV3hjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUIyWVd4Y2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV5WldGa1ZVbHVkRGdnUFNCbWRXNWpkR2x2YmlCeVpXRmtWVWx1ZERnZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0F4TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJSFJvYVhOYmIyWm1jMlYwWFZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBNVFpNUlNBOUlHWjFibU4wYVc5dUlISmxZV1JWU1c1ME1UWk1SU0FvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lESXNJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2RHaHBjMXR2Wm1aelpYUmRJSHdnS0hSb2FYTmJiMlptYzJWMElDc2dNVjBnUER3Z09DbGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtWVWx1ZERFMlFrVWdQU0JtZFc1amRHbHZiaUJ5WldGa1ZVbHVkREUyUWtVZ0tHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0UFptWnpaWFFvYjJabWMyVjBMQ0F5TENCMGFHbHpMbXhsYm1kMGFDbGNiaUFnY21WMGRYSnVJQ2gwYUdselcyOW1abk5sZEYwZ1BEd2dPQ2tnZkNCMGFHbHpXMjltWm5ObGRDQXJJREZkWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkZWSmJuUXpNa3hGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRlZKYm5Rek1reEZJQ2h2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z05Dd2dkR2hwY3k1c1pXNW5kR2dwWEc1Y2JpQWdjbVYwZFhKdUlDZ29kR2hwYzF0dlptWnpaWFJkS1NCOFhHNGdJQ0FnSUNBb2RHaHBjMXR2Wm1aelpYUWdLeUF4WFNBOFBDQTRLU0I4WEc0Z0lDQWdJQ0FvZEdocGMxdHZabVp6WlhRZ0t5QXlYU0E4UENBeE5pa3BJQ3RjYmlBZ0lDQWdJQ2gwYUdselcyOW1abk5sZENBcklETmRJQ29nTUhneE1EQXdNREF3S1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSVlNXNTBNekpDUlNBOUlHWjFibU4wYVc5dUlISmxZV1JWU1c1ME16SkNSU0FvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEUXNJSFJvYVhNdWJHVnVaM1JvS1Z4dVhHNGdJSEpsZEhWeWJpQW9kR2hwYzF0dlptWnpaWFJkSUNvZ01IZ3hNREF3TURBd0tTQXJYRzRnSUNBZ0tDaDBhR2x6VzI5bVpuTmxkQ0FySURGZElEdzhJREUyS1NCOFhHNGdJQ0FnS0hSb2FYTmJiMlptYzJWMElDc2dNbDBnUER3Z09Da2dmRnh1SUNBZ0lIUm9hWE5iYjJabWMyVjBJQ3NnTTEwcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFbHVkRXhGSUQwZ1puVnVZM1JwYjI0Z2NtVmhaRWx1ZEV4RklDaHZabVp6WlhRc0lHSjVkR1ZNWlc1bmRHZ3NJRzV2UVhOelpYSjBLU0I3WEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENCOElEQmNiaUFnWW5sMFpVeGxibWQwYUNBOUlHSjVkR1ZNWlc1bmRHZ2dmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUdOb1pXTnJUMlptYzJWMEtHOW1abk5sZEN3Z1lubDBaVXhsYm1kMGFDd2dkR2hwY3k1c1pXNW5kR2dwWEc1Y2JpQWdkbUZ5SUhaaGJDQTlJSFJvYVhOYmIyWm1jMlYwWFZ4dUlDQjJZWElnYlhWc0lEMGdNVnh1SUNCMllYSWdhU0E5SURCY2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUdKNWRHVk1aVzVuZEdnZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCMllXd2dLejBnZEdocGMxdHZabVp6WlhRZ0t5QnBYU0FxSUcxMWJGeHVJQ0I5WEc0Z0lHMTFiQ0FxUFNBd2VEZ3dYRzVjYmlBZ2FXWWdLSFpoYkNBK1BTQnRkV3dwSUhaaGJDQXRQU0JOWVhSb0xuQnZkeWd5TENBNElDb2dZbmwwWlV4bGJtZDBhQ2xjYmx4dUlDQnlaWFIxY200Z2RtRnNYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZEVKRklEMGdablZ1WTNScGIyNGdjbVZoWkVsdWRFSkZJQ2h2Wm1aelpYUXNJR0o1ZEdWTVpXNW5kR2dzSUc1dlFYTnpaWEowS1NCN1hHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ1lubDBaVXhsYm1kMGFDQTlJR0o1ZEdWTVpXNW5kR2dnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnZEdocGN5NXNaVzVuZEdncFhHNWNiaUFnZG1GeUlHa2dQU0JpZVhSbFRHVnVaM1JvWEc0Z0lIWmhjaUJ0ZFd3Z1BTQXhYRzRnSUhaaGNpQjJZV3dnUFNCMGFHbHpXMjltWm5ObGRDQXJJQzB0YVYxY2JpQWdkMmhwYkdVZ0tHa2dQaUF3SUNZbUlDaHRkV3dnS2owZ01IZ3hNREFwS1NCN1hHNGdJQ0FnZG1Gc0lDczlJSFJvYVhOYmIyWm1jMlYwSUNzZ0xTMXBYU0FxSUcxMWJGeHVJQ0I5WEc0Z0lHMTFiQ0FxUFNBd2VEZ3dYRzVjYmlBZ2FXWWdLSFpoYkNBK1BTQnRkV3dwSUhaaGJDQXRQU0JOWVhSb0xuQnZkeWd5TENBNElDb2dZbmwwWlV4bGJtZDBhQ2xjYmx4dUlDQnlaWFIxY200Z2RtRnNYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERnZ1BTQm1kVzVqZEdsdmJpQnlaV0ZrU1c1ME9DQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURFc0lIUm9hWE11YkdWdVozUm9LVnh1SUNCcFppQW9JU2gwYUdselcyOW1abk5sZEYwZ0ppQXdlRGd3S1NrZ2NtVjBkWEp1SUNoMGFHbHpXMjltWm5ObGRGMHBYRzRnSUhKbGRIVnliaUFvS0RCNFptWWdMU0IwYUdselcyOW1abk5sZEYwZ0t5QXhLU0FxSUMweEtWeHVmVnh1WEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5KbFlXUkpiblF4Tmt4RklEMGdablZ1WTNScGIyNGdjbVZoWkVsdWRERTJURVVnS0c5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ1kyaGxZMnRQWm1aelpYUW9iMlptYzJWMExDQXlMQ0IwYUdsekxteGxibWQwYUNsY2JpQWdkbUZ5SUhaaGJDQTlJSFJvYVhOYmIyWm1jMlYwWFNCOElDaDBhR2x6VzI5bVpuTmxkQ0FySURGZElEdzhJRGdwWEc0Z0lISmxkSFZ5YmlBb2RtRnNJQ1lnTUhnNE1EQXdLU0EvSUhaaGJDQjhJREI0UmtaR1JqQXdNREFnT2lCMllXeGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1eVpXRmtTVzUwTVRaQ1JTQTlJR1oxYm1OMGFXOXVJSEpsWVdSSmJuUXhOa0pGSUNodlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yVDJabWMyVjBLRzltWm5ObGRDd2dNaXdnZEdocGN5NXNaVzVuZEdncFhHNGdJSFpoY2lCMllXd2dQU0IwYUdselcyOW1abk5sZENBcklERmRJSHdnS0hSb2FYTmJiMlptYzJWMFhTQThQQ0E0S1Z4dUlDQnlaWFIxY200Z0tIWmhiQ0FtSURCNE9EQXdNQ2tnUHlCMllXd2dmQ0F3ZUVaR1JrWXdNREF3SURvZ2RtRnNYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRWx1ZERNeVRFVWdQU0JtZFc1amRHbHZiaUJ5WldGa1NXNTBNekpNUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJRFFzSUhSb2FYTXViR1Z1WjNSb0tWeHVYRzRnSUhKbGRIVnliaUFvZEdocGMxdHZabVp6WlhSZEtTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTVYwZ1BEd2dPQ2tnZkZ4dUlDQWdJQ2gwYUdselcyOW1abk5sZENBcklESmRJRHc4SURFMktTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTTEwZ1BEd2dNalFwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVjbVZoWkVsdWRETXlRa1VnUFNCbWRXNWpkR2x2YmlCeVpXRmtTVzUwTXpKQ1JTQW9iMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwOW1abk5sZENodlptWnpaWFFzSURRc0lIUm9hWE11YkdWdVozUm9LVnh1WEc0Z0lISmxkSFZ5YmlBb2RHaHBjMXR2Wm1aelpYUmRJRHc4SURJMEtTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTVYwZ1BEd2dNVFlwSUh4Y2JpQWdJQ0FvZEdocGMxdHZabVp6WlhRZ0t5QXlYU0E4UENBNEtTQjhYRzRnSUNBZ0tIUm9hWE5iYjJabWMyVjBJQ3NnTTEwcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1Y21WaFpFWnNiMkYwVEVVZ1BTQm1kVzVqZEdsdmJpQnlaV0ZrUm14dllYUk1SU0FvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEUXNJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLSFJvYVhNc0lHOW1abk5sZEN3Z2RISjFaU3dnTWpNc0lEUXBYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVpzYjJGMFFrVWdQU0JtZFc1amRHbHZiaUJ5WldGa1JteHZZWFJDUlNBb2IyWm1jMlYwTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTA5bVpuTmxkQ2h2Wm1aelpYUXNJRFFzSUhSb2FYTXViR1Z1WjNSb0tWeHVJQ0J5WlhSMWNtNGdhV1ZsWlRjMU5DNXlaV0ZrS0hSb2FYTXNJRzltWm5ObGRDd2dabUZzYzJVc0lESXpMQ0EwS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbkpsWVdSRWIzVmliR1ZNUlNBOUlHWjFibU4wYVc5dUlISmxZV1JFYjNWaWJHVk1SU0FvYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMDltWm5ObGRDaHZabVp6WlhRc0lEZ3NJSFJvYVhNdWJHVnVaM1JvS1Z4dUlDQnlaWFIxY200Z2FXVmxaVGMxTkM1eVpXRmtLSFJvYVhNc0lHOW1abk5sZEN3Z2RISjFaU3dnTlRJc0lEZ3BYRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWNtVmhaRVJ2ZFdKc1pVSkZJRDBnWm5WdVkzUnBiMjRnY21WaFpFUnZkV0pzWlVKRklDaHZabVp6WlhRc0lHNXZRWE56WlhKMEtTQjdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclQyWm1jMlYwS0c5bVpuTmxkQ3dnT0N3Z2RHaHBjeTVzWlc1bmRHZ3BYRzRnSUhKbGRIVnliaUJwWldWbE56VTBMbkpsWVdRb2RHaHBjeXdnYjJabWMyVjBMQ0JtWVd4elpTd2dOVElzSURncFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOb1pXTnJTVzUwSUNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHVjRkQ3dnYldGNExDQnRhVzRwSUh0Y2JpQWdhV1lnS0NGQ2RXWm1aWEl1YVhOQ2RXWm1aWElvWW5WbUtTa2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduWENKaWRXWm1aWEpjSWlCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ1FuVm1abVZ5SUdsdWMzUmhibU5sSnlsY2JpQWdhV1lnS0haaGJIVmxJRDRnYldGNElIeDhJSFpoYkhWbElEd2diV2x1S1NCMGFISnZkeUJ1WlhjZ1VtRnVaMlZGY25KdmNpZ25YQ0oyWVd4MVpWd2lJR0Z5WjNWdFpXNTBJR2x6SUc5MWRDQnZaaUJpYjNWdVpITW5LVnh1SUNCcFppQW9iMlptYzJWMElDc2daWGgwSUQ0Z1luVm1MbXhsYm1kMGFDa2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBsdVpHVjRJRzkxZENCdlppQnlZVzVuWlNjcFhHNTlYRzVjYmtKMVptWmxjaTV3Y205MGIzUjVjR1V1ZDNKcGRHVlZTVzUwVEVVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlZWSmJuUk1SU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdkbUZzZFdVZ1BTQXJkbUZzZFdWY2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNCaWVYUmxUR1Z1WjNSb0lEMGdZbmwwWlV4bGJtZDBhQ0I4SURCY2JpQWdhV1lnS0NGdWIwRnpjMlZ5ZENrZ2UxeHVJQ0FnSUhaaGNpQnRZWGhDZVhSbGN5QTlJRTFoZEdndWNHOTNLRElzSURnZ0tpQmllWFJsVEdWdVozUm9LU0F0SURGY2JpQWdJQ0JqYUdWamEwbHVkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCaWVYUmxUR1Z1WjNSb0xDQnRZWGhDZVhSbGN5d2dNQ2xjYmlBZ2ZWeHVYRzRnSUhaaGNpQnRkV3dnUFNBeFhHNGdJSFpoY2lCcElEMGdNRnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0IyWVd4MVpTQW1JREI0UmtaY2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUdKNWRHVk1aVzVuZEdnZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJR2xkSUQwZ0tIWmhiSFZsSUM4Z2JYVnNLU0FtSURCNFJrWmNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnZabVp6WlhRZ0t5QmllWFJsVEdWdVozUm9YRzU5WEc1Y2JrSjFabVpsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1ZWU1c1MFFrVWdQU0JtZFc1amRHbHZiaUIzY21sMFpWVkpiblJDUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnWW5sMFpVeGxibWQwYUN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQmllWFJsVEdWdVozUm9JRDBnWW5sMFpVeGxibWQwYUNCOElEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dlMXh1SUNBZ0lIWmhjaUJ0WVhoQ2VYUmxjeUE5SUUxaGRHZ3VjRzkzS0RJc0lEZ2dLaUJpZVhSbFRHVnVaM1JvS1NBdElERmNiaUFnSUNCamFHVmphMGx1ZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQmllWFJsVEdWdVozUm9MQ0J0WVhoQ2VYUmxjeXdnTUNsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwSUQwZ1lubDBaVXhsYm1kMGFDQXRJREZjYmlBZ2RtRnlJRzExYkNBOUlERmNiaUFnZEdocGMxdHZabVp6WlhRZ0t5QnBYU0E5SUhaaGJIVmxJQ1lnTUhoR1JseHVJQ0IzYUdsc1pTQW9MUzFwSUQ0OUlEQWdKaVlnS0cxMWJDQXFQU0F3ZURFd01Da3BJSHRjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySUdsZElEMGdLSFpoYkhWbElDOGdiWFZzS1NBbUlEQjRSa1pjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUJpZVhSbFRHVnVaM1JvWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWVlNXNTBPQ0E5SUdaMWJtTjBhVzl1SUhkeWFYUmxWVWx1ZERnZ0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSFpoYkhWbElEMGdLM1poYkhWbFhHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z01Td2dNSGhtWml3Z01DbGNiaUFnYVdZZ0tDRkNkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dkbUZzZFdVZ1BTQk5ZWFJvTG1ac2IyOXlLSFpoYkhWbEtWeHVJQ0IwYUdselcyOW1abk5sZEYwZ1BTQW9kbUZzZFdVZ0ppQXdlR1ptS1Z4dUlDQnlaWFIxY200Z2IyWm1jMlYwSUNzZ01WeHVmVnh1WEc1bWRXNWpkR2x2YmlCdlltcGxZM1JYY21sMFpWVkpiblF4TmlBb1luVm1MQ0IyWVd4MVpTd2diMlptYzJWMExDQnNhWFIwYkdWRmJtUnBZVzRwSUh0Y2JpQWdhV1lnS0haaGJIVmxJRHdnTUNrZ2RtRnNkV1VnUFNBd2VHWm1abVlnS3lCMllXeDFaU0FySURGY2JpQWdabTl5SUNoMllYSWdhU0E5SURBc0lHb2dQU0JOWVhSb0xtMXBiaWhpZFdZdWJHVnVaM1JvSUMwZ2IyWm1jMlYwTENBeUtUc2dhU0E4SUdvN0lDc3JhU2tnZTF4dUlDQWdJR0oxWmx0dlptWnpaWFFnS3lCcFhTQTlJQ2gyWVd4MVpTQW1JQ2d3ZUdabUlEdzhJQ2c0SUNvZ0tHeHBkSFJzWlVWdVpHbGhiaUEvSUdrZ09pQXhJQzBnYVNrcEtTa2dQajQrWEc0Z0lDQWdJQ0FvYkdsMGRHeGxSVzVrYVdGdUlEOGdhU0E2SURFZ0xTQnBLU0FxSURoY2JpQWdmVnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsVlVsdWRERTJURVVnUFNCbWRXNWpkR2x2YmlCM2NtbDBaVlZKYm5ReE5reEZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCMllXeDFaU0E5SUN0MllXeDFaVnh1SUNCdlptWnpaWFFnUFNCdlptWnpaWFFnZkNBd1hHNGdJR2xtSUNnaGJtOUJjM05sY25RcElHTm9aV05yU1c1MEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJRElzSURCNFptWm1aaXdnTUNsY2JpQWdhV1lnS0VKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVS1NCN1hHNGdJQ0FnZEdocGMxdHZabVp6WlhSZElEMGdLSFpoYkhWbElDWWdNSGhtWmlsY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklERmRJRDBnS0haaGJIVmxJRDQrUGlBNEtWeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lHOWlhbVZqZEZkeWFYUmxWVWx1ZERFMktIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJSFJ5ZFdVcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURKY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpWVkpiblF4TmtKRklEMGdablZ1WTNScGIyNGdkM0pwZEdWVlNXNTBNVFpDUlNBb2RtRnNkV1VzSUc5bVpuTmxkQ3dnYm05QmMzTmxjblFwSUh0Y2JpQWdkbUZzZFdVZ1BTQXJkbUZzZFdWY2JpQWdiMlptYzJWMElEMGdiMlptYzJWMElId2dNRnh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0JqYUdWamEwbHVkQ2gwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENBeUxDQXdlR1ptWm1Zc0lEQXBYRzRnSUdsbUlDaENkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dlMXh1SUNBZ0lIUm9hWE5iYjJabWMyVjBYU0E5SUNoMllXeDFaU0ErUGo0Z09DbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJREZkSUQwZ0tIWmhiSFZsSUNZZ01IaG1aaWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2WW1wbFkzUlhjbWwwWlZWSmJuUXhOaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCbVlXeHpaU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dNbHh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZZbXBsWTNSWGNtbDBaVlZKYm5Rek1pQW9ZblZtTENCMllXeDFaU3dnYjJabWMyVjBMQ0JzYVhSMGJHVkZibVJwWVc0cElIdGNiaUFnYVdZZ0tIWmhiSFZsSUR3Z01Da2dkbUZzZFdVZ1BTQXdlR1ptWm1abVptWm1JQ3NnZG1Gc2RXVWdLeUF4WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcUlEMGdUV0YwYUM1dGFXNG9ZblZtTG14bGJtZDBhQ0F0SUc5bVpuTmxkQ3dnTkNrN0lHa2dQQ0JxT3lBcksya3BJSHRjYmlBZ0lDQmlkV1piYjJabWMyVjBJQ3NnYVYwZ1BTQW9kbUZzZFdVZ1BqNCtJQ2hzYVhSMGJHVkZibVJwWVc0Z1B5QnBJRG9nTXlBdElHa3BJQ29nT0NrZ0ppQXdlR1ptWEc0Z0lIMWNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVlZKYm5Rek1reEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVlZTVzUwTXpKTVJTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnZG1Gc2RXVWdQU0FyZG1Gc2RXVmNiaUFnYjJabWMyVjBJRDBnYjJabWMyVjBJSHdnTUZ4dUlDQnBaaUFvSVc1dlFYTnpaWEowS1NCamFHVmphMGx1ZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQTBMQ0F3ZUdabVptWm1abVptTENBd0tWeHVJQ0JwWmlBb1FuVm1abVZ5TGxSWlVFVkVYMEZTVWtGWlgxTlZVRkJQVWxRcElIdGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJRE5kSUQwZ0tIWmhiSFZsSUQ0K1BpQXlOQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySURKZElEMGdLSFpoYkhWbElENCtQaUF4TmlsY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklERmRJRDBnS0haaGJIVmxJRDQrUGlBNEtWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMFhTQTlJQ2gyWVd4MVpTQW1JREI0Wm1ZcFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnFaV04wVjNKcGRHVlZTVzUwTXpJb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTkZ4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFZVbHVkRE15UWtVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlZWSmJuUXpNa0pGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQjJZV3gxWlNBOUlDdDJZV3gxWlZ4dUlDQnZabVp6WlhRZ1BTQnZabVp6WlhRZ2ZDQXdYRzRnSUdsbUlDZ2hibTlCYzNObGNuUXBJR05vWldOclNXNTBLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSURRc0lEQjRabVptWm1abVptWXNJREFwWEc0Z0lHbG1JQ2hDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZTF4dUlDQWdJSFJvYVhOYmIyWm1jMlYwWFNBOUlDaDJZV3gxWlNBK1BqNGdNalFwWEc0Z0lDQWdkR2hwYzF0dlptWnpaWFFnS3lBeFhTQTlJQ2gyWVd4MVpTQStQajRnTVRZcFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXlYU0E5SUNoMllXeDFaU0ErUGo0Z09DbGNiaUFnSUNCMGFHbHpXMjltWm5ObGRDQXJJRE5kSUQwZ0tIWmhiSFZsSUNZZ01IaG1aaWxjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0J2WW1wbFkzUlhjbWwwWlZWSmJuUXpNaWgwYUdsekxDQjJZV3gxWlN3Z2IyWm1jMlYwTENCbVlXeHpaU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dORnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1MFRFVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVbHVkRXhGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0IyWVhJZ2JHbHRhWFFnUFNCTllYUm9MbkJ2ZHlneUxDQTRJQ29nWW5sMFpVeGxibWQwYUNBdElERXBYRzVjYmlBZ0lDQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCc2FXMXBkQ0F0SURFc0lDMXNhVzFwZENsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwSUQwZ01GeHVJQ0IyWVhJZ2JYVnNJRDBnTVZ4dUlDQjJZWElnYzNWaUlEMGdNRnh1SUNCMGFHbHpXMjltWm5ObGRGMGdQU0IyWVd4MVpTQW1JREI0UmtaY2JpQWdkMmhwYkdVZ0tDc3JhU0E4SUdKNWRHVk1aVzVuZEdnZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCcFppQW9kbUZzZFdVZ1BDQXdJQ1ltSUhOMVlpQTlQVDBnTUNBbUppQjBhR2x6VzI5bVpuTmxkQ0FySUdrZ0xTQXhYU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdjM1ZpSUQwZ01WeHVJQ0FnSUgxY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnS0NoMllXeDFaU0F2SUcxMWJDa2dQajRnTUNrZ0xTQnpkV0lnSmlBd2VFWkdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dZbmwwWlV4bGJtZDBhRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1MFFrVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVbHVkRUpGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0IyWVd4MVpTQTlJQ3QyWVd4MVpWeHVJQ0J2Wm1aelpYUWdQU0J2Wm1aelpYUWdmQ0F3WEc0Z0lHbG1JQ2doYm05QmMzTmxjblFwSUh0Y2JpQWdJQ0IyWVhJZ2JHbHRhWFFnUFNCTllYUm9MbkJ2ZHlneUxDQTRJQ29nWW5sMFpVeGxibWQwYUNBdElERXBYRzVjYmlBZ0lDQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0JpZVhSbFRHVnVaM1JvTENCc2FXMXBkQ0F0SURFc0lDMXNhVzFwZENsY2JpQWdmVnh1WEc0Z0lIWmhjaUJwSUQwZ1lubDBaVXhsYm1kMGFDQXRJREZjYmlBZ2RtRnlJRzExYkNBOUlERmNiaUFnZG1GeUlITjFZaUE5SURCY2JpQWdkR2hwYzF0dlptWnpaWFFnS3lCcFhTQTlJSFpoYkhWbElDWWdNSGhHUmx4dUlDQjNhR2xzWlNBb0xTMXBJRDQ5SURBZ0ppWWdLRzExYkNBcVBTQXdlREV3TUNrcElIdGNiaUFnSUNCcFppQW9kbUZzZFdVZ1BDQXdJQ1ltSUhOMVlpQTlQVDBnTUNBbUppQjBhR2x6VzI5bVpuTmxkQ0FySUdrZ0t5QXhYU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdjM1ZpSUQwZ01WeHVJQ0FnSUgxY2JpQWdJQ0IwYUdselcyOW1abk5sZENBcklHbGRJRDBnS0NoMllXeDFaU0F2SUcxMWJDa2dQajRnTUNrZ0xTQnpkV0lnSmlBd2VFWkdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdiMlptYzJWMElDc2dZbmwwWlV4bGJtZDBhRnh1ZlZ4dVhHNUNkV1ptWlhJdWNISnZkRzkwZVhCbExuZHlhWFJsU1c1ME9DQTlJR1oxYm1OMGFXOXVJSGR5YVhSbFNXNTBPQ0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0F4TENBd2VEZG1MQ0F0TUhnNE1DbGNiaUFnYVdZZ0tDRkNkV1ptWlhJdVZGbFFSVVJmUVZKU1FWbGZVMVZRVUU5U1ZDa2dkbUZzZFdVZ1BTQk5ZWFJvTG1ac2IyOXlLSFpoYkhWbEtWeHVJQ0JwWmlBb2RtRnNkV1VnUENBd0tTQjJZV3gxWlNBOUlEQjRabVlnS3lCMllXeDFaU0FySURGY2JpQWdkR2hwYzF0dlptWnpaWFJkSUQwZ0tIWmhiSFZsSUNZZ01IaG1aaWxjYmlBZ2NtVjBkWEp1SUc5bVpuTmxkQ0FySURGY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVbHVkREUyVEVVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlVsdWRERTJURVVnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lIWmhiSFZsSUQwZ0szWmhiSFZsWEc0Z0lHOW1abk5sZENBOUlHOW1abk5sZENCOElEQmNiaUFnYVdZZ0tDRnViMEZ6YzJWeWRDa2dZMmhsWTJ0SmJuUW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTWl3Z01IZzNabVptTENBdE1IZzRNREF3S1Z4dUlDQnBaaUFvUW5WbVptVnlMbFJaVUVWRVgwRlNVa0ZaWDFOVlVGQlBVbFFwSUh0Y2JpQWdJQ0IwYUdselcyOW1abk5sZEYwZ1BTQW9kbUZzZFdVZ0ppQXdlR1ptS1Z4dUlDQWdJSFJvYVhOYmIyWm1jMlYwSUNzZ01WMGdQU0FvZG1Gc2RXVWdQajQrSURncFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2IySnFaV04wVjNKcGRHVlZTVzUwTVRZb2RHaHBjeXdnZG1Gc2RXVXNJRzltWm5ObGRDd2dkSEoxWlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTWx4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBNVFpDUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsU1c1ME1UWkNSU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0F5TENBd2VEZG1abVlzSUMwd2VEZ3dNREFwWEc0Z0lHbG1JQ2hDZFdabVpYSXVWRmxRUlVSZlFWSlNRVmxmVTFWUVVFOVNWQ2tnZTF4dUlDQWdJSFJvYVhOYmIyWm1jMlYwWFNBOUlDaDJZV3gxWlNBK1BqNGdPQ2xjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySURGZElEMGdLSFpoYkhWbElDWWdNSGhtWmlsY2JpQWdmU0JsYkhObElIdGNiaUFnSUNCdlltcGxZM1JYY21sMFpWVkpiblF4TmloMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQm1ZV3h6WlNsY2JpQWdmVnh1SUNCeVpYUjFjbTRnYjJabWMyVjBJQ3NnTWx4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFNXNTBNekpNUlNBOUlHWjFibU4wYVc5dUlIZHlhWFJsU1c1ME16Sk1SU0FvZG1Gc2RXVXNJRzltWm5ObGRDd2dibTlCYzNObGNuUXBJSHRjYmlBZ2RtRnNkV1VnUFNBcmRtRnNkV1ZjYmlBZ2IyWm1jMlYwSUQwZ2IyWm1jMlYwSUh3Z01GeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQmphR1ZqYTBsdWRDaDBhR2x6TENCMllXeDFaU3dnYjJabWMyVjBMQ0EwTENBd2VEZG1abVptWm1abUxDQXRNSGc0TURBd01EQXdNQ2xjYmlBZ2FXWWdLRUoxWm1abGNpNVVXVkJGUkY5QlVsSkJXVjlUVlZCUVQxSlVLU0I3WEc0Z0lDQWdkR2hwYzF0dlptWnpaWFJkSUQwZ0tIWmhiSFZsSUNZZ01IaG1aaWxjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkQ0FySURGZElEMGdLSFpoYkhWbElENCtQaUE0S1Z4dUlDQWdJSFJvYVhOYmIyWm1jMlYwSUNzZ01sMGdQU0FvZG1Gc2RXVWdQajQrSURFMktWeHVJQ0FnSUhSb2FYTmJiMlptYzJWMElDc2dNMTBnUFNBb2RtRnNkV1VnUGo0K0lESTBLVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzlpYW1WamRGZHlhWFJsVlVsdWRETXlLSFJvYVhNc0lIWmhiSFZsTENCdlptWnpaWFFzSUhSeWRXVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklEUmNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVWx1ZERNeVFrVWdQU0JtZFc1amRHbHZiaUIzY21sMFpVbHVkRE15UWtVZ0tIWmhiSFZsTENCdlptWnpaWFFzSUc1dlFYTnpaWEowS1NCN1hHNGdJSFpoYkhWbElEMGdLM1poYkhWbFhHNGdJRzltWm5ObGRDQTlJRzltWm5ObGRDQjhJREJjYmlBZ2FXWWdLQ0Z1YjBGemMyVnlkQ2tnWTJobFkydEpiblFvZEdocGN5d2dkbUZzZFdVc0lHOW1abk5sZEN3Z05Dd2dNSGczWm1abVptWm1aaXdnTFRCNE9EQXdNREF3TURBcFhHNGdJR2xtSUNoMllXeDFaU0E4SURBcElIWmhiSFZsSUQwZ01IaG1abVptWm1abVppQXJJSFpoYkhWbElDc2dNVnh1SUNCcFppQW9RblZtWm1WeUxsUlpVRVZFWDBGU1VrRlpYMU5WVUZCUFVsUXBJSHRjYmlBZ0lDQjBhR2x6VzI5bVpuTmxkRjBnUFNBb2RtRnNkV1VnUGo0K0lESTBLVnh1SUNBZ0lIUm9hWE5iYjJabWMyVjBJQ3NnTVYwZ1BTQW9kbUZzZFdVZ1BqNCtJREUyS1Z4dUlDQWdJSFJvYVhOYmIyWm1jMlYwSUNzZ01sMGdQU0FvZG1Gc2RXVWdQajQrSURncFhHNGdJQ0FnZEdocGMxdHZabVp6WlhRZ0t5QXpYU0E5SUNoMllXeDFaU0FtSURCNFptWXBYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiMkpxWldOMFYzSnBkR1ZWU1c1ME16SW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWm1Gc2MyVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklEUmNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyaGxZMnRKUlVWRk56VTBJQ2hpZFdZc0lIWmhiSFZsTENCdlptWnpaWFFzSUdWNGRDd2diV0Y0TENCdGFXNHBJSHRjYmlBZ2FXWWdLRzltWm5ObGRDQXJJR1Y0ZENBK0lHSjFaaTVzWlc1bmRHZ3BJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkSmJtUmxlQ0J2ZFhRZ2IyWWdjbUZ1WjJVbktWeHVJQ0JwWmlBb2IyWm1jMlYwSUR3Z01Da2dkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjBsdVpHVjRJRzkxZENCdlppQnlZVzVuWlNjcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUhkeWFYUmxSbXh2WVhRZ0tHSjFaaXdnZG1Gc2RXVXNJRzltWm5ObGRDd2diR2wwZEd4bFJXNWthV0Z1TENCdWIwRnpjMlZ5ZENrZ2UxeHVJQ0JwWmlBb0lXNXZRWE56WlhKMEtTQjdYRzRnSUNBZ1kyaGxZMnRKUlVWRk56VTBLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnTkN3Z015NDBNREk0TWpNME5qWXpPRFV5T0RnMlpTc3pPQ3dnTFRNdU5EQXlPREl6TkRZMk16ZzFNamc0Tm1Vck16Z3BYRzRnSUgxY2JpQWdhV1ZsWlRjMU5DNTNjbWwwWlNoaWRXWXNJSFpoYkhWbExDQnZabVp6WlhRc0lHeHBkSFJzWlVWdVpHbGhiaXdnTWpNc0lEUXBYRzRnSUhKbGRIVnliaUJ2Wm1aelpYUWdLeUEwWEc1OVhHNWNia0oxWm1abGNpNXdjbTkwYjNSNWNHVXVkM0pwZEdWR2JHOWhkRXhGSUQwZ1puVnVZM1JwYjI0Z2QzSnBkR1ZHYkc5aGRFeEZJQ2gyWVd4MVpTd2diMlptYzJWMExDQnViMEZ6YzJWeWRDa2dlMXh1SUNCeVpYUjFjbTRnZDNKcGRHVkdiRzloZENoMGFHbHpMQ0IyWVd4MVpTd2diMlptYzJWMExDQjBjblZsTENCdWIwRnpjMlZ5ZENsY2JuMWNibHh1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzUzY21sMFpVWnNiMkYwUWtVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlVac2IyRjBRa1VnS0haaGJIVmxMQ0J2Wm1aelpYUXNJRzV2UVhOelpYSjBLU0I3WEc0Z0lISmxkSFZ5YmlCM2NtbDBaVVpzYjJGMEtIUm9hWE1zSUhaaGJIVmxMQ0J2Wm1aelpYUXNJR1poYkhObExDQnViMEZ6YzJWeWRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2QzSnBkR1ZFYjNWaWJHVWdLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQnViMEZ6YzJWeWRDa2dlMXh1SUNCcFppQW9JVzV2UVhOelpYSjBLU0I3WEc0Z0lDQWdZMmhsWTJ0SlJVVkZOelUwS0dKMVppd2dkbUZzZFdVc0lHOW1abk5sZEN3Z09Dd2dNUzQzT1RjMk9UTXhNelE0TmpJek1UVTNSU3N6TURnc0lDMHhMamM1TnpZNU16RXpORGcyTWpNeE5UZEZLek13T0NsY2JpQWdmVnh1SUNCcFpXVmxOelUwTG5keWFYUmxLR0oxWml3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYkdsMGRHeGxSVzVrYVdGdUxDQTFNaXdnT0NsY2JpQWdjbVYwZFhKdUlHOW1abk5sZENBcklEaGNibjFjYmx4dVFuVm1abVZ5TG5CeWIzUnZkSGx3WlM1M2NtbDBaVVJ2ZFdKc1pVeEZJRDBnWm5WdVkzUnBiMjRnZDNKcGRHVkViM1ZpYkdWTVJTQW9kbUZzZFdVc0lHOW1abk5sZEN3Z2JtOUJjM05sY25RcElIdGNiaUFnY21WMGRYSnVJSGR5YVhSbFJHOTFZbXhsS0hSb2FYTXNJSFpoYkhWbExDQnZabVp6WlhRc0lIUnlkV1VzSUc1dlFYTnpaWEowS1Z4dWZWeHVYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbmR5YVhSbFJHOTFZbXhsUWtVZ1BTQm1kVzVqZEdsdmJpQjNjbWwwWlVSdmRXSnNaVUpGSUNoMllXeDFaU3dnYjJabWMyVjBMQ0J1YjBGemMyVnlkQ2tnZTF4dUlDQnlaWFIxY200Z2QzSnBkR1ZFYjNWaWJHVW9kR2hwY3l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnWm1Gc2MyVXNJRzV2UVhOelpYSjBLVnh1ZlZ4dVhHNHZMeUJqYjNCNUtIUmhjbWRsZEVKMVptWmxjaXdnZEdGeVoyVjBVM1JoY25ROU1Dd2djMjkxY21ObFUzUmhjblE5TUN3Z2MyOTFjbU5sUlc1a1BXSjFabVpsY2k1c1pXNW5kR2dwWEc1Q2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG1OdmNIa2dQU0JtZFc1amRHbHZiaUJqYjNCNUlDaDBZWEpuWlhRc0lIUmhjbWRsZEZOMFlYSjBMQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJR2xtSUNnaGMzUmhjblFwSUhOMFlYSjBJRDBnTUZ4dUlDQnBaaUFvSVdWdVpDQW1KaUJsYm1RZ0lUMDlJREFwSUdWdVpDQTlJSFJvYVhNdWJHVnVaM1JvWEc0Z0lHbG1JQ2gwWVhKblpYUlRkR0Z5ZENBK1BTQjBZWEpuWlhRdWJHVnVaM1JvS1NCMFlYSm5aWFJUZEdGeWRDQTlJSFJoY21kbGRDNXNaVzVuZEdoY2JpQWdhV1lnS0NGMFlYSm5aWFJUZEdGeWRDa2dkR0Z5WjJWMFUzUmhjblFnUFNBd1hHNGdJR2xtSUNobGJtUWdQaUF3SUNZbUlHVnVaQ0E4SUhOMFlYSjBLU0JsYm1RZ1BTQnpkR0Z5ZEZ4dVhHNGdJQzh2SUVOdmNIa2dNQ0JpZVhSbGN6c2dkMlVuY21VZ1pHOXVaVnh1SUNCcFppQW9aVzVrSUQwOVBTQnpkR0Z5ZENrZ2NtVjBkWEp1SURCY2JpQWdhV1lnS0hSaGNtZGxkQzVzWlc1bmRHZ2dQVDA5SURBZ2ZId2dkR2hwY3k1c1pXNW5kR2dnUFQwOUlEQXBJSEpsZEhWeWJpQXdYRzVjYmlBZ0x5OGdSbUYwWVd3Z1pYSnliM0lnWTI5dVpHbDBhVzl1YzF4dUlDQnBaaUFvZEdGeVoyVjBVM1JoY25RZ1BDQXdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjNSaGNtZGxkRk4wWVhKMElHOTFkQ0J2WmlCaWIzVnVaSE1uS1Z4dUlDQjlYRzRnSUdsbUlDaHpkR0Z5ZENBOElEQWdmSHdnYzNSaGNuUWdQajBnZEdocGN5NXNaVzVuZEdncElIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2R6YjNWeVkyVlRkR0Z5ZENCdmRYUWdiMllnWW05MWJtUnpKeWxjYmlBZ2FXWWdLR1Z1WkNBOElEQXBJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkemIzVnlZMlZGYm1RZ2IzVjBJRzltSUdKdmRXNWtjeWNwWEc1Y2JpQWdMeThnUVhKbElIZGxJRzl2WWo5Y2JpQWdhV1lnS0dWdVpDQStJSFJvYVhNdWJHVnVaM1JvS1NCbGJtUWdQU0IwYUdsekxteGxibWQwYUZ4dUlDQnBaaUFvZEdGeVoyVjBMbXhsYm1kMGFDQXRJSFJoY21kbGRGTjBZWEowSUR3Z1pXNWtJQzBnYzNSaGNuUXBJSHRjYmlBZ0lDQmxibVFnUFNCMFlYSm5aWFF1YkdWdVozUm9JQzBnZEdGeVoyVjBVM1JoY25RZ0t5QnpkR0Z5ZEZ4dUlDQjlYRzVjYmlBZ2RtRnlJR3hsYmlBOUlHVnVaQ0F0SUhOMFlYSjBYRzRnSUhaaGNpQnBYRzVjYmlBZ2FXWWdLSFJvYVhNZ1BUMDlJSFJoY21kbGRDQW1KaUJ6ZEdGeWRDQThJSFJoY21kbGRGTjBZWEowSUNZbUlIUmhjbWRsZEZOMFlYSjBJRHdnWlc1a0tTQjdYRzRnSUNBZ0x5OGdaR1Z6WTJWdVpHbHVaeUJqYjNCNUlHWnliMjBnWlc1a1hHNGdJQ0FnWm05eUlDaHBJRDBnYkdWdUlDMGdNVHNnYVNBK1BTQXdPeUF0TFdrcElIdGNiaUFnSUNBZ0lIUmhjbWRsZEZ0cElDc2dkR0Z5WjJWMFUzUmhjblJkSUQwZ2RHaHBjMXRwSUNzZ2MzUmhjblJkWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHeGxiaUE4SURFd01EQWdmSHdnSVVKMVptWmxjaTVVV1ZCRlJGOUJVbEpCV1Y5VFZWQlFUMUpVS1NCN1hHNGdJQ0FnTHk4Z1lYTmpaVzVrYVc1bklHTnZjSGtnWm5KdmJTQnpkR0Z5ZEZ4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNBZ0lDQWdkR0Z5WjJWMFcya2dLeUIwWVhKblpYUlRkR0Z5ZEYwZ1BTQjBhR2x6VzJrZ0t5QnpkR0Z5ZEYxY2JpQWdJQ0I5WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnVldsdWREaEJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyVjBMbU5oYkd3b1hHNGdJQ0FnSUNCMFlYSm5aWFFzWEc0Z0lDQWdJQ0IwYUdsekxuTjFZbUZ5Y21GNUtITjBZWEowTENCemRHRnlkQ0FySUd4bGJpa3NYRzRnSUNBZ0lDQjBZWEpuWlhSVGRHRnlkRnh1SUNBZ0lDbGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnNaVzVjYm4xY2JseHVMeThnVlhOaFoyVTZYRzR2THlBZ0lDQmlkV1ptWlhJdVptbHNiQ2h1ZFcxaVpYSmJMQ0J2Wm1aelpYUmJMQ0JsYm1SZFhTbGNiaTh2SUNBZ0lHSjFabVpsY2k1bWFXeHNLR0oxWm1abGNsc3NJRzltWm5ObGRGc3NJR1Z1WkYxZEtWeHVMeThnSUNBZ1luVm1abVZ5TG1acGJHd29jM1J5YVc1bld5d2diMlptYzJWMFd5d2daVzVrWFYxYkxDQmxibU52WkdsdVoxMHBYRzVDZFdabVpYSXVjSEp2ZEc5MGVYQmxMbVpwYkd3Z1BTQm1kVzVqZEdsdmJpQm1hV3hzSUNoMllXd3NJSE4wWVhKMExDQmxibVFzSUdWdVkyOWthVzVuS1NCN1hHNGdJQzh2SUVoaGJtUnNaU0J6ZEhKcGJtY2dZMkZ6WlhNNlhHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYzNSaGNuUWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCbGJtTnZaR2x1WnlBOUlITjBZWEowWEc0Z0lDQWdJQ0J6ZEdGeWRDQTlJREJjYmlBZ0lDQWdJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pXNWtJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1pXNWpiMlJwYm1jZ1BTQmxibVJjYmlBZ0lDQWdJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9YRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJZV3d1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQjJZWElnWTI5a1pTQTlJSFpoYkM1amFHRnlRMjlrWlVGMEtEQXBYRzRnSUNBZ0lDQnBaaUFvWTI5a1pTQThJREkxTmlrZ2UxeHVJQ0FnSUNBZ0lDQjJZV3dnUFNCamIyUmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGxibU52WkdsdVp5QWhQVDBnZFc1a1pXWnBibVZrSUNZbUlIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjJWdVkyOWthVzVuSUcxMWMzUWdZbVVnWVNCemRISnBibWNuS1Z4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1Z1WTI5a2FXNW5JRDA5UFNBbmMzUnlhVzVuSnlBbUppQWhRblZtWm1WeUxtbHpSVzVqYjJScGJtY29aVzVqYjJScGJtY3BLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkVmJtdHViM2R1SUdWdVkyOWthVzVuT2lBbklDc2daVzVqYjJScGJtY3BYRzRnSUNBZ2ZWeHVJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUIyWVd3Z1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdkbUZzSUQwZ2RtRnNJQ1lnTWpVMVhHNGdJSDFjYmx4dUlDQXZMeUJKYm5aaGJHbGtJSEpoYm1kbGN5QmhjbVVnYm05MElITmxkQ0IwYnlCaElHUmxabUYxYkhRc0lITnZJR05oYmlCeVlXNW5aU0JqYUdWamF5QmxZWEpzZVM1Y2JpQWdhV1lnS0hOMFlYSjBJRHdnTUNCOGZDQjBhR2x6TG14bGJtZDBhQ0E4SUhOMFlYSjBJSHg4SUhSb2FYTXViR1Z1WjNSb0lEd2daVzVrS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0owOTFkQ0J2WmlCeVlXNW5aU0JwYm1SbGVDY3BYRzRnSUgxY2JseHVJQ0JwWmlBb1pXNWtJRHc5SUhOMFlYSjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUhOMFlYSjBJRDBnYzNSaGNuUWdQajQrSURCY2JpQWdaVzVrSUQwZ1pXNWtJRDA5UFNCMWJtUmxabWx1WldRZ1B5QjBhR2x6TG14bGJtZDBhQ0E2SUdWdVpDQStQajRnTUZ4dVhHNGdJR2xtSUNnaGRtRnNLU0IyWVd3Z1BTQXdYRzVjYmlBZ2RtRnlJR2xjYmlBZ2FXWWdLSFI1Y0dWdlppQjJZV3dnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ2MzUmhjblE3SUdrZ1BDQmxibVE3SUNzcmFTa2dlMXh1SUNBZ0lDQWdkR2hwYzF0cFhTQTlJSFpoYkZ4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IyWVhJZ1lubDBaWE1nUFNCQ2RXWm1aWEl1YVhOQ2RXWm1aWElvZG1Gc0tWeHVJQ0FnSUNBZ1B5QjJZV3hjYmlBZ0lDQWdJRG9nZFhSbU9GUnZRbmwwWlhNb2JtVjNJRUoxWm1abGNpaDJZV3dzSUdWdVkyOWthVzVuS1M1MGIxTjBjbWx1WnlncEtWeHVJQ0FnSUhaaGNpQnNaVzRnUFNCaWVYUmxjeTVzWlc1bmRHaGNiaUFnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWlc1a0lDMGdjM1JoY25RN0lDc3JhU2tnZTF4dUlDQWdJQ0FnZEdocGMxdHBJQ3NnYzNSaGNuUmRJRDBnWW5sMFpYTmJhU0FsSUd4bGJsMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2RHaHBjMXh1ZlZ4dVhHNHZMeUJJUlV4UVJWSWdSbFZPUTFSSlQwNVRYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc1Y2JuWmhjaUJKVGxaQlRFbEVYMEpCVTBVMk5GOVNSU0E5SUM5YlhpdGNYQzh3TFRsQkxWcGhMWG90WDEwdloxeHVYRzVtZFc1amRHbHZiaUJpWVhObE5qUmpiR1ZoYmlBb2MzUnlLU0I3WEc0Z0lDOHZJRTV2WkdVZ2MzUnlhWEJ6SUc5MWRDQnBiblpoYkdsa0lHTm9ZWEpoWTNSbGNuTWdiR2xyWlNCY1hHNGdZVzVrSUZ4Y2RDQm1jbTl0SUhSb1pTQnpkSEpwYm1jc0lHSmhjMlUyTkMxcWN5QmtiMlZ6SUc1dmRGeHVJQ0J6ZEhJZ1BTQnpkSEpwYm1kMGNtbHRLSE4wY2lrdWNtVndiR0ZqWlNoSlRsWkJURWxFWDBKQlUwVTJORjlTUlN3Z0p5Y3BYRzRnSUM4dklFNXZaR1VnWTI5dWRtVnlkSE1nYzNSeWFXNW5jeUIzYVhSb0lHeGxibWQwYUNBOElESWdkRzhnSnlkY2JpQWdhV1lnS0hOMGNpNXNaVzVuZEdnZ1BDQXlLU0J5WlhSMWNtNGdKeWRjYmlBZ0x5OGdUbTlrWlNCaGJHeHZkM01nWm05eUlHNXZiaTF3WVdSa1pXUWdZbUZ6WlRZMElITjBjbWx1WjNNZ0tHMXBjM05wYm1jZ2RISmhhV3hwYm1jZ1BUMDlLU3dnWW1GelpUWTBMV3B6SUdSdlpYTWdibTkwWEc0Z0lIZG9hV3hsSUNoemRISXViR1Z1WjNSb0lDVWdOQ0FoUFQwZ01Da2dlMXh1SUNBZ0lITjBjaUE5SUhOMGNpQXJJQ2M5SjF4dUlDQjlYRzRnSUhKbGRIVnliaUJ6ZEhKY2JuMWNibHh1Wm5WdVkzUnBiMjRnYzNSeWFXNW5kSEpwYlNBb2MzUnlLU0I3WEc0Z0lHbG1JQ2h6ZEhJdWRISnBiU2tnY21WMGRYSnVJSE4wY2k1MGNtbHRLQ2xjYmlBZ2NtVjBkWEp1SUhOMGNpNXlaWEJzWVdObEtDOWVYRnh6SzN4Y1hITXJKQzluTENBbkp5bGNibjFjYmx4dVpuVnVZM1JwYjI0Z2RHOUlaWGdnS0c0cElIdGNiaUFnYVdZZ0tHNGdQQ0F4TmlrZ2NtVjBkWEp1SUNjd0p5QXJJRzR1ZEc5VGRISnBibWNvTVRZcFhHNGdJSEpsZEhWeWJpQnVMblJ2VTNSeWFXNW5LREUyS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUIxZEdZNFZHOUNlWFJsY3lBb2MzUnlhVzVuTENCMWJtbDBjeWtnZTF4dUlDQjFibWwwY3lBOUlIVnVhWFJ6SUh4OElFbHVabWx1YVhSNVhHNGdJSFpoY2lCamIyUmxVRzlwYm5SY2JpQWdkbUZ5SUd4bGJtZDBhQ0E5SUhOMGNtbHVaeTVzWlc1bmRHaGNiaUFnZG1GeUlHeGxZV1JUZFhKeWIyZGhkR1VnUFNCdWRXeHNYRzRnSUhaaGNpQmllWFJsY3lBOUlGdGRYRzVjYmlBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnNaVzVuZEdnN0lDc3JhU2tnZTF4dUlDQWdJR052WkdWUWIybHVkQ0E5SUhOMGNtbHVaeTVqYUdGeVEyOWtaVUYwS0drcFhHNWNiaUFnSUNBdkx5QnBjeUJ6ZFhKeWIyZGhkR1VnWTI5dGNHOXVaVzUwWEc0Z0lDQWdhV1lnS0dOdlpHVlFiMmx1ZENBK0lEQjRSRGRHUmlBbUppQmpiMlJsVUc5cGJuUWdQQ0F3ZUVVd01EQXBJSHRjYmlBZ0lDQWdJQzh2SUd4aGMzUWdZMmhoY2lCM1lYTWdZU0JzWldGa1hHNGdJQ0FnSUNCcFppQW9JV3hsWVdSVGRYSnliMmRoZEdVcElIdGNiaUFnSUNBZ0lDQWdMeThnYm04Z2JHVmhaQ0I1WlhSY2JpQWdJQ0FnSUNBZ2FXWWdLR052WkdWUWIybHVkQ0ErSURCNFJFSkdSaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFZ1Wlhod1pXTjBaV1FnZEhKaGFXeGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb0tIVnVhWFJ6SUMwOUlETXBJRDRnTFRFcElHSjVkR1Z6TG5CMWMyZ29NSGhGUml3Z01IaENSaXdnTUhoQ1JDbGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0drZ0t5QXhJRDA5UFNCc1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIxYm5CaGFYSmxaQ0JzWldGa1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBektTQStJQzB4S1NCaWVYUmxjeTV3ZFhOb0tEQjRSVVlzSURCNFFrWXNJREI0UWtRcFhHNGdJQ0FnSUNBZ0lDQWdZMjl1ZEdsdWRXVmNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklIWmhiR2xrSUd4bFlXUmNiaUFnSUNBZ0lDQWdiR1ZoWkZOMWNuSnZaMkYwWlNBOUlHTnZaR1ZRYjJsdWRGeHVYRzRnSUNBZ0lDQWdJR052Ym5ScGJuVmxYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SURJZ2JHVmhaSE1nYVc0Z1lTQnliM2RjYmlBZ0lDQWdJR2xtSUNoamIyUmxVRzlwYm5RZ1BDQXdlRVJETURBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBektTQStJQzB4S1NCaWVYUmxjeTV3ZFhOb0tEQjRSVVlzSURCNFFrWXNJREI0UWtRcFhHNGdJQ0FnSUNBZ0lHeGxZV1JUZFhKeWIyZGhkR1VnUFNCamIyUmxVRzlwYm5SY2JpQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdWY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdkbUZzYVdRZ2MzVnljbTluWVhSbElIQmhhWEpjYmlBZ0lDQWdJR052WkdWUWIybHVkQ0E5SUNoc1pXRmtVM1Z5Y205bllYUmxJQzBnTUhoRU9EQXdJRHc4SURFd0lId2dZMjlrWlZCdmFXNTBJQzBnTUhoRVF6QXdLU0FySURCNE1UQXdNREJjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLR3hsWVdSVGRYSnliMmRoZEdVcElIdGNiaUFnSUNBZ0lDOHZJSFpoYkdsa0lHSnRjQ0JqYUdGeUxDQmlkWFFnYkdGemRDQmphR0Z5SUhkaGN5QmhJR3hsWVdSY2JpQWdJQ0FnSUdsbUlDZ29kVzVwZEhNZ0xUMGdNeWtnUGlBdE1Ta2dZbmwwWlhNdWNIVnphQ2d3ZUVWR0xDQXdlRUpHTENBd2VFSkVLVnh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxZV1JUZFhKeWIyZGhkR1VnUFNCdWRXeHNYRzVjYmlBZ0lDQXZMeUJsYm1OdlpHVWdkWFJtT0Z4dUlDQWdJR2xtSUNoamIyUmxVRzlwYm5RZ1BDQXdlRGd3S1NCN1hHNGdJQ0FnSUNCcFppQW9LSFZ1YVhSeklDMDlJREVwSUR3Z01Da2dZbkpsWVd0Y2JpQWdJQ0FnSUdKNWRHVnpMbkIxYzJnb1kyOWtaVkJ2YVc1MEtWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOWtaVkJ2YVc1MElEd2dNSGc0TURBcElIdGNiaUFnSUNBZ0lHbG1JQ2dvZFc1cGRITWdMVDBnTWlrZ1BDQXdLU0JpY21WaGExeHVJQ0FnSUNBZ1lubDBaWE11Y0hWemFDaGNiaUFnSUNBZ0lDQWdZMjlrWlZCdmFXNTBJRDQrSURCNE5pQjhJREI0UXpBc1hHNGdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQW1JREI0TTBZZ2ZDQXdlRGd3WEc0Z0lDQWdJQ0FwWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hqYjJSbFVHOXBiblFnUENBd2VERXdNREF3S1NCN1hHNGdJQ0FnSUNCcFppQW9LSFZ1YVhSeklDMDlJRE1wSUR3Z01Da2dZbkpsWVd0Y2JpQWdJQ0FnSUdKNWRHVnpMbkIxYzJnb1hHNGdJQ0FnSUNBZ0lHTnZaR1ZRYjJsdWRDQStQaUF3ZUVNZ2ZDQXdlRVV3TEZ4dUlDQWdJQ0FnSUNCamIyUmxVRzlwYm5RZ1BqNGdNSGcySUNZZ01IZ3pSaUI4SURCNE9EQXNYRzRnSUNBZ0lDQWdJR052WkdWUWIybHVkQ0FtSURCNE0wWWdmQ0F3ZURnd1hHNGdJQ0FnSUNBcFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyUmxVRzlwYm5RZ1BDQXdlREV4TURBd01Da2dlMXh1SUNBZ0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBMEtTQThJREFwSUdKeVpXRnJYRzRnSUNBZ0lDQmllWFJsY3k1d2RYTm9LRnh1SUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnUGo0Z01IZ3hNaUI4SURCNFJqQXNYRzRnSUNBZ0lDQWdJR052WkdWUWIybHVkQ0ErUGlBd2VFTWdKaUF3ZUROR0lId2dNSGc0TUN4Y2JpQWdJQ0FnSUNBZ1kyOWtaVkJ2YVc1MElENCtJREI0TmlBbUlEQjRNMFlnZkNBd2VEZ3dMRnh1SUNBZ0lDQWdJQ0JqYjJSbFVHOXBiblFnSmlBd2VETkdJSHdnTUhnNE1GeHVJQ0FnSUNBZ0tWeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdZMjlrWlNCd2IybHVkQ2NwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJR0o1ZEdWelhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGelkybHBWRzlDZVhSbGN5QW9jM1J5S1NCN1hHNGdJSFpoY2lCaWVYUmxRWEp5WVhrZ1BTQmJYVnh1SUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITjBjaTVzWlc1bmRHZzdJQ3NyYVNrZ2UxeHVJQ0FnSUM4dklFNXZaR1VuY3lCamIyUmxJSE5sWlcxeklIUnZJR0psSUdSdmFXNW5JSFJvYVhNZ1lXNWtJRzV2ZENBbUlEQjROMFl1TGx4dUlDQWdJR0o1ZEdWQmNuSmhlUzV3ZFhOb0tITjBjaTVqYUdGeVEyOWtaVUYwS0drcElDWWdNSGhHUmlsY2JpQWdmVnh1SUNCeVpYUjFjbTRnWW5sMFpVRnljbUY1WEc1OVhHNWNibVoxYm1OMGFXOXVJSFYwWmpFMmJHVlViMEo1ZEdWeklDaHpkSElzSUhWdWFYUnpLU0I3WEc0Z0lIWmhjaUJqTENCb2FTd2diRzljYmlBZ2RtRnlJR0o1ZEdWQmNuSmhlU0E5SUZ0ZFhHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzNSeUxteGxibWQwYURzZ0t5dHBLU0I3WEc0Z0lDQWdhV1lnS0NoMWJtbDBjeUF0UFNBeUtTQThJREFwSUdKeVpXRnJYRzVjYmlBZ0lDQmpJRDBnYzNSeUxtTm9ZWEpEYjJSbFFYUW9hU2xjYmlBZ0lDQm9hU0E5SUdNZ1BqNGdPRnh1SUNBZ0lHeHZJRDBnWXlBbElESTFObHh1SUNBZ0lHSjVkR1ZCY25KaGVTNXdkWE5vS0d4dktWeHVJQ0FnSUdKNWRHVkJjbkpoZVM1d2RYTm9LR2hwS1Z4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdKNWRHVkJjbkpoZVZ4dWZWeHVYRzVtZFc1amRHbHZiaUJpWVhObE5qUlViMEo1ZEdWeklDaHpkSElwSUh0Y2JpQWdjbVYwZFhKdUlHSmhjMlUyTkM1MGIwSjVkR1ZCY25KaGVTaGlZWE5sTmpSamJHVmhiaWh6ZEhJcEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCaWJHbDBRblZtWm1WeUlDaHpjbU1zSUdSemRDd2diMlptYzJWMExDQnNaVzVuZEdncElIdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUNzcmFTa2dlMXh1SUNBZ0lHbG1JQ2dvYVNBcklHOW1abk5sZENBK1BTQmtjM1F1YkdWdVozUm9LU0I4ZkNBb2FTQStQU0J6Y21NdWJHVnVaM1JvS1NrZ1luSmxZV3RjYmlBZ0lDQmtjM1JiYVNBcklHOW1abk5sZEYwZ1BTQnpjbU5iYVYxY2JpQWdmVnh1SUNCeVpYUjFjbTRnYVZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzI1aGJpQW9kbUZzS1NCN1hHNGdJSEpsZEhWeWJpQjJZV3dnSVQwOUlIWmhiQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWE5sYkdZdFkyOXRjR0Z5WlZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFcHZlV1Z1ZEN3Z1NXNWpMaUJoYm1RZ2IzUm9aWElnVG05a1pTQmpiMjUwY21saWRYUnZjbk11WEc0dkwxeHVMeThnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0ZjYmk4dklHTnZjSGtnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmtiMk4xYldWdWRHRjBhVzl1SUdacGJHVnpJQ2gwYUdWY2JpOHZJRndpVTI5bWRIZGhjbVZjSWlrc0lIUnZJR1JsWVd3Z2FXNGdkR2hsSUZOdlpuUjNZWEpsSUhkcGRHaHZkWFFnY21WemRISnBZM1JwYjI0c0lHbHVZMngxWkdsdVoxeHVMeThnZDJsMGFHOTFkQ0JzYVcxcGRHRjBhVzl1SUhSb1pTQnlhV2RvZEhNZ2RHOGdkWE5sTENCamIzQjVMQ0J0YjJScFpua3NJRzFsY21kbExDQndkV0pzYVhOb0xGeHVMeThnWkdsemRISnBZblYwWlN3Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUhSb1pTQlRiMlowZDJGeVpTd2dZVzVrSUhSdklIQmxjbTFwZEZ4dUx5OGdjR1Z5YzI5dWN5QjBieUIzYUc5dElIUm9aU0JUYjJaMGQyRnlaU0JwY3lCbWRYSnVhWE5vWldRZ2RHOGdaRzhnYzI4c0lITjFZbXBsWTNRZ2RHOGdkR2hsWEc0dkx5Qm1iMnhzYjNkcGJtY2dZMjl1WkdsMGFXOXVjenBjYmk4dlhHNHZMeUJVYUdVZ1lXSnZkbVVnWTI5d2VYSnBaMmgwSUc1dmRHbGpaU0JoYm1RZ2RHaHBjeUJ3WlhKdGFYTnphVzl1SUc1dmRHbGpaU0J6YUdGc2JDQmlaU0JwYm1Oc2RXUmxaRnh1THk4Z2FXNGdZV3hzSUdOdmNHbGxjeUJ2Y2lCemRXSnpkR0Z1ZEdsaGJDQndiM0owYVc5dWN5QnZaaUIwYUdVZ1UyOW1kSGRoY21VdVhHNHZMMXh1THk4Z1ZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVV1NCUFJpQkJUbGtnUzBsT1JDd2dSVmhRVWtWVFUxeHVMeThnVDFJZ1NVMVFURWxGUkN3Z1NVNURURlZFU1U1SElFSlZWQ0JPVDFRZ1RFbE5TVlJGUkNCVVR5QlVTRVVnVjBGU1VrRk9WRWxGVXlCUFJseHVMeThnVFVWU1EwaEJUbFJCUWtsTVNWUlpMQ0JHU1ZST1JWTlRJRVpQVWlCQklGQkJVbFJKUTFWTVFWSWdVRlZTVUU5VFJTQkJUa1FnVGs5T1NVNUdVa2xPUjBWTlJVNVVMaUJKVGx4dUx5OGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZJRUZWVkVoUFVsTWdUMUlnUTA5UVdWSkpSMGhVSUVoUFRFUkZVbE1nUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnUTB4QlNVMHNYRzR2THlCRVFVMUJSMFZUSUU5U0lFOVVTRVZTSUV4SlFVSkpURWxVV1N3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUZSUFVsUWdUMUpjYmk4dklFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTENCUFZWUWdUMFlnVDFJZ1NVNGdRMDlPVGtWRFZFbFBUaUJYU1ZSSUlGUklSU0JUVDBaVVYwRlNSU0JQVWlCVVNFVmNiaTh2SUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUaUJVU0VVZ1UwOUdWRmRCVWtVdVhHNWNiaTh2SUU1UFZFVTZJRlJvWlhObElIUjVjR1VnWTJobFkydHBibWNnWm5WdVkzUnBiMjV6SUdsdWRHVnVkR2x2Ym1Gc2JIa2daRzl1SjNRZ2RYTmxJR0JwYm5OMFlXNWpaVzltWUZ4dUx5OGdZbVZqWVhWelpTQnBkQ0JwY3lCbWNtRm5hV3hsSUdGdVpDQmpZVzRnWW1VZ1pXRnphV3g1SUdaaGEyVmtJSGRwZEdnZ1lFOWlhbVZqZEM1amNtVmhkR1VvS1dBdVhHNWNibVoxYm1OMGFXOXVJR2x6UVhKeVlYa29ZWEpuS1NCN1hHNGdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFRnljbUY1TG1selFYSnlZWGtvWVhKbktUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IySnFaV04wVkc5VGRISnBibWNvWVhKbktTQTlQVDBnSjF0dlltcGxZM1FnUVhKeVlYbGRKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTkJjbkpoZVNBOUlHbHpRWEp5WVhrN1hHNWNibVoxYm1OMGFXOXVJR2x6UW05dmJHVmhiaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZGliMjlzWldGdUp6dGNibjFjYm1WNGNHOXlkSE11YVhOQ2IyOXNaV0Z1SUQwZ2FYTkNiMjlzWldGdU8xeHVYRzVtZFc1amRHbHZiaUJwYzA1MWJHd29ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnUFQwOUlHNTFiR3c3WEc1OVhHNWxlSEJ2Y25SekxtbHpUblZzYkNBOUlHbHpUblZzYkR0Y2JseHVablZ1WTNScGIyNGdhWE5PZFd4c1QzSlZibVJsWm1sdVpXUW9ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQmhjbWNnUFQwZ2JuVnNiRHRjYm4xY2JtVjRjRzl5ZEhNdWFYTk9kV3hzVDNKVmJtUmxabWx1WldRZ1BTQnBjMDUxYkd4UGNsVnVaR1ZtYVc1bFpEdGNibHh1Wm5WdVkzUnBiMjRnYVhOT2RXMWlaWElvWVhKbktTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdZWEpuSUQwOVBTQW5iblZ0WW1WeUp6dGNibjFjYm1WNGNHOXlkSE11YVhOT2RXMWlaWElnUFNCcGMwNTFiV0psY2p0Y2JseHVablZ1WTNScGIyNGdhWE5UZEhKcGJtY29ZWEpuS1NCN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ1lYSm5JRDA5UFNBbmMzUnlhVzVuSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5UZEhKcGJtY2dQU0JwYzFOMGNtbHVaenRjYmx4dVpuVnVZM1JwYjI0Z2FYTlRlVzFpYjJ3b1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnWVhKbklEMDlQU0FuYzNsdFltOXNKenRjYm4xY2JtVjRjRzl5ZEhNdWFYTlRlVzFpYjJ3Z1BTQnBjMU41YldKdmJEdGNibHh1Wm5WdVkzUnBiMjRnYVhOVmJtUmxabWx1WldRb1lYSm5LU0I3WEc0Z0lISmxkSFZ5YmlCaGNtY2dQVDA5SUhadmFXUWdNRHRjYm4xY2JtVjRjRzl5ZEhNdWFYTlZibVJsWm1sdVpXUWdQU0JwYzFWdVpHVm1hVzVsWkR0Y2JseHVablZ1WTNScGIyNGdhWE5TWldkRmVIQW9jbVVwSUh0Y2JpQWdjbVYwZFhKdUlHOWlhbVZqZEZSdlUzUnlhVzVuS0hKbEtTQTlQVDBnSjF0dlltcGxZM1FnVW1WblJYaHdYU2M3WEc1OVhHNWxlSEJ2Y25SekxtbHpVbVZuUlhod0lEMGdhWE5TWldkRmVIQTdYRzVjYm1aMWJtTjBhVzl1SUdselQySnFaV04wS0dGeVp5a2dlMXh1SUNCeVpYUjFjbTRnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMjlpYW1WamRDY2dKaVlnWVhKbklDRTlQU0J1ZFd4c08xeHVmVnh1Wlhod2IzSjBjeTVwYzA5aWFtVmpkQ0E5SUdselQySnFaV04wTzF4dVhHNW1kVzVqZEdsdmJpQnBjMFJoZEdVb1pDa2dlMXh1SUNCeVpYUjFjbTRnYjJKcVpXTjBWRzlUZEhKcGJtY29aQ2tnUFQwOUlDZGJiMkpxWldOMElFUmhkR1ZkSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5FWVhSbElEMGdhWE5FWVhSbE8xeHVYRzVtZFc1amRHbHZiaUJwYzBWeWNtOXlLR1VwSUh0Y2JpQWdjbVYwZFhKdUlDaHZZbXBsWTNSVWIxTjBjbWx1WnlobEtTQTlQVDBnSjF0dlltcGxZM1FnUlhKeWIzSmRKeUI4ZkNCbElHbHVjM1JoYm1ObGIyWWdSWEp5YjNJcE8xeHVmVnh1Wlhod2IzSjBjeTVwYzBWeWNtOXlJRDBnYVhORmNuSnZjanRjYmx4dVpuVnVZM1JwYjI0Z2FYTkdkVzVqZEdsdmJpaGhjbWNwSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkbWRXNWpkR2x2YmljN1hHNTlYRzVsZUhCdmNuUnpMbWx6Um5WdVkzUnBiMjRnUFNCcGMwWjFibU4wYVc5dU8xeHVYRzVtZFc1amRHbHZiaUJwYzFCeWFXMXBkR2wyWlNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnYm5Wc2JDQjhmRnh1SUNBZ0lDQWdJQ0FnZEhsd1pXOW1JR0Z5WnlBOVBUMGdKMkp2YjJ4bFlXNG5JSHg4WEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuYm5WdFltVnlKeUI4ZkZ4dUlDQWdJQ0FnSUNBZ2RIbHdaVzltSUdGeVp5QTlQVDBnSjNOMGNtbHVaeWNnZkh4Y2JpQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCaGNtY2dQVDA5SUNkemVXMWliMnduSUh4OElDQXZMeUJGVXpZZ2MzbHRZbTlzWEc0Z0lDQWdJQ0FnSUNCMGVYQmxiMllnWVhKbklEMDlQU0FuZFc1a1pXWnBibVZrSnp0Y2JuMWNibVY0Y0c5eWRITXVhWE5RY21sdGFYUnBkbVVnUFNCcGMxQnlhVzFwZEdsMlpUdGNibHh1Wlhod2IzSjBjeTVwYzBKMVptWmxjaUE5SUVKMVptWmxjaTVwYzBKMVptWmxjanRjYmx4dVpuVnVZM1JwYjI0Z2IySnFaV04wVkc5VGRISnBibWNvYnlrZ2UxeHVJQ0J5WlhSMWNtNGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5NWpZV3hzS0c4cE8xeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzVjYm1aMWJtTjBhVzl1SUVWMlpXNTBSVzFwZEhSbGNpZ3BJSHRjYmlBZ2RHaHBjeTVmWlhabGJuUnpJRDBnZEdocGN5NWZaWFpsYm5SeklIeDhJSHQ5TzF4dUlDQjBhR2x6TGw5dFlYaE1hWE4wWlc1bGNuTWdQU0IwYUdsekxsOXRZWGhNYVhOMFpXNWxjbk1nZkh3Z2RXNWtaV1pwYm1Wa08xeHVmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JGZG1WdWRFVnRhWFIwWlhJN1hHNWNiaTh2SUVKaFkydDNZWEprY3kxamIyMXdZWFFnZDJsMGFDQnViMlJsSURBdU1UQXVlRnh1UlhabGJuUkZiV2wwZEdWeUxrVjJaVzUwUlcxcGRIUmxjaUE5SUVWMlpXNTBSVzFwZEhSbGNqdGNibHh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNWZaWFpsYm5SeklEMGdkVzVrWldacGJtVmtPMXh1UlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNWZiV0Y0VEdsemRHVnVaWEp6SUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzR2THlCQ2VTQmtaV1poZFd4MElFVjJaVzUwUlcxcGRIUmxjbk1nZDJsc2JDQndjbWx1ZENCaElIZGhjbTVwYm1jZ2FXWWdiVzl5WlNCMGFHRnVJREV3SUd4cGMzUmxibVZ5Y3lCaGNtVmNiaTh2SUdGa1pHVmtJSFJ2SUdsMExpQlVhR2x6SUdseklHRWdkWE5sWm5Wc0lHUmxabUYxYkhRZ2QyaHBZMmdnYUdWc2NITWdabWx1WkdsdVp5QnRaVzF2Y25rZ2JHVmhhM011WEc1RmRtVnVkRVZ0YVhSMFpYSXVaR1ZtWVhWc2RFMWhlRXhwYzNSbGJtVnljeUE5SURFd08xeHVYRzR2THlCUFluWnBiM1Z6YkhrZ2JtOTBJR0ZzYkNCRmJXbDBkR1Z5Y3lCemFHOTFiR1FnWW1VZ2JHbHRhWFJsWkNCMGJ5QXhNQzRnVkdocGN5Qm1kVzVqZEdsdmJpQmhiR3h2ZDNOY2JpOHZJSFJvWVhRZ2RHOGdZbVVnYVc1amNtVmhjMlZrTGlCVFpYUWdkRzhnZW1WeWJ5Qm1iM0lnZFc1c2FXMXBkR1ZrTGx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzV6WlhSTllYaE1hWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaWh1S1NCN1hHNGdJR2xtSUNnaGFYTk9kVzFpWlhJb2Jpa2dmSHdnYmlBOElEQWdmSHdnYVhOT1lVNG9iaWtwWEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZHVJRzExYzNRZ1ltVWdZU0J3YjNOcGRHbDJaU0J1ZFcxaVpYSW5LVHRjYmlBZ2RHaHBjeTVmYldGNFRHbHpkR1Z1WlhKeklEMGdianRjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG1WdGFYUWdQU0JtZFc1amRHbHZiaWgwZVhCbEtTQjdYRzRnSUhaaGNpQmxjaXdnYUdGdVpHeGxjaXdnYkdWdUxDQmhjbWR6TENCcExDQnNhWE4wWlc1bGNuTTdYRzVjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNcFhHNGdJQ0FnZEdocGN5NWZaWFpsYm5SeklEMGdlMzA3WEc1Y2JpQWdMeThnU1dZZ2RHaGxjbVVnYVhNZ2JtOGdKMlZ5Y205eUp5QmxkbVZ1ZENCc2FYTjBaVzVsY2lCMGFHVnVJSFJvY205M0xseHVJQ0JwWmlBb2RIbHdaU0E5UFQwZ0oyVnljbTl5SnlrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZlpYWmxiblJ6TG1WeWNtOXlJSHg4WEc0Z0lDQWdJQ0FnSUNocGMwOWlhbVZqZENoMGFHbHpMbDlsZG1WdWRITXVaWEp5YjNJcElDWW1JQ0YwYUdsekxsOWxkbVZ1ZEhNdVpYSnliM0l1YkdWdVozUm9LU2tnZTF4dUlDQWdJQ0FnWlhJZ1BTQmhjbWQxYldWdWRITmJNVjA3WEc0Z0lDQWdJQ0JwWmlBb1pYSWdhVzV6ZEdGdVkyVnZaaUJGY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QmxjanNnTHk4Z1ZXNW9ZVzVrYkdWa0lDZGxjbkp2Y2ljZ1pYWmxiblJjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzh2SUVGMElHeGxZWE4wSUdkcGRtVWdjMjl0WlNCcmFXNWtJRzltSUdOdmJuUmxlSFFnZEc4Z2RHaGxJSFZ6WlhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1Z5Y2lBOUlHNWxkeUJGY25KdmNpZ25WVzVqWVhWbmFIUXNJSFZ1YzNCbFkybG1hV1ZrSUZ3aVpYSnliM0pjSWlCbGRtVnVkQzRnS0NjZ0t5QmxjaUFySUNjcEp5azdYRzRnSUNBZ0lDQWdJR1Z5Y2k1amIyNTBaWGgwSUQwZ1pYSTdYRzRnSUNBZ0lDQWdJSFJvY205M0lHVnljanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JvWVc1a2JHVnlJRDBnZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkTzF4dVhHNGdJR2xtSUNocGMxVnVaR1ZtYVc1bFpDaG9ZVzVrYkdWeUtTbGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvYUdGdVpHeGxjaWtwSUh0Y2JpQWdJQ0J6ZDJsMFkyZ2dLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQzh2SUdaaGMzUWdZMkZ6WlhOY2JpQWdJQ0FnSUdOaGMyVWdNVHBjYmlBZ0lDQWdJQ0FnYUdGdVpHeGxjaTVqWVd4c0tIUm9hWE1wTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ01qcGNiaUFnSUNBZ0lDQWdhR0Z1Wkd4bGNpNWpZV3hzS0hSb2FYTXNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQXpPbHh1SUNBZ0lDQWdJQ0JvWVc1a2JHVnlMbU5oYkd3b2RHaHBjeXdnWVhKbmRXMWxiblJ6V3pGZExDQmhjbWQxYldWdWRITmJNbDBwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQzh2SUhOc2IzZGxjbHh1SUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdZWEpuY3lBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaUzVqWVd4c0tHRnlaM1Z0Wlc1MGN5d2dNU2s3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaWEl1WVhCd2JIa29kR2hwY3l3Z1lYSm5jeWs3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnYVdZZ0tHbHpUMkpxWldOMEtHaGhibVJzWlhJcEtTQjdYRzRnSUNBZ1lYSm5jeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3l3Z01TazdYRzRnSUNBZ2JHbHpkR1Z1WlhKeklEMGdhR0Z1Wkd4bGNpNXpiR2xqWlNncE8xeHVJQ0FnSUd4bGJpQTlJR3hwYzNSbGJtVnljeTVzWlc1bmRHZzdYRzRnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1Z4dUlDQWdJQ0FnYkdsemRHVnVaWEp6VzJsZExtRndjR3g1S0hSb2FYTXNJR0Z5WjNNcE8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUnlkV1U3WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExtRmtaRXhwYzNSbGJtVnlJRDBnWm5WdVkzUnBiMjRvZEhsd1pTd2diR2x6ZEdWdVpYSXBJSHRjYmlBZ2RtRnlJRzA3WEc1Y2JpQWdhV1lnS0NGcGMwWjFibU4wYVc5dUtHeHBjM1JsYm1WeUtTbGNiaUFnSUNCMGFISnZkeUJVZVhCbFJYSnliM0lvSjJ4cGMzUmxibVZ5SUcxMWMzUWdZbVVnWVNCbWRXNWpkR2x2YmljcE8xeHVYRzRnSUdsbUlDZ2hkR2hwY3k1ZlpYWmxiblJ6S1Z4dUlDQWdJSFJvYVhNdVgyVjJaVzUwY3lBOUlIdDlPMXh1WEc0Z0lDOHZJRlJ2SUdGMmIybGtJSEpsWTNWeWMybHZiaUJwYmlCMGFHVWdZMkZ6WlNCMGFHRjBJSFI1Y0dVZ1BUMDlJRndpYm1WM1RHbHpkR1Z1WlhKY0lpRWdRbVZtYjNKbFhHNGdJQzh2SUdGa1pHbHVaeUJwZENCMGJ5QjBhR1VnYkdsemRHVnVaWEp6TENCbWFYSnpkQ0JsYldsMElGd2libVYzVEdsemRHVnVaWEpjSWk1Y2JpQWdhV1lnS0hSb2FYTXVYMlYyWlc1MGN5NXVaWGRNYVhOMFpXNWxjaWxjYmlBZ0lDQjBhR2x6TG1WdGFYUW9KMjVsZDB4cGMzUmxibVZ5Snl3Z2RIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5HZFc1amRHbHZiaWhzYVhOMFpXNWxjaTVzYVhOMFpXNWxjaWtnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMFpXNWxjaTVzYVhOMFpXNWxjaUE2SUd4cGMzUmxibVZ5S1R0Y2JseHVJQ0JwWmlBb0lYUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhTbGNiaUFnSUNBdkx5QlBjSFJwYldsNlpTQjBhR1VnWTJGelpTQnZaaUJ2Ym1VZ2JHbHpkR1Z1WlhJdUlFUnZiaWQwSUc1bFpXUWdkR2hsSUdWNGRISmhJR0Z5Y21GNUlHOWlhbVZqZEM1Y2JpQWdJQ0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjBnUFNCc2FYTjBaVzVsY2p0Y2JpQWdaV3h6WlNCcFppQW9hWE5QWW1wbFkzUW9kR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRLU2xjYmlBZ0lDQXZMeUJKWmlCM1pTZDJaU0JoYkhKbFlXUjVJR2R2ZENCaGJpQmhjbkpoZVN3Z2FuVnpkQ0JoY0hCbGJtUXVYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZExuQjFjMmdvYkdsemRHVnVaWElwTzF4dUlDQmxiSE5sWEc0Z0lDQWdMeThnUVdSa2FXNW5JSFJvWlNCelpXTnZibVFnWld4bGJXVnVkQ3dnYm1WbFpDQjBieUJqYUdGdVoyVWdkRzhnWVhKeVlYa3VYRzRnSUNBZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZElEMGdXM1JvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU3dnYkdsemRHVnVaWEpkTzF4dVhHNGdJQzh2SUVOb1pXTnJJR1p2Y2lCc2FYTjBaVzVsY2lCc1pXRnJYRzRnSUdsbUlDaHBjMDlpYW1WamRDaDBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMHBJQ1ltSUNGMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwdWQyRnlibVZrS1NCN1hHNGdJQ0FnYVdZZ0tDRnBjMVZ1WkdWbWFXNWxaQ2gwYUdsekxsOXRZWGhNYVhOMFpXNWxjbk1wS1NCN1hHNGdJQ0FnSUNCdElEMGdkR2hwY3k1ZmJXRjRUR2x6ZEdWdVpYSnpPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdElEMGdSWFpsYm5SRmJXbDBkR1Z5TG1SbFptRjFiSFJOWVhoTWFYTjBaVzVsY25NN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHMGdKaVlnYlNBK0lEQWdKaVlnZEdocGN5NWZaWFpsYm5SelczUjVjR1ZkTG14bGJtZDBhQ0ErSUcwcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhTNTNZWEp1WldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25LRzV2WkdVcElIZGhjbTVwYm1jNklIQnZjM05wWW14bElFVjJaVzUwUlcxcGRIUmxjaUJ0WlcxdmNua2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZHNaV0ZySUdSbGRHVmpkR1ZrTGlBbFpDQnNhWE4wWlc1bGNuTWdZV1JrWldRdUlDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZYTmxJR1Z0YVhSMFpYSXVjMlYwVFdGNFRHbHpkR1Z1WlhKektDa2dkRzhnYVc1amNtVmhjMlVnYkdsdGFYUXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZExteGxibWQwYUNrN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnZibk52YkdVdWRISmhZMlVnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2JtOTBJSE4xY0hCdmNuUmxaQ0JwYmlCSlJTQXhNRnh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMblJ5WVdObEtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExtOXVJRDBnUlhabGJuUkZiV2wwZEdWeUxuQnliM1J2ZEhsd1pTNWhaR1JNYVhOMFpXNWxjanRjYmx4dVJYWmxiblJGYldsMGRHVnlMbkJ5YjNSdmRIbHdaUzV2Ym1ObElEMGdablZ1WTNScGIyNG9kSGx3WlN3Z2JHbHpkR1Z1WlhJcElIdGNiaUFnYVdZZ0tDRnBjMFoxYm1OMGFXOXVLR3hwYzNSbGJtVnlLU2xjYmlBZ0lDQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb0oyeHBjM1JsYm1WeUlHMTFjM1FnWW1VZ1lTQm1kVzVqZEdsdmJpY3BPMXh1WEc0Z0lIWmhjaUJtYVhKbFpDQTlJR1poYkhObE8xeHVYRzRnSUdaMWJtTjBhVzl1SUdjb0tTQjdYRzRnSUNBZ2RHaHBjeTV5WlcxdmRtVk1hWE4wWlc1bGNpaDBlWEJsTENCbktUdGNibHh1SUNBZ0lHbG1JQ2doWm1seVpXUXBJSHRjYmlBZ0lDQWdJR1pwY21Wa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUd4cGMzUmxibVZ5TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaeTVzYVhOMFpXNWxjaUE5SUd4cGMzUmxibVZ5TzF4dUlDQjBhR2x6TG05dUtIUjVjR1VzSUdjcE8xeHVYRzRnSUhKbGRIVnliaUIwYUdsek8xeHVmVHRjYmx4dUx5OGdaVzFwZEhNZ1lTQW5jbVZ0YjNabFRHbHpkR1Z1WlhJbklHVjJaVzUwSUdsbVppQjBhR1VnYkdsemRHVnVaWElnZDJGeklISmxiVzkyWldSY2JrVjJaVzUwUlcxcGRIUmxjaTV3Y205MGIzUjVjR1V1Y21WdGIzWmxUR2x6ZEdWdVpYSWdQU0JtZFc1amRHbHZiaWgwZVhCbExDQnNhWE4wWlc1bGNpa2dlMXh1SUNCMllYSWdiR2x6ZEN3Z2NHOXphWFJwYjI0c0lHeGxibWQwYUN3Z2FUdGNibHh1SUNCcFppQW9JV2x6Um5WdVkzUnBiMjRvYkdsemRHVnVaWElwS1Z4dUlDQWdJSFJvY205M0lGUjVjR1ZGY25KdmNpZ25iR2x6ZEdWdVpYSWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc1Y2JpQWdhV1lnS0NGMGFHbHpMbDlsZG1WdWRITWdmSHdnSVhSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFNsY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JseHVJQ0JzYVhOMElEMGdkR2hwY3k1ZlpYWmxiblJ6VzNSNWNHVmRPMXh1SUNCc1pXNW5kR2dnUFNCc2FYTjBMbXhsYm1kMGFEdGNiaUFnY0c5emFYUnBiMjRnUFNBdE1UdGNibHh1SUNCcFppQW9iR2x6ZENBOVBUMGdiR2x6ZEdWdVpYSWdmSHhjYmlBZ0lDQWdJQ2hwYzBaMWJtTjBhVzl1S0d4cGMzUXViR2x6ZEdWdVpYSXBJQ1ltSUd4cGMzUXViR2x6ZEdWdVpYSWdQVDA5SUd4cGMzUmxibVZ5S1NrZ2UxeHVJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjA3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMlYyWlc1MGN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lsY2JpQWdJQ0FnSUhSb2FYTXVaVzFwZENnbmNtVnRiM1psVEdsemRHVnVaWEluTENCMGVYQmxMQ0JzYVhOMFpXNWxjaWs3WEc1Y2JpQWdmU0JsYkhObElHbG1JQ2hwYzA5aWFtVmpkQ2hzYVhOMEtTa2dlMXh1SUNBZ0lHWnZjaUFvYVNBOUlHeGxibWQwYURzZ2FTMHRJRDRnTURzcElIdGNiaUFnSUNBZ0lHbG1JQ2hzYVhOMFcybGRJRDA5UFNCc2FYTjBaVzVsY2lCOGZGeHVJQ0FnSUNBZ0lDQWdJQ2hzYVhOMFcybGRMbXhwYzNSbGJtVnlJQ1ltSUd4cGMzUmJhVjB1YkdsemRHVnVaWElnUFQwOUlHeHBjM1JsYm1WeUtTa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOcGRHbHZiaUE5SUdrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNod2IzTnBkR2x2YmlBOElEQXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmx4dUlDQWdJR2xtSUNoc2FYTjBMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ2JHbHpkQzVzWlc1bmRHZ2dQU0F3TzF4dUlDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JHbHpkQzV6Y0d4cFkyVW9jRzl6YVhScGIyNHNJREVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbDlsZG1WdWRITXVjbVZ0YjNabFRHbHpkR1Z1WlhJcFhHNGdJQ0FnSUNCMGFHbHpMbVZ0YVhRb0ozSmxiVzkyWlV4cGMzUmxibVZ5Snl3Z2RIbHdaU3dnYkdsemRHVnVaWElwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhSb2FYTTdYRzU5TzF4dVhHNUZkbVZ1ZEVWdGFYUjBaWEl1Y0hKdmRHOTBlWEJsTG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lBOUlHWjFibU4wYVc5dUtIUjVjR1VwSUh0Y2JpQWdkbUZ5SUd0bGVTd2diR2x6ZEdWdVpYSnpPMXh1WEc0Z0lHbG1JQ2doZEdocGN5NWZaWFpsYm5SektWeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVYRzRnSUM4dklHNXZkQ0JzYVhOMFpXNXBibWNnWm05eUlISmxiVzkyWlV4cGMzUmxibVZ5TENCdWJ5QnVaV1ZrSUhSdklHVnRhWFJjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNdWNtVnRiM1psVEdsemRHVnVaWElwSUh0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNQ2xjYmlBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwY3lBOUlIdDlPMXh1SUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11WDJWMlpXNTBjMXQwZVhCbFhTbGNiaUFnSUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dUlDQXZMeUJsYldsMElISmxiVzkyWlV4cGMzUmxibVZ5SUdadmNpQmhiR3dnYkdsemRHVnVaWEp6SUc5dUlHRnNiQ0JsZG1WdWRITmNiaUFnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BUMDlJREFwSUh0Y2JpQWdJQ0JtYjNJZ0tHdGxlU0JwYmlCMGFHbHpMbDlsZG1WdWRITXBJSHRjYmlBZ0lDQWdJR2xtSUNoclpYa2dQVDA5SUNkeVpXMXZkbVZNYVhOMFpXNWxjaWNwSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnZEdocGN5NXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTW9hMlY1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1eVpXMXZkbVZCYkd4TWFYTjBaVzVsY25Nb0ozSmxiVzkyWlV4cGMzUmxibVZ5SnlrN1hHNGdJQ0FnZEdocGN5NWZaWFpsYm5SeklEMGdlMzA3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMWNibHh1SUNCc2FYTjBaVzVsY25NZ1BTQjBhR2x6TGw5bGRtVnVkSE5iZEhsd1pWMDdYRzVjYmlBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvYkdsemRHVnVaWEp6S1NrZ2UxeHVJQ0FnSUhSb2FYTXVjbVZ0YjNabFRHbHpkR1Z1WlhJb2RIbHdaU3dnYkdsemRHVnVaWEp6S1R0Y2JpQWdmU0JsYkhObElHbG1JQ2hzYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0F2THlCTVNVWlBJRzl5WkdWeVhHNGdJQ0FnZDJocGJHVWdLR3hwYzNSbGJtVnljeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQjBhR2x6TG5KbGJXOTJaVXhwYzNSbGJtVnlLSFI1Y0dVc0lHeHBjM1JsYm1WeWMxdHNhWE4wWlc1bGNuTXViR1Z1WjNSb0lDMGdNVjBwTzF4dUlDQjlYRzRnSUdSbGJHVjBaU0IwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjA3WEc1Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExteHBjM1JsYm1WeWN5QTlJR1oxYm1OMGFXOXVLSFI1Y0dVcElIdGNiaUFnZG1GeUlISmxkRHRjYmlBZ2FXWWdLQ0YwYUdsekxsOWxkbVZ1ZEhNZ2ZId2dJWFJvYVhNdVgyVjJaVzUwYzF0MGVYQmxYU2xjYmlBZ0lDQnlaWFFnUFNCYlhUdGNiaUFnWld4elpTQnBaaUFvYVhOR2RXNWpkR2x2YmloMGFHbHpMbDlsZG1WdWRITmJkSGx3WlYwcEtWeHVJQ0FnSUhKbGRDQTlJRnQwYUdsekxsOWxkbVZ1ZEhOYmRIbHdaVjFkTzF4dUlDQmxiSE5sWEc0Z0lDQWdjbVYwSUQwZ2RHaHBjeTVmWlhabGJuUnpXM1I1Y0dWZExuTnNhV05sS0NrN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OU8xeHVYRzVGZG1WdWRFVnRhWFIwWlhJdWNISnZkRzkwZVhCbExteHBjM1JsYm1WeVEyOTFiblFnUFNCbWRXNWpkR2x2YmloMGVYQmxLU0I3WEc0Z0lHbG1JQ2gwYUdsekxsOWxkbVZ1ZEhNcElIdGNiaUFnSUNCMllYSWdaWFpzYVhOMFpXNWxjaUE5SUhSb2FYTXVYMlYyWlc1MGMxdDBlWEJsWFR0Y2JseHVJQ0FnSUdsbUlDaHBjMFoxYm1OMGFXOXVLR1YyYkdsemRHVnVaWElwS1Z4dUlDQWdJQ0FnY21WMGRYSnVJREU3WEc0Z0lDQWdaV3h6WlNCcFppQW9aWFpzYVhOMFpXNWxjaWxjYmlBZ0lDQWdJSEpsZEhWeWJpQmxkbXhwYzNSbGJtVnlMbXhsYm1kMGFEdGNiaUFnZlZ4dUlDQnlaWFIxY200Z01EdGNibjA3WEc1Y2JrVjJaVzUwUlcxcGRIUmxjaTVzYVhOMFpXNWxja052ZFc1MElEMGdablZ1WTNScGIyNG9aVzFwZEhSbGNpd2dkSGx3WlNrZ2UxeHVJQ0J5WlhSMWNtNGdaVzFwZEhSbGNpNXNhWE4wWlc1bGNrTnZkVzUwS0hSNWNHVXBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdhWE5HZFc1amRHbHZiaWhoY21jcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQmhjbWNnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHbHpUblZ0WW1WeUtHRnlaeWtnZTF4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdGeVp5QTlQVDBnSjI1MWJXSmxjaWM3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2x6VDJKcVpXTjBLR0Z5WnlrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHRnlaeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdZWEpuSUNFOVBTQnVkV3hzTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJwYzFWdVpHVm1hVzVsWkNoaGNtY3BJSHRjYmlBZ2NtVjBkWEp1SUdGeVp5QTlQVDBnZG05cFpDQXdPMXh1ZlZ4dUlpd2laWGh3YjNKMGN5NXlaV0ZrSUQwZ1puVnVZM1JwYjI0Z0tHSjFabVpsY2l3Z2IyWm1jMlYwTENCcGMweEZMQ0J0VEdWdUxDQnVRbmwwWlhNcElIdGNiaUFnZG1GeUlHVXNJRzFjYmlBZ2RtRnlJR1ZNWlc0Z1BTQW9ia0o1ZEdWeklDb2dPQ2tnTFNCdFRHVnVJQzBnTVZ4dUlDQjJZWElnWlUxaGVDQTlJQ2d4SUR3OElHVk1aVzRwSUMwZ01WeHVJQ0IyWVhJZ1pVSnBZWE1nUFNCbFRXRjRJRDQrSURGY2JpQWdkbUZ5SUc1Q2FYUnpJRDBnTFRkY2JpQWdkbUZ5SUdrZ1BTQnBjMHhGSUQ4Z0tHNUNlWFJsY3lBdElERXBJRG9nTUZ4dUlDQjJZWElnWkNBOUlHbHpURVVnUHlBdE1TQTZJREZjYmlBZ2RtRnlJSE1nUFNCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYxY2JseHVJQ0JwSUNzOUlHUmNibHh1SUNCbElEMGdjeUFtSUNnb01TQThQQ0FvTFc1Q2FYUnpLU2tnTFNBeEtWeHVJQ0J6SUQ0K1BTQW9MVzVDYVhSektWeHVJQ0J1UW1sMGN5QXJQU0JsVEdWdVhHNGdJR1p2Y2lBb095QnVRbWwwY3lBK0lEQTdJR1VnUFNBb1pTQXFJREkxTmlrZ0t5QmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FWMHNJR2tnS3owZ1pDd2dia0pwZEhNZ0xUMGdPQ2tnZTMxY2JseHVJQ0J0SUQwZ1pTQW1JQ2dvTVNBOFBDQW9MVzVDYVhSektTa2dMU0F4S1Z4dUlDQmxJRDQrUFNBb0xXNUNhWFJ6S1Z4dUlDQnVRbWwwY3lBclBTQnRUR1Z1WEc0Z0lHWnZjaUFvT3lCdVFtbDBjeUErSURBN0lHMGdQU0FvYlNBcUlESTFOaWtnS3lCaWRXWm1aWEpiYjJabWMyVjBJQ3NnYVYwc0lHa2dLejBnWkN3Z2JrSnBkSE1nTFQwZ09Da2dlMzFjYmx4dUlDQnBaaUFvWlNBOVBUMGdNQ2tnZTF4dUlDQWdJR1VnUFNBeElDMGdaVUpwWVhOY2JpQWdmU0JsYkhObElHbG1JQ2hsSUQwOVBTQmxUV0Y0S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzBnUHlCT1lVNGdPaUFvS0hNZ1B5QXRNU0E2SURFcElDb2dTVzVtYVc1cGRIa3BYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdiU0E5SUcwZ0t5Qk5ZWFJvTG5CdmR5Z3lMQ0J0VEdWdUtWeHVJQ0FnSUdVZ1BTQmxJQzBnWlVKcFlYTmNiaUFnZlZ4dUlDQnlaWFIxY200Z0tITWdQeUF0TVNBNklERXBJQ29nYlNBcUlFMWhkR2d1Y0c5M0tESXNJR1VnTFNCdFRHVnVLVnh1ZlZ4dVhHNWxlSEJ2Y25SekxuZHlhWFJsSUQwZ1puVnVZM1JwYjI0Z0tHSjFabVpsY2l3Z2RtRnNkV1VzSUc5bVpuTmxkQ3dnYVhOTVJTd2diVXhsYml3Z2JrSjVkR1Z6S1NCN1hHNGdJSFpoY2lCbExDQnRMQ0JqWEc0Z0lIWmhjaUJsVEdWdUlEMGdLRzVDZVhSbGN5QXFJRGdwSUMwZ2JVeGxiaUF0SURGY2JpQWdkbUZ5SUdWTllYZ2dQU0FvTVNBOFBDQmxUR1Z1S1NBdElERmNiaUFnZG1GeUlHVkNhV0Z6SUQwZ1pVMWhlQ0ErUGlBeFhHNGdJSFpoY2lCeWRDQTlJQ2h0VEdWdUlEMDlQU0F5TXlBL0lFMWhkR2d1Y0c5M0tESXNJQzB5TkNrZ0xTQk5ZWFJvTG5CdmR5Z3lMQ0F0TnpjcElEb2dNQ2xjYmlBZ2RtRnlJR2tnUFNCcGMweEZJRDhnTUNBNklDaHVRbmwwWlhNZ0xTQXhLVnh1SUNCMllYSWdaQ0E5SUdselRFVWdQeUF4SURvZ0xURmNiaUFnZG1GeUlITWdQU0IyWVd4MVpTQThJREFnZkh3Z0tIWmhiSFZsSUQwOVBTQXdJQ1ltSURFZ0x5QjJZV3gxWlNBOElEQXBJRDhnTVNBNklEQmNibHh1SUNCMllXeDFaU0E5SUUxaGRHZ3VZV0p6S0haaGJIVmxLVnh1WEc0Z0lHbG1JQ2hwYzA1aFRpaDJZV3gxWlNrZ2ZId2dkbUZzZFdVZ1BUMDlJRWx1Wm1sdWFYUjVLU0I3WEc0Z0lDQWdiU0E5SUdselRtRk9LSFpoYkhWbEtTQS9JREVnT2lBd1hHNGdJQ0FnWlNBOUlHVk5ZWGhjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JsSUQwZ1RXRjBhQzVtYkc5dmNpaE5ZWFJvTG14dlp5aDJZV3gxWlNrZ0x5Qk5ZWFJvTGt4T01pbGNiaUFnSUNCcFppQW9kbUZzZFdVZ0tpQW9ZeUE5SUUxaGRHZ3VjRzkzS0RJc0lDMWxLU2tnUENBeEtTQjdYRzRnSUNBZ0lDQmxMUzFjYmlBZ0lDQWdJR01nS2owZ01seHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1pTQXJJR1ZDYVdGeklENDlJREVwSUh0Y2JpQWdJQ0FnSUhaaGJIVmxJQ3M5SUhKMElDOGdZMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMllXeDFaU0FyUFNCeWRDQXFJRTFoZEdndWNHOTNLRElzSURFZ0xTQmxRbWxoY3lsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0haaGJIVmxJQ29nWXlBK1BTQXlLU0I3WEc0Z0lDQWdJQ0JsS3l0Y2JpQWdJQ0FnSUdNZ0x6MGdNbHh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsSUNzZ1pVSnBZWE1nUGowZ1pVMWhlQ2tnZTF4dUlDQWdJQ0FnYlNBOUlEQmNiaUFnSUNBZ0lHVWdQU0JsVFdGNFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNobElDc2daVUpwWVhNZ1BqMGdNU2tnZTF4dUlDQWdJQ0FnYlNBOUlDZ29kbUZzZFdVZ0tpQmpLU0F0SURFcElDb2dUV0YwYUM1d2IzY29NaXdnYlV4bGJpbGNiaUFnSUNBZ0lHVWdQU0JsSUNzZ1pVSnBZWE5jYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2JTQTlJSFpoYkhWbElDb2dUV0YwYUM1d2IzY29NaXdnWlVKcFlYTWdMU0F4S1NBcUlFMWhkR2d1Y0c5M0tESXNJRzFNWlc0cFhHNGdJQ0FnSUNCbElEMGdNRnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR1p2Y2lBb095QnRUR1Z1SUQ0OUlEZzdJR0oxWm1abGNsdHZabVp6WlhRZ0t5QnBYU0E5SUcwZ0ppQXdlR1ptTENCcElDczlJR1FzSUcwZ0x6MGdNalUyTENCdFRHVnVJQzA5SURncElIdDlYRzVjYmlBZ1pTQTlJQ2hsSUR3OElHMU1aVzRwSUh3Z2JWeHVJQ0JsVEdWdUlDczlJRzFNWlc1Y2JpQWdabTl5SUNnN0lHVk1aVzRnUGlBd095QmlkV1ptWlhKYmIyWm1jMlYwSUNzZ2FWMGdQU0JsSUNZZ01IaG1aaXdnYVNBclBTQmtMQ0JsSUM4OUlESTFOaXdnWlV4bGJpQXRQU0E0S1NCN2ZWeHVYRzRnSUdKMVptWmxjbHR2Wm1aelpYUWdLeUJwSUMwZ1pGMGdmRDBnY3lBcUlERXlPRnh1ZlZ4dUlpd2lhV1lnS0hSNWNHVnZaaUJQWW1wbFkzUXVZM0psWVhSbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQzh2SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1p5YjIwZ2MzUmhibVJoY21RZ2JtOWtaUzVxY3lBbmRYUnBiQ2NnYlc5a2RXeGxYRzRnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnYVc1b1pYSnBkSE1vWTNSdmNpd2djM1Z3WlhKRGRHOXlLU0I3WEc0Z0lDQWdZM1J2Y2k1emRYQmxjbDhnUFNCemRYQmxja04wYjNKY2JpQWdJQ0JqZEc5eUxuQnliM1J2ZEhsd1pTQTlJRTlpYW1WamRDNWpjbVZoZEdVb2MzVndaWEpEZEc5eUxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lDQWdZMjl1YzNSeWRXTjBiM0k2SUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1U2SUdOMGIzSXNYRzRnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0IzY21sMFlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgwN1hHNTlJR1ZzYzJVZ2UxeHVJQ0F2THlCdmJHUWdjMk5vYjI5c0lITm9hVzBnWm05eUlHOXNaQ0JpY205M2MyVnljMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUdsdWFHVnlhWFJ6S0dOMGIzSXNJSE4xY0dWeVEzUnZjaWtnZTF4dUlDQWdJR04wYjNJdWMzVndaWEpmSUQwZ2MzVndaWEpEZEc5eVhHNGdJQ0FnZG1GeUlGUmxiWEJEZEc5eUlEMGdablZ1WTNScGIyNGdLQ2tnZTMxY2JpQWdJQ0JVWlcxd1EzUnZjaTV3Y205MGIzUjVjR1VnUFNCemRYQmxja04wYjNJdWNISnZkRzkwZVhCbFhHNGdJQ0FnWTNSdmNpNXdjbTkwYjNSNWNHVWdQU0J1WlhjZ1ZHVnRjRU4wYjNJb0tWeHVJQ0FnSUdOMGIzSXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5SUQwZ1kzUnZjbHh1SUNCOVhHNTlYRzRpTENKMllYSWdkRzlUZEhKcGJtY2dQU0I3ZlM1MGIxTjBjbWx1Wnp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkJjbkpoZVM1cGMwRnljbUY1SUh4OElHWjFibU4wYVc5dUlDaGhjbklwSUh0Y2JpQWdjbVYwZFhKdUlIUnZVM1J5YVc1bkxtTmhiR3dvWVhKeUtTQTlQU0FuVzI5aWFtVmpkQ0JCY25KaGVWMG5PMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhV1lnS0NGd2NtOWpaWE56TG5abGNuTnBiMjRnZkh4Y2JpQWdJQ0J3Y205alpYTnpMblpsY25OcGIyNHVhVzVrWlhoUFppZ25kakF1SnlrZ1BUMDlJREFnZkh4Y2JpQWdJQ0J3Y205alpYTnpMblpsY25OcGIyNHVhVzVrWlhoUFppZ25kakV1SnlrZ1BUMDlJREFnSmlZZ2NISnZZMlZ6Y3k1MlpYSnphVzl1TG1sdVpHVjRUMllvSjNZeExqZ3VKeWtnSVQwOUlEQXBJSHRjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lHNWxlSFJVYVdOck9pQnVaWGgwVkdsamF5QjlPMXh1ZlNCbGJITmxJSHRjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCd2NtOWpaWE56WEc1OVhHNWNibVoxYm1OMGFXOXVJRzVsZUhSVWFXTnJLR1p1TENCaGNtY3hMQ0JoY21jeUxDQmhjbWN6S1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWm00Z0lUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkY0ltTmhiR3hpWVdOclhDSWdZWEpuZFcxbGJuUWdiWFZ6ZENCaVpTQmhJR1oxYm1OMGFXOXVKeWs3WEc0Z0lIMWNiaUFnZG1GeUlHeGxiaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3WEc0Z0lIWmhjaUJoY21kekxDQnBPMXh1SUNCemQybDBZMmdnS0d4bGJpa2dlMXh1SUNCallYTmxJREE2WEc0Z0lHTmhjMlVnTVRwY2JpQWdJQ0J5WlhSMWNtNGdjSEp2WTJWemN5NXVaWGgwVkdsamF5aG1iaWs3WEc0Z0lHTmhjMlVnTWpwY2JpQWdJQ0J5WlhSMWNtNGdjSEp2WTJWemN5NXVaWGgwVkdsamF5aG1kVzVqZEdsdmJpQmhablJsY2xScFkydFBibVVvS1NCN1hHNGdJQ0FnSUNCbWJpNWpZV3hzS0c1MWJHd3NJR0Z5WnpFcE8xeHVJQ0FnSUgwcE8xeHVJQ0JqWVhObElETTZYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRnWVdaMFpYSlVhV05yVkhkdktDa2dlMXh1SUNBZ0lDQWdabTR1WTJGc2JDaHVkV3hzTENCaGNtY3hMQ0JoY21jeUtUdGNiaUFnSUNCOUtUdGNiaUFnWTJGelpTQTBPbHh1SUNBZ0lISmxkSFZ5YmlCd2NtOWpaWE56TG01bGVIUlVhV05yS0daMWJtTjBhVzl1SUdGbWRHVnlWR2xqYTFSb2NtVmxLQ2tnZTF4dUlDQWdJQ0FnWm00dVkyRnNiQ2h1ZFd4c0xDQmhjbWN4TENCaGNtY3lMQ0JoY21jektUdGNiaUFnSUNCOUtUdGNiaUFnWkdWbVlYVnNkRHBjYmlBZ0lDQmhjbWR6SUQwZ2JtVjNJRUZ5Y21GNUtHeGxiaUF0SURFcE8xeHVJQ0FnSUdrZ1BTQXdPMXh1SUNBZ0lIZG9hV3hsSUNocElEd2dZWEpuY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUdGeVozTmJhU3NyWFNBOUlHRnlaM1Z0Wlc1MGMxdHBYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWm5WdVkzUnBiMjRnWVdaMFpYSlVhV05yS0NrZ2UxeHVJQ0FnSUNBZ1ptNHVZWEJ3Ykhrb2JuVnNiQ3dnWVhKbmN5azdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibHh1SWl3aUx5OGdjMmhwYlNCbWIzSWdkWE5wYm1jZ2NISnZZMlZ6Y3lCcGJpQmljbTkzYzJWeVhHNTJZWElnY0hKdlkyVnpjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTMwN1hHNWNiaTh2SUdOaFkyaGxaQ0JtY205dElIZG9ZWFJsZG1WeUlHZHNiMkpoYkNCcGN5QndjbVZ6Wlc1MElITnZJSFJvWVhRZ2RHVnpkQ0J5ZFc1dVpYSnpJSFJvWVhRZ2MzUjFZaUJwZEZ4dUx5OGdaRzl1SjNRZ1luSmxZV3NnZEdocGJtZHpMaUFnUW5WMElIZGxJRzVsWldRZ2RHOGdkM0poY0NCcGRDQnBiaUJoSUhSeWVTQmpZWFJqYUNCcGJpQmpZWE5sSUdsMElHbHpYRzR2THlCM2NtRndjR1ZrSUdsdUlITjBjbWxqZENCdGIyUmxJR052WkdVZ2QyaHBZMmdnWkc5bGMyNG5kQ0JrWldacGJtVWdZVzU1SUdkc2IySmhiSE11SUNCSmRDZHpJR2x1YzJsa1pTQmhYRzR2THlCbWRXNWpkR2x2YmlCaVpXTmhkWE5sSUhSeWVTOWpZWFJqYUdWeklHUmxiM0IwYVcxcGVtVWdhVzRnWTJWeWRHRnBiaUJsYm1kcGJtVnpMbHh1WEc1MllYSWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWREdGNiblpoY2lCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRN1hHNWNibVoxYm1OMGFXOXVJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHpaWFJVYVcxbGIzVjBJR2hoY3lCdWIzUWdZbVZsYmlCa1pXWnBibVZrSnlrN1hHNTlYRzVtZFc1amRHbHZiaUJrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUNncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJOc1pXRnlWR2x0Wlc5MWRDQm9ZWE1nYm05MElHSmxaVzRnWkdWbWFXNWxaQ2NwTzF4dWZWeHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5sZEZScGJXVnZkWFFnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRZ1BTQnpaWFJVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0JrWldaaGRXeDBVMlYwVkdsdGIzVjBPMXh1SUNBZ0lIMWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOc1pXRnlWR2x0Wlc5MWRDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwSUQwZ1kyeGxZWEpVYVcxbGIzVjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdaR1ZtWVhWc2RFTnNaV0Z5VkdsdFpXOTFkRHRjYmlBZ0lDQjlYRzU5SUNncEtWeHVablZ1WTNScGIyNGdjblZ1VkdsdFpXOTFkQ2htZFc0cElIdGNiaUFnSUNCcFppQW9ZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlQVDBnYzJWMFZHbHRaVzkxZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMjV2Y20xaGJDQmxiblpwY205dFpXNTBjeUJwYmlCellXNWxJSE5wZEhWaGRHbHZibk5jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5sZEZScGJXVnZkWFFvWm5WdUxDQXdLVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdhV1lnYzJWMFZHbHRaVzkxZENCM1lYTnVKM1FnWVhaaGFXeGhZbXhsSUdKMWRDQjNZWE1nYkdGMGRHVnlJR1JsWm1sdVpXUmNiaUFnSUNCcFppQW9LR05oWTJobFpGTmxkRlJwYldWdmRYUWdQVDA5SUdSbFptRjFiSFJUWlhSVWFXMXZkWFFnZkh3Z0lXTmhZMmhsWkZObGRGUnBiV1Z2ZFhRcElDWW1JSE5sZEZScGJXVnZkWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyRmphR1ZrVTJWMFZHbHRaVzkxZENBOUlITmxkRlJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaWFJVYVcxbGIzVjBLR1oxYml3Z01DazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkb1pXNGdkMmhsYmlCemIyMWxZbTlrZVNCb1lYTWdjMk55WlhkbFpDQjNhWFJvSUhObGRGUnBiV1Z2ZFhRZ1luVjBJRzV2SUVrdVJTNGdiV0ZrWkc1bGMzTmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCM1pTQmhjbVVnYVc0Z1NTNUZMaUJpZFhRZ2RHaGxJSE5qY21sd2RDQm9ZWE1nWW1WbGJpQmxkbUZzWldRZ2MyOGdTUzVGTGlCa2IyVnpiaWQwSUhSeWRYTjBJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJSGRvWlc0Z1kyRnNiR1ZrSUc1dmNtMWhiR3g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrVTJWMFZHbHRaVzkxZEM1allXeHNLRzUxYkd3c0lHWjFiaXdnTUNrN1hHNGdJQ0FnSUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmhZMmhsWkZObGRGUnBiV1Z2ZFhRdVkyRnNiQ2gwYUdsekxDQm1kVzRzSURBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzVjYm4xY2JtWjFibU4wYVc5dUlISjFia05zWldGeVZHbHRaVzkxZENodFlYSnJaWElwSUh0Y2JpQWdJQ0JwWmlBb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JqYkdWaGNsUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdMeTl1YjNKdFlXd2daVzUyYVhKdmJXVnVkSE1nYVc0Z2MyRnVaU0J6YVhSMVlYUnBiMjV6WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdZZ1kyeGxZWEpVYVcxbGIzVjBJSGRoYzI0bmRDQmhkbUZwYkdGaWJHVWdZblYwSUhkaGN5QnNZWFIwWlhJZ1pHVm1hVzVsWkZ4dUlDQWdJR2xtSUNnb1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMDlQU0JrWldaaGRXeDBRMnhsWVhKVWFXMWxiM1YwSUh4OElDRmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXBJQ1ltSUdOc1pXRnlWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0JqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFnUFNCamJHVmhjbFJwYldWdmRYUTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR1ZoY2xScGJXVnZkWFFvYldGeWEyVnlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2QyaGxiaUIzYUdWdUlITnZiV1ZpYjJSNUlHaGhjeUJ6WTNKbGQyVmtJSGRwZEdnZ2MyVjBWR2x0Wlc5MWRDQmlkWFFnYm04Z1NTNUZMaUJ0WVdSa2JtVnpjMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBLRzFoY210bGNpazdYRzRnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWGFHVnVJSGRsSUdGeVpTQnBiaUJKTGtVdUlHSjFkQ0IwYUdVZ2MyTnlhWEIwSUdoaGN5QmlaV1Z1SUdWMllXeGxaQ0J6YnlCSkxrVXVJR1J2WlhOdUozUWdJSFJ5ZFhOMElIUm9aU0JuYkc5aVlXd2diMkpxWldOMElIZG9aVzRnWTJGc2JHVmtJRzV2Y20xaGJHeDVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwTG1OaGJHd29iblZzYkN3Z2JXRnlhMlZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpZVzFsSUdGeklHRmliM1psSUdKMWRDQjNhR1Z1SUdsMEozTWdZU0IyWlhKemFXOXVJRzltSUVrdVJTNGdkR2hoZENCdGRYTjBJR2hoZG1VZ2RHaGxJR2RzYjJKaGJDQnZZbXBsWTNRZ1ptOXlJQ2QwYUdsekp5d2dhRzl3Wm5Wc2JIa2diM1Z5SUdOdmJuUmxlSFFnWTI5eWNtVmpkQ0J2ZEdobGNuZHBjMlVnYVhRZ2QybHNiQ0IwYUhKdmR5QmhJR2RzYjJKaGJDQmxjbkp2Y2k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOdmJXVWdkbVZ5YzJsdmJuTWdiMllnU1M1RkxpQm9ZWFpsSUdScFptWmxjbVZ1ZENCeWRXeGxjeUJtYjNJZ1kyeGxZWEpVYVcxbGIzVjBJSFp6SUhObGRGUnBiV1Z2ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUXVZMkZzYkNoMGFHbHpMQ0J0WVhKclpYSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc1Y2JseHVmVnh1ZG1GeUlIRjFaWFZsSUQwZ1cxMDdYRzUyWVhJZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JuWmhjaUJqZFhKeVpXNTBVWFZsZFdVN1hHNTJZWElnY1hWbGRXVkpibVJsZUNBOUlDMHhPMXh1WEc1bWRXNWpkR2x2YmlCamJHVmhibFZ3VG1WNGRGUnBZMnNvS1NCN1hHNGdJQ0FnYVdZZ0tDRmtjbUZwYm1sdVp5QjhmQ0FoWTNWeWNtVnVkRkYxWlhWbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNCOVhHNGdJQ0FnWkhKaGFXNXBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvWTNWeWNtVnVkRkYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnhkV1YxWlNBOUlHTjFjbkpsYm5SUmRXVjFaUzVqYjI1allYUW9jWFZsZFdVcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhGMVpYVmxTVzVrWlhnZ1BTQXRNVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQmtjbUZwYmxGMVpYVmxLQ2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtjbUZwYmxGMVpYVmxLQ2tnZTF4dUlDQWdJR2xtSUNoa2NtRnBibWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnZlZ4dUlDQWdJSFpoY2lCMGFXMWxiM1YwSUQwZ2NuVnVWR2x0Wlc5MWRDaGpiR1ZoYmxWd1RtVjRkRlJwWTJzcE8xeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJSFpoY2lCc1pXNGdQU0J4ZFdWMVpTNXNaVzVuZEdnN1hHNGdJQ0FnZDJocGJHVW9iR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SUmRXVjFaU0E5SUhGMVpYVmxPMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvS3l0eGRXVjFaVWx1WkdWNElEd2diR1Z1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kzVnljbVZ1ZEZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRkYxWlhWbFczRjFaWFZsU1c1a1pYaGRMbkoxYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0FnSUNBZ2JHVnVJRDBnY1hWbGRXVXViR1Z1WjNSb08xeHVJQ0FnSUgxY2JpQWdJQ0JqZFhKeVpXNTBVWFZsZFdVZ1BTQnVkV3hzTzF4dUlDQWdJR1J5WVdsdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUNBZ2NuVnVRMnhsWVhKVWFXMWxiM1YwS0hScGJXVnZkWFFwTzF4dWZWeHVYRzV3Y205alpYTnpMbTVsZUhSVWFXTnJJRDBnWm5WdVkzUnBiMjRnS0daMWJpa2dlMXh1SUNBZ0lIWmhjaUJoY21keklEMGdibVYzSUVGeWNtRjVLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlERTdJR2tnUENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHRnlaM05iYVNBdElERmRJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhGMVpYVmxMbkIxYzJnb2JtVjNJRWwwWlcwb1puVnVMQ0JoY21kektTazdYRzRnSUNBZ2FXWWdLSEYxWlhWbExteGxibWQwYUNBOVBUMGdNU0FtSmlBaFpISmhhVzVwYm1jcElIdGNiaUFnSUNBZ0lDQWdjblZ1VkdsdFpXOTFkQ2hrY21GcGJsRjFaWFZsS1R0Y2JpQWdJQ0I5WEc1OU8xeHVYRzR2THlCMk9DQnNhV3RsY3lCd2NtVmthV04wYVdKc1pTQnZZbXBsWTNSelhHNW1kVzVqZEdsdmJpQkpkR1Z0S0daMWJpd2dZWEp5WVhrcElIdGNiaUFnSUNCMGFHbHpMbVoxYmlBOUlHWjFianRjYmlBZ0lDQjBhR2x6TG1GeWNtRjVJRDBnWVhKeVlYazdYRzU5WEc1SmRHVnRMbkJ5YjNSdmRIbHdaUzV5ZFc0Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1bWRXNHVZWEJ3Ykhrb2JuVnNiQ3dnZEdocGN5NWhjbkpoZVNrN1hHNTlPMXh1Y0hKdlkyVnpjeTUwYVhSc1pTQTlJQ2RpY205M2MyVnlKenRjYm5CeWIyTmxjM011WW5KdmQzTmxjaUE5SUhSeWRXVTdYRzV3Y205alpYTnpMbVZ1ZGlBOUlIdDlPMXh1Y0hKdlkyVnpjeTVoY21kMklEMGdXMTA3WEc1d2NtOWpaWE56TG5abGNuTnBiMjRnUFNBbkp6c2dMeThnWlcxd2RIa2djM1J5YVc1bklIUnZJR0YyYjJsa0lISmxaMlY0Y0NCcGMzTjFaWE5jYm5CeWIyTmxjM011ZG1WeWMybHZibk1nUFNCN2ZUdGNibHh1Wm5WdVkzUnBiMjRnYm05dmNDZ3BJSHQ5WEc1Y2JuQnliMk5sYzNNdWIyNGdQU0J1YjI5d08xeHVjSEp2WTJWemN5NWhaR1JNYVhOMFpXNWxjaUE5SUc1dmIzQTdYRzV3Y205alpYTnpMbTl1WTJVZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1dlptWWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXlaVzF2ZG1WTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG5KbGJXOTJaVUZzYkV4cGMzUmxibVZ5Y3lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG1WdGFYUWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXdjbVZ3Wlc1a1RHbHpkR1Z1WlhJZ1BTQnViMjl3TzF4dWNISnZZMlZ6Y3k1d2NtVndaVzVrVDI1alpVeHBjM1JsYm1WeUlEMGdibTl2Y0R0Y2JseHVjSEp2WTJWemN5NXNhWE4wWlc1bGNuTWdQU0JtZFc1amRHbHZiaUFvYm1GdFpTa2dleUJ5WlhSMWNtNGdXMTBnZlZ4dVhHNXdjbTlqWlhOekxtSnBibVJwYm1jZ1BTQm1kVzVqZEdsdmJpQW9ibUZ0WlNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKdlkyVnpjeTVpYVc1a2FXNW5JR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUW5LVHRjYm4wN1hHNWNibkJ5YjJObGMzTXVZM2RrSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdKeThuSUgwN1hHNXdjbTlqWlhOekxtTm9aR2x5SUQwZ1puVnVZM1JwYjI0Z0tHUnBjaWtnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWphR1JwY2lCcGN5QnViM1FnYzNWd2NHOXlkR1ZrSnlrN1hHNTlPMXh1Y0hKdlkyVnpjeTUxYldGemF5QTlJR1oxYm1OMGFXOXVLQ2tnZXlCeVpYUjFjbTRnTURzZ2ZUdGNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQktiM2xsYm5Rc0lFbHVZeTRnWVc1a0lHOTBhR1Z5SUU1dlpHVWdZMjl1ZEhKcFluVjBiM0p6TGx4dUx5OWNiaTh2SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoWEc0dkx5QmpiM0I1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobFhHNHZMeUJjSWxOdlpuUjNZWEpsWENJcExDQjBieUJrWldGc0lHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtZGNiaTh2SUhkcGRHaHZkWFFnYkdsdGFYUmhkR2x2YmlCMGFHVWdjbWxuYUhSeklIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDeGNiaTh2SUdScGMzUnlhV0oxZEdVc0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhSY2JpOHZJSEJsY25OdmJuTWdkRzhnZDJodmJTQjBhR1VnVTI5bWRIZGhjbVVnYVhNZ1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlZ4dUx5OGdabTlzYkc5M2FXNW5JR052Ym1ScGRHbHZibk02WEc0dkwxeHVMeThnVkdobElHRmliM1psSUdOdmNIbHlhV2RvZENCdWIzUnBZMlVnWVc1a0lIUm9hWE1nY0dWeWJXbHpjMmx2YmlCdWIzUnBZMlVnYzJoaGJHd2dZbVVnYVc1amJIVmtaV1JjYmk4dklHbHVJR0ZzYkNCamIzQnBaWE1nYjNJZ2MzVmljM1JoYm5ScFlXd2djRzl5ZEdsdmJuTWdiMllnZEdobElGTnZablIzWVhKbExseHVMeTljYmk4dklGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTmNiaTh2SUU5U0lFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWmNiaTh2SUUxRlVrTklRVTVVUVVKSlRFbFVXU3dnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U1Y2JpOHZJRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSU0JCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MRnh1THk4Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTWEc0dkx5QlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN3Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZYRzR2THlCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTRnVkVoRklGTlBSbFJYUVZKRkxseHVYRzR2THlCaElHUjFjR3hsZUNCemRISmxZVzBnYVhNZ2FuVnpkQ0JoSUhOMGNtVmhiU0IwYUdGMElHbHpJR0p2ZEdnZ2NtVmhaR0ZpYkdVZ1lXNWtJSGR5YVhSaFlteGxMbHh1THk4Z1UybHVZMlVnU2xNZ1pHOWxjMjRuZENCb1lYWmxJRzExYkhScGNHeGxJSEJ5YjNSdmRIbHdZV3dnYVc1b1pYSnBkR0Z1WTJVc0lIUm9hWE1nWTJ4aGMzTmNiaTh2SUhCeWIzUnZkSGx3WVd4c2VTQnBibWhsY21sMGN5Qm1jbTl0SUZKbFlXUmhZbXhsTENCaGJtUWdkR2hsYmlCd1lYSmhjMmwwYVdOaGJHeDVJR1p5YjIxY2JpOHZJRmR5YVhSaFlteGxMbHh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJ3Ym1FZ1BTQnlaWEYxYVhKbEtDZHdjbTlqWlhOekxXNWxlSFJwWTJzdFlYSm5jeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ2IySnFaV04wUzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6SUh4OElHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdkbUZ5SUd0bGVYTWdQU0JiWFR0Y2JpQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhaWtnZTF4dUlDQWdJR3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVJQ0I5Y21WMGRYSnVJR3RsZVhNN1hHNTlPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1JIVndiR1Y0TzF4dVhHNHZLanh5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVkbUZ5SUhWMGFXd2dQU0J5WlhGMWFYSmxLQ2RqYjNKbExYVjBhV3d0YVhNbktUdGNiblYwYVd3dWFXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJTWldGa1lXSnNaU0E5SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5eVpXRmtZV0pzWlNjcE8xeHVkbUZ5SUZkeWFYUmhZbXhsSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5WldGdFgzZHlhWFJoWW14bEp5azdYRzVjYm5WMGFXd3VhVzVvWlhKcGRITW9SSFZ3YkdWNExDQlNaV0ZrWVdKc1pTazdYRzVjYm50Y2JpQWdMeThnWVhadmFXUWdjMk52Y0dVZ1kzSmxaWEFzSUhSb1pTQnJaWGx6SUdGeWNtRjVJR05oYmlCMGFHVnVJR0psSUdOdmJHeGxZM1JsWkZ4dUlDQjJZWElnYTJWNWN5QTlJRzlpYW1WamRFdGxlWE1vVjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdabTl5SUNoMllYSWdkaUE5SURBN0lIWWdQQ0JyWlhsekxteGxibWQwYURzZ2Rpc3JLU0I3WEc0Z0lDQWdkbUZ5SUcxbGRHaHZaQ0E5SUd0bGVYTmJkbDA3WEc0Z0lDQWdhV1lnS0NGRWRYQnNaWGd1Y0hKdmRHOTBlWEJsVzIxbGRHaHZaRjBwSUVSMWNHeGxlQzV3Y205MGIzUjVjR1ZiYldWMGFHOWtYU0E5SUZkeWFYUmhZbXhsTG5CeWIzUnZkSGx3WlZ0dFpYUm9iMlJkTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlFUjFjR3hsZUNodmNIUnBiMjV6S1NCN1hHNGdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCRWRYQnNaWGdwS1NCeVpYUjFjbTRnYm1WM0lFUjFjR3hsZUNodmNIUnBiMjV6S1R0Y2JseHVJQ0JTWldGa1lXSnNaUzVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dUlDQlhjbWwwWVdKc1pTNWpZV3hzS0hSb2FYTXNJRzl3ZEdsdmJuTXBPMXh1WEc0Z0lHbG1JQ2h2Y0hScGIyNXpJQ1ltSUc5d2RHbHZibk11Y21WaFpHRmliR1VnUFQwOUlHWmhiSE5sS1NCMGFHbHpMbkpsWVdSaFlteGxJRDBnWm1Gc2MyVTdYRzVjYmlBZ2FXWWdLRzl3ZEdsdmJuTWdKaVlnYjNCMGFXOXVjeTUzY21sMFlXSnNaU0E5UFQwZ1ptRnNjMlVwSUhSb2FYTXVkM0pwZEdGaWJHVWdQU0JtWVd4elpUdGNibHh1SUNCMGFHbHpMbUZzYkc5M1NHRnNaazl3Wlc0Z1BTQjBjblZsTzF4dUlDQnBaaUFvYjNCMGFXOXVjeUFtSmlCdmNIUnBiMjV6TG1Gc2JHOTNTR0ZzWms5d1pXNGdQVDA5SUdaaGJITmxLU0IwYUdsekxtRnNiRzkzU0dGc1prOXdaVzRnUFNCbVlXeHpaVHRjYmx4dUlDQjBhR2x6TG05dVkyVW9KMlZ1WkNjc0lHOXVaVzVrS1R0Y2JuMWNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFUjFjR3hsZUM1d2NtOTBiM1I1Y0dVc0lDZDNjbWwwWVdKc1pVaHBaMmhYWVhSbGNrMWhjbXNuTENCN1hHNGdJQzh2SUcxaGEybHVaeUJwZENCbGVIQnNhV05wZENCMGFHbHpJSEJ5YjNCbGNuUjVJR2x6SUc1dmRDQmxiblZ0WlhKaFlteGxYRzRnSUM4dklHSmxZMkYxYzJVZ2IzUm9aWEozYVhObElITnZiV1VnY0hKdmRHOTBlWEJsSUcxaGJtbHdkV3hoZEdsdmJpQnBibHh1SUNBdkx5QjFjMlZ5YkdGdVpDQjNhV3hzSUdaaGFXeGNiaUFnWlc1MWJXVnlZV0pzWlRvZ1ptRnNjMlVzWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1ocFoyaFhZWFJsY2sxaGNtczdYRzRnSUgxY2JuMHBPMXh1WEc0dkx5QjBhR1VnYm04dGFHRnNaaTF2Y0dWdUlHVnVabTl5WTJWeVhHNW1kVzVqZEdsdmJpQnZibVZ1WkNncElIdGNiaUFnTHk4Z2FXWWdkMlVnWVd4c2IzY2dhR0ZzWmkxdmNHVnVJSE4wWVhSbExDQnZjaUJwWmlCMGFHVWdkM0pwZEdGaWJHVWdjMmxrWlNCbGJtUmxaQ3hjYmlBZ0x5OGdkR2hsYmlCM1pTZHlaU0J2YXk1Y2JpQWdhV1lnS0hSb2FYTXVZV3hzYjNkSVlXeG1UM0JsYmlCOGZDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVZ1WkdWa0tTQnlaWFIxY200N1hHNWNiaUFnTHk4Z2JtOGdiVzl5WlNCa1lYUmhJR05oYmlCaVpTQjNjbWwwZEdWdUxseHVJQ0F2THlCQ2RYUWdZV3hzYjNjZ2JXOXlaU0IzY21sMFpYTWdkRzhnYUdGd2NHVnVJR2x1SUhSb2FYTWdkR2xqYXk1Y2JpQWdjRzVoTG01bGVIUlVhV05yS0c5dVJXNWtUbFFzSUhSb2FYTXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnZia1Z1WkU1VUtITmxiR1lwSUh0Y2JpQWdjMlZzWmk1bGJtUW9LVHRjYm4xY2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0VSMWNHeGxlQzV3Y205MGIzUjVjR1VzSUNka1pYTjBjbTk1WldRbkxDQjdYRzRnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTG1SbGMzUnliM2xsWkNBbUppQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaRHRjYmlBZ2ZTeGNiaUFnYzJWME9pQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBdkx5QjNaU0JwWjI1dmNtVWdkR2hsSUhaaGJIVmxJR2xtSUhSb1pTQnpkSEpsWVcxY2JpQWdJQ0F2THlCb1lYTWdibTkwSUdKbFpXNGdhVzVwZEdsaGJHbDZaV1FnZVdWMFhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCaVlXTnJkMkZ5WkNCamIyMXdZWFJwWW1sc2FYUjVMQ0IwYUdVZ2RYTmxjaUJwY3lCbGVIQnNhV05wZEd4NVhHNGdJQ0FnTHk4Z2JXRnVZV2RwYm1jZ1pHVnpkSEp2ZVdWa1hHNGdJQ0FnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1a1pYTjBjbTk1WldRZ1BTQjJZV3gxWlR0Y2JpQWdJQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1SbGMzUnliM2xsWkNBOUlIWmhiSFZsTzF4dUlDQjlYRzU5S1R0Y2JseHVSSFZ3YkdWNExuQnliM1J2ZEhsd1pTNWZaR1Z6ZEhKdmVTQTlJR1oxYm1OMGFXOXVJQ2hsY25Jc0lHTmlLU0I3WEc0Z0lIUm9hWE11Y0hWemFDaHVkV3hzS1R0Y2JpQWdkR2hwY3k1bGJtUW9LVHRjYmx4dUlDQndibUV1Ym1WNGRGUnBZMnNvWTJJc0lHVnljaWs3WEc1OU95SXNJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNHZMeUJoSUhCaGMzTjBhSEp2ZFdkb0lITjBjbVZoYlM1Y2JpOHZJR0poYzJsallXeHNlU0JxZFhOMElIUm9aU0J0YjNOMElHMXBibWx0WVd3Z2MyOXlkQ0J2WmlCVWNtRnVjMlp2Y20wZ2MzUnlaV0Z0TGx4dUx5OGdSWFpsY25rZ2QzSnBkSFJsYmlCamFIVnVheUJuWlhSeklHOTFkSEIxZENCaGN5MXBjeTVjYmx4dUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZCaGMzTlVhSEp2ZFdkb08xeHVYRzUyWVhJZ1ZISmhibk5tYjNKdElEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeVpXRnRYM1J5WVc1elptOXliU2NwTzF4dVhHNHZLanh5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVkbUZ5SUhWMGFXd2dQU0J5WlhGMWFYSmxLQ2RqYjNKbExYVjBhV3d0YVhNbktUdGNiblYwYVd3dWFXNW9aWEpwZEhNZ1BTQnlaWEYxYVhKbEtDZHBibWhsY21sMGN5Y3BPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuVjBhV3d1YVc1b1pYSnBkSE1vVUdGemMxUm9jbTkxWjJnc0lGUnlZVzV6Wm05eWJTazdYRzVjYm1aMWJtTjBhVzl1SUZCaGMzTlVhSEp2ZFdkb0tHOXdkR2x2Ym5NcElIdGNiaUFnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGQmhjM05VYUhKdmRXZG9LU2tnY21WMGRYSnVJRzVsZHlCUVlYTnpWR2h5YjNWbmFDaHZjSFJwYjI1ektUdGNibHh1SUNCVWNtRnVjMlp2Y20wdVkyRnNiQ2gwYUdsekxDQnZjSFJwYjI1ektUdGNibjFjYmx4dVVHRnpjMVJvY205MVoyZ3VjSEp2ZEc5MGVYQmxMbDkwY21GdWMyWnZjbTBnUFNCbWRXNWpkR2x2YmlBb1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpa2dlMXh1SUNCallpaHVkV3hzTENCamFIVnVheWs3WEc1OU95SXNJaTh2SUVOdmNIbHlhV2RvZENCS2IzbGxiblFzSUVsdVl5NGdZVzVrSUc5MGFHVnlJRTV2WkdVZ1kyOXVkSEpwWW5WMGIzSnpMbHh1THk5Y2JpOHZJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhYRzR2THlCamIzQjVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsWEc0dkx5QmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzSUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1kY2JpOHZJSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN4Y2JpOHZJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFJjYmk4dklIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE1nWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aVnh1THk4Z1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYRzR2TDF4dUx5OGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUmNiaTh2SUdsdUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4dUx5OWNiaTh2SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFOY2JpOHZJRTlTSUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBaY2JpOHZJRTFGVWtOSVFVNVVRVUpKVEVsVVdTd2dSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTVjYmk4dklFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJTQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxGeHVMeThnUkVGTlFVZEZVeUJQVWlCUFZFaEZVaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNYRzR2THlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3dnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRlhHNHZMeUJWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNGdWRWhGSUZOUFJsUlhRVkpGTGx4dVhHNG5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCd2JtRWdQU0J5WlhGMWFYSmxLQ2R3Y205alpYTnpMVzVsZUhScFkyc3RZWEpuY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFpHRmliR1U3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnYVhOQmNuSmhlU0E5SUhKbGNYVnBjbVVvSjJsellYSnlZWGtuS1R0Y2JpOHFQQzl5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1ZG1GeUlFUjFjR3hsZUR0Y2JpOHFQQzl5WlhCc1lXTmxiV1Z1ZEQ0cUwxeHVYRzVTWldGa1lXSnNaUzVTWldGa1lXSnNaVk4wWVhSbElEMGdVbVZoWkdGaWJHVlRkR0YwWlR0Y2JseHVMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNiblpoY2lCRlJTQTlJSEpsY1hWcGNtVW9KMlYyWlc1MGN5Y3BMa1YyWlc1MFJXMXBkSFJsY2p0Y2JseHVkbUZ5SUVWRmJHbHpkR1Z1WlhKRGIzVnVkQ0E5SUdaMWJtTjBhVzl1SUNobGJXbDBkR1Z5TENCMGVYQmxLU0I3WEc0Z0lISmxkSFZ5YmlCbGJXbDBkR1Z5TG14cGMzUmxibVZ5Y3loMGVYQmxLUzVzWlc1bmRHZzdYRzU5TzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNiaThxUEhKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzUyWVhJZ1UzUnlaV0Z0SUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOXpkSEpsWVcxekwzTjBjbVZoYlNjcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJDZFdabVpYSWdQU0J5WlhGMWFYSmxLQ2R6WVdabExXSjFabVpsY2ljcExrSjFabVpsY2p0Y2JuWmhjaUJQZFhKVmFXNTBPRUZ5Y21GNUlEMGdaMnh2WW1Gc0xsVnBiblE0UVhKeVlYa2dmSHdnWm5WdVkzUnBiMjRnS0NrZ2UzMDdYRzVtZFc1amRHbHZiaUJmZFdsdWREaEJjbkpoZVZSdlFuVm1abVZ5S0dOb2RXNXJLU0I3WEc0Z0lISmxkSFZ5YmlCQ2RXWm1aWEl1Wm5KdmJTaGphSFZ1YXlrN1hHNTlYRzVtZFc1amRHbHZiaUJmYVhOVmFXNTBPRUZ5Y21GNUtHOWlhaWtnZTF4dUlDQnlaWFIxY200Z1FuVm1abVZ5TG1selFuVm1abVZ5S0c5aWFpa2dmSHdnYjJKcUlHbHVjM1JoYm1ObGIyWWdUM1Z5VldsdWREaEJjbkpoZVR0Y2JuMWNibHh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnZFhScGJDQTlJSEpsY1hWcGNtVW9KMk52Y21VdGRYUnBiQzFwY3ljcE8xeHVkWFJwYkM1cGJtaGxjbWwwY3lBOUlISmxjWFZwY21Vb0oybHVhR1Z5YVhSekp5azdYRzR2S2p3dmNtVndiR0ZqWlcxbGJuUStLaTljYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JuWmhjaUJrWldKMVoxVjBhV3dnUFNCeVpYRjFhWEpsS0NkMWRHbHNKeWs3WEc1MllYSWdaR1ZpZFdjZ1BTQjJiMmxrSURBN1hHNXBaaUFvWkdWaWRXZFZkR2xzSUNZbUlHUmxZblZuVlhScGJDNWtaV0oxWjJ4dlp5a2dlMXh1SUNCa1pXSjFaeUE5SUdSbFluVm5WWFJwYkM1a1pXSjFaMnh2WnlnbmMzUnlaV0Z0SnlrN1hHNTlJR1ZzYzJVZ2UxeHVJQ0JrWldKMVp5QTlJR1oxYm1OMGFXOXVJQ2dwSUh0OU8xeHVmVnh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJDZFdabVpYSk1hWE4wSUQwZ2NtVnhkV2x5WlNnbkxpOXBiblJsY201aGJDOXpkSEpsWVcxekwwSjFabVpsY2t4cGMzUW5LVHRjYm5aaGNpQmtaWE4wY205NVNXMXdiQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNTBaWEp1WVd3dmMzUnlaV0Z0Y3k5a1pYTjBjbTk1SnlrN1hHNTJZWElnVTNSeWFXNW5SR1ZqYjJSbGNqdGNibHh1ZFhScGJDNXBibWhsY21sMGN5aFNaV0ZrWVdKc1pTd2dVM1J5WldGdEtUdGNibHh1ZG1GeUlHdFFjbTk0ZVVWMlpXNTBjeUE5SUZzblpYSnliM0luTENBblkyeHZjMlVuTENBblpHVnpkSEp2ZVNjc0lDZHdZWFZ6WlNjc0lDZHlaWE4xYldVblhUdGNibHh1Wm5WdVkzUnBiMjRnY0hKbGNHVnVaRXhwYzNSbGJtVnlLR1Z0YVhSMFpYSXNJR1YyWlc1MExDQm1iaWtnZTF4dUlDQXZMeUJUWVdSc2VTQjBhR2x6SUdseklHNXZkQ0JqWVdOb1pXRmliR1VnWVhNZ2MyOXRaU0JzYVdKeVlYSnBaWE1nWW5WdVpHeGxJSFJvWldseUlHOTNibHh1SUNBdkx5QmxkbVZ1ZENCbGJXbDBkR1Z5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJSGRwZEdnZ2RHaGxiUzVjYmlBZ2FXWWdLSFI1Y0dWdlppQmxiV2wwZEdWeUxuQnlaWEJsYm1STWFYTjBaVzVsY2lBOVBUMGdKMloxYm1OMGFXOXVKeWtnY21WMGRYSnVJR1Z0YVhSMFpYSXVjSEpsY0dWdVpFeHBjM1JsYm1WeUtHVjJaVzUwTENCbWJpazdYRzVjYmlBZ0x5OGdWR2hwY3lCcGN5QmhJR2hoWTJzZ2RHOGdiV0ZyWlNCemRYSmxJSFJvWVhRZ2IzVnlJR1Z5Y205eUlHaGhibVJzWlhJZ2FYTWdZWFIwWVdOb1pXUWdZbVZtYjNKbElHRnVlVnh1SUNBdkx5QjFjMlZ5YkdGdVpDQnZibVZ6TGlBZ1RrVldSVklnUkU4Z1ZFaEpVeTRnVkdocGN5QnBjeUJvWlhKbElHOXViSGtnWW1WallYVnpaU0IwYUdseklHTnZaR1VnYm1WbFpITmNiaUFnTHk4Z2RHOGdZMjl1ZEdsdWRXVWdkRzhnZDI5eWF5QjNhWFJvSUc5c1pHVnlJSFpsY25OcGIyNXpJRzltSUU1dlpHVXVhbk1nZEdoaGRDQmtieUJ1YjNRZ2FXNWpiSFZrWlZ4dUlDQXZMeUIwYUdVZ2NISmxjR1Z1WkV4cGMzUmxibVZ5S0NrZ2JXVjBhRzlrTGlCVWFHVWdaMjloYkNCcGN5QjBieUJsZG1WdWRIVmhiR3g1SUhKbGJXOTJaU0IwYUdseklHaGhZMnN1WEc0Z0lHbG1JQ2doWlcxcGRIUmxjaTVmWlhabGJuUnpJSHg4SUNGbGJXbDBkR1Z5TGw5bGRtVnVkSE5iWlhabGJuUmRLU0JsYldsMGRHVnlMbTl1S0dWMlpXNTBMQ0JtYmlrN1pXeHpaU0JwWmlBb2FYTkJjbkpoZVNobGJXbDBkR1Z5TGw5bGRtVnVkSE5iWlhabGJuUmRLU2tnWlcxcGRIUmxjaTVmWlhabGJuUnpXMlYyWlc1MFhTNTFibk5vYVdaMEtHWnVLVHRsYkhObElHVnRhWFIwWlhJdVgyVjJaVzUwYzF0bGRtVnVkRjBnUFNCYlptNHNJR1Z0YVhSMFpYSXVYMlYyWlc1MGMxdGxkbVZ1ZEYxZE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCU1pXRmtZV0pzWlZOMFlYUmxLRzl3ZEdsdmJuTXNJSE4wY21WaGJTa2dlMXh1SUNCRWRYQnNaWGdnUFNCRWRYQnNaWGdnZkh3Z2NtVnhkV2x5WlNnbkxpOWZjM1J5WldGdFgyUjFjR3hsZUNjcE8xeHVYRzRnSUc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1WEc0Z0lDOHZJRVIxY0d4bGVDQnpkSEpsWVcxeklHRnlaU0JpYjNSb0lISmxZV1JoWW14bElHRnVaQ0IzY21sMFlXSnNaU3dnWW5WMElITm9ZWEpsWEc0Z0lDOHZJSFJvWlNCellXMWxJRzl3ZEdsdmJuTWdiMkpxWldOMExseHVJQ0F2THlCSWIzZGxkbVZ5TENCemIyMWxJR05oYzJWeklISmxjWFZwY21VZ2MyVjBkR2x1WnlCdmNIUnBiMjV6SUhSdklHUnBabVpsY21WdWRGeHVJQ0F2THlCMllXeDFaWE1nWm05eUlIUm9aU0J5WldGa1lXSnNaU0JoYm1RZ2RHaGxJSGR5YVhSaFlteGxJSE5wWkdWeklHOW1JSFJvWlNCa2RYQnNaWGdnYzNSeVpXRnRMbHh1SUNBdkx5QlVhR1Z6WlNCdmNIUnBiMjV6SUdOaGJpQmlaU0J3Y205MmFXUmxaQ0J6WlhCaGNtRjBaV3g1SUdGeklISmxZV1JoWW14bFdGaFlJR0Z1WkNCM2NtbDBZV0pzWlZoWVdDNWNiaUFnZG1GeUlHbHpSSFZ3YkdWNElEMGdjM1J5WldGdElHbHVjM1JoYm1ObGIyWWdSSFZ3YkdWNE8xeHVYRzRnSUM4dklHOWlhbVZqZENCemRISmxZVzBnWm14aFp5NGdWWE5sWkNCMGJ5QnRZV3RsSUhKbFlXUW9iaWtnYVdkdWIzSmxJRzRnWVc1a0lIUnZYRzRnSUM4dklHMWhhMlVnWVd4c0lIUm9aU0JpZFdabVpYSWdiV1Z5WjJsdVp5QmhibVFnYkdWdVozUm9JR05vWldOcmN5Qm5ieUJoZDJGNVhHNGdJSFJvYVhNdWIySnFaV04wVFc5a1pTQTlJQ0VoYjNCMGFXOXVjeTV2WW1wbFkzUk5iMlJsTzF4dVhHNGdJR2xtSUNocGMwUjFjR3hsZUNrZ2RHaHBjeTV2WW1wbFkzUk5iMlJsSUQwZ2RHaHBjeTV2WW1wbFkzUk5iMlJsSUh4OElDRWhiM0IwYVc5dWN5NXlaV0ZrWVdKc1pVOWlhbVZqZEUxdlpHVTdYRzVjYmlBZ0x5OGdkR2hsSUhCdmFXNTBJR0YwSUhkb2FXTm9JR2wwSUhOMGIzQnpJR05oYkd4cGJtY2dYM0psWVdRb0tTQjBieUJtYVd4c0lIUm9aU0JpZFdabVpYSmNiaUFnTHk4Z1RtOTBaVG9nTUNCcGN5QmhJSFpoYkdsa0lIWmhiSFZsTENCdFpXRnVjeUJjSW1SdmJpZDBJR05oYkd3Z1gzSmxZV1FnY0hKbFpXMXdkR2wyWld4NUlHVjJaWEpjSWx4dUlDQjJZWElnYUhkdElEMGdiM0IwYVc5dWN5NW9hV2RvVjJGMFpYSk5ZWEpyTzF4dUlDQjJZWElnY21WaFpHRmliR1ZJZDIwZ1BTQnZjSFJwYjI1ekxuSmxZV1JoWW14bFNHbG5hRmRoZEdWeVRXRnlhenRjYmlBZ2RtRnlJR1JsWm1GMWJIUklkMjBnUFNCMGFHbHpMbTlpYW1WamRFMXZaR1VnUHlBeE5pQTZJREUySUNvZ01UQXlORHRjYmx4dUlDQnBaaUFvYUhkdElIeDhJR2gzYlNBOVBUMGdNQ2tnZEdocGN5NW9hV2RvVjJGMFpYSk5ZWEpySUQwZ2FIZHRPMlZzYzJVZ2FXWWdLR2x6UkhWd2JHVjRJQ1ltSUNoeVpXRmtZV0pzWlVoM2JTQjhmQ0J5WldGa1lXSnNaVWgzYlNBOVBUMGdNQ2twSUhSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlISmxZV1JoWW14bFNIZHRPMlZzYzJVZ2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKcklEMGdaR1ZtWVhWc2RFaDNiVHRjYmx4dUlDQXZMeUJqWVhOMElIUnZJR2x1ZEhNdVhHNGdJSFJvYVhNdWFHbG5hRmRoZEdWeVRXRnlheUE5SUUxaGRHZ3VabXh2YjNJb2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKcktUdGNibHh1SUNBdkx5QkJJR3hwYm10bFpDQnNhWE4wSUdseklIVnpaV1FnZEc4Z2MzUnZjbVVnWkdGMFlTQmphSFZ1YTNNZ2FXNXpkR1ZoWkNCdlppQmhiaUJoY25KaGVTQmlaV05oZFhObElIUm9aVnh1SUNBdkx5QnNhVzVyWldRZ2JHbHpkQ0JqWVc0Z2NtVnRiM1psSUdWc1pXMWxiblJ6SUdaeWIyMGdkR2hsSUdKbFoybHVibWx1WnlCbVlYTjBaWElnZEdoaGJseHVJQ0F2THlCaGNuSmhlUzV6YUdsbWRDZ3BYRzRnSUhSb2FYTXVZblZtWm1WeUlEMGdibVYzSUVKMVptWmxja3hwYzNRb0tUdGNiaUFnZEdocGN5NXNaVzVuZEdnZ1BTQXdPMXh1SUNCMGFHbHpMbkJwY0dWeklEMGdiblZzYkR0Y2JpQWdkR2hwY3k1d2FYQmxjME52ZFc1MElEMGdNRHRjYmlBZ2RHaHBjeTVtYkc5M2FXNW5JRDBnYm5Wc2JEdGNiaUFnZEdocGN5NWxibVJsWkNBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG1WdVpFVnRhWFIwWldRZ1BTQm1ZV3h6WlR0Y2JpQWdkR2hwY3k1eVpXRmthVzVuSUQwZ1ptRnNjMlU3WEc1Y2JpQWdMeThnWVNCbWJHRm5JSFJ2SUdKbElHRmliR1VnZEc4Z2RHVnNiQ0JwWmlCMGFHVWdaWFpsYm5RZ0ozSmxZV1JoWW14bEp5OG5aR0YwWVNjZ2FYTWdaVzFwZEhSbFpGeHVJQ0F2THlCcGJXMWxaR2xoZEdWc2VTd2diM0lnYjI0Z1lTQnNZWFJsY2lCMGFXTnJMaUFnVjJVZ2MyVjBJSFJvYVhNZ2RHOGdkSEoxWlNCaGRDQm1hWEp6ZEN3Z1ltVmpZWFZ6WlZ4dUlDQXZMeUJoYm5rZ1lXTjBhVzl1Y3lCMGFHRjBJSE5vYjNWc1pHNG5kQ0JvWVhCd1pXNGdkVzUwYVd3Z1hDSnNZWFJsY2x3aUlITm9iM1ZzWkNCblpXNWxjbUZzYkhrZ1lXeHpiMXh1SUNBdkx5QnViM1FnYUdGd2NHVnVJR0psWm05eVpTQjBhR1VnWm1seWMzUWdjbVZoWkNCallXeHNMbHh1SUNCMGFHbHpMbk41Ym1NZ1BTQjBjblZsTzF4dVhHNGdJQzh2SUhkb1pXNWxkbVZ5SUhkbElISmxkSFZ5YmlCdWRXeHNMQ0IwYUdWdUlIZGxJSE5sZENCaElHWnNZV2NnZEc4Z2MyRjVYRzRnSUM4dklIUm9ZWFFnZDJVbmNtVWdZWGRoYVhScGJtY2dZU0FuY21WaFpHRmliR1VuSUdWMlpXNTBJR1Z0YVhOemFXOXVMbHh1SUNCMGFHbHpMbTVsWldSU1pXRmtZV0pzWlNBOUlHWmhiSE5sTzF4dUlDQjBhR2x6TG1WdGFYUjBaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNCMGFHbHpMbkpsWVdSaFlteGxUR2x6ZEdWdWFXNW5JRDBnWm1Gc2MyVTdYRzRnSUhSb2FYTXVjbVZ6ZFcxbFUyTm9aV1IxYkdWa0lEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z2FHRnpJR2wwSUdKbFpXNGdaR1Z6ZEhKdmVXVmtYRzRnSUhSb2FYTXVaR1Z6ZEhKdmVXVmtJRDBnWm1Gc2MyVTdYRzVjYmlBZ0x5OGdRM0o1Y0hSdklHbHpJR3RwYm1RZ2IyWWdiMnhrSUdGdVpDQmpjblZ6ZEhrdUlDQklhWE4wYjNKcFkyRnNiSGtzSUdsMGN5QmtaV1poZFd4MElITjBjbWx1WjF4dUlDQXZMeUJsYm1OdlpHbHVaeUJwY3lBblltbHVZWEo1SnlCemJ5QjNaU0JvWVhabElIUnZJRzFoYTJVZ2RHaHBjeUJqYjI1bWFXZDFjbUZpYkdVdVhHNGdJQzh2SUVWMlpYSjVkR2hwYm1jZ1pXeHpaU0JwYmlCMGFHVWdkVzVwZG1WeWMyVWdkWE5sY3lBbmRYUm1PQ2NzSUhSb2IzVm5hQzVjYmlBZ2RHaHBjeTVrWldaaGRXeDBSVzVqYjJScGJtY2dQU0J2Y0hScGIyNXpMbVJsWm1GMWJIUkZibU52WkdsdVp5QjhmQ0FuZFhSbU9DYzdYRzVjYmlBZ0x5OGdkR2hsSUc1MWJXSmxjaUJ2WmlCM2NtbDBaWEp6SUhSb1lYUWdZWEpsSUdGM1lXbDBhVzVuSUdFZ1pISmhhVzRnWlhabGJuUWdhVzRnTG5CcGNHVW9LWE5jYmlBZ2RHaHBjeTVoZDJGcGRFUnlZV2x1SUQwZ01EdGNibHh1SUNBdkx5QnBaaUIwY25WbExDQmhJRzFoZVdKbFVtVmhaRTF2Y21VZ2FHRnpJR0psWlc0Z2MyTm9aV1IxYkdWa1hHNGdJSFJvYVhNdWNtVmhaR2x1WjAxdmNtVWdQU0JtWVd4elpUdGNibHh1SUNCMGFHbHpMbVJsWTI5a1pYSWdQU0J1ZFd4c08xeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdiblZzYkR0Y2JpQWdhV1lnS0c5d2RHbHZibk11Wlc1amIyUnBibWNwSUh0Y2JpQWdJQ0JwWmlBb0lWTjBjbWx1WjBSbFkyOWtaWElwSUZOMGNtbHVaMFJsWTI5a1pYSWdQU0J5WlhGMWFYSmxLQ2R6ZEhKcGJtZGZaR1ZqYjJSbGNpOG5LUzVUZEhKcGJtZEVaV052WkdWeU8xeHVJQ0FnSUhSb2FYTXVaR1ZqYjJSbGNpQTlJRzVsZHlCVGRISnBibWRFWldOdlpHVnlLRzl3ZEdsdmJuTXVaVzVqYjJScGJtY3BPMXh1SUNBZ0lIUm9hWE11Wlc1amIyUnBibWNnUFNCdmNIUnBiMjV6TG1WdVkyOWthVzVuTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlGSmxZV1JoWW14bEtHOXdkR2x2Ym5NcElIdGNiaUFnUkhWd2JHVjRJRDBnUkhWd2JHVjRJSHg4SUhKbGNYVnBjbVVvSnk0dlgzTjBjbVZoYlY5a2RYQnNaWGduS1R0Y2JseHVJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1VtVmhaR0ZpYkdVcEtTQnlaWFIxY200Z2JtVjNJRkpsWVdSaFlteGxLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVWdQU0J1WlhjZ1VtVmhaR0ZpYkdWVGRHRjBaU2h2Y0hScGIyNXpMQ0IwYUdsektUdGNibHh1SUNBdkx5QnNaV2RoWTNsY2JpQWdkR2hwY3k1eVpXRmtZV0pzWlNBOUlIUnlkV1U3WEc1Y2JpQWdhV1lnS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11Y21WaFpDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2RHaHBjeTVmY21WaFpDQTlJRzl3ZEdsdmJuTXVjbVZoWkR0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2IzQjBhVzl1Y3k1a1pYTjBjbTk1SUQwOVBTQW5ablZ1WTNScGIyNG5LU0IwYUdsekxsOWtaWE4wY205NUlEMGdiM0IwYVc5dWN5NWtaWE4wY205NU8xeHVJQ0I5WEc1Y2JpQWdVM1J5WldGdExtTmhiR3dvZEdocGN5azdYRzU5WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hTWldGa1lXSnNaUzV3Y205MGIzUjVjR1VzSUNka1pYTjBjbTk1WldRbkxDQjdYRzRnSUdkbGREb2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1WkdWemRISnZlV1ZrTzF4dUlDQjlMRnh1SUNCelpYUTZJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDOHZJSGRsSUdsbmJtOXlaU0IwYUdVZ2RtRnNkV1VnYVdZZ2RHaGxJSE4wY21WaGJWeHVJQ0FnSUM4dklHaGhjeUJ1YjNRZ1ltVmxiaUJwYm1sMGFXRnNhWHBsWkNCNVpYUmNiaUFnSUNCcFppQW9JWFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJpWVdOcmQyRnlaQ0JqYjIxd1lYUnBZbWxzYVhSNUxDQjBhR1VnZFhObGNpQnBjeUJsZUhCc2FXTnBkR3g1WEc0Z0lDQWdMeThnYldGdVlXZHBibWNnWkdWemRISnZlV1ZrWEc0Z0lDQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1FnUFNCMllXeDFaVHRjYmlBZ2ZWeHVmU2s3WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNWtaWE4wY205NUlEMGdaR1Z6ZEhKdmVVbHRjR3d1WkdWemRISnZlVHRjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1ZmRXNWtaWE4wY205NUlEMGdaR1Z6ZEhKdmVVbHRjR3d1ZFc1a1pYTjBjbTk1TzF4dVVtVmhaR0ZpYkdVdWNISnZkRzkwZVhCbExsOWtaWE4wY205NUlEMGdablZ1WTNScGIyNGdLR1Z5Y2l3Z1kySXBJSHRjYmlBZ2RHaHBjeTV3ZFhOb0tHNTFiR3dwTzF4dUlDQmpZaWhsY25JcE8xeHVmVHRjYmx4dUx5OGdUV0Z1ZFdGc2JIa2djMmh2ZG1VZ2MyOXRaWFJvYVc1bklHbHVkRzhnZEdobElISmxZV1FvS1NCaWRXWm1aWEl1WEc0dkx5QlVhR2x6SUhKbGRIVnlibk1nZEhKMVpTQnBaaUIwYUdVZ2FHbG5hRmRoZEdWeVRXRnlheUJvWVhNZ2JtOTBJR0psWlc0Z2FHbDBJSGxsZEN4Y2JpOHZJSE5wYldsc1lYSWdkRzhnYUc5M0lGZHlhWFJoWW14bExuZHlhWFJsS0NrZ2NtVjBkWEp1Y3lCMGNuVmxJR2xtSUhsdmRTQnphRzkxYkdSY2JpOHZJSGR5YVhSbEtDa2djMjl0WlNCdGIzSmxMbHh1VW1WaFpHRmliR1V1Y0hKdmRHOTBlWEJsTG5CMWMyZ2dQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5LU0I3WEc0Z0lIWmhjaUJ6ZEdGMFpTQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lIWmhjaUJ6YTJsd1EyaDFibXREYUdWamF6dGNibHh1SUNCcFppQW9JWE4wWVhSbExtOWlhbVZqZEUxdlpHVXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR05vZFc1cklEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnWlc1amIyUnBibWNnUFNCbGJtTnZaR2x1WnlCOGZDQnpkR0YwWlM1a1pXWmhkV3gwUlc1amIyUnBibWM3WEc0Z0lDQWdJQ0JwWmlBb1pXNWpiMlJwYm1jZ0lUMDlJSE4wWVhSbExtVnVZMjlrYVc1bktTQjdYRzRnSUNBZ0lDQWdJR05vZFc1cklEMGdRblZtWm1WeUxtWnliMjBvWTJoMWJtc3NJR1Z1WTI5a2FXNW5LVHRjYmlBZ0lDQWdJQ0FnWlc1amIyUnBibWNnUFNBbkp6dGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lITnJhWEJEYUhWdWEwTm9aV05ySUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjMnRwY0VOb2RXNXJRMmhsWTJzZ1BTQjBjblZsTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUhKbFlXUmhZbXhsUVdSa1EyaDFibXNvZEdocGN5d2dZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQm1ZV3h6WlN3Z2MydHBjRU5vZFc1clEyaGxZMnNwTzF4dWZUdGNibHh1THk4Z1ZXNXphR2xtZENCemFHOTFiR1FnS21Gc2QyRjVjeW9nWW1VZ2MyOXRaWFJvYVc1bklHUnBjbVZqZEd4NUlHOTFkQ0J2WmlCeVpXRmtLQ2xjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1MWJuTm9hV1owSUQwZ1puVnVZM1JwYjI0Z0tHTm9kVzVyS1NCN1hHNGdJSEpsZEhWeWJpQnlaV0ZrWVdKc1pVRmtaRU5vZFc1cktIUm9hWE1zSUdOb2RXNXJMQ0J1ZFd4c0xDQjBjblZsTENCbVlXeHpaU2s3WEc1OU8xeHVYRzVtZFc1amRHbHZiaUJ5WldGa1lXSnNaVUZrWkVOb2RXNXJLSE4wY21WaGJTd2dZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmhaR1JVYjBaeWIyNTBMQ0J6YTJsd1EyaDFibXREYUdWamF5a2dlMXh1SUNCMllYSWdjM1JoZEdVZ1BTQnpkSEpsWVcwdVgzSmxZV1JoWW14bFUzUmhkR1U3WEc0Z0lHbG1JQ2hqYUhWdWF5QTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lITjBZWFJsTG5KbFlXUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnZia1Z2WmtOb2RXNXJLSE4wY21WaGJTd2djM1JoZEdVcE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lIWmhjaUJsY2p0Y2JpQWdJQ0JwWmlBb0lYTnJhWEJEYUhWdWEwTm9aV05yS1NCbGNpQTlJR05vZFc1clNXNTJZV3hwWkNoemRHRjBaU3dnWTJoMWJtc3BPMXh1SUNBZ0lHbG1JQ2hsY2lrZ2UxeHVJQ0FnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlZ5Y205eUp5d2daWElwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYzNSaGRHVXViMkpxWldOMFRXOWtaU0I4ZkNCamFIVnVheUFtSmlCamFIVnVheTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTm9kVzVySUNFOVBTQW5jM1J5YVc1bkp5QW1KaUFoYzNSaGRHVXViMkpxWldOMFRXOWtaU0FtSmlCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9ZMmgxYm1zcElDRTlQU0JDZFdabVpYSXVjSEp2ZEc5MGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOb2RXNXJJRDBnWDNWcGJuUTRRWEp5WVhsVWIwSjFabVpsY2loamFIVnVheWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaGhaR1JVYjBaeWIyNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlM1bGJtUkZiV2wwZEdWa0tTQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0J1WlhjZ1JYSnliM0lvSjNOMGNtVmhiUzUxYm5Ob2FXWjBLQ2tnWVdaMFpYSWdaVzVrSUdWMlpXNTBKeWtwTzJWc2MyVWdZV1JrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUhSeWRXVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2h6ZEdGMFpTNWxibVJsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0J1WlhjZ1JYSnliM0lvSjNOMGNtVmhiUzV3ZFhOb0tDa2dZV1owWlhJZ1JVOUdKeWtwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYzNSaGRHVXVjbVZoWkdsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzNSaGRHVXVaR1ZqYjJSbGNpQW1KaUFoWlc1amIyUnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphSFZ1YXlBOUlITjBZWFJsTG1SbFkyOWtaWEl1ZDNKcGRHVW9ZMmgxYm1zcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoemRHRjBaUzV2WW1wbFkzUk5iMlJsSUh4OElHTm9kVzVyTG14bGJtZDBhQ0FoUFQwZ01Da2dZV1JrUTJoMWJtc29jM1J5WldGdExDQnpkR0YwWlN3Z1kyaDFibXNzSUdaaGJITmxLVHRsYkhObElHMWhlV0psVW1WaFpFMXZjbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWVdSa1EyaDFibXNvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dZMmgxYm1zc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb0lXRmtaRlJ2Um5KdmJuUXBJSHRjYmlBZ0lDQWdJSE4wWVhSbExuSmxZV1JwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnYm1WbFpFMXZjbVZFWVhSaEtITjBZWFJsS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWVdSa1EyaDFibXNvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dZMmgxYm1zc0lHRmtaRlJ2Um5KdmJuUXBJSHRjYmlBZ2FXWWdLSE4wWVhSbExtWnNiM2RwYm1jZ0ppWWdjM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdJQ1ltSUNGemRHRjBaUzV6ZVc1aktTQjdYRzRnSUNBZ2MzUnlaV0Z0TG1WdGFYUW9KMlJoZEdFbkxDQmphSFZ1YXlrN1hHNGdJQ0FnYzNSeVpXRnRMbkpsWVdRb01DazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnZFhCa1lYUmxJSFJvWlNCaWRXWm1aWElnYVc1bWJ5NWNiaUFnSUNCemRHRjBaUzVzWlc1bmRHZ2dLejBnYzNSaGRHVXViMkpxWldOMFRXOWtaU0EvSURFZ09pQmphSFZ1YXk1c1pXNW5kR2c3WEc0Z0lDQWdhV1lnS0dGa1pGUnZSbkp2Ym5RcElITjBZWFJsTG1KMVptWmxjaTUxYm5Ob2FXWjBLR05vZFc1cktUdGxiSE5sSUhOMFlYUmxMbUoxWm1abGNpNXdkWE5vS0dOb2RXNXJLVHRjYmx4dUlDQWdJR2xtSUNoemRHRjBaUzV1WldWa1VtVmhaR0ZpYkdVcElHVnRhWFJTWldGa1lXSnNaU2h6ZEhKbFlXMHBPMXh1SUNCOVhHNGdJRzFoZVdKbFVtVmhaRTF2Y21Vb2MzUnlaV0Z0TENCemRHRjBaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05vZFc1clNXNTJZV3hwWkNoemRHRjBaU3dnWTJoMWJtc3BJSHRjYmlBZ2RtRnlJR1Z5TzF4dUlDQnBaaUFvSVY5cGMxVnBiblE0UVhKeVlYa29ZMmgxYm1zcElDWW1JSFI1Y0dWdlppQmphSFZ1YXlBaFBUMGdKM04wY21sdVp5Y2dKaVlnWTJoMWJtc2dJVDA5SUhWdVpHVm1hVzVsWkNBbUppQWhjM1JoZEdVdWIySnFaV04wVFc5a1pTa2dlMXh1SUNBZ0lHVnlJRDBnYm1WM0lGUjVjR1ZGY25KdmNpZ25TVzUyWVd4cFpDQnViMjR0YzNSeWFXNW5MMkoxWm1abGNpQmphSFZ1YXljcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbGNqdGNibjFjYmx4dUx5OGdhV1lnYVhRbmN5QndZWE4wSUhSb1pTQm9hV2RvSUhkaGRHVnlJRzFoY21zc0lIZGxJR05oYmlCd2RYTm9JR2x1SUhOdmJXVWdiVzl5WlM1Y2JpOHZJRUZzYzI4c0lHbG1JSGRsSUdoaGRtVWdibThnWkdGMFlTQjVaWFFzSUhkbElHTmhiaUJ6ZEdGdVpDQnpiMjFsWEc0dkx5QnRiM0psSUdKNWRHVnpMaUFnVkdocGN5QnBjeUIwYnlCM2IzSnJJR0Z5YjNWdVpDQmpZWE5sY3lCM2FHVnlaU0JvZDIwOU1DeGNiaTh2SUhOMVkyZ2dZWE1nZEdobElISmxjR3d1SUNCQmJITnZMQ0JwWmlCMGFHVWdjSFZ6YUNncElIUnlhV2RuWlhKbFpDQmhYRzR2THlCeVpXRmtZV0pzWlNCbGRtVnVkQ3dnWVc1a0lIUm9aU0IxYzJWeUlHTmhiR3hsWkNCeVpXRmtLR3hoY21kbFRuVnRZbVZ5S1NCemRXTm9JSFJvWVhSY2JpOHZJRzVsWldSU1pXRmtZV0pzWlNCM1lYTWdjMlYwTENCMGFHVnVJSGRsSUc5MVoyaDBJSFJ2SUhCMWMyZ2diVzl5WlN3Z2MyOGdkR2hoZENCaGJtOTBhR1Z5WEc0dkx5QW5jbVZoWkdGaWJHVW5JR1YyWlc1MElIZHBiR3dnWW1VZ2RISnBaMmRsY21Wa0xseHVablZ1WTNScGIyNGdibVZsWkUxdmNtVkVZWFJoS0hOMFlYUmxLU0I3WEc0Z0lISmxkSFZ5YmlBaGMzUmhkR1V1Wlc1a1pXUWdKaVlnS0hOMFlYUmxMbTVsWldSU1pXRmtZV0pzWlNCOGZDQnpkR0YwWlM1c1pXNW5kR2dnUENCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcklIeDhJSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ2s3WEc1OVhHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzVwYzFCaGRYTmxaQ0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnY21WMGRYSnVJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1V1Wm14dmQybHVaeUE5UFQwZ1ptRnNjMlU3WEc1OU8xeHVYRzR2THlCaVlXTnJkMkZ5WkhNZ1kyOXRjR0YwYVdKcGJHbDBlUzVjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1elpYUkZibU52WkdsdVp5QTlJR1oxYm1OMGFXOXVJQ2hsYm1NcElIdGNiaUFnYVdZZ0tDRlRkSEpwYm1kRVpXTnZaR1Z5S1NCVGRISnBibWRFWldOdlpHVnlJRDBnY21WeGRXbHlaU2duYzNSeWFXNW5YMlJsWTI5a1pYSXZKeWt1VTNSeWFXNW5SR1ZqYjJSbGNqdGNiaUFnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1a1pXTnZaR1Z5SUQwZ2JtVjNJRk4wY21sdVowUmxZMjlrWlhJb1pXNWpLVHRjYmlBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWxibU52WkdsdVp5QTlJR1Z1WXp0Y2JpQWdjbVYwZFhKdUlIUm9hWE03WEc1OU8xeHVYRzR2THlCRWIyNG5kQ0J5WVdselpTQjBhR1VnYUhkdElENGdPRTFDWEc1MllYSWdUVUZZWDBoWFRTQTlJREI0T0RBd01EQXdPMXh1Wm5WdVkzUnBiMjRnWTI5dGNIVjBaVTVsZDBocFoyaFhZWFJsY2sxaGNtc29iaWtnZTF4dUlDQnBaaUFvYmlBK1BTQk5RVmhmU0ZkTktTQjdYRzRnSUNBZ2JpQTlJRTFCV0Y5SVYwMDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdMeThnUjJWMElIUm9aU0J1WlhoMElHaHBaMmhsYzNRZ2NHOTNaWElnYjJZZ01pQjBieUJ3Y21WMlpXNTBJR2x1WTNKbFlYTnBibWNnYUhkdElHVjRZMlZ6YzJsMlpXeDVJR2x1WEc0Z0lDQWdMeThnZEdsdWVTQmhiVzkxYm5SelhHNGdJQ0FnYmkwdE8xeHVJQ0FnSUc0Z2ZEMGdiaUErUGo0Z01UdGNiaUFnSUNCdUlIdzlJRzRnUGo0K0lESTdYRzRnSUNBZ2JpQjhQU0J1SUQ0K1BpQTBPMXh1SUNBZ0lHNGdmRDBnYmlBK1BqNGdPRHRjYmlBZ0lDQnVJSHc5SUc0Z1BqNCtJREUyTzF4dUlDQWdJRzRyS3p0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYmp0Y2JuMWNibHh1THk4Z1ZHaHBjeUJtZFc1amRHbHZiaUJwY3lCa1pYTnBaMjVsWkNCMGJ5QmlaU0JwYm14cGJtRmliR1VzSUhOdklIQnNaV0Z6WlNCMFlXdGxJR05oY21VZ2QyaGxiaUJ0WVd0cGJtZGNiaTh2SUdOb1lXNW5aWE1nZEc4Z2RHaGxJR1oxYm1OMGFXOXVJR0p2WkhrdVhHNW1kVzVqZEdsdmJpQm9iM2ROZFdOb1ZHOVNaV0ZrS0c0c0lITjBZWFJsS1NCN1hHNGdJR2xtSUNodUlEdzlJREFnZkh3Z2MzUmhkR1V1YkdWdVozUm9JRDA5UFNBd0lDWW1JSE4wWVhSbExtVnVaR1ZrS1NCeVpYUjFjbTRnTUR0Y2JpQWdhV1lnS0hOMFlYUmxMbTlpYW1WamRFMXZaR1VwSUhKbGRIVnliaUF4TzF4dUlDQnBaaUFvYmlBaFBUMGdiaWtnZTF4dUlDQWdJQzh2SUU5dWJIa2dabXh2ZHlCdmJtVWdZblZtWm1WeUlHRjBJR0VnZEdsdFpWeHVJQ0FnSUdsbUlDaHpkR0YwWlM1bWJHOTNhVzVuSUNZbUlITjBZWFJsTG14bGJtZDBhQ2tnY21WMGRYSnVJSE4wWVhSbExtSjFabVpsY2k1b1pXRmtMbVJoZEdFdWJHVnVaM1JvTzJWc2MyVWdjbVYwZFhKdUlITjBZWFJsTG14bGJtZDBhRHRjYmlBZ2ZWeHVJQ0F2THlCSlppQjNaU2R5WlNCaGMydHBibWNnWm05eUlHMXZjbVVnZEdoaGJpQjBhR1VnWTNWeWNtVnVkQ0JvZDIwc0lIUm9aVzRnY21GcGMyVWdkR2hsSUdoM2JTNWNiaUFnYVdZZ0tHNGdQaUJ6ZEdGMFpTNW9hV2RvVjJGMFpYSk5ZWEpyS1NCemRHRjBaUzVvYVdkb1YyRjBaWEpOWVhKcklEMGdZMjl0Y0hWMFpVNWxkMGhwWjJoWFlYUmxjazFoY21zb2JpazdYRzRnSUdsbUlDaHVJRHc5SUhOMFlYUmxMbXhsYm1kMGFDa2djbVYwZFhKdUlHNDdYRzRnSUM4dklFUnZiaWQwSUdoaGRtVWdaVzV2ZFdkb1hHNGdJR2xtSUNnaGMzUmhkR1V1Wlc1a1pXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1dVpXVmtVbVZoWkdGaWJHVWdQU0IwY25WbE8xeHVJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ6ZEdGMFpTNXNaVzVuZEdnN1hHNTlYRzVjYmk4dklIbHZkU0JqWVc0Z2IzWmxjbkpwWkdVZ1pXbDBhR1Z5SUhSb2FYTWdiV1YwYUc5a0xDQnZjaUIwYUdVZ1lYTjVibU1nWDNKbFlXUW9iaWtnWW1Wc2IzY3VYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1Y21WaFpDQTlJR1oxYm1OMGFXOXVJQ2h1S1NCN1hHNGdJR1JsWW5WbktDZHlaV0ZrSnl3Z2JpazdYRzRnSUc0Z1BTQndZWEp6WlVsdWRDaHVMQ0F4TUNrN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJSFpoY2lCdVQzSnBaeUE5SUc0N1hHNWNiaUFnYVdZZ0tHNGdJVDA5SURBcElITjBZWFJsTG1WdGFYUjBaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1WEc0Z0lDOHZJR2xtSUhkbEozSmxJR1J2YVc1bklISmxZV1FvTUNrZ2RHOGdkSEpwWjJkbGNpQmhJSEpsWVdSaFlteGxJR1YyWlc1MExDQmlkWFFnZDJWY2JpQWdMeThnWVd4eVpXRmtlU0JvWVhabElHRWdZblZ1WTJnZ2IyWWdaR0YwWVNCcGJpQjBhR1VnWW5WbVptVnlMQ0IwYUdWdUlHcDFjM1FnZEhKcFoyZGxjbHh1SUNBdkx5QjBhR1VnSjNKbFlXUmhZbXhsSnlCbGRtVnVkQ0JoYm1RZ2JXOTJaU0J2Ymk1Y2JpQWdhV1lnS0c0Z1BUMDlJREFnSmlZZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElDWW1JQ2h6ZEdGMFpTNXNaVzVuZEdnZ1BqMGdjM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheUI4ZkNCemRHRjBaUzVsYm1SbFpDa3BJSHRjYmlBZ0lDQmtaV0oxWnlnbmNtVmhaRG9nWlcxcGRGSmxZV1JoWW14bEp5d2djM1JoZEdVdWJHVnVaM1JvTENCemRHRjBaUzVsYm1SbFpDazdYRzRnSUNBZ2FXWWdLSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ0FtSmlCemRHRjBaUzVsYm1SbFpDa2daVzVrVW1WaFpHRmliR1VvZEdocGN5azdaV3h6WlNCbGJXbDBVbVZoWkdGaWJHVW9kR2hwY3lrN1hHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnVJRDBnYUc5M1RYVmphRlJ2VW1WaFpDaHVMQ0J6ZEdGMFpTazdYRzVjYmlBZ0x5OGdhV1lnZDJVbmRtVWdaVzVrWldRc0lHRnVaQ0IzWlNkeVpTQnViM2NnWTJ4bFlYSXNJSFJvWlc0Z1ptbHVhWE5vSUdsMElIVndMbHh1SUNCcFppQW9iaUE5UFQwZ01DQW1KaUJ6ZEdGMFpTNWxibVJsWkNrZ2UxeHVJQ0FnSUdsbUlDaHpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQXBJR1Z1WkZKbFlXUmhZbXhsS0hSb2FYTXBPMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnTHk4Z1FXeHNJSFJvWlNCaFkzUjFZV3dnWTJoMWJtc2daMlZ1WlhKaGRHbHZiaUJzYjJkcFl5QnVaV1ZrY3lCMGJ5QmlaVnh1SUNBdkx5QXFZbVZzYjNjcUlIUm9aU0JqWVd4c0lIUnZJRjl5WldGa0xpQWdWR2hsSUhKbFlYTnZiaUJwY3lCMGFHRjBJR2x1SUdObGNuUmhhVzVjYmlBZ0x5OGdjM2x1ZEdobGRHbGpJSE4wY21WaGJTQmpZWE5sY3l3Z2MzVmphQ0JoY3lCd1lYTnpkR2h5YjNWbmFDQnpkSEpsWVcxekxDQmZjbVZoWkZ4dUlDQXZMeUJ0WVhrZ1ltVWdZU0JqYjIxd2JHVjBaV3g1SUhONWJtTm9jbTl1YjNWeklHOXdaWEpoZEdsdmJpQjNhR2xqYUNCdFlYa2dZMmhoYm1kbFhHNGdJQzh2SUhSb1pTQnpkR0YwWlNCdlppQjBhR1VnY21WaFpDQmlkV1ptWlhJc0lIQnliM1pwWkdsdVp5QmxibTkxWjJnZ1pHRjBZU0IzYUdWdVhHNGdJQzh2SUdKbFptOXlaU0IwYUdWeVpTQjNZWE1nS201dmRDb2daVzV2ZFdkb0xseHVJQ0F2TDF4dUlDQXZMeUJUYnl3Z2RHaGxJSE4wWlhCeklHRnlaVHBjYmlBZ0x5OGdNUzRnUm1sbmRYSmxJRzkxZENCM2FHRjBJSFJvWlNCemRHRjBaU0J2WmlCMGFHbHVaM01nZDJsc2JDQmlaU0JoWm5SbGNpQjNaU0JrYjF4dUlDQXZMeUJoSUhKbFlXUWdabkp2YlNCMGFHVWdZblZtWm1WeUxseHVJQ0F2TDF4dUlDQXZMeUF5TGlCSlppQjBhR0YwSUhKbGMzVnNkR2x1WnlCemRHRjBaU0IzYVd4c0lIUnlhV2RuWlhJZ1lTQmZjbVZoWkN3Z2RHaGxiaUJqWVd4c0lGOXlaV0ZrTGx4dUlDQXZMeUJPYjNSbElIUm9ZWFFnZEdocGN5QnRZWGtnWW1VZ1lYTjVibU5vY205dWIzVnpMQ0J2Y2lCemVXNWphSEp2Ym05MWN5NGdJRmxsY3l3Z2FYUWdhWE5jYmlBZ0x5OGdaR1ZsY0d4NUlIVm5iSGtnZEc4Z2QzSnBkR1VnUVZCSmN5QjBhR2x6SUhkaGVTd2dZblYwSUhSb1lYUWdjM1JwYkd3Z1pHOWxjMjRuZENCdFpXRnVYRzRnSUM4dklIUm9ZWFFnZEdobElGSmxZV1JoWW14bElHTnNZWE56SUhOb2IzVnNaQ0JpWldoaGRtVWdhVzF3Y205d1pYSnNlU3dnWVhNZ2MzUnlaV0Z0Y3lCaGNtVmNiaUFnTHk4Z1pHVnphV2R1WldRZ2RHOGdZbVVnYzNsdVl5OWhjM2x1WXlCaFoyNXZjM1JwWXk1Y2JpQWdMeThnVkdGclpTQnViM1JsSUdsbUlIUm9aU0JmY21WaFpDQmpZV3hzSUdseklITjVibU1nYjNJZ1lYTjVibU1nS0dsbExDQnBaaUIwYUdVZ2NtVmhaQ0JqWVd4c1hHNGdJQzh2SUdoaGN5QnlaWFIxY201bFpDQjVaWFFwTENCemJ5QjBhR0YwSUhkbElHdHViM2NnZDJobGRHaGxjaUJ2Y2lCdWIzUWdhWFFuY3lCellXWmxJSFJ2SUdWdGFYUmNiaUFnTHk4Z0ozSmxZV1JoWW14bEp5QmxkR011WEc0Z0lDOHZYRzRnSUM4dklETXVJRUZqZEhWaGJHeDVJSEIxYkd3Z2RHaGxJSEpsY1hWbGMzUmxaQ0JqYUhWdWEzTWdiM1YwSUc5bUlIUm9aU0JpZFdabVpYSWdZVzVrSUhKbGRIVnliaTVjYmx4dUlDQXZMeUJwWmlCM1pTQnVaV1ZrSUdFZ2NtVmhaR0ZpYkdVZ1pYWmxiblFzSUhSb1pXNGdkMlVnYm1WbFpDQjBieUJrYnlCemIyMWxJSEpsWVdScGJtY3VYRzRnSUhaaGNpQmtiMUpsWVdRZ1BTQnpkR0YwWlM1dVpXVmtVbVZoWkdGaWJHVTdYRzRnSUdSbFluVm5LQ2R1WldWa0lISmxZV1JoWW14bEp5d2daRzlTWldGa0tUdGNibHh1SUNBdkx5QnBaaUIzWlNCamRYSnlaVzUwYkhrZ2FHRjJaU0JzWlhOeklIUm9ZVzRnZEdobElHaHBaMmhYWVhSbGNrMWhjbXNzSUhSb1pXNGdZV3h6YnlCeVpXRmtJSE52YldWY2JpQWdhV1lnS0hOMFlYUmxMbXhsYm1kMGFDQTlQVDBnTUNCOGZDQnpkR0YwWlM1c1pXNW5kR2dnTFNCdUlEd2djM1JoZEdVdWFHbG5hRmRoZEdWeVRXRnlheWtnZTF4dUlDQWdJR1J2VW1WaFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnWkdWaWRXY29KMnhsYm1kMGFDQnNaWE56SUhSb1lXNGdkMkYwWlhKdFlYSnJKeXdnWkc5U1pXRmtLVHRjYmlBZ2ZWeHVYRzRnSUM4dklHaHZkMlYyWlhJc0lHbG1JSGRsSjNabElHVnVaR1ZrTENCMGFHVnVJSFJvWlhKbEozTWdibThnY0c5cGJuUXNJR0Z1WkNCcFppQjNaU2R5WlNCaGJISmxZV1I1WEc0Z0lDOHZJSEpsWVdScGJtY3NJSFJvWlc0Z2FYUW5jeUIxYm01bFkyVnpjMkZ5ZVM1Y2JpQWdhV1lnS0hOMFlYUmxMbVZ1WkdWa0lIeDhJSE4wWVhSbExuSmxZV1JwYm1jcElIdGNiaUFnSUNCa2IxSmxZV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQmtaV0oxWnlnbmNtVmhaR2x1WnlCdmNpQmxibVJsWkNjc0lHUnZVbVZoWkNrN1hHNGdJSDBnWld4elpTQnBaaUFvWkc5U1pXRmtLU0I3WEc0Z0lDQWdaR1ZpZFdjb0oyUnZJSEpsWVdRbktUdGNiaUFnSUNCemRHRjBaUzV5WldGa2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNCemRHRjBaUzV6ZVc1aklEMGdkSEoxWlR0Y2JpQWdJQ0F2THlCcFppQjBhR1VnYkdWdVozUm9JR2x6SUdOMWNuSmxiblJzZVNCNlpYSnZMQ0IwYUdWdUlIZGxJQ3B1WldWa0tpQmhJSEpsWVdSaFlteGxJR1YyWlc1MExseHVJQ0FnSUdsbUlDaHpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQXBJSE4wWVhSbExtNWxaV1JTWldGa1lXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ0x5OGdZMkZzYkNCcGJuUmxjbTVoYkNCeVpXRmtJRzFsZEdodlpGeHVJQ0FnSUhSb2FYTXVYM0psWVdRb2MzUmhkR1V1YUdsbmFGZGhkR1Z5VFdGeWF5azdYRzRnSUNBZ2MzUmhkR1V1YzNsdVl5QTlJR1poYkhObE8xeHVJQ0FnSUM4dklFbG1JRjl5WldGa0lIQjFjMmhsWkNCa1lYUmhJSE41Ym1Ob2NtOXViM1Z6Ykhrc0lIUm9aVzRnWUhKbFlXUnBibWRnSUhkcGJHd2dZbVVnWm1Gc2MyVXNYRzRnSUNBZ0x5OGdZVzVrSUhkbElHNWxaV1FnZEc4Z2NtVXRaWFpoYkhWaGRHVWdhRzkzSUcxMVkyZ2daR0YwWVNCM1pTQmpZVzRnY21WMGRYSnVJSFJ2SUhSb1pTQjFjMlZ5TGx4dUlDQWdJR2xtSUNnaGMzUmhkR1V1Y21WaFpHbHVaeWtnYmlBOUlHaHZkMDExWTJoVWIxSmxZV1FvYms5eWFXY3NJSE4wWVhSbEtUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCeVpYUTdYRzRnSUdsbUlDaHVJRDRnTUNrZ2NtVjBJRDBnWm5KdmJVeHBjM1FvYml3Z2MzUmhkR1VwTzJWc2MyVWdjbVYwSUQwZ2JuVnNiRHRjYmx4dUlDQnBaaUFvY21WMElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0J1SUQwZ01EdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnpkR0YwWlM1c1pXNW5kR2dnTFQwZ2JqdGNiaUFnZlZ4dVhHNGdJR2xtSUNoemRHRjBaUzVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBdkx5QkpaaUIzWlNCb1lYWmxJRzV2ZEdocGJtY2dhVzRnZEdobElHSjFabVpsY2l3Z2RHaGxiaUIzWlNCM1lXNTBJSFJ2SUd0dWIzZGNiaUFnSUNBdkx5QmhjeUJ6YjI5dUlHRnpJSGRsSUNwa2J5b2daMlYwSUhOdmJXVjBhR2x1WnlCcGJuUnZJSFJvWlNCaWRXWm1aWEl1WEc0Z0lDQWdhV1lnS0NGemRHRjBaUzVsYm1SbFpDa2djM1JoZEdVdWJtVmxaRkpsWVdSaFlteGxJRDBnZEhKMVpUdGNibHh1SUNBZ0lDOHZJRWxtSUhkbElIUnlhV1ZrSUhSdklISmxZV1FvS1NCd1lYTjBJSFJvWlNCRlQwWXNJSFJvWlc0Z1pXMXBkQ0JsYm1RZ2IyNGdkR2hsSUc1bGVIUWdkR2xqYXk1Y2JpQWdJQ0JwWmlBb2JrOXlhV2NnSVQwOUlHNGdKaVlnYzNSaGRHVXVaVzVrWldRcElHVnVaRkpsWVdSaFlteGxLSFJvYVhNcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0hKbGRDQWhQVDBnYm5Wc2JDa2dkR2hwY3k1bGJXbDBLQ2RrWVhSaEp5d2djbVYwS1R0Y2JseHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnYjI1RmIyWkRhSFZ1YXloemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lHbG1JQ2h6ZEdGMFpTNWxibVJsWkNrZ2NtVjBkWEp1TzF4dUlDQnBaaUFvYzNSaGRHVXVaR1ZqYjJSbGNpa2dlMXh1SUNBZ0lIWmhjaUJqYUhWdWF5QTlJSE4wWVhSbExtUmxZMjlrWlhJdVpXNWtLQ2s3WEc0Z0lDQWdhV1lnS0dOb2RXNXJJQ1ltSUdOb2RXNXJMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdjM1JoZEdVdVluVm1abVZ5TG5CMWMyZ29ZMmgxYm1zcE8xeHVJQ0FnSUNBZ2MzUmhkR1V1YkdWdVozUm9JQ3M5SUhOMFlYUmxMbTlpYW1WamRFMXZaR1VnUHlBeElEb2dZMmgxYm1zdWJHVnVaM1JvTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J6ZEdGMFpTNWxibVJsWkNBOUlIUnlkV1U3WEc1Y2JpQWdMeThnWlcxcGRDQW5jbVZoWkdGaWJHVW5JRzV2ZHlCMGJ5QnRZV3RsSUhOMWNtVWdhWFFnWjJWMGN5QndhV05yWldRZ2RYQXVYRzRnSUdWdGFYUlNaV0ZrWVdKc1pTaHpkSEpsWVcwcE8xeHVmVnh1WEc0dkx5QkViMjRuZENCbGJXbDBJSEpsWVdSaFlteGxJSEpwWjJoMElHRjNZWGtnYVc0Z2MzbHVZeUJ0YjJSbExDQmlaV05oZFhObElIUm9hWE1nWTJGdUlIUnlhV2RuWlhKY2JpOHZJR0Z1YjNSb1pYSWdjbVZoWkNncElHTmhiR3dnUFQ0Z2MzUmhZMnNnYjNabGNtWnNiM2N1SUNCVWFHbHpJSGRoZVN3Z2FYUWdiV2xuYUhRZ2RISnBaMmRsY2x4dUx5OGdZU0J1WlhoMFZHbGpheUJ5WldOMWNuTnBiMjRnZDJGeWJtbHVaeXdnWW5WMElIUm9ZWFFuY3lCdWIzUWdjMjhnWW1Ga0xseHVablZ1WTNScGIyNGdaVzFwZEZKbFlXUmhZbXhsS0hOMGNtVmhiU2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0J6ZEhKbFlXMHVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJSE4wWVhSbExtNWxaV1JTWldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNCcFppQW9JWE4wWVhSbExtVnRhWFIwWldSU1pXRmtZV0pzWlNrZ2UxeHVJQ0FnSUdSbFluVm5LQ2RsYldsMFVtVmhaR0ZpYkdVbkxDQnpkR0YwWlM1bWJHOTNhVzVuS1R0Y2JpQWdJQ0J6ZEdGMFpTNWxiV2wwZEdWa1VtVmhaR0ZpYkdVZ1BTQjBjblZsTzF4dUlDQWdJR2xtSUNoemRHRjBaUzV6ZVc1aktTQndibUV1Ym1WNGRGUnBZMnNvWlcxcGRGSmxZV1JoWW14bFh5d2djM1J5WldGdEtUdGxiSE5sSUdWdGFYUlNaV0ZrWVdKc1pWOG9jM1J5WldGdEtUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJsYldsMFVtVmhaR0ZpYkdWZktITjBjbVZoYlNrZ2UxeHVJQ0JrWldKMVp5Z25aVzFwZENCeVpXRmtZV0pzWlNjcE8xeHVJQ0J6ZEhKbFlXMHVaVzFwZENnbmNtVmhaR0ZpYkdVbktUdGNiaUFnWm14dmR5aHpkSEpsWVcwcE8xeHVmVnh1WEc0dkx5QmhkQ0IwYUdseklIQnZhVzUwTENCMGFHVWdkWE5sY2lCb1lYTWdjSEpsYzNWdFlXSnNlU0J6WldWdUlIUm9aU0FuY21WaFpHRmliR1VuSUdWMlpXNTBMRnh1THk4Z1lXNWtJR05oYkd4bFpDQnlaV0ZrS0NrZ2RHOGdZMjl1YzNWdFpTQnpiMjFsSUdSaGRHRXVJQ0IwYUdGMElHMWhlU0JvWVhabElIUnlhV2RuWlhKbFpGeHVMeThnYVc0Z2RIVnliaUJoYm05MGFHVnlJRjl5WldGa0tHNHBJR05oYkd3c0lHbHVJSGRvYVdOb0lHTmhjMlVnY21WaFpHbHVaeUE5SUhSeWRXVWdhV1pjYmk4dklHbDBKM01nYVc0Z2NISnZaM0psYzNNdVhHNHZMeUJJYjNkbGRtVnlMQ0JwWmlCM1pTZHlaU0J1YjNRZ1pXNWtaV1FzSUc5eUlISmxZV1JwYm1jc0lHRnVaQ0IwYUdVZ2JHVnVaM1JvSUR3Z2FIZHRMRnh1THk4Z2RHaGxiaUJuYnlCaGFHVmhaQ0JoYm1RZ2RISjVJSFJ2SUhKbFlXUWdjMjl0WlNCdGIzSmxJSEJ5WldWdGNIUnBkbVZzZVM1Y2JtWjFibU4wYVc5dUlHMWhlV0psVW1WaFpFMXZjbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCcFppQW9JWE4wWVhSbExuSmxZV1JwYm1kTmIzSmxLU0I3WEc0Z0lDQWdjM1JoZEdVdWNtVmhaR2x1WjAxdmNtVWdQU0IwY25WbE8xeHVJQ0FnSUhCdVlTNXVaWGgwVkdsamF5aHRZWGxpWlZKbFlXUk5iM0psWHl3Z2MzUnlaV0Z0TENCemRHRjBaU2s3WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2JXRjVZbVZTWldGa1RXOXlaVjhvYzNSeVpXRnRMQ0J6ZEdGMFpTa2dlMXh1SUNCMllYSWdiR1Z1SUQwZ2MzUmhkR1V1YkdWdVozUm9PMXh1SUNCM2FHbHNaU0FvSVhOMFlYUmxMbkpsWVdScGJtY2dKaVlnSVhOMFlYUmxMbVpzYjNkcGJtY2dKaVlnSVhOMFlYUmxMbVZ1WkdWa0lDWW1JSE4wWVhSbExteGxibWQwYUNBOElITjBZWFJsTG1ocFoyaFhZWFJsY2sxaGNtc3BJSHRjYmlBZ0lDQmtaV0oxWnlnbmJXRjVZbVZTWldGa1RXOXlaU0J5WldGa0lEQW5LVHRjYmlBZ0lDQnpkSEpsWVcwdWNtVmhaQ2d3S1R0Y2JpQWdJQ0JwWmlBb2JHVnVJRDA5UFNCemRHRjBaUzVzWlc1bmRHZ3BYRzRnSUNBZ0lDQXZMeUJrYVdSdUozUWdaMlYwSUdGdWVTQmtZWFJoTENCemRHOXdJSE53YVc1dWFXNW5MbHh1SUNBZ0lDQWdZbkpsWVdzN1pXeHpaU0JzWlc0Z1BTQnpkR0YwWlM1c1pXNW5kR2c3WEc0Z0lIMWNiaUFnYzNSaGRHVXVjbVZoWkdsdVowMXZjbVVnUFNCbVlXeHpaVHRjYm4xY2JseHVMeThnWVdKemRISmhZM1FnYldWMGFHOWtMaUFnZEc4Z1ltVWdiM1psY25KcFpHUmxiaUJwYmlCemNHVmphV1pwWXlCcGJYQnNaVzFsYm5SaGRHbHZiaUJqYkdGemMyVnpMbHh1THk4Z1kyRnNiQ0JqWWlobGNpd2daR0YwWVNrZ2QyaGxjbVVnWkdGMFlTQnBjeUE4UFNCdUlHbHVJR3hsYm1kMGFDNWNiaTh2SUdadmNpQjJhWEowZFdGc0lDaHViMjR0YzNSeWFXNW5MQ0J1YjI0dFluVm1abVZ5S1NCemRISmxZVzF6TENCY0lteGxibWQwYUZ3aUlHbHpJSE52YldWM2FHRjBYRzR2THlCaGNtSnBkSEpoY25rc0lHRnVaQ0J3WlhKb1lYQnpJRzV2ZENCMlpYSjVJRzFsWVc1cGJtZG1kV3d1WEc1U1pXRmtZV0pzWlM1d2NtOTBiM1I1Y0dVdVgzSmxZV1FnUFNCbWRXNWpkR2x2YmlBb2Jpa2dlMXh1SUNCMGFHbHpMbVZ0YVhRb0oyVnljbTl5Snl3Z2JtVjNJRVZ5Y205eUtDZGZjbVZoWkNncElHbHpJRzV2ZENCcGJYQnNaVzFsYm5SbFpDY3BLVHRjYm4wN1hHNWNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV3YVhCbElEMGdablZ1WTNScGIyNGdLR1JsYzNRc0lIQnBjR1ZQY0hSektTQjdYRzRnSUhaaGNpQnpjbU1nUFNCMGFHbHpPMXh1SUNCMllYSWdjM1JoZEdVZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1WEc0Z0lITjNhWFJqYUNBb2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENrZ2UxeHVJQ0FnSUdOaGMyVWdNRHBjYmlBZ0lDQWdJSE4wWVhSbExuQnBjR1Z6SUQwZ1pHVnpkRHRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdNVHBjYmlBZ0lDQWdJSE4wWVhSbExuQnBjR1Z6SUQwZ1czTjBZWFJsTG5CcGNHVnpMQ0JrWlhOMFhUdGNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQnpkR0YwWlM1d2FYQmxjeTV3ZFhOb0tHUmxjM1FwTzF4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUgxY2JpQWdjM1JoZEdVdWNHbHdaWE5EYjNWdWRDQXJQU0F4TzF4dUlDQmtaV0oxWnlnbmNHbHdaU0JqYjNWdWREMGxaQ0J2Y0hSelBTVnFKeXdnYzNSaGRHVXVjR2x3WlhORGIzVnVkQ3dnY0dsd1pVOXdkSE1wTzF4dVhHNGdJSFpoY2lCa2IwVnVaQ0E5SUNnaGNHbHdaVTl3ZEhNZ2ZId2djR2x3WlU5d2RITXVaVzVrSUNFOVBTQm1ZV3h6WlNrZ0ppWWdaR1Z6ZENBaFBUMGdjSEp2WTJWemN5NXpkR1J2ZFhRZ0ppWWdaR1Z6ZENBaFBUMGdjSEp2WTJWemN5NXpkR1JsY25JN1hHNWNiaUFnZG1GeUlHVnVaRVp1SUQwZ1pHOUZibVFnUHlCdmJtVnVaQ0E2SUhWdWNHbHdaVHRjYmlBZ2FXWWdLSE4wWVhSbExtVnVaRVZ0YVhSMFpXUXBJSEJ1WVM1dVpYaDBWR2xqYXlobGJtUkdiaWs3Wld4elpTQnpjbU11YjI1alpTZ25aVzVrSnl3Z1pXNWtSbTRwTzF4dVhHNGdJR1JsYzNRdWIyNG9KM1Z1Y0dsd1pTY3NJRzl1ZFc1d2FYQmxLVHRjYmlBZ1puVnVZM1JwYjI0Z2IyNTFibkJwY0dVb2NtVmhaR0ZpYkdVc0lIVnVjR2x3WlVsdVptOHBJSHRjYmlBZ0lDQmtaV0oxWnlnbmIyNTFibkJwY0dVbktUdGNiaUFnSUNCcFppQW9jbVZoWkdGaWJHVWdQVDA5SUhOeVl5a2dlMXh1SUNBZ0lDQWdhV1lnS0hWdWNHbHdaVWx1Wm04Z0ppWWdkVzV3YVhCbFNXNW1ieTVvWVhOVmJuQnBjR1ZrSUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQjFibkJwY0dWSmJtWnZMbWhoYzFWdWNHbHdaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JqYkdWaGJuVndLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYjI1bGJtUW9LU0I3WEc0Z0lDQWdaR1ZpZFdjb0oyOXVaVzVrSnlrN1hHNGdJQ0FnWkdWemRDNWxibVFvS1R0Y2JpQWdmVnh1WEc0Z0lDOHZJSGRvWlc0Z2RHaGxJR1JsYzNRZ1pISmhhVzV6TENCcGRDQnlaV1IxWTJWeklIUm9aU0JoZDJGcGRFUnlZV2x1SUdOdmRXNTBaWEpjYmlBZ0x5OGdiMjRnZEdobElITnZkWEpqWlM0Z0lGUm9hWE1nZDI5MWJHUWdZbVVnYlc5eVpTQmxiR1ZuWVc1MElIZHBkR2dnWVNBdWIyNWpaU2dwWEc0Z0lDOHZJR2hoYm1Sc1pYSWdhVzRnWm14dmR5Z3BMQ0JpZFhRZ1lXUmthVzVuSUdGdVpDQnlaVzF2ZG1sdVp5QnlaWEJsWVhSbFpHeDVJR2x6WEc0Z0lDOHZJSFJ2YnlCemJHOTNMbHh1SUNCMllYSWdiMjVrY21GcGJpQTlJSEJwY0dWUGJrUnlZV2x1S0hOeVl5azdYRzRnSUdSbGMzUXViMjRvSjJSeVlXbHVKeXdnYjI1a2NtRnBiaWs3WEc1Y2JpQWdkbUZ5SUdOc1pXRnVaV1JWY0NBOUlHWmhiSE5sTzF4dUlDQm1kVzVqZEdsdmJpQmpiR1ZoYm5Wd0tDa2dlMXh1SUNBZ0lHUmxZblZuS0NkamJHVmhiblZ3SnlrN1hHNGdJQ0FnTHk4Z1kyeGxZVzUxY0NCbGRtVnVkQ0JvWVc1a2JHVnljeUJ2Ym1ObElIUm9aU0J3YVhCbElHbHpJR0p5YjJ0bGJseHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyTnNiM05sSnl3Z2IyNWpiRzl6WlNrN1hHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblptbHVhWE5vSnl3Z2IyNW1hVzVwYzJncE8xeHVJQ0FnSUdSbGMzUXVjbVZ0YjNabFRHbHpkR1Z1WlhJb0oyUnlZV2x1Snl3Z2IyNWtjbUZwYmlrN1hHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblpYSnliM0luTENCdmJtVnljbTl5S1R0Y2JpQWdJQ0JrWlhOMExuSmxiVzkyWlV4cGMzUmxibVZ5S0NkMWJuQnBjR1VuTENCdmJuVnVjR2x3WlNrN1hHNGdJQ0FnYzNKakxuSmxiVzkyWlV4cGMzUmxibVZ5S0NkbGJtUW5MQ0J2Ym1WdVpDazdYRzRnSUNBZ2MzSmpMbkpsYlc5MlpVeHBjM1JsYm1WeUtDZGxibVFuTENCMWJuQnBjR1VwTzF4dUlDQWdJSE55WXk1eVpXMXZkbVZNYVhOMFpXNWxjaWduWkdGMFlTY3NJRzl1WkdGMFlTazdYRzVjYmlBZ0lDQmpiR1ZoYm1Wa1ZYQWdQU0IwY25WbE8xeHVYRzRnSUNBZ0x5OGdhV1lnZEdobElISmxZV1JsY2lCcGN5QjNZV2wwYVc1bklHWnZjaUJoSUdSeVlXbHVJR1YyWlc1MElHWnliMjBnZEdocGMxeHVJQ0FnSUM4dklITndaV05wWm1saklIZHlhWFJsY2l3Z2RHaGxiaUJwZENCM2IzVnNaQ0JqWVhWelpTQnBkQ0IwYnlCdVpYWmxjaUJ6ZEdGeWRGeHVJQ0FnSUM4dklHWnNiM2RwYm1jZ1lXZGhhVzR1WEc0Z0lDQWdMeThnVTI4c0lHbG1JSFJvYVhNZ2FYTWdZWGRoYVhScGJtY2dZU0JrY21GcGJpd2dkR2hsYmlCM1pTQnFkWE4wSUdOaGJHd2dhWFFnYm05M0xseHVJQ0FnSUM4dklFbG1JSGRsSUdSdmJpZDBJR3R1YjNjc0lIUm9aVzRnWVhOemRXMWxJSFJvWVhRZ2QyVWdZWEpsSUhkaGFYUnBibWNnWm05eUlHOXVaUzVjYmlBZ0lDQnBaaUFvYzNSaGRHVXVZWGRoYVhSRWNtRnBiaUFtSmlBb0lXUmxjM1F1WDNkeWFYUmhZbXhsVTNSaGRHVWdmSHdnWkdWemRDNWZkM0pwZEdGaWJHVlRkR0YwWlM1dVpXVmtSSEpoYVc0cEtTQnZibVJ5WVdsdUtDazdYRzRnSUgxY2JseHVJQ0F2THlCSlppQjBhR1VnZFhObGNpQndkWE5vWlhNZ2JXOXlaU0JrWVhSaElIZG9hV3hsSUhkbEozSmxJSGR5YVhScGJtY2dkRzhnWkdWemRDQjBhR1Z1SUhkbEoyeHNJR1Z1WkNCMWNGeHVJQ0F2THlCcGJpQnZibVJoZEdFZ1lXZGhhVzR1SUVodmQyVjJaWElzSUhkbElHOXViSGtnZDJGdWRDQjBieUJwYm1OeVpXRnpaU0JoZDJGcGRFUnlZV2x1SUc5dVkyVWdZbVZqWVhWelpWeHVJQ0F2THlCa1pYTjBJSGRwYkd3Z2IyNXNlU0JsYldsMElHOXVaU0FuWkhKaGFXNG5JR1YyWlc1MElHWnZjaUIwYUdVZ2JYVnNkR2x3YkdVZ2QzSnBkR1Z6TGx4dUlDQXZMeUE5UGlCSmJuUnliMlIxWTJVZ1lTQm5kV0Z5WkNCdmJpQnBibU55WldGemFXNW5JR0YzWVdsMFJISmhhVzR1WEc0Z0lIWmhjaUJwYm1OeVpXRnpaV1JCZDJGcGRFUnlZV2x1SUQwZ1ptRnNjMlU3WEc0Z0lITnlZeTV2YmlnblpHRjBZU2NzSUc5dVpHRjBZU2s3WEc0Z0lHWjFibU4wYVc5dUlHOXVaR0YwWVNoamFIVnVheWtnZTF4dUlDQWdJR1JsWW5WbktDZHZibVJoZEdFbktUdGNiaUFnSUNCcGJtTnlaV0Z6WldSQmQyRnBkRVJ5WVdsdUlEMGdabUZzYzJVN1hHNGdJQ0FnZG1GeUlISmxkQ0E5SUdSbGMzUXVkM0pwZEdVb1kyaDFibXNwTzF4dUlDQWdJR2xtSUNobVlXeHpaU0E5UFQwZ2NtVjBJQ1ltSUNGcGJtTnlaV0Z6WldSQmQyRnBkRVJ5WVdsdUtTQjdYRzRnSUNBZ0lDQXZMeUJKWmlCMGFHVWdkWE5sY2lCMWJuQnBjR1ZrSUdSMWNtbHVaeUJnWkdWemRDNTNjbWwwWlNncFlDd2dhWFFnYVhNZ2NHOXpjMmxpYkdWY2JpQWdJQ0FnSUM4dklIUnZJR2RsZENCemRIVmpheUJwYmlCaElIQmxjbTFoYm1WdWRHeDVJSEJoZFhObFpDQnpkR0YwWlNCcFppQjBhR0YwSUhkeWFYUmxYRzRnSUNBZ0lDQXZMeUJoYkhOdklISmxkSFZ5Ym1Wa0lHWmhiSE5sTGx4dUlDQWdJQ0FnTHk4Z1BUNGdRMmhsWTJzZ2QyaGxkR2hsY2lCZ1pHVnpkR0FnYVhNZ2MzUnBiR3dnWVNCd2FYQnBibWNnWkdWemRHbHVZWFJwYjI0dVhHNGdJQ0FnSUNCcFppQW9LSE4wWVhSbExuQnBjR1Z6UTI5MWJuUWdQVDA5SURFZ0ppWWdjM1JoZEdVdWNHbHdaWE1nUFQwOUlHUmxjM1FnZkh3Z2MzUmhkR1V1Y0dsd1pYTkRiM1Z1ZENBK0lERWdKaVlnYVc1a1pYaFBaaWh6ZEdGMFpTNXdhWEJsY3l3Z1pHVnpkQ2tnSVQwOUlDMHhLU0FtSmlBaFkyeGxZVzVsWkZWd0tTQjdYRzRnSUNBZ0lDQWdJR1JsWW5WbktDZG1ZV3h6WlNCM2NtbDBaU0J5WlhOd2IyNXpaU3dnY0dGMWMyVW5MQ0J6Y21NdVgzSmxZV1JoWW14bFUzUmhkR1V1WVhkaGFYUkVjbUZwYmlrN1hHNGdJQ0FnSUNBZ0lITnlZeTVmY21WaFpHRmliR1ZUZEdGMFpTNWhkMkZwZEVSeVlXbHVLeXM3WEc0Z0lDQWdJQ0FnSUdsdVkzSmxZWE5sWkVGM1lXbDBSSEpoYVc0Z1BTQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYzNKakxuQmhkWE5sS0NrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OGdhV1lnZEdobElHUmxjM1FnYUdGeklHRnVJR1Z5Y205eUxDQjBhR1Z1SUhOMGIzQWdjR2x3YVc1bklHbHVkRzhnYVhRdVhHNGdJQzh2SUdodmQyVjJaWElzSUdSdmJpZDBJSE4xY0hCeVpYTnpJSFJvWlNCMGFISnZkMmx1WnlCaVpXaGhkbWx2Y2lCbWIzSWdkR2hwY3k1Y2JpQWdablZ1WTNScGIyNGdiMjVsY25KdmNpaGxjaWtnZTF4dUlDQWdJR1JsWW5WbktDZHZibVZ5Y205eUp5d2daWElwTzF4dUlDQWdJSFZ1Y0dsd1pTZ3BPMXh1SUNBZ0lHUmxjM1F1Y21WdGIzWmxUR2x6ZEdWdVpYSW9KMlZ5Y205eUp5d2diMjVsY25KdmNpazdYRzRnSUNBZ2FXWWdLRVZGYkdsemRHVnVaWEpEYjNWdWRDaGtaWE4wTENBblpYSnliM0luS1NBOVBUMGdNQ2tnWkdWemRDNWxiV2wwS0NkbGNuSnZjaWNzSUdWeUtUdGNiaUFnZlZ4dVhHNGdJQzh2SUUxaGEyVWdjM1Z5WlNCdmRYSWdaWEp5YjNJZ2FHRnVaR3hsY2lCcGN5QmhkSFJoWTJobFpDQmlaV1p2Y21VZ2RYTmxjbXhoYm1RZ2IyNWxjeTVjYmlBZ2NISmxjR1Z1WkV4cGMzUmxibVZ5S0dSbGMzUXNJQ2RsY25KdmNpY3NJRzl1WlhKeWIzSXBPMXh1WEc0Z0lDOHZJRUp2ZEdnZ1kyeHZjMlVnWVc1a0lHWnBibWx6YUNCemFHOTFiR1FnZEhKcFoyZGxjaUIxYm5CcGNHVXNJR0oxZENCdmJteDVJRzl1WTJVdVhHNGdJR1oxYm1OMGFXOXVJRzl1WTJ4dmMyVW9LU0I3WEc0Z0lDQWdaR1Z6ZEM1eVpXMXZkbVZNYVhOMFpXNWxjaWduWm1sdWFYTm9KeXdnYjI1bWFXNXBjMmdwTzF4dUlDQWdJSFZ1Y0dsd1pTZ3BPMXh1SUNCOVhHNGdJR1JsYzNRdWIyNWpaU2duWTJ4dmMyVW5MQ0J2Ym1Oc2IzTmxLVHRjYmlBZ1puVnVZM1JwYjI0Z2IyNW1hVzVwYzJnb0tTQjdYRzRnSUNBZ1pHVmlkV2NvSjI5dVptbHVhWE5vSnlrN1hHNGdJQ0FnWkdWemRDNXlaVzF2ZG1WTWFYTjBaVzVsY2lnblkyeHZjMlVuTENCdmJtTnNiM05sS1R0Y2JpQWdJQ0IxYm5CcGNHVW9LVHRjYmlBZ2ZWeHVJQ0JrWlhOMExtOXVZMlVvSjJacGJtbHphQ2NzSUc5dVptbHVhWE5vS1R0Y2JseHVJQ0JtZFc1amRHbHZiaUIxYm5CcGNHVW9LU0I3WEc0Z0lDQWdaR1ZpZFdjb0ozVnVjR2x3WlNjcE8xeHVJQ0FnSUhOeVl5NTFibkJwY0dVb1pHVnpkQ2s3WEc0Z0lIMWNibHh1SUNBdkx5QjBaV3hzSUhSb1pTQmtaWE4wSUhSb1lYUWdhWFFuY3lCaVpXbHVaeUJ3YVhCbFpDQjBiMXh1SUNCa1pYTjBMbVZ0YVhRb0ozQnBjR1VuTENCemNtTXBPMXh1WEc0Z0lDOHZJSE4wWVhKMElIUm9aU0JtYkc5M0lHbG1JR2wwSUdoaGMyNG5kQ0JpWldWdUlITjBZWEowWldRZ1lXeHlaV0ZrZVM1Y2JpQWdhV1lnS0NGemRHRjBaUzVtYkc5M2FXNW5LU0I3WEc0Z0lDQWdaR1ZpZFdjb0ozQnBjR1VnY21WemRXMWxKeWs3WEc0Z0lDQWdjM0pqTG5KbGMzVnRaU2dwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdSbGMzUTdYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQndhWEJsVDI1RWNtRnBiaWh6Y21NcElIdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2MzUmhkR1VnUFNCemNtTXVYM0psWVdSaFlteGxVM1JoZEdVN1hHNGdJQ0FnWkdWaWRXY29KM0JwY0dWUGJrUnlZV2x1Snl3Z2MzUmhkR1V1WVhkaGFYUkVjbUZwYmlrN1hHNGdJQ0FnYVdZZ0tITjBZWFJsTG1GM1lXbDBSSEpoYVc0cElITjBZWFJsTG1GM1lXbDBSSEpoYVc0dExUdGNiaUFnSUNCcFppQW9jM1JoZEdVdVlYZGhhWFJFY21GcGJpQTlQVDBnTUNBbUppQkZSV3hwYzNSbGJtVnlRMjkxYm5Rb2MzSmpMQ0FuWkdGMFlTY3BLU0I3WEc0Z0lDQWdJQ0J6ZEdGMFpTNW1iRzkzYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdac2IzY29jM0pqS1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzU5WEc1Y2JsSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNTFibkJwY0dVZ1BTQm1kVzVqZEdsdmJpQW9aR1Z6ZENrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2RXNXdhWEJsU1c1bWJ5QTlJSHNnYUdGelZXNXdhWEJsWkRvZ1ptRnNjMlVnZlR0Y2JseHVJQ0F2THlCcFppQjNaU2R5WlNCdWIzUWdjR2x3YVc1bklHRnVlWGRvWlhKbExDQjBhR1Z1SUdSdklHNXZkR2hwYm1jdVhHNGdJR2xtSUNoemRHRjBaUzV3YVhCbGMwTnZkVzUwSUQwOVBTQXdLU0J5WlhSMWNtNGdkR2hwY3p0Y2JseHVJQ0F2THlCcWRYTjBJRzl1WlNCa1pYTjBhVzVoZEdsdmJpNGdJRzF2YzNRZ1kyOXRiVzl1SUdOaGMyVXVYRzRnSUdsbUlDaHpkR0YwWlM1d2FYQmxjME52ZFc1MElEMDlQU0F4S1NCN1hHNGdJQ0FnTHk4Z2NHRnpjMlZrSUdsdUlHOXVaU3dnWW5WMElHbDBKM01nYm05MElIUm9aU0J5YVdkb2RDQnZibVV1WEc0Z0lDQWdhV1lnS0dSbGMzUWdKaVlnWkdWemRDQWhQVDBnYzNSaGRHVXVjR2x3WlhNcElISmxkSFZ5YmlCMGFHbHpPMXh1WEc0Z0lDQWdhV1lnS0NGa1pYTjBLU0JrWlhOMElEMGdjM1JoZEdVdWNHbHdaWE03WEc1Y2JpQWdJQ0F2THlCbmIzUWdZU0J0WVhSamFDNWNiaUFnSUNCemRHRjBaUzV3YVhCbGN5QTlJRzUxYkd3N1hHNGdJQ0FnYzNSaGRHVXVjR2x3WlhORGIzVnVkQ0E5SURBN1hHNGdJQ0FnYzNSaGRHVXVabXh2ZDJsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUdsbUlDaGtaWE4wS1NCa1pYTjBMbVZ0YVhRb0ozVnVjR2x3WlNjc0lIUm9hWE1zSUhWdWNHbHdaVWx1Wm04cE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeThnYzJ4dmR5QmpZWE5sTGlCdGRXeDBhWEJzWlNCd2FYQmxJR1JsYzNScGJtRjBhVzl1Y3k1Y2JseHVJQ0JwWmlBb0lXUmxjM1FwSUh0Y2JpQWdJQ0F2THlCeVpXMXZkbVVnWVd4c0xseHVJQ0FnSUhaaGNpQmtaWE4wY3lBOUlITjBZWFJsTG5CcGNHVnpPMXh1SUNBZ0lIWmhjaUJzWlc0Z1BTQnpkR0YwWlM1d2FYQmxjME52ZFc1ME8xeHVJQ0FnSUhOMFlYUmxMbkJwY0dWeklEMGdiblZzYkR0Y2JpQWdJQ0J6ZEdGMFpTNXdhWEJsYzBOdmRXNTBJRDBnTUR0Y2JpQWdJQ0J6ZEdGMFpTNW1iRzkzYVc1bklEMGdabUZzYzJVN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQmtaWE4wYzF0cFhTNWxiV2wwS0NkMWJuQnBjR1VuTENCMGFHbHpMQ0IxYm5CcGNHVkpibVp2S1R0Y2JpQWdJQ0I5Y21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dUlDQXZMeUIwY25rZ2RHOGdabWx1WkNCMGFHVWdjbWxuYUhRZ2IyNWxMbHh1SUNCMllYSWdhVzVrWlhnZ1BTQnBibVJsZUU5bUtITjBZWFJsTG5CcGNHVnpMQ0JrWlhOMEtUdGNiaUFnYVdZZ0tHbHVaR1Y0SUQwOVBTQXRNU2tnY21WMGRYSnVJSFJvYVhNN1hHNWNiaUFnYzNSaGRHVXVjR2x3WlhNdWMzQnNhV05sS0dsdVpHVjRMQ0F4S1R0Y2JpQWdjM1JoZEdVdWNHbHdaWE5EYjNWdWRDQXRQU0F4TzF4dUlDQnBaaUFvYzNSaGRHVXVjR2x3WlhORGIzVnVkQ0E5UFQwZ01Ta2djM1JoZEdVdWNHbHdaWE1nUFNCemRHRjBaUzV3YVhCbGMxc3dYVHRjYmx4dUlDQmtaWE4wTG1WdGFYUW9KM1Z1Y0dsd1pTY3NJSFJvYVhNc0lIVnVjR2x3WlVsdVptOHBPMXh1WEc0Z0lISmxkSFZ5YmlCMGFHbHpPMXh1ZlR0Y2JseHVMeThnYzJWMElIVndJR1JoZEdFZ1pYWmxiblJ6SUdsbUlIUm9aWGtnWVhKbElHRnphMlZrSUdadmNseHVMeThnUlc1emRYSmxJSEpsWVdSaFlteGxJR3hwYzNSbGJtVnljeUJsZG1WdWRIVmhiR3g1SUdkbGRDQnpiMjFsZEdocGJtZGNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzV2YmlBOUlHWjFibU4wYVc5dUlDaGxkaXdnWm00cElIdGNiaUFnZG1GeUlISmxjeUE5SUZOMGNtVmhiUzV3Y205MGIzUjVjR1V1YjI0dVkyRnNiQ2gwYUdsekxDQmxkaXdnWm00cE8xeHVYRzRnSUdsbUlDaGxkaUE5UFQwZ0oyUmhkR0VuS1NCN1hHNGdJQ0FnTHk4Z1UzUmhjblFnWm14dmQybHVaeUJ2YmlCdVpYaDBJSFJwWTJzZ2FXWWdjM1J5WldGdElHbHpiaWQwSUdWNGNHeHBZMmwwYkhrZ2NHRjFjMlZrWEc0Z0lDQWdhV1lnS0hSb2FYTXVYM0psWVdSaFlteGxVM1JoZEdVdVpteHZkMmx1WnlBaFBUMGdabUZzYzJVcElIUm9hWE11Y21WemRXMWxLQ2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9aWFlnUFQwOUlDZHlaV0ZrWVdKc1pTY3BJSHRjYmlBZ0lDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOXlaV0ZrWVdKc1pWTjBZWFJsTzF4dUlDQWdJR2xtSUNnaGMzUmhkR1V1Wlc1a1JXMXBkSFJsWkNBbUppQWhjM1JoZEdVdWNtVmhaR0ZpYkdWTWFYTjBaVzVwYm1jcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5KbFlXUmhZbXhsVEdsemRHVnVhVzVuSUQwZ2MzUmhkR1V1Ym1WbFpGSmxZV1JoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUhOMFlYUmxMbVZ0YVhSMFpXUlNaV0ZrWVdKc1pTQTlJR1poYkhObE8xeHVJQ0FnSUNBZ2FXWWdLQ0Z6ZEdGMFpTNXlaV0ZrYVc1bktTQjdYRzRnSUNBZ0lDQWdJSEJ1WVM1dVpYaDBWR2xqYXlodVVtVmhaR2x1WjA1bGVIUlVhV05yTENCMGFHbHpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvYzNSaGRHVXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJR1Z0YVhSU1pXRmtZV0pzWlNoMGFHbHpLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVZ6TzF4dWZUdGNibEpsWVdSaFlteGxMbkJ5YjNSdmRIbHdaUzVoWkdSTWFYTjBaVzVsY2lBOUlGSmxZV1JoWW14bExuQnliM1J2ZEhsd1pTNXZianRjYmx4dVpuVnVZM1JwYjI0Z2JsSmxZV1JwYm1kT1pYaDBWR2xqYXloelpXeG1LU0I3WEc0Z0lHUmxZblZuS0NkeVpXRmtZV0pzWlNCdVpYaDBkR2xqYXlCeVpXRmtJREFuS1R0Y2JpQWdjMlZzWmk1eVpXRmtLREFwTzF4dWZWeHVYRzR2THlCd1lYVnpaU2dwSUdGdVpDQnlaWE4xYldVb0tTQmhjbVVnY21WdGJtRnVkSE1nYjJZZ2RHaGxJR3hsWjJGamVTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ1FWQkpYRzR2THlCSlppQjBhR1VnZFhObGNpQjFjMlZ6SUhSb1pXMHNJSFJvWlc0Z2MzZHBkR05vSUdsdWRHOGdiMnhrSUcxdlpHVXVYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1Y21WemRXMWxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0JwWmlBb0lYTjBZWFJsTG1ac2IzZHBibWNwSUh0Y2JpQWdJQ0JrWldKMVp5Z25jbVZ6ZFcxbEp5azdYRzRnSUNBZ2MzUmhkR1V1Wm14dmQybHVaeUE5SUhSeWRXVTdYRzRnSUNBZ2NtVnpkVzFsS0hSb2FYTXNJSE4wWVhSbEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2RHaHBjenRjYm4wN1hHNWNibVoxYm1OMGFXOXVJSEpsYzNWdFpTaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1Y21WemRXMWxVMk5vWldSMWJHVmtLU0I3WEc0Z0lDQWdjM1JoZEdVdWNtVnpkVzFsVTJOb1pXUjFiR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQndibUV1Ym1WNGRGUnBZMnNvY21WemRXMWxYeXdnYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WemRXMWxYeWh6ZEhKbFlXMHNJSE4wWVhSbEtTQjdYRzRnSUdsbUlDZ2hjM1JoZEdVdWNtVmhaR2x1WnlrZ2UxeHVJQ0FnSUdSbFluVm5LQ2R5WlhOMWJXVWdjbVZoWkNBd0p5azdYRzRnSUNBZ2MzUnlaV0Z0TG5KbFlXUW9NQ2s3WEc0Z0lIMWNibHh1SUNCemRHRjBaUzV5WlhOMWJXVlRZMmhsWkhWc1pXUWdQU0JtWVd4elpUdGNiaUFnYzNSaGRHVXVZWGRoYVhSRWNtRnBiaUE5SURBN1hHNGdJSE4wY21WaGJTNWxiV2wwS0NkeVpYTjFiV1VuS1R0Y2JpQWdabXh2ZHloemRISmxZVzBwTzF4dUlDQnBaaUFvYzNSaGRHVXVabXh2ZDJsdVp5QW1KaUFoYzNSaGRHVXVjbVZoWkdsdVp5a2djM1J5WldGdExuSmxZV1FvTUNrN1hHNTlYRzVjYmxKbFlXUmhZbXhsTG5CeWIzUnZkSGx3WlM1d1lYVnpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnWkdWaWRXY29KMk5oYkd3Z2NHRjFjMlVnWm14dmQybHVaejBsYWljc0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVabXh2ZDJsdVp5azdYRzRnSUdsbUlDaG1ZV3h6WlNBaFBUMGdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVtYkc5M2FXNW5LU0I3WEc0Z0lDQWdaR1ZpZFdjb0ozQmhkWE5sSnlrN1hHNGdJQ0FnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bWJHOTNhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdkR2hwY3k1bGJXbDBLQ2R3WVhWelpTY3BPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQjBhR2x6TzF4dWZUdGNibHh1Wm5WdVkzUnBiMjRnWm14dmR5aHpkSEpsWVcwcElIdGNiaUFnZG1GeUlITjBZWFJsSUQwZ2MzUnlaV0Z0TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNCa1pXSjFaeWduWm14dmR5Y3NJSE4wWVhSbExtWnNiM2RwYm1jcE8xeHVJQ0IzYUdsc1pTQW9jM1JoZEdVdVpteHZkMmx1WnlBbUppQnpkSEpsWVcwdWNtVmhaQ2dwSUNFOVBTQnVkV3hzS1NCN2ZWeHVmVnh1WEc0dkx5QjNjbUZ3SUdGdUlHOXNaQzF6ZEhsc1pTQnpkSEpsWVcwZ1lYTWdkR2hsSUdGemVXNWpJR1JoZEdFZ2MyOTFjbU5sTGx4dUx5OGdWR2hwY3lCcGN5QXFibTkwS2lCd1lYSjBJRzltSUhSb1pTQnlaV0ZrWVdKc1pTQnpkSEpsWVcwZ2FXNTBaWEptWVdObExseHVMeThnU1hRZ2FYTWdZVzRnZFdkc2VTQjFibVp2Y25SMWJtRjBaU0J0WlhOeklHOW1JR2hwYzNSdmNua3VYRzVTWldGa1lXSnNaUzV3Y205MGIzUjVjR1V1ZDNKaGNDQTlJR1oxYm1OMGFXOXVJQ2h6ZEhKbFlXMHBJSHRjYmlBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2NHRjFjMlZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdjM1J5WldGdExtOXVLQ2RsYm1RbkxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdaR1ZpZFdjb0ozZHlZWEJ3WldRZ1pXNWtKeWs3WEc0Z0lDQWdhV1lnS0hOMFlYUmxMbVJsWTI5a1pYSWdKaVlnSVhOMFlYUmxMbVZ1WkdWa0tTQjdYRzRnSUNBZ0lDQjJZWElnWTJoMWJtc2dQU0J6ZEdGMFpTNWtaV052WkdWeUxtVnVaQ2dwTzF4dUlDQWdJQ0FnYVdZZ0tHTm9kVzVySUNZbUlHTm9kVzVyTG14bGJtZDBhQ2tnWDNSb2FYTXVjSFZ6YUNoamFIVnVheWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYM1JvYVhNdWNIVnphQ2h1ZFd4c0tUdGNiaUFnZlNrN1hHNWNiaUFnYzNSeVpXRnRMbTl1S0Nka1lYUmhKeXdnWm5WdVkzUnBiMjRnS0dOb2RXNXJLU0I3WEc0Z0lDQWdaR1ZpZFdjb0ozZHlZWEJ3WldRZ1pHRjBZU2NwTzF4dUlDQWdJR2xtSUNoemRHRjBaUzVrWldOdlpHVnlLU0JqYUhWdWF5QTlJSE4wWVhSbExtUmxZMjlrWlhJdWQzSnBkR1VvWTJoMWJtc3BPMXh1WEc0Z0lDQWdMeThnWkc5dUozUWdjMnRwY0NCdmRtVnlJR1poYkhONUlIWmhiSFZsY3lCcGJpQnZZbXBsWTNSTmIyUmxYRzRnSUNBZ2FXWWdLSE4wWVhSbExtOWlhbVZqZEUxdlpHVWdKaVlnS0dOb2RXNXJJRDA5UFNCdWRXeHNJSHg4SUdOb2RXNXJJRDA5UFNCMWJtUmxabWx1WldRcEtTQnlaWFIxY200N1pXeHpaU0JwWmlBb0lYTjBZWFJsTG05aWFtVmpkRTF2WkdVZ0ppWWdLQ0ZqYUhWdWF5QjhmQ0FoWTJoMWJtc3ViR1Z1WjNSb0tTa2djbVYwZFhKdU8xeHVYRzRnSUNBZ2RtRnlJSEpsZENBOUlGOTBhR2x6TG5CMWMyZ29ZMmgxYm1zcE8xeHVJQ0FnSUdsbUlDZ2hjbVYwS1NCN1hHNGdJQ0FnSUNCd1lYVnpaV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjM1J5WldGdExuQmhkWE5sS0NrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQXZMeUJ3Y205NGVTQmhiR3dnZEdobElHOTBhR1Z5SUcxbGRHaHZaSE11WEc0Z0lDOHZJR2x0Y0c5eWRHRnVkQ0IzYUdWdUlIZHlZWEJ3YVc1bklHWnBiSFJsY25NZ1lXNWtJR1IxY0d4bGVHVnpMbHh1SUNCbWIzSWdLSFpoY2lCcElHbHVJSE4wY21WaGJTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdselcybGRJRDA5UFNCMWJtUmxabWx1WldRZ0ppWWdkSGx3Wlc5bUlITjBjbVZoYlZ0cFhTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RHaHBjMXRwWFNBOUlHWjFibU4wYVc5dUlDaHRaWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzNSeVpXRnRXMjFsZEdodlpGMHVZWEJ3Ykhrb2MzUnlaV0Z0TENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdmU2hwS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkx5QndjbTk0ZVNCalpYSjBZV2x1SUdsdGNHOXlkR0Z1ZENCbGRtVnVkSE11WEc0Z0lHWnZjaUFvZG1GeUlHNGdQU0F3T3lCdUlEd2dhMUJ5YjNoNVJYWmxiblJ6TG14bGJtZDBhRHNnYmlzcktTQjdYRzRnSUNBZ2MzUnlaV0Z0TG05dUtHdFFjbTk0ZVVWMlpXNTBjMXR1WFN3Z2RHaHBjeTVsYldsMExtSnBibVFvZEdocGN5d2dhMUJ5YjNoNVJYWmxiblJ6VzI1ZEtTazdYRzRnSUgxY2JseHVJQ0F2THlCM2FHVnVJSGRsSUhSeWVTQjBieUJqYjI1emRXMWxJSE52YldVZ2JXOXlaU0JpZVhSbGN5d2djMmx0Y0d4NUlIVnVjR0YxYzJVZ2RHaGxYRzRnSUM4dklIVnVaR1Z5YkhscGJtY2djM1J5WldGdExseHVJQ0IwYUdsekxsOXlaV0ZrSUQwZ1puVnVZM1JwYjI0Z0tHNHBJSHRjYmlBZ0lDQmtaV0oxWnlnbmQzSmhjSEJsWkNCZmNtVmhaQ2NzSUc0cE8xeHVJQ0FnSUdsbUlDaHdZWFZ6WldRcElIdGNiaUFnSUNBZ0lIQmhkWE5sWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYzNSeVpXRnRMbkpsYzNWdFpTZ3BPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMDdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFNaV0ZrWVdKc1pTNXdjbTkwYjNSNWNHVXNJQ2R5WldGa1lXSnNaVWhwWjJoWFlYUmxjazFoY21zbkxDQjdYRzRnSUM4dklHMWhhMmx1WnlCcGRDQmxlSEJzYVdOcGRDQjBhR2x6SUhCeWIzQmxjblI1SUdseklHNXZkQ0JsYm5WdFpYSmhZbXhsWEc0Z0lDOHZJR0psWTJGMWMyVWdiM1JvWlhKM2FYTmxJSE52YldVZ2NISnZkRzkwZVhCbElHMWhibWx3ZFd4aGRHbHZiaUJwYmx4dUlDQXZMeUIxYzJWeWJHRnVaQ0IzYVd4c0lHWmhhV3hjYmlBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbExtaHBaMmhYWVhSbGNrMWhjbXM3WEc0Z0lIMWNibjBwTzF4dVhHNHZMeUJsZUhCdmMyVmtJR1p2Y2lCMFpYTjBhVzVuSUhCMWNuQnZjMlZ6SUc5dWJIa3VYRzVTWldGa1lXSnNaUzVmWm5KdmJVeHBjM1FnUFNCbWNtOXRUR2x6ZER0Y2JseHVMeThnVUd4MVkyc2diMlptSUc0Z1lubDBaWE1nWm5KdmJTQmhiaUJoY25KaGVTQnZaaUJpZFdabVpYSnpMbHh1THk4Z1RHVnVaM1JvSUdseklIUm9aU0JqYjIxaWFXNWxaQ0JzWlc1bmRHaHpJRzltSUdGc2JDQjBhR1VnWW5WbVptVnljeUJwYmlCMGFHVWdiR2x6ZEM1Y2JpOHZJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdaR1Z6YVdkdVpXUWdkRzhnWW1VZ2FXNXNhVzVoWW14bExDQnpieUJ3YkdWaGMyVWdkR0ZyWlNCallYSmxJSGRvWlc0Z2JXRnJhVzVuWEc0dkx5QmphR0Z1WjJWeklIUnZJSFJvWlNCbWRXNWpkR2x2YmlCaWIyUjVMbHh1Wm5WdVkzUnBiMjRnWm5KdmJVeHBjM1FvYml3Z2MzUmhkR1VwSUh0Y2JpQWdMeThnYm05MGFHbHVaeUJpZFdabVpYSmxaRnh1SUNCcFppQW9jM1JoZEdVdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdiblZzYkR0Y2JseHVJQ0IyWVhJZ2NtVjBPMXh1SUNCcFppQW9jM1JoZEdVdWIySnFaV04wVFc5a1pTa2djbVYwSUQwZ2MzUmhkR1V1WW5WbVptVnlMbk5vYVdaMEtDazdaV3h6WlNCcFppQW9JVzRnZkh3Z2JpQStQU0J6ZEdGMFpTNXNaVzVuZEdncElIdGNiaUFnSUNBdkx5QnlaV0ZrSUdsMElHRnNiQ3dnZEhKMWJtTmhkR1VnZEdobElHeHBjM1JjYmlBZ0lDQnBaaUFvYzNSaGRHVXVaR1ZqYjJSbGNpa2djbVYwSUQwZ2MzUmhkR1V1WW5WbVptVnlMbXB2YVc0b0p5Y3BPMlZzYzJVZ2FXWWdLSE4wWVhSbExtSjFabVpsY2k1c1pXNW5kR2dnUFQwOUlERXBJSEpsZENBOUlITjBZWFJsTG1KMVptWmxjaTVvWldGa0xtUmhkR0U3Wld4elpTQnlaWFFnUFNCemRHRjBaUzVpZFdabVpYSXVZMjl1WTJGMEtITjBZWFJsTG14bGJtZDBhQ2s3WEc0Z0lDQWdjM1JoZEdVdVluVm1abVZ5TG1Oc1pXRnlLQ2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnTHk4Z2NtVmhaQ0J3WVhKMElHOW1JR3hwYzNSY2JpQWdJQ0J5WlhRZ1BTQm1jbTl0VEdsemRGQmhjblJwWVd3b2Jpd2djM1JoZEdVdVluVm1abVZ5TENCemRHRjBaUzVrWldOdlpHVnlLVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ5WlhRN1hHNTlYRzVjYmk4dklFVjRkSEpoWTNSeklHOXViSGtnWlc1dmRXZG9JR0oxWm1abGNtVmtJR1JoZEdFZ2RHOGdjMkYwYVhObWVTQjBhR1VnWVcxdmRXNTBJSEpsY1hWbGMzUmxaQzVjYmk4dklGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ1pHVnphV2R1WldRZ2RHOGdZbVVnYVc1c2FXNWhZbXhsTENCemJ5QndiR1ZoYzJVZ2RHRnJaU0JqWVhKbElIZG9aVzRnYldGcmFXNW5YRzR2THlCamFHRnVaMlZ6SUhSdklIUm9aU0JtZFc1amRHbHZiaUJpYjJSNUxseHVablZ1WTNScGIyNGdabkp2YlV4cGMzUlFZWEowYVdGc0tHNHNJR3hwYzNRc0lHaGhjMU4wY21sdVozTXBJSHRjYmlBZ2RtRnlJSEpsZER0Y2JpQWdhV1lnS0c0Z1BDQnNhWE4wTG1obFlXUXVaR0YwWVM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0F2THlCemJHbGpaU0JwY3lCMGFHVWdjMkZ0WlNCbWIzSWdZblZtWm1WeWN5QmhibVFnYzNSeWFXNW5jMXh1SUNBZ0lISmxkQ0E5SUd4cGMzUXVhR1ZoWkM1a1lYUmhMbk5zYVdObEtEQXNJRzRwTzF4dUlDQWdJR3hwYzNRdWFHVmhaQzVrWVhSaElEMGdiR2x6ZEM1b1pXRmtMbVJoZEdFdWMyeHBZMlVvYmlrN1hHNGdJSDBnWld4elpTQnBaaUFvYmlBOVBUMGdiR2x6ZEM1b1pXRmtMbVJoZEdFdWJHVnVaM1JvS1NCN1hHNGdJQ0FnTHk4Z1ptbHljM1FnWTJoMWJtc2dhWE1nWVNCd1pYSm1aV04wSUcxaGRHTm9YRzRnSUNBZ2NtVjBJRDBnYkdsemRDNXphR2xtZENncE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJSEpsYzNWc2RDQnpjR0Z1Y3lCdGIzSmxJSFJvWVc0Z2IyNWxJR0oxWm1abGNseHVJQ0FnSUhKbGRDQTlJR2hoYzFOMGNtbHVaM01nUHlCamIzQjVSbkp2YlVKMVptWmxjbE4wY21sdVp5aHVMQ0JzYVhOMEtTQTZJR052Y0hsR2NtOXRRblZtWm1WeUtHNHNJR3hwYzNRcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYUTdYRzU5WEc1Y2JpOHZJRU52Y0dsbGN5QmhJSE53WldOcFptbGxaQ0JoYlc5MWJuUWdiMllnWTJoaGNtRmpkR1Z5Y3lCbWNtOXRJSFJvWlNCc2FYTjBJRzltSUdKMVptWmxjbVZrSUdSaGRHRmNiaTh2SUdOb2RXNXJjeTVjYmk4dklGUm9hWE1nWm5WdVkzUnBiMjRnYVhNZ1pHVnphV2R1WldRZ2RHOGdZbVVnYVc1c2FXNWhZbXhsTENCemJ5QndiR1ZoYzJVZ2RHRnJaU0JqWVhKbElIZG9aVzRnYldGcmFXNW5YRzR2THlCamFHRnVaMlZ6SUhSdklIUm9aU0JtZFc1amRHbHZiaUJpYjJSNUxseHVablZ1WTNScGIyNGdZMjl3ZVVaeWIyMUNkV1ptWlhKVGRISnBibWNvYml3Z2JHbHpkQ2tnZTF4dUlDQjJZWElnY0NBOUlHeHBjM1F1YUdWaFpEdGNiaUFnZG1GeUlHTWdQU0F4TzF4dUlDQjJZWElnY21WMElEMGdjQzVrWVhSaE8xeHVJQ0J1SUMwOUlISmxkQzVzWlc1bmRHZzdYRzRnSUhkb2FXeGxJQ2h3SUQwZ2NDNXVaWGgwS1NCN1hHNGdJQ0FnZG1GeUlITjBjaUE5SUhBdVpHRjBZVHRjYmlBZ0lDQjJZWElnYm1JZ1BTQnVJRDRnYzNSeUxteGxibWQwYUNBL0lITjBjaTVzWlc1bmRHZ2dPaUJ1TzF4dUlDQWdJR2xtSUNodVlpQTlQVDBnYzNSeUxteGxibWQwYUNrZ2NtVjBJQ3M5SUhOMGNqdGxiSE5sSUhKbGRDQXJQU0J6ZEhJdWMyeHBZMlVvTUN3Z2JpazdYRzRnSUNBZ2JpQXRQU0J1WWp0Y2JpQWdJQ0JwWmlBb2JpQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRzVpSUQwOVBTQnpkSEl1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNzcll6dGNiaUFnSUNBZ0lDQWdhV1lnS0hBdWJtVjRkQ2tnYkdsemRDNW9aV0ZrSUQwZ2NDNXVaWGgwTzJWc2MyVWdiR2x6ZEM1b1pXRmtJRDBnYkdsemRDNTBZV2xzSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR3hwYzNRdWFHVmhaQ0E5SUhBN1hHNGdJQ0FnSUNBZ0lIQXVaR0YwWVNBOUlITjBjaTV6YkdsalpTaHVZaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJQ0FnS3l0ak8xeHVJQ0I5WEc0Z0lHeHBjM1F1YkdWdVozUm9JQzA5SUdNN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNiaTh2SUVOdmNHbGxjeUJoSUhOd1pXTnBabWxsWkNCaGJXOTFiblFnYjJZZ1lubDBaWE1nWm5KdmJTQjBhR1VnYkdsemRDQnZaaUJpZFdabVpYSmxaQ0JrWVhSaElHTm9kVzVyY3k1Y2JpOHZJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdaR1Z6YVdkdVpXUWdkRzhnWW1VZ2FXNXNhVzVoWW14bExDQnpieUJ3YkdWaGMyVWdkR0ZyWlNCallYSmxJSGRvWlc0Z2JXRnJhVzVuWEc0dkx5QmphR0Z1WjJWeklIUnZJSFJvWlNCbWRXNWpkR2x2YmlCaWIyUjVMbHh1Wm5WdVkzUnBiMjRnWTI5d2VVWnliMjFDZFdabVpYSW9iaXdnYkdsemRDa2dlMXh1SUNCMllYSWdjbVYwSUQwZ1FuVm1abVZ5TG1Gc2JHOWpWVzV6WVdabEtHNHBPMXh1SUNCMllYSWdjQ0E5SUd4cGMzUXVhR1ZoWkR0Y2JpQWdkbUZ5SUdNZ1BTQXhPMXh1SUNCd0xtUmhkR0V1WTI5d2VTaHlaWFFwTzF4dUlDQnVJQzA5SUhBdVpHRjBZUzVzWlc1bmRHZzdYRzRnSUhkb2FXeGxJQ2h3SUQwZ2NDNXVaWGgwS1NCN1hHNGdJQ0FnZG1GeUlHSjFaaUE5SUhBdVpHRjBZVHRjYmlBZ0lDQjJZWElnYm1JZ1BTQnVJRDRnWW5WbUxteGxibWQwYUNBL0lHSjFaaTVzWlc1bmRHZ2dPaUJ1TzF4dUlDQWdJR0oxWmk1amIzQjVLSEpsZEN3Z2NtVjBMbXhsYm1kMGFDQXRJRzRzSURBc0lHNWlLVHRjYmlBZ0lDQnVJQzA5SUc1aU8xeHVJQ0FnSUdsbUlDaHVJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnBaaUFvYm1JZ1BUMDlJR0oxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0t5dGpPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NDNXVaWGgwS1NCc2FYTjBMbWhsWVdRZ1BTQndMbTVsZUhRN1pXeHpaU0JzYVhOMExtaGxZV1FnUFNCc2FYTjBMblJoYVd3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYkdsemRDNW9aV0ZrSUQwZ2NEdGNiaUFnSUNBZ0lDQWdjQzVrWVhSaElEMGdZblZtTG5Oc2FXTmxLRzVpS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lIMWNiaUFnSUNBcksyTTdYRzRnSUgxY2JpQWdiR2x6ZEM1c1pXNW5kR2dnTFQwZ1l6dGNiaUFnY21WMGRYSnVJSEpsZER0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWlc1a1VtVmhaR0ZpYkdVb2MzUnlaV0Z0S1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhOMGNtVmhiUzVmY21WaFpHRmliR1ZUZEdGMFpUdGNibHh1SUNBdkx5QkpaaUIzWlNCblpYUWdhR1Z5WlNCaVpXWnZjbVVnWTI5dWMzVnRhVzVuSUdGc2JDQjBhR1VnWW5sMFpYTXNJSFJvWlc0Z2RHaGhkQ0JwY3lCaFhHNGdJQzh2SUdKMVp5QnBiaUJ1YjJSbExpQWdVMmh2ZFd4a0lHNWxkbVZ5SUdoaGNIQmxiaTVjYmlBZ2FXWWdLSE4wWVhSbExteGxibWQwYUNBK0lEQXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25YQ0psYm1SU1pXRmtZV0pzWlNncFhDSWdZMkZzYkdWa0lHOXVJRzV2YmkxbGJYQjBlU0J6ZEhKbFlXMG5LVHRjYmx4dUlDQnBaaUFvSVhOMFlYUmxMbVZ1WkVWdGFYUjBaV1FwSUh0Y2JpQWdJQ0J6ZEdGMFpTNWxibVJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdjRzVoTG01bGVIUlVhV05yS0dWdVpGSmxZV1JoWW14bFRsUXNJSE4wWVhSbExDQnpkSEpsWVcwcE8xeHVJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Z1WkZKbFlXUmhZbXhsVGxRb2MzUmhkR1VzSUhOMGNtVmhiU2tnZTF4dUlDQXZMeUJEYUdWamF5QjBhR0YwSUhkbElHUnBaRzRuZENCblpYUWdiMjVsSUd4aGMzUWdkVzV6YUdsbWRDNWNiaUFnYVdZZ0tDRnpkR0YwWlM1bGJtUkZiV2wwZEdWa0lDWW1JSE4wWVhSbExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSE4wWVhSbExtVnVaRVZ0YVhSMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUhOMGNtVmhiUzV5WldGa1lXSnNaU0E5SUdaaGJITmxPMXh1SUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2RsYm1RbktUdGNiaUFnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJwYm1SbGVFOW1LSGh6TENCNEtTQjdYRzRnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzSUQwZ2VITXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdhV1lnS0hoelcybGRJRDA5UFNCNEtTQnlaWFIxY200Z2FUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z0xURTdYRzU5SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRXB2ZVdWdWRDd2dTVzVqTGlCaGJtUWdiM1JvWlhJZ1RtOWtaU0JqYjI1MGNtbGlkWFJ2Y25NdVhHNHZMMXh1THk4Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdGY2JpOHZJR052Y0hrZ2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JrYjJOMWJXVnVkR0YwYVc5dUlHWnBiR1Z6SUNoMGFHVmNiaTh2SUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXd2dhVzRnZEdobElGTnZablIzWVhKbElIZHBkR2h2ZFhRZ2NtVnpkSEpwWTNScGIyNHNJR2x1WTJ4MVpHbHVaMXh1THk4Z2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITWdkRzhnZFhObExDQmpiM0I1TENCdGIyUnBabmtzSUcxbGNtZGxMQ0J3ZFdKc2FYTm9MRnh1THk4Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd3Z1kyOXdhV1Z6SUc5bUlIUm9aU0JUYjJaMGQyRnlaU3dnWVc1a0lIUnZJSEJsY20xcGRGeHVMeThnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGN5Qm1kWEp1YVhOb1pXUWdkRzhnWkc4Z2MyOHNJSE4xWW1wbFkzUWdkRzhnZEdobFhHNHZMeUJtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2JpOHZYRzR2THlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkZ4dUx5OGdhVzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYRzR2TDF4dUx5OGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVMXh1THk4Z1QxSWdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSbHh1THk4Z1RVVlNRMGhCVGxSQlFrbE1TVlJaTENCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRseHVMeThnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGSUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzWEc0dkx5QkVRVTFCUjBWVElFOVNJRTlVU0VWU0lFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFKY2JpOHZJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxDQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVZjYmk4dklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGlCVVNFVWdVMDlHVkZkQlVrVXVYRzVjYmk4dklHRWdkSEpoYm5ObWIzSnRJSE4wY21WaGJTQnBjeUJoSUhKbFlXUmhZbXhsTDNkeWFYUmhZbXhsSUhOMGNtVmhiU0IzYUdWeVpTQjViM1VnWkc5Y2JpOHZJSE52YldWMGFHbHVaeUIzYVhSb0lIUm9aU0JrWVhSaExpQWdVMjl0WlhScGJXVnpJR2wwSjNNZ1kyRnNiR1ZrSUdFZ1hDSm1hV3gwWlhKY0lpeGNiaTh2SUdKMWRDQjBhR0YwSjNNZ2JtOTBJR0VnWjNKbFlYUWdibUZ0WlNCbWIzSWdhWFFzSUhOcGJtTmxJSFJvWVhRZ2FXMXdiR2xsY3lCaElIUm9hVzVuSUhkb1pYSmxYRzR2THlCemIyMWxJR0pwZEhNZ2NHRnpjeUIwYUhKdmRXZG9MQ0JoYm1RZ2IzUm9aWEp6SUdGeVpTQnphVzF3YkhrZ2FXZHViM0psWkM0Z0lDaFVhR0YwSUhkdmRXeGtYRzR2THlCaVpTQmhJSFpoYkdsa0lHVjRZVzF3YkdVZ2IyWWdZU0IwY21GdWMyWnZjbTBzSUc5bUlHTnZkWEp6WlM0cFhHNHZMMXh1THk4Z1YyaHBiR1VnZEdobElHOTFkSEIxZENCcGN5QmpZWFZ6WVd4c2VTQnlaV3hoZEdWa0lIUnZJSFJvWlNCcGJuQjFkQ3dnYVhRbmN5QnViM1FnWVZ4dUx5OGdibVZqWlhOellYSnBiSGtnYzNsdGJXVjBjbWxqSUc5eUlITjVibU5vY205dWIzVnpJSFJ5WVc1elptOXliV0YwYVc5dUxpQWdSbTl5SUdWNFlXMXdiR1VzWEc0dkx5QmhJSHBzYVdJZ2MzUnlaV0Z0SUcxcFoyaDBJSFJoYTJVZ2JYVnNkR2x3YkdVZ2NHeGhhVzR0ZEdWNGRDQjNjbWwwWlhNb0tTd2dZVzVrSUhSb1pXNWNiaTh2SUdWdGFYUWdZU0J6YVc1bmJHVWdZMjl0Y0hKbGMzTmxaQ0JqYUhWdWF5QnpiMjFsSUhScGJXVWdhVzRnZEdobElHWjFkSFZ5WlM1Y2JpOHZYRzR2THlCSVpYSmxKM01nYUc5M0lIUm9hWE1nZDI5eWEzTTZYRzR2TDF4dUx5OGdWR2hsSUZSeVlXNXpabTl5YlNCemRISmxZVzBnYUdGeklHRnNiQ0IwYUdVZ1lYTndaV04wY3lCdlppQjBhR1VnY21WaFpHRmliR1VnWVc1a0lIZHlhWFJoWW14bFhHNHZMeUJ6ZEhKbFlXMGdZMnhoYzNObGN5NGdJRmRvWlc0Z2VXOTFJSGR5YVhSbEtHTm9kVzVyS1N3Z2RHaGhkQ0JqWVd4c2N5QmZkM0pwZEdVb1kyaDFibXNzWTJJcFhHNHZMeUJwYm5SbGNtNWhiR3g1TENCaGJtUWdjbVYwZFhKdWN5Qm1ZV3h6WlNCcFppQjBhR1Z5WlNkeklHRWdiRzkwSUc5bUlIQmxibVJwYm1jZ2QzSnBkR1Z6WEc0dkx5QmlkV1ptWlhKbFpDQjFjQzRnSUZkb1pXNGdlVzkxSUdOaGJHd2djbVZoWkNncExDQjBhR0YwSUdOaGJHeHpJRjl5WldGa0tHNHBJSFZ1ZEdsc1hHNHZMeUIwYUdWeVpTZHpJR1Z1YjNWbmFDQndaVzVrYVc1bklISmxZV1JoWW14bElHUmhkR0VnWW5WbVptVnlaV1FnZFhBdVhHNHZMMXh1THk4Z1NXNGdZU0IwY21GdWMyWnZjbTBnYzNSeVpXRnRMQ0IwYUdVZ2QzSnBkSFJsYmlCa1lYUmhJR2x6SUhCc1lXTmxaQ0JwYmlCaElHSjFabVpsY2k0Z0lGZG9aVzVjYmk4dklGOXlaV0ZrS0c0cElHbHpJR05oYkd4bFpDd2dhWFFnZEhKaGJuTm1iM0p0Y3lCMGFHVWdjWFZsZFdWa0lIVndJR1JoZEdFc0lHTmhiR3hwYm1jZ2RHaGxYRzR2THlCaWRXWm1aWEpsWkNCZmQzSnBkR1VnWTJJbmN5QmhjeUJwZENCamIyNXpkVzFsY3lCamFIVnVhM011SUNCSlppQmpiMjV6ZFcxcGJtY2dZU0J6YVc1bmJHVmNiaTh2SUhkeWFYUjBaVzRnWTJoMWJtc2dkMjkxYkdRZ2NtVnpkV3gwSUdsdUlHMTFiSFJwY0d4bElHOTFkSEIxZENCamFIVnVhM01zSUhSb1pXNGdkR2hsSUdacGNuTjBYRzR2THlCdmRYUndkWFIwWldRZ1ltbDBJR05oYkd4eklIUm9aU0J5WldGa1kySXNJR0Z1WkNCemRXSnpaWEYxWlc1MElHTm9kVzVyY3lCcWRYTjBJR2R2SUdsdWRHOWNiaTh2SUhSb1pTQnlaV0ZrSUdKMVptWmxjaXdnWVc1a0lIZHBiR3dnWTJGMWMyVWdhWFFnZEc4Z1pXMXBkQ0FuY21WaFpHRmliR1VuSUdsbUlHNWxZMlZ6YzJGeWVTNWNiaTh2WEc0dkx5QlVhR2x6SUhkaGVTd2dZbUZqYXkxd2NtVnpjM1Z5WlNCcGN5QmhZM1IxWVd4c2VTQmtaWFJsY20xcGJtVmtJR0o1SUhSb1pTQnlaV0ZrYVc1bklITnBaR1VzWEc0dkx5QnphVzVqWlNCZmNtVmhaQ0JvWVhNZ2RHOGdZbVVnWTJGc2JHVmtJSFJ2SUhOMFlYSjBJSEJ5YjJObGMzTnBibWNnWVNCdVpYY2dZMmgxYm1zdUlDQkliM2RsZG1WeUxGeHVMeThnWVNCd1lYUm9iMnh2WjJsallXd2dhVzVtYkdGMFpTQjBlWEJsSUc5bUlIUnlZVzV6Wm05eWJTQmpZVzRnWTJGMWMyVWdaWGhqWlhOemFYWmxJR0oxWm1abGNtbHVaMXh1THk4Z2FHVnlaUzRnSUVadmNpQmxlR0Z0Y0d4bExDQnBiV0ZuYVc1bElHRWdjM1J5WldGdElIZG9aWEpsSUdWMlpYSjVJR0o1ZEdVZ2IyWWdhVzV3ZFhRZ2FYTmNiaTh2SUdsdWRHVnljSEpsZEdWa0lHRnpJR0Z1SUdsdWRHVm5aWElnWm5KdmJTQXdMVEkxTlN3Z1lXNWtJSFJvWlc0Z2NtVnpkV3gwY3lCcGJpQjBhR0YwSUcxaGJubGNiaTh2SUdKNWRHVnpJRzltSUc5MWRIQjFkQzRnSUZkeWFYUnBibWNnZEdobElEUWdZbmwwWlhNZ2UyWm1MR1ptTEdabUxHWm1mU0IzYjNWc1pDQnlaWE4xYkhRZ2FXNWNiaTh2SURGcllpQnZaaUJrWVhSaElHSmxhVzVuSUc5MWRIQjFkQzRnSUVsdUlIUm9hWE1nWTJGelpTd2dlVzkxSUdOdmRXeGtJSGR5YVhSbElHRWdkbVZ5ZVNCemJXRnNiRnh1THk4Z1lXMXZkVzUwSUc5bUlHbHVjSFYwTENCaGJtUWdaVzVrSUhWd0lIZHBkR2dnWVNCMlpYSjVJR3hoY21kbElHRnRiM1Z1ZENCdlppQnZkWFJ3ZFhRdUlDQkpibHh1THk4Z2MzVmphQ0JoSUhCaGRHaHZiRzluYVdOaGJDQnBibVpzWVhScGJtY2diV1ZqYUdGdWFYTnRMQ0IwYUdWeVpTZGtJR0psSUc1dklIZGhlU0IwYnlCMFpXeHNYRzR2THlCMGFHVWdjM2x6ZEdWdElIUnZJSE4wYjNBZ1pHOXBibWNnZEdobElIUnlZVzV6Wm05eWJTNGdJRUVnYzJsdVoyeGxJRFJOUWlCM2NtbDBaU0JqYjNWc1pGeHVMeThnWTJGMWMyVWdkR2hsSUhONWMzUmxiU0IwYnlCeWRXNGdiM1YwSUc5bUlHMWxiVzl5ZVM1Y2JpOHZYRzR2THlCSWIzZGxkbVZ5TENCbGRtVnVJR2x1SUhOMVkyZ2dZU0J3WVhSb2IyeHZaMmxqWVd3Z1kyRnpaU3dnYjI1c2VTQmhJSE5wYm1kc1pTQjNjbWwwZEdWdUlHTm9kVzVyWEc0dkx5QjNiM1ZzWkNCaVpTQmpiMjV6ZFcxbFpDd2dZVzVrSUhSb1pXNGdkR2hsSUhKbGMzUWdkMjkxYkdRZ2QyRnBkQ0FvZFc0dGRISmhibk5tYjNKdFpXUXBJSFZ1ZEdsc1hHNHZMeUIwYUdVZ2NtVnpkV3gwY3lCdlppQjBhR1VnY0hKbGRtbHZkWE1nZEhKaGJuTm1iM0p0WldRZ1kyaDFibXNnZDJWeVpTQmpiMjV6ZFcxbFpDNWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRlJ5WVc1elptOXliVHRjYmx4dWRtRnlJRVIxY0d4bGVDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtVmhiVjlrZFhCc1pYZ25LVHRjYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JuWmhjaUIxZEdsc0lEMGdjbVZ4ZFdseVpTZ25ZMjl5WlMxMWRHbHNMV2x6SnlrN1hHNTFkR2xzTG1sdWFHVnlhWFJ6SUQwZ2NtVnhkV2x5WlNnbmFXNW9aWEpwZEhNbktUdGNiaThxUEM5eVpYQnNZV05sYldWdWRENHFMMXh1WEc1MWRHbHNMbWx1YUdWeWFYUnpLRlJ5WVc1elptOXliU3dnUkhWd2JHVjRLVHRjYmx4dVpuVnVZM1JwYjI0Z1lXWjBaWEpVY21GdWMyWnZjbTBvWlhJc0lHUmhkR0VwSUh0Y2JpQWdkbUZ5SUhSeklEMGdkR2hwY3k1ZmRISmhibk5tYjNKdFUzUmhkR1U3WEc0Z0lIUnpMblJ5WVc1elptOXliV2x1WnlBOUlHWmhiSE5sTzF4dVhHNGdJSFpoY2lCallpQTlJSFJ6TG5keWFYUmxZMkk3WEc1Y2JpQWdhV1lnS0NGallpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVZ0YVhRb0oyVnljbTl5Snl3Z2JtVjNJRVZ5Y205eUtDZDNjbWwwWlNCallXeHNZbUZqYXlCallXeHNaV1FnYlhWc2RHbHdiR1VnZEdsdFpYTW5LU2s3WEc0Z0lIMWNibHh1SUNCMGN5NTNjbWwwWldOb2RXNXJJRDBnYm5Wc2JEdGNiaUFnZEhNdWQzSnBkR1ZqWWlBOUlHNTFiR3c3WEc1Y2JpQWdhV1lnS0dSaGRHRWdJVDBnYm5Wc2JDa2dMeThnYzJsdVoyeGxJR1Z4ZFdGc2N5QmphR1ZqYXlCbWIzSWdZbTkwYUNCZ2JuVnNiR0FnWVc1a0lHQjFibVJsWm1sdVpXUmdYRzRnSUNBZ2RHaHBjeTV3ZFhOb0tHUmhkR0VwTzF4dVhHNGdJR05pS0dWeUtUdGNibHh1SUNCMllYSWdjbk1nUFNCMGFHbHpMbDl5WldGa1lXSnNaVk4wWVhSbE8xeHVJQ0J5Y3k1eVpXRmthVzVuSUQwZ1ptRnNjMlU3WEc0Z0lHbG1JQ2h5Y3k1dVpXVmtVbVZoWkdGaWJHVWdmSHdnY25NdWJHVnVaM1JvSUR3Z2NuTXVhR2xuYUZkaGRHVnlUV0Z5YXlrZ2UxeHVJQ0FnSUhSb2FYTXVYM0psWVdRb2NuTXVhR2xuYUZkaGRHVnlUV0Z5YXlrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdWSEpoYm5ObWIzSnRLRzl3ZEdsdmJuTXBJSHRjYmlBZ2FXWWdLQ0VvZEdocGN5QnBibk4wWVc1alpXOW1JRlJ5WVc1elptOXliU2twSUhKbGRIVnliaUJ1WlhjZ1ZISmhibk5tYjNKdEtHOXdkR2x2Ym5NcE8xeHVYRzRnSUVSMWNHeGxlQzVqWVd4c0tIUm9hWE1zSUc5d2RHbHZibk1wTzF4dVhHNGdJSFJvYVhNdVgzUnlZVzV6Wm05eWJWTjBZWFJsSUQwZ2UxeHVJQ0FnSUdGbWRHVnlWSEpoYm5ObWIzSnRPaUJoWm5SbGNsUnlZVzV6Wm05eWJTNWlhVzVrS0hSb2FYTXBMRnh1SUNBZ0lHNWxaV1JVY21GdWMyWnZjbTA2SUdaaGJITmxMRnh1SUNBZ0lIUnlZVzV6Wm05eWJXbHVaem9nWm1Gc2MyVXNYRzRnSUNBZ2QzSnBkR1ZqWWpvZ2JuVnNiQ3hjYmlBZ0lDQjNjbWwwWldOb2RXNXJPaUJ1ZFd4c0xGeHVJQ0FnSUhkeWFYUmxaVzVqYjJScGJtYzZJRzUxYkd4Y2JpQWdmVHRjYmx4dUlDQXZMeUJ6ZEdGeWRDQnZkWFFnWVhOcmFXNW5JR1p2Y2lCaElISmxZV1JoWW14bElHVjJaVzUwSUc5dVkyVWdaR0YwWVNCcGN5QjBjbUZ1YzJadmNtMWxaQzVjYmlBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNXVaV1ZrVW1WaFpHRmliR1VnUFNCMGNuVmxPMXh1WEc0Z0lDOHZJSGRsSUdoaGRtVWdhVzF3YkdWdFpXNTBaV1FnZEdobElGOXlaV0ZrSUcxbGRHaHZaQ3dnWVc1a0lHUnZibVVnZEdobElHOTBhR1Z5SUhSb2FXNW5jMXh1SUNBdkx5QjBhR0YwSUZKbFlXUmhZbXhsSUhkaGJuUnpJR0psWm05eVpTQjBhR1VnWm1seWMzUWdYM0psWVdRZ1kyRnNiQ3dnYzI4Z2RXNXpaWFFnZEdobFhHNGdJQzh2SUhONWJtTWdaM1ZoY21RZ1pteGhaeTVjYmlBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNXplVzVqSUQwZ1ptRnNjMlU3WEc1Y2JpQWdhV1lnS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11ZEhKaGJuTm1iM0p0SUQwOVBTQW5ablZ1WTNScGIyNG5LU0IwYUdsekxsOTBjbUZ1YzJadmNtMGdQU0J2Y0hScGIyNXpMblJ5WVc1elptOXliVHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTVtYkhWemFDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2RHaHBjeTVmWm14MWMyZ2dQU0J2Y0hScGIyNXpMbVpzZFhOb08xeHVJQ0I5WEc1Y2JpQWdMeThnVjJobGJpQjBhR1VnZDNKcGRHRmliR1VnYzJsa1pTQm1hVzVwYzJobGN5d2dkR2hsYmlCbWJIVnphQ0J2ZFhRZ1lXNTVkR2hwYm1jZ2NtVnRZV2x1YVc1bkxseHVJQ0IwYUdsekxtOXVLQ2R3Y21WbWFXNXBjMmduTENCd2NtVm1hVzVwYzJncE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2NtVm1hVzVwYzJnb0tTQjdYRzRnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUIwYUdsekxsOW1iSFZ6YUNBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJSFJvYVhNdVgyWnNkWE5vS0daMWJtTjBhVzl1SUNobGNpd2daR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHOXVaU2hmZEdocGN5d2daWElzSUdSaGRHRXBPMXh1SUNBZ0lIMHBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR1J2Ym1Vb2RHaHBjeXdnYm5Wc2JDd2diblZzYkNrN1hHNGdJSDFjYm4xY2JseHVWSEpoYm5ObWIzSnRMbkJ5YjNSdmRIbHdaUzV3ZFhOb0lEMGdablZ1WTNScGIyNGdLR05vZFc1ckxDQmxibU52WkdsdVp5a2dlMXh1SUNCMGFHbHpMbDkwY21GdWMyWnZjbTFUZEdGMFpTNXVaV1ZrVkhKaGJuTm1iM0p0SUQwZ1ptRnNjMlU3WEc0Z0lISmxkSFZ5YmlCRWRYQnNaWGd1Y0hKdmRHOTBlWEJsTG5CMWMyZ3VZMkZzYkNoMGFHbHpMQ0JqYUhWdWF5d2daVzVqYjJScGJtY3BPMXh1ZlR0Y2JseHVMeThnVkdocGN5QnBjeUIwYUdVZ2NHRnlkQ0IzYUdWeVpTQjViM1VnWkc4Z2MzUjFabVloWEc0dkx5QnZkbVZ5Y21sa1pTQjBhR2x6SUdaMWJtTjBhVzl1SUdsdUlHbHRjR3hsYldWdWRHRjBhVzl1SUdOc1lYTnpaWE11WEc0dkx5QW5ZMmgxYm1zbklHbHpJR0Z1SUdsdWNIVjBJR05vZFc1ckxseHVMeTljYmk4dklFTmhiR3dnWUhCMWMyZ29ibVYzUTJoMWJtc3BZQ0IwYnlCd1lYTnpJR0ZzYjI1bklIUnlZVzV6Wm05eWJXVmtJRzkxZEhCMWRGeHVMeThnZEc4Z2RHaGxJSEpsWVdSaFlteGxJSE5wWkdVdUlDQlpiM1VnYldGNUlHTmhiR3dnSjNCMWMyZ25JSHBsY204Z2IzSWdiVzl5WlNCMGFXMWxjeTVjYmk4dlhHNHZMeUJEWVd4c0lHQmpZaWhsY25JcFlDQjNhR1Z1SUhsdmRTQmhjbVVnWkc5dVpTQjNhWFJvSUhSb2FYTWdZMmgxYm1zdUlDQkpaaUI1YjNVZ2NHRnpjMXh1THk4Z1lXNGdaWEp5YjNJc0lIUm9aVzRnZEdoaGRDZHNiQ0J3ZFhRZ2RHaGxJR2gxY25RZ2IyNGdkR2hsSUhkb2IyeGxJRzl3WlhKaGRHbHZiaTRnSUVsbUlIbHZkVnh1THk4Z2JtVjJaWElnWTJGc2JDQmpZaWdwTENCMGFHVnVJSGx2ZFNkc2JDQnVaWFpsY2lCblpYUWdZVzV2ZEdobGNpQmphSFZ1YXk1Y2JsUnlZVzV6Wm05eWJTNXdjbTkwYjNSNWNHVXVYM1J5WVc1elptOXliU0E5SUdaMWJtTjBhVzl1SUNoamFIVnVheXdnWlc1amIyUnBibWNzSUdOaUtTQjdYRzRnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduWDNSeVlXNXpabTl5YlNncElHbHpJRzV2ZENCcGJYQnNaVzFsYm5SbFpDY3BPMXh1ZlR0Y2JseHVWSEpoYm5ObWIzSnRMbkJ5YjNSdmRIbHdaUzVmZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0IyWVhJZ2RITWdQU0IwYUdsekxsOTBjbUZ1YzJadmNtMVRkR0YwWlR0Y2JpQWdkSE11ZDNKcGRHVmpZaUE5SUdOaU8xeHVJQ0IwY3k1M2NtbDBaV05vZFc1cklEMGdZMmgxYm1zN1hHNGdJSFJ6TG5keWFYUmxaVzVqYjJScGJtY2dQU0JsYm1OdlpHbHVaenRjYmlBZ2FXWWdLQ0YwY3k1MGNtRnVjMlp2Y20xcGJtY3BJSHRjYmlBZ0lDQjJZWElnY25NZ1BTQjBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxPMXh1SUNBZ0lHbG1JQ2gwY3k1dVpXVmtWSEpoYm5ObWIzSnRJSHg4SUhKekxtNWxaV1JTWldGa1lXSnNaU0I4ZkNCeWN5NXNaVzVuZEdnZ1BDQnljeTVvYVdkb1YyRjBaWEpOWVhKcktTQjBhR2x6TGw5eVpXRmtLSEp6TG1ocFoyaFhZWFJsY2sxaGNtc3BPMXh1SUNCOVhHNTlPMXh1WEc0dkx5QkViMlZ6YmlkMElHMWhkSFJsY2lCM2FHRjBJSFJvWlNCaGNtZHpJR0Z5WlNCb1pYSmxMbHh1THk4Z1gzUnlZVzV6Wm05eWJTQmtiMlZ6SUdGc2JDQjBhR1VnZDI5eWF5NWNiaTh2SUZSb1lYUWdkMlVnWjI5MElHaGxjbVVnYldWaGJuTWdkR2hoZENCMGFHVWdjbVZoWkdGaWJHVWdjMmxrWlNCM1lXNTBjeUJ0YjNKbElHUmhkR0V1WEc1VWNtRnVjMlp2Y20wdWNISnZkRzkwZVhCbExsOXlaV0ZrSUQwZ1puVnVZM1JwYjI0Z0tHNHBJSHRjYmlBZ2RtRnlJSFJ6SUQwZ2RHaHBjeTVmZEhKaGJuTm1iM0p0VTNSaGRHVTdYRzVjYmlBZ2FXWWdLSFJ6TG5keWFYUmxZMmgxYm1zZ0lUMDlJRzUxYkd3Z0ppWWdkSE11ZDNKcGRHVmpZaUFtSmlBaGRITXVkSEpoYm5ObWIzSnRhVzVuS1NCN1hHNGdJQ0FnZEhNdWRISmhibk5tYjNKdGFXNW5JRDBnZEhKMVpUdGNiaUFnSUNCMGFHbHpMbDkwY21GdWMyWnZjbTBvZEhNdWQzSnBkR1ZqYUhWdWF5d2dkSE11ZDNKcGRHVmxibU52WkdsdVp5d2dkSE11WVdaMFpYSlVjbUZ1YzJadmNtMHBPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJQzh2SUcxaGNtc2dkR2hoZENCM1pTQnVaV1ZrSUdFZ2RISmhibk5tYjNKdExDQnpieUIwYUdGMElHRnVlU0JrWVhSaElIUm9ZWFFnWTI5dFpYTWdhVzVjYmlBZ0lDQXZMeUIzYVd4c0lHZGxkQ0J3Y205alpYTnpaV1FzSUc1dmR5QjBhR0YwSUhkbEozWmxJR0Z6YTJWa0lHWnZjaUJwZEM1Y2JpQWdJQ0IwY3k1dVpXVmtWSEpoYm5ObWIzSnRJRDBnZEhKMVpUdGNiaUFnZlZ4dWZUdGNibHh1VkhKaGJuTm1iM0p0TG5CeWIzUnZkSGx3WlM1ZlpHVnpkSEp2ZVNBOUlHWjFibU4wYVc5dUlDaGxjbklzSUdOaUtTQjdYRzRnSUhaaGNpQmZkR2hwY3pJZ1BTQjBhR2x6TzF4dVhHNGdJRVIxY0d4bGVDNXdjbTkwYjNSNWNHVXVYMlJsYzNSeWIza3VZMkZzYkNoMGFHbHpMQ0JsY25Jc0lHWjFibU4wYVc5dUlDaGxjbkl5S1NCN1hHNGdJQ0FnWTJJb1pYSnlNaWs3WEc0Z0lDQWdYM1JvYVhNeUxtVnRhWFFvSjJOc2IzTmxKeWs3WEc0Z0lIMHBPMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdaRzl1WlNoemRISmxZVzBzSUdWeUxDQmtZWFJoS1NCN1hHNGdJR2xtSUNobGNpa2djbVYwZFhKdUlITjBjbVZoYlM1bGJXbDBLQ2RsY25KdmNpY3NJR1Z5S1R0Y2JseHVJQ0JwWmlBb1pHRjBZU0FoUFNCdWRXeHNLU0F2THlCemFXNW5iR1VnWlhGMVlXeHpJR05vWldOcklHWnZjaUJpYjNSb0lHQnVkV3hzWUNCaGJtUWdZSFZ1WkdWbWFXNWxaR0JjYmlBZ0lDQnpkSEpsWVcwdWNIVnphQ2hrWVhSaEtUdGNibHh1SUNBdkx5QnBaaUIwYUdWeVpTZHpJRzV2ZEdocGJtY2dhVzRnZEdobElIZHlhWFJsSUdKMVptWmxjaXdnZEdobGJpQjBhR0YwSUcxbFlXNXpYRzRnSUM4dklIUm9ZWFFnYm05MGFHbHVaeUJ0YjNKbElIZHBiR3dnWlhabGNpQmlaU0J3Y205MmFXUmxaRnh1SUNCcFppQW9jM1J5WldGdExsOTNjbWwwWVdKc1pWTjBZWFJsTG14bGJtZDBhQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2REWVd4c2FXNW5JSFJ5WVc1elptOXliU0JrYjI1bElIZG9aVzRnZDNNdWJHVnVaM1JvSUNFOUlEQW5LVHRjYmx4dUlDQnBaaUFvYzNSeVpXRnRMbDkwY21GdWMyWnZjbTFUZEdGMFpTNTBjbUZ1YzJadmNtMXBibWNwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUTJGc2JHbHVaeUIwY21GdWMyWnZjbTBnWkc5dVpTQjNhR1Z1SUhOMGFXeHNJSFJ5WVc1elptOXliV2x1WnljcE8xeHVYRzRnSUhKbGRIVnliaUJ6ZEhKbFlXMHVjSFZ6YUNodWRXeHNLVHRjYm4waUxDSXZMeUJEYjNCNWNtbG5hSFFnU205NVpXNTBMQ0JKYm1NdUlHRnVaQ0J2ZEdobGNpQk9iMlJsSUdOdmJuUnlhV0oxZEc5eWN5NWNiaTh2WEc0dkx5QlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lWeHVMeThnWTI5d2VTQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdSdlkzVnRaVzUwWVhScGIyNGdabWxzWlhNZ0tIUm9aVnh1THk4Z1hDSlRiMlowZDJGeVpWd2lLU3dnZEc4Z1pHVmhiQ0JwYmlCMGFHVWdVMjltZEhkaGNtVWdkMmwwYUc5MWRDQnlaWE4wY21samRHbHZiaXdnYVc1amJIVmthVzVuWEc0dkx5QjNhWFJvYjNWMElHeHBiV2wwWVhScGIyNGdkR2hsSUhKcFoyaDBjeUIwYnlCMWMyVXNJR052Y0hrc0lHMXZaR2xtZVN3Z2JXVnlaMlVzSUhCMVlteHBjMmdzWEc0dkx5QmthWE4wY21saWRYUmxMQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTENCaGJtUWdkRzhnY0dWeWJXbDBYRzR2THlCd1pYSnpiMjV6SUhSdklIZG9iMjBnZEdobElGTnZablIzWVhKbElHbHpJR1oxY201cGMyaGxaQ0IwYnlCa2J5QnpieXdnYzNWaWFtVmpkQ0IwYnlCMGFHVmNiaTh2SUdadmJHeHZkMmx1WnlCamIyNWthWFJwYjI1ek9seHVMeTljYmk4dklGUm9aU0JoWW05MlpTQmpiM0I1Y21sbmFIUWdibTkwYVdObElHRnVaQ0IwYUdseklIQmxjbTFwYzNOcGIyNGdibTkwYVdObElITm9ZV3hzSUdKbElHbHVZMngxWkdWa1hHNHZMeUJwYmlCaGJHd2dZMjl3YVdWeklHOXlJSE4xWW5OMFlXNTBhV0ZzSUhCdmNuUnBiMjV6SUc5bUlIUm9aU0JUYjJaMGQyRnlaUzVjYmk4dlhHNHZMeUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5UWEc0dkx5QlBVaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHWEc0dkx5Qk5SVkpEU0VGT1ZFRkNTVXhKVkZrc0lFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9YRzR2THlCT1R5QkZWa1ZPVkNCVFNFRk1UQ0JVU0VVZ1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN4Y2JpOHZJRVJCVFVGSFJWTWdUMUlnVDFSSVJWSWdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVseHVMeThnVDFSSVJWSlhTVk5GTENCQlVrbFRTVTVISUVaU1QwMHNJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlZ4dUx5OGdWVk5GSUU5U0lFOVVTRVZTSUVSRlFVeEpUa2RUSUVsT0lGUklSU0JUVDBaVVYwRlNSUzVjYmx4dUx5OGdRU0JpYVhRZ2MybHRjR3hsY2lCMGFHRnVJSEpsWVdSaFlteGxJSE4wY21WaGJYTXVYRzR2THlCSmJYQnNaVzFsYm5RZ1lXNGdZWE41Ym1NZ0xsOTNjbWwwWlNoamFIVnVheXdnWlc1amIyUnBibWNzSUdOaUtTd2dZVzVrSUdsMEoyeHNJR2hoYm1Sc1pTQmhiR3hjYmk4dklIUm9aU0JrY21GcGJpQmxkbVZ1ZENCbGJXbHpjMmx2YmlCaGJtUWdZblZtWm1WeWFXNW5MbHh1WEc0bmRYTmxJSE4wY21samRDYzdYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JuWmhjaUJ3Ym1FZ1BTQnlaWEYxYVhKbEtDZHdjbTlqWlhOekxXNWxlSFJwWTJzdFlYSm5jeWNwTzF4dUx5bzhMM0psY0d4aFkyVnRaVzUwUGlvdlhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdWM0pwZEdGaWJHVTdYRzVjYmk4cUlEeHlaWEJzWVdObGJXVnVkRDRnS2k5Y2JtWjFibU4wYVc5dUlGZHlhWFJsVW1WeEtHTm9kVzVyTENCbGJtTnZaR2x1Wnl3Z1kySXBJSHRjYmlBZ2RHaHBjeTVqYUhWdWF5QTlJR05vZFc1ck8xeHVJQ0IwYUdsekxtVnVZMjlrYVc1bklEMGdaVzVqYjJScGJtYzdYRzRnSUhSb2FYTXVZMkZzYkdKaFkyc2dQU0JqWWp0Y2JpQWdkR2hwY3k1dVpYaDBJRDBnYm5Wc2JEdGNibjFjYmx4dUx5OGdTWFFnYzJWbGJYTWdZU0JzYVc1clpXUWdiR2x6ZENCaWRYUWdhWFFnYVhNZ2JtOTBYRzR2THlCMGFHVnlaU0IzYVd4c0lHSmxJRzl1YkhrZ01pQnZaaUIwYUdWelpTQm1iM0lnWldGamFDQnpkSEpsWVcxY2JtWjFibU4wYVc5dUlFTnZjbXRsWkZKbGNYVmxjM1FvYzNSaGRHVXBJSHRjYmlBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0IwYUdsekxtNWxlSFFnUFNCdWRXeHNPMXh1SUNCMGFHbHpMbVZ1ZEhKNUlEMGdiblZzYkR0Y2JpQWdkR2hwY3k1bWFXNXBjMmdnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2IyNURiM0pyWldSR2FXNXBjMmdvWDNSb2FYTXNJSE4wWVhSbEtUdGNiaUFnZlR0Y2JuMWNiaThxSUR3dmNtVndiR0ZqWlcxbGJuUStJQ292WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnWVhONWJtTlhjbWwwWlNBOUlDRndjbTlqWlhOekxtSnliM2R6WlhJZ0ppWWdXeWQyTUM0eE1DY3NJQ2QyTUM0NUxpZGRMbWx1WkdWNFQyWW9jSEp2WTJWemN5NTJaWEp6YVc5dUxuTnNhV05sS0RBc0lEVXBLU0ErSUMweElEOGdjMlYwU1cxdFpXUnBZWFJsSURvZ2NHNWhMbTVsZUhSVWFXTnJPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNTJZWElnUkhWd2JHVjRPMXh1THlvOEwzSmxjR3hoWTJWdFpXNTBQaW92WEc1Y2JsZHlhWFJoWW14bExsZHlhWFJoWW14bFUzUmhkR1VnUFNCWGNtbDBZV0pzWlZOMFlYUmxPMXh1WEc0dktqeHlaWEJzWVdObGJXVnVkRDRxTDF4dWRtRnlJSFYwYVd3Z1BTQnlaWEYxYVhKbEtDZGpiM0psTFhWMGFXd3RhWE1uS1R0Y2JuVjBhV3d1YVc1b1pYSnBkSE1nUFNCeVpYRjFhWEpsS0NkcGJtaGxjbWwwY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4cVBISmxjR3hoWTJWdFpXNTBQaW92WEc1MllYSWdhVzUwWlhKdVlXeFZkR2xzSUQwZ2UxeHVJQ0JrWlhCeVpXTmhkR1U2SUhKbGNYVnBjbVVvSjNWMGFXd3RaR1Z3Y21WallYUmxKeWxjYm4wN1hHNHZLand2Y21Wd2JHRmpaVzFsYm5RK0tpOWNibHh1THlvOGNtVndiR0ZqWlcxbGJuUStLaTljYm5aaGNpQlRkSEpsWVcwZ1BTQnlaWEYxYVhKbEtDY3VMMmx1ZEdWeWJtRnNMM04wY21WaGJYTXZjM1J5WldGdEp5azdYRzR2S2p3dmNtVndiR0ZqWlcxbGJuUStLaTljYmx4dUx5bzhjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUVKMVptWmxjaUE5SUhKbGNYVnBjbVVvSjNOaFptVXRZblZtWm1WeUp5a3VRblZtWm1WeU8xeHVkbUZ5SUU5MWNsVnBiblE0UVhKeVlYa2dQU0JuYkc5aVlXd3VWV2x1ZERoQmNuSmhlU0I4ZkNCbWRXNWpkR2x2YmlBb0tTQjdmVHRjYm1aMWJtTjBhVzl1SUY5MWFXNTBPRUZ5Y21GNVZHOUNkV1ptWlhJb1kyaDFibXNwSUh0Y2JpQWdjbVYwZFhKdUlFSjFabVpsY2k1bWNtOXRLR05vZFc1cktUdGNibjFjYm1aMWJtTjBhVzl1SUY5cGMxVnBiblE0UVhKeVlYa29iMkpxS1NCN1hHNGdJSEpsZEhWeWJpQkNkV1ptWlhJdWFYTkNkV1ptWlhJb2IySnFLU0I4ZkNCdlltb2dhVzV6ZEdGdVkyVnZaaUJQZFhKVmFXNTBPRUZ5Y21GNU8xeHVmVnh1WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUdSbGMzUnliM2xKYlhCc0lEMGdjbVZ4ZFdseVpTZ25MaTlwYm5SbGNtNWhiQzl6ZEhKbFlXMXpMMlJsYzNSeWIza25LVHRjYmx4dWRYUnBiQzVwYm1obGNtbDBjeWhYY21sMFlXSnNaU3dnVTNSeVpXRnRLVHRjYmx4dVpuVnVZM1JwYjI0Z2JtOXdLQ2tnZTMxY2JseHVablZ1WTNScGIyNGdWM0pwZEdGaWJHVlRkR0YwWlNodmNIUnBiMjV6TENCemRISmxZVzBwSUh0Y2JpQWdSSFZ3YkdWNElEMGdSSFZ3YkdWNElIeDhJSEpsY1hWcGNtVW9KeTR2WDNOMGNtVmhiVjlrZFhCc1pYZ25LVHRjYmx4dUlDQnZjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0F2THlCRWRYQnNaWGdnYzNSeVpXRnRjeUJoY21VZ1ltOTBhQ0J5WldGa1lXSnNaU0JoYm1RZ2QzSnBkR0ZpYkdVc0lHSjFkQ0J6YUdGeVpWeHVJQ0F2THlCMGFHVWdjMkZ0WlNCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBZ0x5OGdTRzkzWlhabGNpd2djMjl0WlNCallYTmxjeUJ5WlhGMWFYSmxJSE5sZEhScGJtY2diM0IwYVc5dWN5QjBieUJrYVdabVpYSmxiblJjYmlBZ0x5OGdkbUZzZFdWeklHWnZjaUIwYUdVZ2NtVmhaR0ZpYkdVZ1lXNWtJSFJvWlNCM2NtbDBZV0pzWlNCemFXUmxjeUJ2WmlCMGFHVWdaSFZ3YkdWNElITjBjbVZoYlM1Y2JpQWdMeThnVkdobGMyVWdiM0IwYVc5dWN5QmpZVzRnWW1VZ2NISnZkbWxrWldRZ2MyVndZWEpoZEdWc2VTQmhjeUJ5WldGa1lXSnNaVmhZV0NCaGJtUWdkM0pwZEdGaWJHVllXRmd1WEc0Z0lIWmhjaUJwYzBSMWNHeGxlQ0E5SUhOMGNtVmhiU0JwYm5OMFlXNWpaVzltSUVSMWNHeGxlRHRjYmx4dUlDQXZMeUJ2WW1wbFkzUWdjM1J5WldGdElHWnNZV2NnZEc4Z2FXNWthV05oZEdVZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdocGN5QnpkSEpsWVcxY2JpQWdMeThnWTI5dWRHRnBibk1nWW5WbVptVnljeUJ2Y2lCdlltcGxZM1J6TGx4dUlDQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1BTQWhJVzl3ZEdsdmJuTXViMkpxWldOMFRXOWtaVHRjYmx4dUlDQnBaaUFvYVhORWRYQnNaWGdwSUhSb2FYTXViMkpxWldOMFRXOWtaU0E5SUhSb2FYTXViMkpxWldOMFRXOWtaU0I4ZkNBaElXOXdkR2x2Ym5NdWQzSnBkR0ZpYkdWUFltcGxZM1JOYjJSbE8xeHVYRzRnSUM4dklIUm9aU0J3YjJsdWRDQmhkQ0IzYUdsamFDQjNjbWwwWlNncElITjBZWEowY3lCeVpYUjFjbTVwYm1jZ1ptRnNjMlZjYmlBZ0x5OGdUbTkwWlRvZ01DQnBjeUJoSUhaaGJHbGtJSFpoYkhWbExDQnRaV0Z1Y3lCMGFHRjBJSGRsSUdGc2QyRjVjeUJ5WlhSMWNtNGdabUZzYzJVZ2FXWmNiaUFnTHk4Z2RHaGxJR1Z1ZEdseVpTQmlkV1ptWlhJZ2FYTWdibTkwSUdac2RYTm9aV1FnYVcxdFpXUnBZWFJsYkhrZ2IyNGdkM0pwZEdVb0tWeHVJQ0IyWVhJZ2FIZHRJRDBnYjNCMGFXOXVjeTVvYVdkb1YyRjBaWEpOWVhKck8xeHVJQ0IyWVhJZ2QzSnBkR0ZpYkdWSWQyMGdQU0J2Y0hScGIyNXpMbmR5YVhSaFlteGxTR2xuYUZkaGRHVnlUV0Z5YXp0Y2JpQWdkbUZ5SUdSbFptRjFiSFJJZDIwZ1BTQjBhR2x6TG05aWFtVmpkRTF2WkdVZ1B5QXhOaUE2SURFMklDb2dNVEF5TkR0Y2JseHVJQ0JwWmlBb2FIZHRJSHg4SUdoM2JTQTlQVDBnTUNrZ2RHaHBjeTVvYVdkb1YyRjBaWEpOWVhKcklEMGdhSGR0TzJWc2MyVWdhV1lnS0dselJIVndiR1Y0SUNZbUlDaDNjbWwwWVdKc1pVaDNiU0I4ZkNCM2NtbDBZV0pzWlVoM2JTQTlQVDBnTUNrcElIUm9hWE11YUdsbmFGZGhkR1Z5VFdGeWF5QTlJSGR5YVhSaFlteGxTSGR0TzJWc2MyVWdkR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJJRDBnWkdWbVlYVnNkRWgzYlR0Y2JseHVJQ0F2THlCallYTjBJSFJ2SUdsdWRITXVYRzRnSUhSb2FYTXVhR2xuYUZkaGRHVnlUV0Z5YXlBOUlFMWhkR2d1Wm14dmIzSW9kR2hwY3k1b2FXZG9WMkYwWlhKTllYSnJLVHRjYmx4dUlDQXZMeUJwWmlCZlptbHVZV3dnYUdGeklHSmxaVzRnWTJGc2JHVmtYRzRnSUhSb2FYTXVabWx1WVd4RFlXeHNaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJrY21GcGJpQmxkbVZ1ZENCbWJHRm5MbHh1SUNCMGFHbHpMbTVsWldSRWNtRnBiaUE5SUdaaGJITmxPMXh1SUNBdkx5QmhkQ0IwYUdVZ2MzUmhjblFnYjJZZ1kyRnNiR2x1WnlCbGJtUW9LVnh1SUNCMGFHbHpMbVZ1WkdsdVp5QTlJR1poYkhObE8xeHVJQ0F2THlCM2FHVnVJR1Z1WkNncElHaGhjeUJpWldWdUlHTmhiR3hsWkN3Z1lXNWtJSEpsZEhWeWJtVmtYRzRnSUhSb2FYTXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdMeThnZDJobGJpQW5abWx1YVhOb0p5QnBjeUJsYldsMGRHVmtYRzRnSUhSb2FYTXVabWx1YVhOb1pXUWdQU0JtWVd4elpUdGNibHh1SUNBdkx5Qm9ZWE1nYVhRZ1ltVmxiaUJrWlhOMGNtOTVaV1JjYmlBZ2RHaHBjeTVrWlhOMGNtOTVaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJ6YUc5MWJHUWdkMlVnWkdWamIyUmxJSE4wY21sdVozTWdhVzUwYnlCaWRXWm1aWEp6SUdKbFptOXlaU0J3WVhOemFXNW5JSFJ2SUY5M2NtbDBaVDljYmlBZ0x5OGdkR2hwY3lCcGN5Qm9aWEpsSUhOdklIUm9ZWFFnYzI5dFpTQnViMlJsTFdOdmNtVWdjM1J5WldGdGN5QmpZVzRnYjNCMGFXMXBlbVVnYzNSeWFXNW5YRzRnSUM4dklHaGhibVJzYVc1bklHRjBJR0VnYkc5M1pYSWdiR1YyWld3dVhHNGdJSFpoY2lCdWIwUmxZMjlrWlNBOUlHOXdkR2x2Ym5NdVpHVmpiMlJsVTNSeWFXNW5jeUE5UFQwZ1ptRnNjMlU3WEc0Z0lIUm9hWE11WkdWamIyUmxVM1J5YVc1bmN5QTlJQ0Z1YjBSbFkyOWtaVHRjYmx4dUlDQXZMeUJEY25sd2RHOGdhWE1nYTJsdVpDQnZaaUJ2YkdRZ1lXNWtJR055ZFhOMGVTNGdJRWhwYzNSdmNtbGpZV3hzZVN3Z2FYUnpJR1JsWm1GMWJIUWdjM1J5YVc1blhHNGdJQzh2SUdWdVkyOWthVzVuSUdseklDZGlhVzVoY25rbklITnZJSGRsSUdoaGRtVWdkRzhnYldGclpTQjBhR2x6SUdOdmJtWnBaM1Z5WVdKc1pTNWNiaUFnTHk4Z1JYWmxjbmwwYUdsdVp5QmxiSE5sSUdsdUlIUm9aU0IxYm1sMlpYSnpaU0IxYzJWeklDZDFkR1k0Snl3Z2RHaHZkV2RvTGx4dUlDQjBhR2x6TG1SbFptRjFiSFJGYm1OdlpHbHVaeUE5SUc5d2RHbHZibk11WkdWbVlYVnNkRVZ1WTI5a2FXNW5JSHg4SUNkMWRHWTRKenRjYmx4dUlDQXZMeUJ1YjNRZ1lXNGdZV04wZFdGc0lHSjFabVpsY2lCM1pTQnJaV1Z3SUhSeVlXTnJJRzltTENCaWRYUWdZU0J0WldGemRYSmxiV1Z1ZEZ4dUlDQXZMeUJ2WmlCb2IzY2diWFZqYUNCM1pTZHlaU0IzWVdsMGFXNW5JSFJ2SUdkbGRDQndkWE5vWldRZ2RHOGdjMjl0WlNCMWJtUmxjbXg1YVc1blhHNGdJQzh2SUhOdlkydGxkQ0J2Y2lCbWFXeGxMbHh1SUNCMGFHbHpMbXhsYm1kMGFDQTlJREE3WEc1Y2JpQWdMeThnWVNCbWJHRm5JSFJ2SUhObFpTQjNhR1Z1SUhkbEozSmxJR2x1SUhSb1pTQnRhV1JrYkdVZ2IyWWdZU0IzY21sMFpTNWNiaUFnZEdocGN5NTNjbWwwYVc1bklEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z2QyaGxiaUIwY25WbElHRnNiQ0IzY21sMFpYTWdkMmxzYkNCaVpTQmlkV1ptWlhKbFpDQjFiblJwYkNBdWRXNWpiM0pyS0NrZ1kyRnNiRnh1SUNCMGFHbHpMbU52Y210bFpDQTlJREE3WEc1Y2JpQWdMeThnWVNCbWJHRm5JSFJ2SUdKbElHRmliR1VnZEc4Z2RHVnNiQ0JwWmlCMGFHVWdiMjUzY21sMFpTQmpZaUJwY3lCallXeHNaV1FnYVcxdFpXUnBZWFJsYkhrc1hHNGdJQzh2SUc5eUlHOXVJR0VnYkdGMFpYSWdkR2xqYXk0Z0lGZGxJSE5sZENCMGFHbHpJSFJ2SUhSeWRXVWdZWFFnWm1seWMzUXNJR0psWTJGMWMyVWdZVzU1WEc0Z0lDOHZJR0ZqZEdsdmJuTWdkR2hoZENCemFHOTFiR1J1SjNRZ2FHRndjR1Z1SUhWdWRHbHNJRndpYkdGMFpYSmNJaUJ6YUc5MWJHUWdaMlZ1WlhKaGJHeDVJR0ZzYzI5Y2JpQWdMeThnYm05MElHaGhjSEJsYmlCaVpXWnZjbVVnZEdobElHWnBjbk4wSUhkeWFYUmxJR05oYkd3dVhHNGdJSFJvYVhNdWMzbHVZeUE5SUhSeWRXVTdYRzVjYmlBZ0x5OGdZU0JtYkdGbklIUnZJR3R1YjNjZ2FXWWdkMlVuY21VZ2NISnZZMlZ6YzJsdVp5QndjbVYyYVc5MWMyeDVJR0oxWm1abGNtVmtJR2wwWlcxekxDQjNhR2xqYUZ4dUlDQXZMeUJ0WVhrZ1kyRnNiQ0IwYUdVZ1gzZHlhWFJsS0NrZ1kyRnNiR0poWTJzZ2FXNGdkR2hsSUhOaGJXVWdkR2xqYXl3Z2MyOGdkR2hoZENCM1pTQmtiMjRuZEZ4dUlDQXZMeUJsYm1RZ2RYQWdhVzRnWVc0Z2IzWmxjbXhoY0hCbFpDQnZibmR5YVhSbElITnBkSFZoZEdsdmJpNWNiaUFnZEdocGN5NWlkV1ptWlhKUWNtOWpaWE56YVc1bklEMGdabUZzYzJVN1hHNWNiaUFnTHk4Z2RHaGxJR05oYkd4aVlXTnJJSFJvWVhRbmN5QndZWE56WldRZ2RHOGdYM2R5YVhSbEtHTm9kVzVyTEdOaUtWeHVJQ0IwYUdsekxtOXVkM0pwZEdVZ1BTQm1kVzVqZEdsdmJpQW9aWElwSUh0Y2JpQWdJQ0J2Ym5keWFYUmxLSE4wY21WaGJTd2daWElwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJSFJvWlNCallXeHNZbUZqYXlCMGFHRjBJSFJvWlNCMWMyVnlJSE4xY0hCc2FXVnpJSFJ2SUhkeWFYUmxLR05vZFc1ckxHVnVZMjlrYVc1bkxHTmlLVnh1SUNCMGFHbHpMbmR5YVhSbFkySWdQU0J1ZFd4c08xeHVYRzRnSUM4dklIUm9aU0JoYlc5MWJuUWdkR2hoZENCcGN5QmlaV2x1WnlCM2NtbDBkR1Z1SUhkb1pXNGdYM2R5YVhSbElHbHpJR05oYkd4bFpDNWNiaUFnZEdocGN5NTNjbWwwWld4bGJpQTlJREE3WEc1Y2JpQWdkR2hwY3k1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCdWRXeHNPMXh1SUNCMGFHbHpMbXhoYzNSQ2RXWm1aWEpsWkZKbGNYVmxjM1FnUFNCdWRXeHNPMXh1WEc0Z0lDOHZJRzUxYldKbGNpQnZaaUJ3Wlc1a2FXNW5JSFZ6WlhJdGMzVndjR3hwWldRZ2QzSnBkR1VnWTJGc2JHSmhZMnR6WEc0Z0lDOHZJSFJvYVhNZ2JYVnpkQ0JpWlNBd0lHSmxabTl5WlNBblptbHVhWE5vSnlCallXNGdZbVVnWlcxcGRIUmxaRnh1SUNCMGFHbHpMbkJsYm1ScGJtZGpZaUE5SURBN1hHNWNiaUFnTHk4Z1pXMXBkQ0J3Y21WbWFXNXBjMmdnYVdZZ2RHaGxJRzl1YkhrZ2RHaHBibWNnZDJVbmNtVWdkMkZwZEdsdVp5Qm1iM0lnYVhNZ1gzZHlhWFJsSUdOaWMxeHVJQ0F2THlCVWFHbHpJR2x6SUhKbGJHVjJZVzUwSUdadmNpQnplVzVqYUhKdmJtOTFjeUJVY21GdWMyWnZjbTBnYzNSeVpXRnRjMXh1SUNCMGFHbHpMbkJ5WldacGJtbHphR1ZrSUQwZ1ptRnNjMlU3WEc1Y2JpQWdMeThnVkhKMVpTQnBaaUIwYUdVZ1pYSnliM0lnZDJGeklHRnNjbVZoWkhrZ1pXMXBkSFJsWkNCaGJtUWdjMmh2ZFd4a0lHNXZkQ0JpWlNCMGFISnZkMjRnWVdkaGFXNWNiaUFnZEdocGN5NWxjbkp2Y2tWdGFYUjBaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQXZMeUJqYjNWdWRDQmlkV1ptWlhKbFpDQnlaWEYxWlhOMGMxeHVJQ0IwYUdsekxtSjFabVpsY21Wa1VtVnhkV1Z6ZEVOdmRXNTBJRDBnTUR0Y2JseHVJQ0F2THlCaGJHeHZZMkYwWlNCMGFHVWdabWx5YzNRZ1EyOXlhMlZrVW1WeGRXVnpkQ3dnZEdobGNtVWdhWE1nWVd4M1lYbHpYRzRnSUM4dklHOXVaU0JoYkd4dlkyRjBaV1FnWVc1a0lHWnlaV1VnZEc4Z2RYTmxMQ0JoYm1RZ2QyVWdiV0ZwYm5SaGFXNGdZWFFnYlc5emRDQjBkMjljYmlBZ2RHaHBjeTVqYjNKclpXUlNaWEYxWlhOMGMwWnlaV1VnUFNCdVpYY2dRMjl5YTJWa1VtVnhkV1Z6ZENoMGFHbHpLVHRjYm4xY2JseHVWM0pwZEdGaWJHVlRkR0YwWlM1d2NtOTBiM1I1Y0dVdVoyVjBRblZtWm1WeUlEMGdablZ1WTNScGIyNGdaMlYwUW5WbVptVnlLQ2tnZTF4dUlDQjJZWElnWTNWeWNtVnVkQ0E5SUhSb2FYTXVZblZtWm1WeVpXUlNaWEYxWlhOME8xeHVJQ0IyWVhJZ2IzVjBJRDBnVzEwN1hHNGdJSGRvYVd4bElDaGpkWEp5Wlc1MEtTQjdYRzRnSUNBZ2IzVjBMbkIxYzJnb1kzVnljbVZ1ZENrN1hHNGdJQ0FnWTNWeWNtVnVkQ0E5SUdOMWNuSmxiblF1Ym1WNGREdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2IzVjBPMXh1ZlR0Y2JseHVLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1YzSnBkR0ZpYkdWVGRHRjBaUzV3Y205MGIzUjVjR1VzSUNkaWRXWm1aWEluTENCN1hHNGdJQ0FnSUNCblpYUTZJR2x1ZEdWeWJtRnNWWFJwYkM1a1pYQnlaV05oZEdVb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUkNkV1ptWlhJb0tUdGNiaUFnSUNBZ0lIMHNJQ2RmZDNKcGRHRmliR1ZUZEdGMFpTNWlkV1ptWlhJZ2FYTWdaR1Z3Y21WallYUmxaQzRnVlhObElGOTNjbWwwWVdKc1pWTjBZWFJsTG1kbGRFSjFabVpsY2lBbklDc2dKMmx1YzNSbFlXUXVKeXdnSjBSRlVEQXdNRE1uS1Z4dUlDQWdJSDBwTzF4dUlDQjlJR05oZEdOb0lDaGZLU0I3ZlZ4dWZTa29LVHRjYmx4dUx5OGdWR1Z6ZENCZmQzSnBkR0ZpYkdWVGRHRjBaU0JtYjNJZ2FXNW9aWEpwZEdGdVkyVWdkRzhnWVdOamIzVnVkQ0JtYjNJZ1JIVndiR1Y0SUhOMGNtVmhiWE1zWEc0dkx5QjNhRzl6WlNCd2NtOTBiM1I1Y0dVZ1kyaGhhVzRnYjI1c2VTQndiMmx1ZEhNZ2RHOGdVbVZoWkdGaWJHVXVYRzUyWVhJZ2NtVmhiRWhoYzBsdWMzUmhibU5sTzF4dWFXWWdLSFI1Y0dWdlppQlRlVzFpYjJ3Z1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1UzbHRZbTlzTG1oaGMwbHVjM1JoYm1ObElDWW1JSFI1Y0dWdlppQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVmJVM2x0WW05c0xtaGhjMGx1YzNSaGJtTmxYU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNCeVpXRnNTR0Z6U1c1emRHRnVZMlVnUFNCR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dWYlUzbHRZbTlzTG1oaGMwbHVjM1JoYm1ObFhUdGNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtGZHlhWFJoWW14bExDQlRlVzFpYjJ3dWFHRnpTVzV6ZEdGdVkyVXNJSHRjYmlBZ0lDQjJZV3gxWlRvZ1puVnVZM1JwYjI0Z0tHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEpsWVd4SVlYTkpibk4wWVc1alpTNWpZV3hzS0hSb2FYTXNJRzlpYW1WamRDa3BJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE1nSVQwOUlGZHlhWFJoWW14bEtTQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdKaVlnYjJKcVpXTjBMbDkzY21sMFlXSnNaVk4wWVhSbElHbHVjM1JoYm1ObGIyWWdWM0pwZEdGaWJHVlRkR0YwWlR0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlNCbGJITmxJSHRjYmlBZ2NtVmhiRWhoYzBsdWMzUmhibU5sSUQwZ1puVnVZM1JwYjI0Z0tHOWlhbVZqZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ2WW1wbFkzUWdhVzV6ZEdGdVkyVnZaaUIwYUdsek8xeHVJQ0I5TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJYY21sMFlXSnNaU2h2Y0hScGIyNXpLU0I3WEc0Z0lFUjFjR3hsZUNBOUlFUjFjR3hsZUNCOGZDQnlaWEYxYVhKbEtDY3VMMTl6ZEhKbFlXMWZaSFZ3YkdWNEp5azdYRzVjYmlBZ0x5OGdWM0pwZEdGaWJHVWdZM1J2Y2lCcGN5QmhjSEJzYVdWa0lIUnZJRVIxY0d4bGVHVnpMQ0IwYjI4dVhHNGdJQzh2SUdCeVpXRnNTR0Z6U1c1emRHRnVZMlZnSUdseklHNWxZMlZ6YzJGeWVTQmlaV05oZFhObElIVnphVzVuSUhCc1lXbHVJR0JwYm5OMFlXNWpaVzltWUZ4dUlDQXZMeUIzYjNWc1pDQnlaWFIxY200Z1ptRnNjMlVzSUdGeklHNXZJR0JmZDNKcGRHRmliR1ZUZEdGMFpXQWdjSEp2Y0dWeWRIa2dhWE1nWVhSMFlXTm9aV1F1WEc1Y2JpQWdMeThnVkhKNWFXNW5JSFJ2SUhWelpTQjBhR1VnWTNWemRHOXRJR0JwYm5OMFlXNWpaVzltWUNCbWIzSWdWM0pwZEdGaWJHVWdhR1Z5WlNCM2FXeHNJR0ZzYzI4Z1luSmxZV3NnZEdobFhHNGdJQzh2SUU1dlpHVXVhbk1nVEdGNmVWUnlZVzV6Wm05eWJTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2QyaHBZMmdnYUdGeklHRWdibTl1TFhSeWFYWnBZV3dnWjJWMGRHVnlJR1p2Y2x4dUlDQXZMeUJnWDNkeWFYUmhZbXhsVTNSaGRHVmdJSFJvWVhRZ2QyOTFiR1FnYkdWaFpDQjBieUJwYm1acGJtbDBaU0J5WldOMWNuTnBiMjR1WEc0Z0lHbG1JQ2doY21WaGJFaGhjMGx1YzNSaGJtTmxMbU5oYkd3b1YzSnBkR0ZpYkdVc0lIUm9hWE1wSUNZbUlDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFUjFjR3hsZUNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGZHlhWFJoWW14bEtHOXdkR2x2Ym5NcE8xeHVJQ0I5WEc1Y2JpQWdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0E5SUc1bGR5QlhjbWwwWVdKc1pWTjBZWFJsS0c5d2RHbHZibk1zSUhSb2FYTXBPMXh1WEc0Z0lDOHZJR3hsWjJGamVTNWNiaUFnZEdocGN5NTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNWNiaUFnYVdZZ0tHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdWQzSnBkR1VnUFQwOUlDZG1kVzVqZEdsdmJpY3BJSFJvYVhNdVgzZHlhWFJsSUQwZ2IzQjBhVzl1Y3k1M2NtbDBaVHRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTUzY21sMFpYWWdQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDNkeWFYUmxkaUE5SUc5d2RHbHZibk11ZDNKcGRHVjJPMXh1WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hScGIyNXpMbVJsYzNSeWIza2dQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDJSbGMzUnliM2tnUFNCdmNIUnBiMjV6TG1SbGMzUnliM2s3WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk11Wm1sdVlXd2dQVDA5SUNkbWRXNWpkR2x2YmljcElIUm9hWE11WDJacGJtRnNJRDBnYjNCMGFXOXVjeTVtYVc1aGJEdGNiaUFnZlZ4dVhHNGdJRk4wY21WaGJTNWpZV3hzS0hSb2FYTXBPMXh1ZlZ4dVhHNHZMeUJQZEdobGNuZHBjMlVnY0dWdmNHeGxJR05oYmlCd2FYQmxJRmR5YVhSaFlteGxJSE4wY21WaGJYTXNJSGRvYVdOb0lHbHpJR3AxYzNRZ2QzSnZibWN1WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdWNHbHdaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnZEdocGN5NWxiV2wwS0NkbGNuSnZjaWNzSUc1bGR5QkZjbkp2Y2lnblEyRnVibTkwSUhCcGNHVXNJRzV2ZENCeVpXRmtZV0pzWlNjcEtUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlIZHlhWFJsUVdaMFpYSkZibVFvYzNSeVpXRnRMQ0JqWWlrZ2UxeHVJQ0IyWVhJZ1pYSWdQU0J1WlhjZ1JYSnliM0lvSjNkeWFYUmxJR0ZtZEdWeUlHVnVaQ2NwTzF4dUlDQXZMeUJVVDBSUE9pQmtaV1psY2lCbGNuSnZjaUJsZG1WdWRITWdZMjl1YzJsemRHVnVkR3g1SUdWMlpYSjVkMmhsY21Vc0lHNXZkQ0JxZFhOMElIUm9aU0JqWWx4dUlDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSEJ1WVM1dVpYaDBWR2xqYXloallpd2daWElwTzF4dWZWeHVYRzR2THlCRGFHVmphM01nZEdoaGRDQmhJSFZ6WlhJdGMzVndjR3hwWldRZ1kyaDFibXNnYVhNZ2RtRnNhV1FzSUdWemNHVmphV0ZzYkhrZ1ptOXlJSFJvWlNCd1lYSjBhV04xYkdGeVhHNHZMeUJ0YjJSbElIUm9aU0J6ZEhKbFlXMGdhWE1nYVc0dUlFTjFjbkpsYm5Sc2VTQjBhR2x6SUcxbFlXNXpJSFJvWVhRZ1lHNTFiR3hnSUdseklHNWxkbVZ5SUdGalkyVndkR1ZrWEc0dkx5QmhibVFnZFc1a1pXWnBibVZrTDI1dmJpMXpkSEpwYm1jZ2RtRnNkV1Z6SUdGeVpTQnZibXg1SUdGc2JHOTNaV1FnYVc0Z2IySnFaV04wSUcxdlpHVXVYRzVtZFc1amRHbHZiaUIyWVd4cFpFTm9kVzVyS0hOMGNtVmhiU3dnYzNSaGRHVXNJR05vZFc1ckxDQmpZaWtnZTF4dUlDQjJZWElnZG1Gc2FXUWdQU0IwY25WbE8xeHVJQ0IyWVhJZ1pYSWdQU0JtWVd4elpUdGNibHh1SUNCcFppQW9ZMmgxYm1zZ1BUMDlJRzUxYkd3cElIdGNiaUFnSUNCbGNpQTlJRzVsZHlCVWVYQmxSWEp5YjNJb0owMWhlU0J1YjNRZ2QzSnBkR1VnYm5Wc2JDQjJZV3gxWlhNZ2RHOGdjM1J5WldGdEp5azdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdOb2RXNXJJQ0U5UFNBbmMzUnlhVzVuSnlBbUppQmphSFZ1YXlBaFBUMGdkVzVrWldacGJtVmtJQ1ltSUNGemRHRjBaUzV2WW1wbFkzUk5iMlJsS1NCN1hHNGdJQ0FnWlhJZ1BTQnVaWGNnVkhsd1pVVnljbTl5S0NkSmJuWmhiR2xrSUc1dmJpMXpkSEpwYm1jdlluVm1abVZ5SUdOb2RXNXJKeWs3WEc0Z0lIMWNiaUFnYVdZZ0tHVnlLU0I3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjJWeWNtOXlKeXdnWlhJcE8xeHVJQ0FnSUhCdVlTNXVaWGgwVkdsamF5aGpZaXdnWlhJcE8xeHVJQ0FnSUhaaGJHbGtJRDBnWm1Gc2MyVTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlIWmhiR2xrTzF4dWZWeHVYRzVYY21sMFlXSnNaUzV3Y205MGIzUjVjR1V1ZDNKcGRHVWdQU0JtZFc1amRHbHZiaUFvWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrZ2UxeHVJQ0IyWVhJZ2MzUmhkR1VnUFNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2NtVjBJRDBnWm1Gc2MyVTdYRzRnSUhaaGNpQnBjMEoxWmlBOUlDRnpkR0YwWlM1dlltcGxZM1JOYjJSbElDWW1JRjlwYzFWcGJuUTRRWEp5WVhrb1kyaDFibXNwTzF4dVhHNGdJR2xtSUNocGMwSjFaaUFtSmlBaFFuVm1abVZ5TG1selFuVm1abVZ5S0dOb2RXNXJLU2tnZTF4dUlDQWdJR05vZFc1cklEMGdYM1ZwYm5RNFFYSnlZWGxVYjBKMVptWmxjaWhqYUhWdWF5azdYRzRnSUgxY2JseHVJQ0JwWmlBb2RIbHdaVzltSUdWdVkyOWthVzVuSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdZMklnUFNCbGJtTnZaR2x1Wnp0Y2JpQWdJQ0JsYm1OdlpHbHVaeUE5SUc1MWJHdzdYRzRnSUgxY2JseHVJQ0JwWmlBb2FYTkNkV1lwSUdWdVkyOWthVzVuSUQwZ0oySjFabVpsY2ljN1pXeHpaU0JwWmlBb0lXVnVZMjlrYVc1bktTQmxibU52WkdsdVp5QTlJSE4wWVhSbExtUmxabUYxYkhSRmJtTnZaR2x1Wnp0Y2JseHVJQ0JwWmlBb2RIbHdaVzltSUdOaUlDRTlQU0FuWm5WdVkzUnBiMjRuS1NCallpQTlJRzV2Y0R0Y2JseHVJQ0JwWmlBb2MzUmhkR1V1Wlc1a1pXUXBJSGR5YVhSbFFXWjBaWEpGYm1Rb2RHaHBjeXdnWTJJcE8yVnNjMlVnYVdZZ0tHbHpRblZtSUh4OElIWmhiR2xrUTJoMWJtc29kR2hwY3l3Z2MzUmhkR1VzSUdOb2RXNXJMQ0JqWWlrcElIdGNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMklyS3p0Y2JpQWdJQ0J5WlhRZ1BTQjNjbWwwWlU5eVFuVm1abVZ5S0hSb2FYTXNJSE4wWVhSbExDQnBjMEoxWml3Z1kyaDFibXNzSUdWdVkyOWthVzVuTENCallpazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjbVYwTzF4dWZUdGNibHh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTG1OdmNtc2dQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJSFpoY2lCemRHRjBaU0E5SUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVN1hHNWNiaUFnYzNSaGRHVXVZMjl5YTJWa0t5czdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVkVzVqYjNKcklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1F0TFR0Y2JseHVJQ0FnSUdsbUlDZ2hjM1JoZEdVdWQzSnBkR2x1WnlBbUppQWhjM1JoZEdVdVkyOXlhMlZrSUNZbUlDRnpkR0YwWlM1bWFXNXBjMmhsWkNBbUppQWhjM1JoZEdVdVluVm1abVZ5VUhKdlkyVnpjMmx1WnlBbUppQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FwSUdOc1pXRnlRblZtWm1WeUtIUm9hWE1zSUhOMFlYUmxLVHRjYmlBZ2ZWeHVmVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExuTmxkRVJsWm1GMWJIUkZibU52WkdsdVp5QTlJR1oxYm1OMGFXOXVJSE5sZEVSbFptRjFiSFJGYm1OdlpHbHVaeWhsYm1OdlpHbHVaeWtnZTF4dUlDQXZMeUJ1YjJSbE9qcFFZWEp6WlVWdVkyOWthVzVuS0NrZ2NtVnhkV2x5WlhNZ2JHOTNaWElnWTJGelpTNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCbGJtTnZaR2x1WnlBOVBUMGdKM04wY21sdVp5Y3BJR1Z1WTI5a2FXNW5JRDBnWlc1amIyUnBibWN1ZEc5TWIzZGxja05oYzJVb0tUdGNiaUFnYVdZZ0tDRW9XeWRvWlhnbkxDQW5kWFJtT0Njc0lDZDFkR1l0T0Njc0lDZGhjMk5wYVNjc0lDZGlhVzVoY25rbkxDQW5ZbUZ6WlRZMEp5d2dKM1ZqY3pJbkxDQW5kV056TFRJbkxDQW5kWFJtTVRac1pTY3NJQ2QxZEdZdE1UWnNaU2NzSUNkeVlYY25YUzVwYm1SbGVFOW1LQ2hsYm1OdlpHbHVaeUFySUNjbktTNTBiMHh2ZDJWeVEyRnpaU2dwS1NBK0lDMHhLU2tnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblZXNXJibTkzYmlCbGJtTnZaR2x1WnpvZ0p5QXJJR1Z1WTI5a2FXNW5LVHRjYmlBZ2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWtaV1poZFd4MFJXNWpiMlJwYm1jZ1BTQmxibU52WkdsdVp6dGNiaUFnY21WMGRYSnVJSFJvYVhNN1hHNTlPMXh1WEc1bWRXNWpkR2x2YmlCa1pXTnZaR1ZEYUhWdWF5aHpkR0YwWlN3Z1kyaDFibXNzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNnaGMzUmhkR1V1YjJKcVpXTjBUVzlrWlNBbUppQnpkR0YwWlM1a1pXTnZaR1ZUZEhKcGJtZHpJQ0U5UFNCbVlXeHpaU0FtSmlCMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnWTJoMWJtc2dQU0JDZFdabVpYSXVabkp2YlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJqYUhWdWF6dGNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRmR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjNkeWFYUmhZbXhsU0dsbmFGZGhkR1Z5VFdGeWF5Y3NJSHRjYmlBZ0x5OGdiV0ZyYVc1bklHbDBJR1Y0Y0d4cFkybDBJSFJvYVhNZ2NISnZjR1Z5ZEhrZ2FYTWdibTkwSUdWdWRXMWxjbUZpYkdWY2JpQWdMeThnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnYzI5dFpTQndjbTkwYjNSNWNHVWdiV0Z1YVhCMWJHRjBhVzl1SUdsdVhHNGdJQzh2SUhWelpYSnNZVzVrSUhkcGJHd2dabUZwYkZ4dUlDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVhR2xuYUZkaGRHVnlUV0Z5YXp0Y2JpQWdmVnh1ZlNrN1hHNWNiaTh2SUdsbUlIZGxKM0psSUdGc2NtVmhaSGtnZDNKcGRHbHVaeUJ6YjIxbGRHaHBibWNzSUhSb1pXNGdhblZ6ZENCd2RYUWdkR2hwYzF4dUx5OGdhVzRnZEdobElIRjFaWFZsTENCaGJtUWdkMkZwZENCdmRYSWdkSFZ5Ymk0Z0lFOTBhR1Z5ZDJselpTd2dZMkZzYkNCZmQzSnBkR1ZjYmk4dklFbG1JSGRsSUhKbGRIVnliaUJtWVd4elpTd2dkR2hsYmlCM1pTQnVaV1ZrSUdFZ1pISmhhVzRnWlhabGJuUXNJSE52SUhObGRDQjBhR0YwSUdac1lXY3VYRzVtZFc1amRHbHZiaUIzY21sMFpVOXlRblZtWm1WeUtITjBjbVZoYlN3Z2MzUmhkR1VzSUdselFuVm1MQ0JqYUhWdWF5d2daVzVqYjJScGJtY3NJR05pS1NCN1hHNGdJR2xtSUNnaGFYTkNkV1lwSUh0Y2JpQWdJQ0IyWVhJZ2JtVjNRMmgxYm1zZ1BTQmtaV052WkdWRGFIVnVheWh6ZEdGMFpTd2dZMmgxYm1zc0lHVnVZMjlrYVc1bktUdGNiaUFnSUNCcFppQW9ZMmgxYm1zZ0lUMDlJRzVsZDBOb2RXNXJLU0I3WEc0Z0lDQWdJQ0JwYzBKMVppQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCbGJtTnZaR2x1WnlBOUlDZGlkV1ptWlhJbk8xeHVJQ0FnSUNBZ1kyaDFibXNnUFNCdVpYZERhSFZ1YXp0Y2JpQWdJQ0I5WEc0Z0lIMWNiaUFnZG1GeUlHeGxiaUE5SUhOMFlYUmxMbTlpYW1WamRFMXZaR1VnUHlBeElEb2dZMmgxYm1zdWJHVnVaM1JvTzF4dVhHNGdJSE4wWVhSbExteGxibWQwYUNBclBTQnNaVzQ3WEc1Y2JpQWdkbUZ5SUhKbGRDQTlJSE4wWVhSbExteGxibWQwYUNBOElITjBZWFJsTG1ocFoyaFhZWFJsY2sxaGNtczdYRzRnSUM4dklIZGxJRzExYzNRZ1pXNXpkWEpsSUhSb1lYUWdjSEpsZG1sdmRYTWdibVZsWkVSeVlXbHVJSGRwYkd3Z2JtOTBJR0psSUhKbGMyVjBJSFJ2SUdaaGJITmxMbHh1SUNCcFppQW9JWEpsZENrZ2MzUmhkR1V1Ym1WbFpFUnlZV2x1SUQwZ2RISjFaVHRjYmx4dUlDQnBaaUFvYzNSaGRHVXVkM0pwZEdsdVp5QjhmQ0J6ZEdGMFpTNWpiM0pyWldRcElIdGNiaUFnSUNCMllYSWdiR0Z6ZENBOUlITjBZWFJsTG14aGMzUkNkV1ptWlhKbFpGSmxjWFZsYzNRN1hHNGdJQ0FnYzNSaGRHVXViR0Z6ZEVKMVptWmxjbVZrVW1WeGRXVnpkQ0E5SUh0Y2JpQWdJQ0FnSUdOb2RXNXJPaUJqYUhWdWF5eGNiaUFnSUNBZ0lHVnVZMjlrYVc1bk9pQmxibU52WkdsdVp5eGNiaUFnSUNBZ0lHbHpRblZtT2lCcGMwSjFaaXhjYmlBZ0lDQWdJR05oYkd4aVlXTnJPaUJqWWl4Y2JpQWdJQ0FnSUc1bGVIUTZJRzUxYkd4Y2JpQWdJQ0I5TzF4dUlDQWdJR2xtSUNoc1lYTjBLU0I3WEc0Z0lDQWdJQ0JzWVhOMExtNWxlSFFnUFNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wTzF4dUlDQWdJSDFjYmlBZ0lDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1JEYjNWdWRDQXJQU0F4TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSdlYzSnBkR1VvYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabUZzYzJVc0lHeGxiaXdnWTJoMWJtc3NJR1Z1WTI5a2FXNW5MQ0JqWWlrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2NtVjBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmtiMWR5YVhSbEtITjBjbVZoYlN3Z2MzUmhkR1VzSUhkeWFYUmxkaXdnYkdWdUxDQmphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lHTmlLU0I3WEc0Z0lITjBZWFJsTG5keWFYUmxiR1Z1SUQwZ2JHVnVPMXh1SUNCemRHRjBaUzUzY21sMFpXTmlJRDBnWTJJN1hHNGdJSE4wWVhSbExuZHlhWFJwYm1jZ1BTQjBjblZsTzF4dUlDQnpkR0YwWlM1emVXNWpJRDBnZEhKMVpUdGNiaUFnYVdZZ0tIZHlhWFJsZGlrZ2MzUnlaV0Z0TGw5M2NtbDBaWFlvWTJoMWJtc3NJSE4wWVhSbExtOXVkM0pwZEdVcE8yVnNjMlVnYzNSeVpXRnRMbDkzY21sMFpTaGphSFZ1YXl3Z1pXNWpiMlJwYm1jc0lITjBZWFJsTG05dWQzSnBkR1VwTzF4dUlDQnpkR0YwWlM1emVXNWpJRDBnWm1Gc2MyVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHOXVkM0pwZEdWRmNuSnZjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQnplVzVqTENCbGNpd2dZMklwSUh0Y2JpQWdMUzF6ZEdGMFpTNXdaVzVrYVc1blkySTdYRzVjYmlBZ2FXWWdLSE41Ym1NcElIdGNiaUFnSUNBdkx5QmtaV1psY2lCMGFHVWdZMkZzYkdKaFkyc2dhV1lnZDJVZ1lYSmxJR0psYVc1bklHTmhiR3hsWkNCemVXNWphSEp2Ym05MWMyeDVYRzRnSUNBZ0x5OGdkRzhnWVhadmFXUWdjR2xzYVc1bklIVndJSFJvYVc1bmN5QnZiaUIwYUdVZ2MzUmhZMnRjYmlBZ0lDQndibUV1Ym1WNGRGUnBZMnNvWTJJc0lHVnlLVHRjYmlBZ0lDQXZMeUIwYUdseklHTmhiaUJsYldsMElHWnBibWx6YUN3Z1lXNWtJR2wwSUhkcGJHd2dZV3gzWVhseklHaGhjSEJsYmx4dUlDQWdJQzh2SUdGbWRHVnlJR1Z5Y205eVhHNGdJQ0FnY0c1aExtNWxlSFJVYVdOcktHWnBibWx6YUUxaGVXSmxMQ0J6ZEhKbFlXMHNJSE4wWVhSbEtUdGNiaUFnSUNCemRISmxZVzB1WDNkeWFYUmhZbXhsVTNSaGRHVXVaWEp5YjNKRmJXbDBkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQnpkSEpsWVcwdVpXMXBkQ2duWlhKeWIzSW5MQ0JsY2lrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ0x5OGdkR2hsSUdOaGJHeGxjaUJsZUhCbFkzUWdkR2hwY3lCMGJ5Qm9ZWEJ3Wlc0Z1ltVm1iM0psSUdsbVhHNGdJQ0FnTHk4Z2FYUWdhWE1nWVhONWJtTmNiaUFnSUNCallpaGxjaWs3WEc0Z0lDQWdjM1J5WldGdExsOTNjbWwwWVdKc1pWTjBZWFJsTG1WeWNtOXlSVzFwZEhSbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnYzNSeVpXRnRMbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSXBPMXh1SUNBZ0lDOHZJSFJvYVhNZ1kyRnVJR1Z0YVhRZ1ptbHVhWE5vTENCaWRYUWdabWx1YVhOb0lHMTFjM1JjYmlBZ0lDQXZMeUJoYkhkaGVYTWdabTlzYkc5M0lHVnljbTl5WEc0Z0lDQWdabWx1YVhOb1RXRjVZbVVvYzNSeVpXRnRMQ0J6ZEdGMFpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLU0I3WEc0Z0lITjBZWFJsTG5keWFYUnBibWNnUFNCbVlXeHpaVHRjYmlBZ2MzUmhkR1V1ZDNKcGRHVmpZaUE5SUc1MWJHdzdYRzRnSUhOMFlYUmxMbXhsYm1kMGFDQXRQU0J6ZEdGMFpTNTNjbWwwWld4bGJqdGNiaUFnYzNSaGRHVXVkM0pwZEdWc1pXNGdQU0F3TzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2Ym5keWFYUmxLSE4wY21WaGJTd2daWElwSUh0Y2JpQWdkbUZ5SUhOMFlYUmxJRDBnYzNSeVpXRnRMbDkzY21sMFlXSnNaVk4wWVhSbE8xeHVJQ0IyWVhJZ2MzbHVZeUE5SUhOMFlYUmxMbk41Ym1NN1hHNGdJSFpoY2lCallpQTlJSE4wWVhSbExuZHlhWFJsWTJJN1hHNWNiaUFnYjI1M2NtbDBaVk4wWVhSbFZYQmtZWFJsS0hOMFlYUmxLVHRjYmx4dUlDQnBaaUFvWlhJcElHOXVkM0pwZEdWRmNuSnZjaWh6ZEhKbFlXMHNJSE4wWVhSbExDQnplVzVqTENCbGNpd2dZMklwTzJWc2MyVWdlMXh1SUNBZ0lDOHZJRU5vWldOcklHbG1JSGRsSjNKbElHRmpkSFZoYkd4NUlISmxZV1I1SUhSdklHWnBibWx6YUN3Z1luVjBJR1J2YmlkMElHVnRhWFFnZVdWMFhHNGdJQ0FnZG1GeUlHWnBibWx6YUdWa0lEMGdibVZsWkVacGJtbHphQ2h6ZEdGMFpTazdYRzVjYmlBZ0lDQnBaaUFvSVdacGJtbHphR1ZrSUNZbUlDRnpkR0YwWlM1amIzSnJaV1FnSmlZZ0lYTjBZWFJsTG1KMVptWmxjbEJ5YjJObGMzTnBibWNnSmlZZ2MzUmhkR1V1WW5WbVptVnlaV1JTWlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0JqYkdWaGNrSjFabVpsY2loemRISmxZVzBzSUhOMFlYUmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzNsdVl5a2dlMXh1SUNBZ0lDQWdMeW84Y21Wd2JHRmpaVzFsYm5RK0tpOWNiaUFnSUNBZ0lHRnplVzVqVjNKcGRHVW9ZV1owWlhKWGNtbDBaU3dnYzNSeVpXRnRMQ0J6ZEdGMFpTd2dabWx1YVhOb1pXUXNJR05pS1R0Y2JpQWdJQ0FnSUM4cVBDOXlaWEJzWVdObGJXVnVkRDRxTDF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhablJsY2xkeWFYUmxLSE4wY21WaGJTd2djM1JoZEdVc0lHWnBibWx6YUdWa0xDQmpZaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdGbWRHVnlWM0pwZEdVb2MzUnlaV0Z0TENCemRHRjBaU3dnWm1sdWFYTm9aV1FzSUdOaUtTQjdYRzRnSUdsbUlDZ2habWx1YVhOb1pXUXBJRzl1ZDNKcGRHVkVjbUZwYmloemRISmxZVzBzSUhOMFlYUmxLVHRjYmlBZ2MzUmhkR1V1Y0dWdVpHbHVaMk5pTFMwN1hHNGdJR05pS0NrN1hHNGdJR1pwYm1semFFMWhlV0psS0hOMGNtVmhiU3dnYzNSaGRHVXBPMXh1ZlZ4dVhHNHZMeUJOZFhOMElHWnZjbU5sSUdOaGJHeGlZV05ySUhSdklHSmxJR05oYkd4bFpDQnZiaUJ1WlhoMFZHbGpheXdnYzI4Z2RHaGhkQ0IzWlNCa2IyNG5kRnh1THk4Z1pXMXBkQ0FuWkhKaGFXNG5JR0psWm05eVpTQjBhR1VnZDNKcGRHVW9LU0JqYjI1emRXMWxjaUJuWlhSeklIUm9aU0FuWm1Gc2MyVW5JSEpsZEhWeWJseHVMeThnZG1Gc2RXVXNJR0Z1WkNCb1lYTWdZU0JqYUdGdVkyVWdkRzhnWVhSMFlXTm9JR0VnSjJSeVlXbHVKeUJzYVhOMFpXNWxjaTVjYm1aMWJtTjBhVzl1SUc5dWQzSnBkR1ZFY21GcGJpaHpkSEpsWVcwc0lITjBZWFJsS1NCN1hHNGdJR2xtSUNoemRHRjBaUzVzWlc1bmRHZ2dQVDA5SURBZ0ppWWdjM1JoZEdVdWJtVmxaRVJ5WVdsdUtTQjdYRzRnSUNBZ2MzUmhkR1V1Ym1WbFpFUnlZV2x1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdjM1J5WldGdExtVnRhWFFvSjJSeVlXbHVKeWs3WEc0Z0lIMWNibjFjYmx4dUx5OGdhV1lnZEdobGNtVW5jeUJ6YjIxbGRHaHBibWNnYVc0Z2RHaGxJR0oxWm1abGNpQjNZV2wwYVc1bkxDQjBhR1Z1SUhCeWIyTmxjM01nYVhSY2JtWjFibU4wYVc5dUlHTnNaV0Z5UW5WbVptVnlLSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnYzNSaGRHVXVZblZtWm1WeVVISnZZMlZ6YzJsdVp5QTlJSFJ5ZFdVN1hHNGdJSFpoY2lCbGJuUnllU0E5SUhOMFlYUmxMbUoxWm1abGNtVmtVbVZ4ZFdWemREdGNibHh1SUNCcFppQW9jM1J5WldGdExsOTNjbWwwWlhZZ0ppWWdaVzUwY25rZ0ppWWdaVzUwY25rdWJtVjRkQ2tnZTF4dUlDQWdJQzh2SUVaaGMzUWdZMkZ6WlN3Z2QzSnBkR1VnWlhabGNubDBhR2x1WnlCMWMybHVaeUJmZDNKcGRHVjJLQ2xjYmlBZ0lDQjJZWElnYkNBOUlITjBZWFJsTG1KMVptWmxjbVZrVW1WeGRXVnpkRU52ZFc1ME8xeHVJQ0FnSUhaaGNpQmlkV1ptWlhJZ1BTQnVaWGNnUVhKeVlYa29iQ2s3WEc0Z0lDQWdkbUZ5SUdodmJHUmxjaUE5SUhOMFlYUmxMbU52Y210bFpGSmxjWFZsYzNSelJuSmxaVHRjYmlBZ0lDQm9iMnhrWlhJdVpXNTBjbmtnUFNCbGJuUnllVHRjYmx4dUlDQWdJSFpoY2lCamIzVnVkQ0E5SURBN1hHNGdJQ0FnZG1GeUlHRnNiRUoxWm1abGNuTWdQU0IwY25WbE8xeHVJQ0FnSUhkb2FXeGxJQ2hsYm5SeWVTa2dlMXh1SUNBZ0lDQWdZblZtWm1WeVcyTnZkVzUwWFNBOUlHVnVkSEo1TzF4dUlDQWdJQ0FnYVdZZ0tDRmxiblJ5ZVM1cGMwSjFaaWtnWVd4c1FuVm1abVZ5Y3lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnWlc1MGNua2dQU0JsYm5SeWVTNXVaWGgwTzF4dUlDQWdJQ0FnWTI5MWJuUWdLejBnTVR0Y2JpQWdJQ0I5WEc0Z0lDQWdZblZtWm1WeUxtRnNiRUoxWm1abGNuTWdQU0JoYkd4Q2RXWm1aWEp6TzF4dVhHNGdJQ0FnWkc5WGNtbDBaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQjBjblZsTENCemRHRjBaUzVzWlc1bmRHZ3NJR0oxWm1abGNpd2dKeWNzSUdodmJHUmxjaTVtYVc1cGMyZ3BPMXh1WEc0Z0lDQWdMeThnWkc5WGNtbDBaU0JwY3lCaGJHMXZjM1FnWVd4M1lYbHpJR0Z6ZVc1akxDQmtaV1psY2lCMGFHVnpaU0IwYnlCellYWmxJR0VnWW1sMElHOW1JSFJwYldWY2JpQWdJQ0F2THlCaGN5QjBhR1VnYUc5MElIQmhkR2dnWlc1a2N5QjNhWFJvSUdSdlYzSnBkR1ZjYmlBZ0lDQnpkR0YwWlM1d1pXNWthVzVuWTJJckt6dGNiaUFnSUNCemRHRjBaUzVzWVhOMFFuVm1abVZ5WldSU1pYRjFaWE4wSUQwZ2JuVnNiRHRjYmlBZ0lDQnBaaUFvYUc5c1pHVnlMbTVsZUhRcElIdGNiaUFnSUNBZ0lITjBZWFJsTG1OdmNtdGxaRkpsY1hWbGMzUnpSbkpsWlNBOUlHaHZiR1JsY2k1dVpYaDBPMXh1SUNBZ0lDQWdhRzlzWkdWeUxtNWxlSFFnUFNCdWRXeHNPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCemRHRjBaUzVqYjNKclpXUlNaWEYxWlhOMGMwWnlaV1VnUFNCdVpYY2dRMjl5YTJWa1VtVnhkV1Z6ZENoemRHRjBaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJsTG1KMVptWmxjbVZrVW1WeGRXVnpkRU52ZFc1MElEMGdNRHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCVGJHOTNJR05oYzJVc0lIZHlhWFJsSUdOb2RXNXJjeUJ2Ym1VdFlua3RiMjVsWEc0Z0lDQWdkMmhwYkdVZ0tHVnVkSEo1S1NCN1hHNGdJQ0FnSUNCMllYSWdZMmgxYm1zZ1BTQmxiblJ5ZVM1amFIVnVhenRjYmlBZ0lDQWdJSFpoY2lCbGJtTnZaR2x1WnlBOUlHVnVkSEo1TG1WdVkyOWthVzVuTzF4dUlDQWdJQ0FnZG1GeUlHTmlJRDBnWlc1MGNua3VZMkZzYkdKaFkyczdYRzRnSUNBZ0lDQjJZWElnYkdWdUlEMGdjM1JoZEdVdWIySnFaV04wVFc5a1pTQS9JREVnT2lCamFIVnVheTVzWlc1bmRHZzdYRzVjYmlBZ0lDQWdJR1J2VjNKcGRHVW9jM1J5WldGdExDQnpkR0YwWlN3Z1ptRnNjMlVzSUd4bGJpd2dZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWs3WEc0Z0lDQWdJQ0JsYm5SeWVTQTlJR1Z1ZEhKNUxtNWxlSFE3WEc0Z0lDQWdJQ0J6ZEdGMFpTNWlkV1ptWlhKbFpGSmxjWFZsYzNSRGIzVnVkQzB0TzF4dUlDQWdJQ0FnTHk4Z2FXWWdkMlVnWkdsa2JpZDBJR05oYkd3Z2RHaGxJRzl1ZDNKcGRHVWdhVzF0WldScFlYUmxiSGtzSUhSb1pXNWNiaUFnSUNBZ0lDOHZJR2wwSUcxbFlXNXpJSFJvWVhRZ2QyVWdibVZsWkNCMGJ5QjNZV2wwSUhWdWRHbHNJR2wwSUdSdlpYTXVYRzRnSUNBZ0lDQXZMeUJoYkhOdkxDQjBhR0YwSUcxbFlXNXpJSFJvWVhRZ2RHaGxJR05vZFc1cklHRnVaQ0JqWWlCaGNtVWdZM1Z5Y21WdWRHeDVYRzRnSUNBZ0lDQXZMeUJpWldsdVp5QndjbTlqWlhOelpXUXNJSE52SUcxdmRtVWdkR2hsSUdKMVptWmxjaUJqYjNWdWRHVnlJSEJoYzNRZ2RHaGxiUzVjYmlBZ0lDQWdJR2xtSUNoemRHRjBaUzUzY21sMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsYm5SeWVTQTlQVDBnYm5Wc2JDa2djM1JoZEdVdWJHRnpkRUoxWm1abGNtVmtVbVZ4ZFdWemRDQTlJRzUxYkd3N1hHNGdJSDFjYmx4dUlDQnpkR0YwWlM1aWRXWm1aWEpsWkZKbGNYVmxjM1FnUFNCbGJuUnllVHRjYmlBZ2MzUmhkR1V1WW5WbVptVnlVSEp2WTJWemMybHVaeUE5SUdaaGJITmxPMXh1ZlZ4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbElEMGdablZ1WTNScGIyNGdLR05vZFc1ckxDQmxibU52WkdsdVp5d2dZMklwSUh0Y2JpQWdZMklvYm1WM0lFVnljbTl5S0NkZmQzSnBkR1VvS1NCcGN5QnViM1FnYVcxd2JHVnRaVzUwWldRbktTazdYRzU5TzF4dVhHNVhjbWwwWVdKc1pTNXdjbTkwYjNSNWNHVXVYM2R5YVhSbGRpQTlJRzUxYkd3N1hHNWNibGR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaUzVsYm1RZ1BTQm1kVzVqZEdsdmJpQW9ZMmgxYm1zc0lHVnVZMjlrYVc1bkxDQmpZaWtnZTF4dUlDQjJZWElnYzNSaGRHVWdQU0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTzF4dVhHNGdJR2xtSUNoMGVYQmxiMllnWTJoMWJtc2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCallpQTlJR05vZFc1ck8xeHVJQ0FnSUdOb2RXNXJJRDBnYm5Wc2JEdGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHVnVZMjlrYVc1bklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTJJZ1BTQmxibU52WkdsdVp6dGNiaUFnSUNCbGJtTnZaR2x1WnlBOUlHNTFiR3c3WEc0Z0lIMWNibHh1SUNCcFppQW9ZMmgxYm1zZ0lUMDlJRzUxYkd3Z0ppWWdZMmgxYm1zZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZEdocGN5NTNjbWwwWlNoamFIVnVheXdnWlc1amIyUnBibWNwTzF4dVhHNGdJQzh2SUM1bGJtUW9LU0JtZFd4c2VTQjFibU52Y210elhHNGdJR2xtSUNoemRHRjBaUzVqYjNKclpXUXBJSHRjYmlBZ0lDQnpkR0YwWlM1amIzSnJaV1FnUFNBeE8xeHVJQ0FnSUhSb2FYTXVkVzVqYjNKcktDazdYRzRnSUgxY2JseHVJQ0F2THlCcFoyNXZjbVVnZFc1dVpXTmxjM05oY25rZ1pXNWtLQ2tnWTJGc2JITXVYRzRnSUdsbUlDZ2hjM1JoZEdVdVpXNWthVzVuSUNZbUlDRnpkR0YwWlM1bWFXNXBjMmhsWkNrZ1pXNWtWM0pwZEdGaWJHVW9kR2hwY3l3Z2MzUmhkR1VzSUdOaUtUdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlHNWxaV1JHYVc1cGMyZ29jM1JoZEdVcElIdGNiaUFnY21WMGRYSnVJSE4wWVhSbExtVnVaR2x1WnlBbUppQnpkR0YwWlM1c1pXNW5kR2dnUFQwOUlEQWdKaVlnYzNSaGRHVXVZblZtWm1WeVpXUlNaWEYxWlhOMElEMDlQU0J1ZFd4c0lDWW1JQ0Z6ZEdGMFpTNW1hVzVwYzJobFpDQW1KaUFoYzNSaGRHVXVkM0pwZEdsdVp6dGNibjFjYm1aMWJtTjBhVzl1SUdOaGJHeEdhVzVoYkNoemRISmxZVzBzSUhOMFlYUmxLU0I3WEc0Z0lITjBjbVZoYlM1ZlptbHVZV3dvWm5WdVkzUnBiMjRnS0dWeWNpa2dlMXh1SUNBZ0lITjBZWFJsTG5CbGJtUnBibWRqWWkwdE8xeHVJQ0FnSUdsbUlDaGxjbklwSUh0Y2JpQWdJQ0FnSUhOMGNtVmhiUzVsYldsMEtDZGxjbkp2Y2ljc0lHVnljaWs3WEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJsTG5CeVpXWnBibWx6YUdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0J6ZEhKbFlXMHVaVzFwZENnbmNISmxabWx1YVhOb0p5azdYRzRnSUNBZ1ptbHVhWE5vVFdGNVltVW9jM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJSDBwTzF4dWZWeHVablZ1WTNScGIyNGdjSEpsWm1sdWFYTm9LSE4wY21WaGJTd2djM1JoZEdVcElIdGNiaUFnYVdZZ0tDRnpkR0YwWlM1d2NtVm1hVzVwYzJobFpDQW1KaUFoYzNSaGRHVXVabWx1WVd4RFlXeHNaV1FwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhOMGNtVmhiUzVmWm1sdVlXd2dQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lITjBZWFJsTG5CbGJtUnBibWRqWWlzck8xeHVJQ0FnSUNBZ2MzUmhkR1V1Wm1sdVlXeERZV3hzWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY0c1aExtNWxlSFJVYVdOcktHTmhiR3hHYVc1aGJDd2djM1J5WldGdExDQnpkR0YwWlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSE4wWVhSbExuQnlaV1pwYm1semFHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lITjBjbVZoYlM1bGJXbDBLQ2R3Y21WbWFXNXBjMmduS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1ptbHVhWE5vVFdGNVltVW9jM1J5WldGdExDQnpkR0YwWlNrZ2UxeHVJQ0IyWVhJZ2JtVmxaQ0E5SUc1bFpXUkdhVzVwYzJnb2MzUmhkR1VwTzF4dUlDQnBaaUFvYm1WbFpDa2dlMXh1SUNBZ0lIQnlaV1pwYm1semFDaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdJQ0JwWmlBb2MzUmhkR1V1Y0dWdVpHbHVaMk5pSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J6ZEdGMFpTNW1hVzVwYzJobFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCemRISmxZVzB1WlcxcGRDZ25abWx1YVhOb0p5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpXVmtPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmxibVJYY21sMFlXSnNaU2h6ZEhKbFlXMHNJSE4wWVhSbExDQmpZaWtnZTF4dUlDQnpkR0YwWlM1bGJtUnBibWNnUFNCMGNuVmxPMXh1SUNCbWFXNXBjMmhOWVhsaVpTaHpkSEpsWVcwc0lITjBZWFJsS1R0Y2JpQWdhV1lnS0dOaUtTQjdYRzRnSUNBZ2FXWWdLSE4wWVhSbExtWnBibWx6YUdWa0tTQndibUV1Ym1WNGRGUnBZMnNvWTJJcE8yVnNjMlVnYzNSeVpXRnRMbTl1WTJVb0oyWnBibWx6YUNjc0lHTmlLVHRjYmlBZ2ZWeHVJQ0J6ZEdGMFpTNWxibVJsWkNBOUlIUnlkV1U3WEc0Z0lITjBjbVZoYlM1M2NtbDBZV0pzWlNBOUlHWmhiSE5sTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ2YmtOdmNtdGxaRVpwYm1semFDaGpiM0pyVW1WeExDQnpkR0YwWlN3Z1pYSnlLU0I3WEc0Z0lIWmhjaUJsYm5SeWVTQTlJR052Y210U1pYRXVaVzUwY25rN1hHNGdJR052Y210U1pYRXVaVzUwY25rZ1BTQnVkV3hzTzF4dUlDQjNhR2xzWlNBb1pXNTBjbmtwSUh0Y2JpQWdJQ0IyWVhJZ1kySWdQU0JsYm5SeWVTNWpZV3hzWW1GamF6dGNiaUFnSUNCemRHRjBaUzV3Wlc1a2FXNW5ZMkl0TFR0Y2JpQWdJQ0JqWWlobGNuSXBPMXh1SUNBZ0lHVnVkSEo1SUQwZ1pXNTBjbmt1Ym1WNGREdGNiaUFnZlZ4dUlDQnBaaUFvYzNSaGRHVXVZMjl5YTJWa1VtVnhkV1Z6ZEhOR2NtVmxLU0I3WEc0Z0lDQWdjM1JoZEdVdVkyOXlhMlZrVW1WeGRXVnpkSE5HY21WbExtNWxlSFFnUFNCamIzSnJVbVZ4TzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhOMFlYUmxMbU52Y210bFpGSmxjWFZsYzNSelJuSmxaU0E5SUdOdmNtdFNaWEU3WEc0Z0lIMWNibjFjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRmR5YVhSaFlteGxMbkJ5YjNSdmRIbHdaU3dnSjJSbGMzUnliM2xsWkNjc0lIdGNiaUFnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1E3WEc0Z0lIMHNYRzRnSUhObGREb2dablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0x5OGdkMlVnYVdkdWIzSmxJSFJvWlNCMllXeDFaU0JwWmlCMGFHVWdjM1J5WldGdFhHNGdJQ0FnTHk4Z2FHRnpJRzV2ZENCaVpXVnVJR2x1YVhScFlXeHBlbVZrSUhsbGRGeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR0poWTJ0M1lYSmtJR052YlhCaGRHbGlhV3hwZEhrc0lIUm9aU0IxYzJWeUlHbHpJR1Y0Y0d4cFkybDBiSGxjYmlBZ0lDQXZMeUJ0WVc1aFoybHVaeUJrWlhOMGNtOTVaV1JjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUhaaGJIVmxPMXh1SUNCOVhHNTlLVHRjYmx4dVYzSnBkR0ZpYkdVdWNISnZkRzkwZVhCbExtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzVrWlhOMGNtOTVPMXh1VjNKcGRHRmliR1V1Y0hKdmRHOTBlWEJsTGw5MWJtUmxjM1J5YjNrZ1BTQmtaWE4wY205NVNXMXdiQzUxYm1SbGMzUnliM2s3WEc1WGNtbDBZV0pzWlM1d2NtOTBiM1I1Y0dVdVgyUmxjM1J5YjNrZ1BTQm1kVzVqZEdsdmJpQW9aWEp5TENCallpa2dlMXh1SUNCMGFHbHpMbVZ1WkNncE8xeHVJQ0JqWWlobGNuSXBPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtWjFibU4wYVc5dUlGOWpiR0Z6YzBOaGJHeERhR1ZqYXlocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHNnYVdZZ0tDRW9hVzV6ZEdGdVkyVWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrcElIc2dkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0JqWVd4c0lHRWdZMnhoYzNNZ1lYTWdZU0JtZFc1amRHbHZibHdpS1RzZ2ZTQjlYRzVjYm5aaGNpQkNkV1ptWlhJZ1BTQnlaWEYxYVhKbEtDZHpZV1psTFdKMVptWmxjaWNwTGtKMVptWmxjanRjYm5aaGNpQjFkR2xzSUQwZ2NtVnhkV2x5WlNnbmRYUnBiQ2NwTzF4dVhHNW1kVzVqZEdsdmJpQmpiM0I1UW5WbVptVnlLSE55WXl3Z2RHRnlaMlYwTENCdlptWnpaWFFwSUh0Y2JpQWdjM0pqTG1OdmNIa29kR0Z5WjJWMExDQnZabVp6WlhRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnWm5WdVkzUnBiMjRnUW5WbVptVnlUR2x6ZENncElIdGNiaUFnSUNCZlkyeGhjM05EWVd4c1EyaGxZMnNvZEdocGN5d2dRblZtWm1WeVRHbHpkQ2s3WEc1Y2JpQWdJQ0IwYUdsekxtaGxZV1FnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11ZEdGcGJDQTlJRzUxYkd3N1hHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQXdPMXh1SUNCOVhHNWNiaUFnUW5WbVptVnlUR2x6ZEM1d2NtOTBiM1I1Y0dVdWNIVnphQ0E5SUdaMWJtTjBhVzl1SUhCMWMyZ29kaWtnZTF4dUlDQWdJSFpoY2lCbGJuUnllU0E5SUhzZ1pHRjBZVG9nZGl3Z2JtVjRkRG9nYm5Wc2JDQjlPMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBK0lEQXBJSFJvYVhNdWRHRnBiQzV1WlhoMElEMGdaVzUwY25rN1pXeHpaU0IwYUdsekxtaGxZV1FnUFNCbGJuUnllVHRjYmlBZ0lDQjBhR2x6TG5SaGFXd2dQU0JsYm5SeWVUdGNiaUFnSUNBckszUm9hWE11YkdWdVozUm9PMXh1SUNCOU8xeHVYRzRnSUVKMVptWmxja3hwYzNRdWNISnZkRzkwZVhCbExuVnVjMmhwWm5RZ1BTQm1kVzVqZEdsdmJpQjFibk5vYVdaMEtIWXBJSHRjYmlBZ0lDQjJZWElnWlc1MGNua2dQU0I3SUdSaGRHRTZJSFlzSUc1bGVIUTZJSFJvYVhNdWFHVmhaQ0I5TzF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTUNrZ2RHaHBjeTUwWVdsc0lEMGdaVzUwY25rN1hHNGdJQ0FnZEdocGN5NW9aV0ZrSUQwZ1pXNTBjbms3WEc0Z0lDQWdLeXQwYUdsekxteGxibWQwYUR0Y2JpQWdmVHRjYmx4dUlDQkNkV1ptWlhKTWFYTjBMbkJ5YjNSdmRIbHdaUzV6YUdsbWRDQTlJR1oxYm1OMGFXOXVJSE5vYVdaMEtDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNQ2tnY21WMGRYSnVPMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQjBhR2x6TG1obFlXUXVaR0YwWVR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURFcElIUm9hWE11YUdWaFpDQTlJSFJvYVhNdWRHRnBiQ0E5SUc1MWJHdzdaV3h6WlNCMGFHbHpMbWhsWVdRZ1BTQjBhR2x6TG1obFlXUXVibVY0ZER0Y2JpQWdJQ0F0TFhSb2FYTXViR1Z1WjNSb08xeHVJQ0FnSUhKbGRIVnliaUJ5WlhRN1hHNGdJSDA3WEc1Y2JpQWdRblZtWm1WeVRHbHpkQzV3Y205MGIzUjVjR1V1WTJ4bFlYSWdQU0JtZFc1amRHbHZiaUJqYkdWaGNpZ3BJSHRjYmlBZ0lDQjBhR2x6TG1obFlXUWdQU0IwYUdsekxuUmhhV3dnUFNCdWRXeHNPMXh1SUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnTUR0Y2JpQWdmVHRjYmx4dUlDQkNkV1ptWlhKTWFYTjBMbkJ5YjNSdmRIbHdaUzVxYjJsdUlEMGdablZ1WTNScGIyNGdhbTlwYmloektTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdkbUZ5SUhBZ1BTQjBhR2x6TG1obFlXUTdYRzRnSUNBZ2RtRnlJSEpsZENBOUlDY25JQ3NnY0M1a1lYUmhPMXh1SUNBZ0lIZG9hV3hsSUNod0lEMGdjQzV1WlhoMEtTQjdYRzRnSUNBZ0lDQnlaWFFnS3owZ2N5QXJJSEF1WkdGMFlUdGNiaUFnSUNCOWNtVjBkWEp1SUhKbGREdGNiaUFnZlR0Y2JseHVJQ0JDZFdabVpYSk1hWE4wTG5CeWIzUnZkSGx3WlM1amIyNWpZWFFnUFNCbWRXNWpkR2x2YmlCamIyNWpZWFFvYmlrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01Da2djbVYwZFhKdUlFSjFabVpsY2k1aGJHeHZZeWd3S1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURFcElISmxkSFZ5YmlCMGFHbHpMbWhsWVdRdVpHRjBZVHRjYmlBZ0lDQjJZWElnY21WMElEMGdRblZtWm1WeUxtRnNiRzlqVlc1ellXWmxLRzRnUGo0K0lEQXBPMXh1SUNBZ0lIWmhjaUJ3SUQwZ2RHaHBjeTVvWldGa08xeHVJQ0FnSUhaaGNpQnBJRDBnTUR0Y2JpQWdJQ0IzYUdsc1pTQW9jQ2tnZTF4dUlDQWdJQ0FnWTI5d2VVSjFabVpsY2lod0xtUmhkR0VzSUhKbGRDd2dhU2s3WEc0Z0lDQWdJQ0JwSUNzOUlIQXVaR0YwWVM1c1pXNW5kR2c3WEc0Z0lDQWdJQ0J3SUQwZ2NDNXVaWGgwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2NtVjBPMXh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUJDZFdabVpYSk1hWE4wTzF4dWZTZ3BPMXh1WEc1cFppQW9kWFJwYkNBbUppQjFkR2xzTG1sdWMzQmxZM1FnSmlZZ2RYUnBiQzVwYm5Od1pXTjBMbU4xYzNSdmJTa2dlMXh1SUNCdGIyUjFiR1V1Wlhod2IzSjBjeTV3Y205MGIzUjVjR1ZiZFhScGJDNXBibk53WldOMExtTjFjM1J2YlYwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUc5aWFpQTlJSFYwYVd3dWFXNXpjR1ZqZENoN0lHeGxibWQwYURvZ2RHaHBjeTVzWlc1bmRHZ2dmU2s3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTI5dWMzUnlkV04wYjNJdWJtRnRaU0FySUNjZ0p5QXJJRzlpYWp0Y2JpQWdmVHRjYm4waUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpOHFQSEpsY0d4aFkyVnRaVzUwUGlvdlhHNWNiblpoY2lCd2JtRWdQU0J5WlhGMWFYSmxLQ2R3Y205alpYTnpMVzVsZUhScFkyc3RZWEpuY3ljcE8xeHVMeW84TDNKbGNHeGhZMlZ0Wlc1MFBpb3ZYRzVjYmk4dklIVnVaRzlqZFcxbGJuUmxaQ0JqWWlncElFRlFTU3dnYm1WbFpHVmtJR1p2Y2lCamIzSmxMQ0J1YjNRZ1ptOXlJSEIxWW14cFl5QkJVRWxjYm1aMWJtTjBhVzl1SUdSbGMzUnliM2tvWlhKeUxDQmpZaWtnZTF4dUlDQjJZWElnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUhaaGNpQnlaV0ZrWVdKc1pVUmxjM1J5YjNsbFpDQTlJSFJvYVhNdVgzSmxZV1JoWW14bFUzUmhkR1VnSmlZZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUTdYRzRnSUhaaGNpQjNjbWwwWVdKc1pVUmxjM1J5YjNsbFpDQTlJSFJvYVhNdVgzZHlhWFJoWW14bFUzUmhkR1VnSmlZZ2RHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWtaWE4wY205NVpXUTdYRzVjYmlBZ2FXWWdLSEpsWVdSaFlteGxSR1Z6ZEhKdmVXVmtJSHg4SUhkeWFYUmhZbXhsUkdWemRISnZlV1ZrS1NCN1hHNGdJQ0FnYVdZZ0tHTmlLU0I3WEc0Z0lDQWdJQ0JqWWlobGNuSXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aWEp5SUNZbUlDZ2hkR2hwY3k1ZmQzSnBkR0ZpYkdWVGRHRjBaU0I4ZkNBaGRHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTNWxjbkp2Y2tWdGFYUjBaV1FwS1NCN1hHNGdJQ0FnSUNCd2JtRXVibVY0ZEZScFkyc29aVzFwZEVWeWNtOXlUbFFzSUhSb2FYTXNJR1Z5Y2lrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5OGdkMlVnYzJWMElHUmxjM1J5YjNsbFpDQjBieUIwY25WbElHSmxabTl5WlNCbWFYSnBibWNnWlhKeWIzSWdZMkZzYkdKaFkydHpJR2x1SUc5eVpHVnlYRzRnSUM4dklIUnZJRzFoYTJVZ2FYUWdjbVV0Wlc1MGNtRnVZMlVnYzJGbVpTQnBiaUJqWVhObElHUmxjM1J5YjNrb0tTQnBjeUJqWVd4c1pXUWdkMmwwYUdsdUlHTmhiR3hpWVdOcmMxeHVYRzRnSUdsbUlDaDBhR2x6TGw5eVpXRmtZV0pzWlZOMFlYUmxLU0I3WEc0Z0lDQWdkR2hwY3k1ZmNtVmhaR0ZpYkdWVGRHRjBaUzVrWlhOMGNtOTVaV1FnUFNCMGNuVmxPMXh1SUNCOVhHNWNiaUFnTHk4Z2FXWWdkR2hwY3lCcGN5QmhJR1IxY0d4bGVDQnpkSEpsWVcwZ2JXRnlheUIwYUdVZ2QzSnBkR0ZpYkdVZ2NHRnlkQ0JoY3lCa1pYTjBjbTk1WldRZ1lYTWdkMlZzYkZ4dUlDQnBaaUFvZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlNrZ2UxeHVJQ0FnSUhSb2FYTXVYM2R5YVhSaFlteGxVM1JoZEdVdVpHVnpkSEp2ZVdWa0lEMGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lIUm9hWE11WDJSbGMzUnliM2tvWlhKeUlIeDhJRzUxYkd3c0lHWjFibU4wYVc5dUlDaGxjbklwSUh0Y2JpQWdJQ0JwWmlBb0lXTmlJQ1ltSUdWeWNpa2dlMXh1SUNBZ0lDQWdjRzVoTG01bGVIUlVhV05yS0dWdGFYUkZjbkp2Y2s1VUxDQmZkR2hwY3l3Z1pYSnlLVHRjYmlBZ0lDQWdJR2xtSUNoZmRHaHBjeTVmZDNKcGRHRmliR1ZUZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZkM0pwZEdGaWJHVlRkR0YwWlM1bGNuSnZja1Z0YVhSMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kySXBJSHRjYmlBZ0lDQWdJR05pS0dWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZFc1a1pYTjBjbTk1S0NrZ2UxeHVJQ0JwWmlBb2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTa2dlMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaR1Z6ZEhKdmVXVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ2RHaHBjeTVmY21WaFpHRmliR1ZUZEdGMFpTNXlaV0ZrYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnZEdocGN5NWZjbVZoWkdGaWJHVlRkR0YwWlM1bGJtUmxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNKbFlXUmhZbXhsVTNSaGRHVXVaVzVrUlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXBJSHRjYmlBZ0lDQjBhR2x6TGw5M2NtbDBZV0pzWlZOMFlYUmxMbVJsYzNSeWIzbGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVaVzVrWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0IwYUdsekxsOTNjbWwwWVdKc1pWTjBZWFJsTG1WdVpHbHVaeUE5SUdaaGJITmxPMXh1SUNBZ0lIUm9hWE11WDNkeWFYUmhZbXhsVTNSaGRHVXVabWx1YVhOb1pXUWdQU0JtWVd4elpUdGNiaUFnSUNCMGFHbHpMbDkzY21sMFlXSnNaVk4wWVhSbExtVnljbTl5UlcxcGRIUmxaQ0E5SUdaaGJITmxPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdWdGFYUkZjbkp2Y2s1VUtITmxiR1lzSUdWeWNpa2dlMXh1SUNCelpXeG1MbVZ0YVhRb0oyVnljbTl5Snl3Z1pYSnlLVHRjYm4xY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUdSbGMzUnliM2s2SUdSbGMzUnliM2tzWEc0Z0lIVnVaR1Z6ZEhKdmVUb2dkVzVrWlhOMGNtOTVYRzU5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnblpYWmxiblJ6SnlrdVJYWmxiblJGYldsMGRHVnlPMXh1SWl3aVpYaHdiM0owY3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXNhV0l2WDNOMGNtVmhiVjl5WldGa1lXSnNaUzVxY3ljcE8xeHVaWGh3YjNKMGN5NVRkSEpsWVcwZ1BTQmxlSEJ2Y25Sek8xeHVaWGh3YjNKMGN5NVNaV0ZrWVdKc1pTQTlJR1Y0Y0c5eWRITTdYRzVsZUhCdmNuUnpMbGR5YVhSaFlteGxJRDBnY21WeGRXbHlaU2duTGk5c2FXSXZYM04wY21WaGJWOTNjbWwwWVdKc1pTNXFjeWNwTzF4dVpYaHdiM0owY3k1RWRYQnNaWGdnUFNCeVpYRjFhWEpsS0NjdUwyeHBZaTlmYzNSeVpXRnRYMlIxY0d4bGVDNXFjeWNwTzF4dVpYaHdiM0owY3k1VWNtRnVjMlp2Y20wZ1BTQnlaWEYxYVhKbEtDY3VMMnhwWWk5ZmMzUnlaV0Z0WDNSeVlXNXpabTl5YlM1cWN5Y3BPMXh1Wlhod2IzSjBjeTVRWVhOelZHaHliM1ZuYUNBOUlISmxjWFZwY21Vb0p5NHZiR2xpTDE5emRISmxZVzFmY0dGemMzUm9jbTkxWjJndWFuTW5LVHRjYmlJc0lpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZaR1V2Ym04dFpHVndjbVZqWVhSbFpDMWhjR2tnS2k5Y2JuWmhjaUJpZFdabVpYSWdQU0J5WlhGMWFYSmxLQ2RpZFdabVpYSW5LVnh1ZG1GeUlFSjFabVpsY2lBOUlHSjFabVpsY2k1Q2RXWm1aWEpjYmx4dUx5OGdZV3gwWlhKdVlYUnBkbVVnZEc4Z2RYTnBibWNnVDJKcVpXTjBMbXRsZVhNZ1ptOXlJRzlzWkNCaWNtOTNjMlZ5YzF4dVpuVnVZM1JwYjI0Z1kyOXdlVkJ5YjNCeklDaHpjbU1zSUdSemRDa2dlMXh1SUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYzNKaktTQjdYRzRnSUNBZ1pITjBXMnRsZVYwZ1BTQnpjbU5iYTJWNVhWeHVJQ0I5WEc1OVhHNXBaaUFvUW5WbVptVnlMbVp5YjIwZ0ppWWdRblZtWm1WeUxtRnNiRzlqSUNZbUlFSjFabVpsY2k1aGJHeHZZMVZ1YzJGbVpTQW1KaUJDZFdabVpYSXVZV3hzYjJOVmJuTmhabVZUYkc5M0tTQjdYRzRnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWW5WbVptVnlYRzU5SUdWc2MyVWdlMXh1SUNBdkx5QkRiM0I1SUhCeWIzQmxjblJwWlhNZ1puSnZiU0J5WlhGMWFYSmxLQ2RpZFdabVpYSW5LVnh1SUNCamIzQjVVSEp2Y0hNb1luVm1abVZ5TENCbGVIQnZjblJ6S1Z4dUlDQmxlSEJ2Y25SekxrSjFabVpsY2lBOUlGTmhabVZDZFdabVpYSmNibjFjYmx4dVpuVnVZM1JwYjI0Z1UyRm1aVUoxWm1abGNpQW9ZWEpuTENCbGJtTnZaR2x1WjA5eVQyWm1jMlYwTENCc1pXNW5kR2dwSUh0Y2JpQWdjbVYwZFhKdUlFSjFabVpsY2loaGNtY3NJR1Z1WTI5a2FXNW5UM0pQWm1aelpYUXNJR3hsYm1kMGFDbGNibjFjYmx4dUx5OGdRMjl3ZVNCemRHRjBhV01nYldWMGFHOWtjeUJtY205dElFSjFabVpsY2x4dVkyOXdlVkJ5YjNCektFSjFabVpsY2l3Z1UyRm1aVUoxWm1abGNpbGNibHh1VTJGbVpVSjFabVpsY2k1bWNtOXRJRDBnWm5WdVkzUnBiMjRnS0dGeVp5d2daVzVqYjJScGJtZFBjazltWm5ObGRDd2diR1Z1WjNSb0tTQjdYRzRnSUdsbUlDaDBlWEJsYjJZZ1lYSm5JRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owRnlaM1Z0Wlc1MElHMTFjM1FnYm05MElHSmxJR0VnYm5WdFltVnlKeWxjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdRblZtWm1WeUtHRnlaeXdnWlc1amIyUnBibWRQY2s5bVpuTmxkQ3dnYkdWdVozUm9LVnh1ZlZ4dVhHNVRZV1psUW5WbVptVnlMbUZzYkc5aklEMGdablZ1WTNScGIyNGdLSE5wZW1Vc0lHWnBiR3dzSUdWdVkyOWthVzVuS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYzJsNlpTQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkQmNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ2JuVnRZbVZ5SnlsY2JpQWdmVnh1SUNCMllYSWdZblZtSUQwZ1FuVm1abVZ5S0hOcGVtVXBYRzRnSUdsbUlDaG1hV3hzSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1Z1WTI5a2FXNW5JRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1luVm1MbVpwYkd3b1ptbHNiQ3dnWlc1amIyUnBibWNwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHSjFaaTVtYVd4c0tHWnBiR3dwWEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR0oxWmk1bWFXeHNLREFwWEc0Z0lIMWNiaUFnY21WMGRYSnVJR0oxWmx4dWZWeHVYRzVUWVdabFFuVm1abVZ5TG1Gc2JHOWpWVzV6WVdabElEMGdablZ1WTNScGIyNGdLSE5wZW1VcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCemFYcGxJQ0U5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owRnlaM1Z0Wlc1MElHMTFjM1FnWW1VZ1lTQnVkVzFpWlhJbktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCQ2RXWm1aWElvYzJsNlpTbGNibjFjYmx4dVUyRm1aVUoxWm1abGNpNWhiR3h2WTFWdWMyRm1aVk5zYjNjZ1BTQm1kVzVqZEdsdmJpQW9jMmw2WlNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUhOcGVtVWdJVDA5SUNkdWRXMWlaWEluS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblFYSm5kVzFsYm5RZ2JYVnpkQ0JpWlNCaElHNTFiV0psY2ljcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdKMVptWmxjaTVUYkc5M1FuVm1abVZ5S0hOcGVtVXBYRzU5WEc0aUxDSW9ablZ1WTNScGIyNGdLR2RzYjJKaGJDd2dkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNiaUFnSUNCcFppQW9aMnh2WW1Gc0xuTmxkRWx0YldWa2FXRjBaU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUc1bGVIUklZVzVrYkdVZ1BTQXhPeUF2THlCVGNHVmpJSE5oZVhNZ1ozSmxZWFJsY2lCMGFHRnVJSHBsY205Y2JpQWdJQ0IyWVhJZ2RHRnphM05DZVVoaGJtUnNaU0E5SUh0OU8xeHVJQ0FnSUhaaGNpQmpkWEp5Wlc1MGJIbFNkVzV1YVc1blFWUmhjMnNnUFNCbVlXeHpaVHRjYmlBZ0lDQjJZWElnWkc5aklEMGdaMnh2WW1Gc0xtUnZZM1Z0Wlc1ME8xeHVJQ0FnSUhaaGNpQnlaV2RwYzNSbGNrbHRiV1ZrYVdGMFpUdGNibHh1SUNBZ0lHWjFibU4wYVc5dUlITmxkRWx0YldWa2FXRjBaU2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnTHk4Z1EyRnNiR0poWTJzZ1kyRnVJR1ZwZEdobGNpQmlaU0JoSUdaMWJtTjBhVzl1SUc5eUlHRWdjM1J5YVc1blhHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTmhiR3hpWVdOcklDRTlQU0JjSW1aMWJtTjBhVzl1WENJcElIdGNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkyc2dQU0J1WlhjZ1JuVnVZM1JwYjI0b1hDSmNJaUFySUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklFTnZjSGtnWm5WdVkzUnBiMjRnWVhKbmRXMWxiblJ6WEc0Z0lDQWdJQ0IyWVhJZ1lYSm5jeUE5SUc1bGR5QkJjbkpoZVNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUMwZ01TazdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5WjNNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCaGNtZHpXMmxkSUQwZ1lYSm5kVzFsYm5Selcya2dLeUF4WFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklGTjBiM0psSUdGdVpDQnlaV2RwYzNSbGNpQjBhR1VnZEdGemExeHVJQ0FnSUNBZ2RtRnlJSFJoYzJzZ1BTQjdJR05oYkd4aVlXTnJPaUJqWVd4c1ltRmpheXdnWVhKbmN6b2dZWEpuY3lCOU8xeHVJQ0FnSUNBZ2RHRnphM05DZVVoaGJtUnNaVnR1WlhoMFNHRnVaR3hsWFNBOUlIUmhjMnM3WEc0Z0lDQWdJQ0J5WldkcGMzUmxja2x0YldWa2FXRjBaU2h1WlhoMFNHRnVaR3hsS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ1WlhoMFNHRnVaR3hsS3lzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnWTJ4bFlYSkpiVzFsWkdsaGRHVW9hR0Z1Wkd4bEtTQjdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQjBZWE5yYzBKNVNHRnVaR3hsVzJoaGJtUnNaVjA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdjblZ1S0hSaGMyc3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHTmhiR3hpWVdOcklEMGdkR0Z6YXk1allXeHNZbUZqYXp0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0Z5WjNNZ1BTQjBZWE5yTG1GeVozTTdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9ZWEpuY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0F3T2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJREU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5aGhjbWR6V3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElESTZYRzRnSUNBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXloaGNtZHpXekJkTENCaGNtZHpXekZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQmpZWE5sSURNNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWhoY21keld6QmRMQ0JoY21keld6RmRMQ0JoY21keld6SmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc3VZWEJ3Ykhrb2RXNWtaV1pwYm1Wa0xDQmhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2NuVnVTV1pRY21WelpXNTBLR2hoYm1Sc1pTa2dlMXh1SUNBZ0lDQWdJQ0F2THlCR2NtOXRJSFJvWlNCemNHVmpPaUJjSWxkaGFYUWdkVzUwYVd3Z1lXNTVJR2x1ZG05allYUnBiMjV6SUc5bUlIUm9hWE1nWVd4bmIzSnBkR2h0SUhOMFlYSjBaV1FnWW1WbWIzSmxJSFJvYVhNZ2IyNWxJR2hoZG1VZ1kyOXRjR3hsZEdWa0xsd2lYRzRnSUNBZ0lDQWdJQzh2SUZOdklHbG1JSGRsSjNKbElHTjFjbkpsYm5Sc2VTQnlkVzV1YVc1bklHRWdkR0Z6YXl3Z2QyVW5iR3dnYm1WbFpDQjBieUJrWld4aGVTQjBhR2x6SUdsdWRtOWpZWFJwYjI0dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBiSGxTZFc1dWFXNW5RVlJoYzJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFUmxiR0Y1SUdKNUlHUnZhVzVuSUdFZ2MyVjBWR2x0Wlc5MWRDNGdjMlYwU1cxdFpXUnBZWFJsSUhkaGN5QjBjbWxsWkNCcGJuTjBaV0ZrTENCaWRYUWdhVzRnUm1seVpXWnZlQ0EzSUdsMElHZGxibVZ5WVhSbFpDQmhYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmNJblJ2YnlCdGRXTm9JSEpsWTNWeWMybHZibHdpSUdWeWNtOXlMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDaHlkVzVKWmxCeVpYTmxiblFzSURBc0lHaGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RHRnpheUE5SUhSaGMydHpRbmxJWVc1a2JHVmJhR0Z1Wkd4bFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBZWE5yS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEd4NVVuVnVibWx1WjBGVVlYTnJJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkVzRvZEdGemF5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JtYVc1aGJHeDVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGxZWEpKYlcxbFpHbGhkR1VvYUdGdVpHeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEd4NVVuVnVibWx1WjBGVVlYTnJJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z2FXNXpkR0ZzYkU1bGVIUlVhV05yU1cxd2JHVnRaVzUwWVhScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbFoybHpkR1Z5U1cxdFpXUnBZWFJsSUQwZ1puVnVZM1JwYjI0b2FHRnVaR3hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR1oxYm1OMGFXOXVJQ2dwSUhzZ2NuVnVTV1pRY21WelpXNTBLR2hoYm1Sc1pTazdJSDBwTzF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdOaGJsVnpaVkJ2YzNSTlpYTnpZV2RsS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2RHVnpkQ0JoWjJGcGJuTjBJR0JwYlhCdmNuUlRZM0pwY0hSellDQndjbVYyWlc1MGN5QjBhR2x6SUdsdGNHeGxiV1Z1ZEdGMGFXOXVJR1p5YjIwZ1ltVnBibWNnYVc1emRHRnNiR1ZrSUdsdWMybGtaU0JoSUhkbFlpQjNiM0pyWlhJc1hHNGdJQ0FnSUNBZ0lDOHZJSGRvWlhKbElHQm5iRzlpWVd3dWNHOXpkRTFsYzNOaFoyVmdJRzFsWVc1eklITnZiV1YwYUdsdVp5QmpiMjF3YkdWMFpXeDVJR1JwWm1abGNtVnVkQ0JoYm1RZ1kyRnVKM1FnWW1VZ2RYTmxaQ0JtYjNJZ2RHaHBjeUJ3ZFhKd2IzTmxMbHh1SUNBZ0lDQWdJQ0JwWmlBb1oyeHZZbUZzTG5CdmMzUk5aWE56WVdkbElDWW1JQ0ZuYkc5aVlXd3VhVzF3YjNKMFUyTnlhWEIwY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIQnZjM1JOWlhOellXZGxTWE5CYzNsdVkyaHliMjV2ZFhNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUc5c1pFOXVUV1Z6YzJGblpTQTlJR2RzYjJKaGJDNXZibTFsYzNOaFoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbmJHOWlZV3d1YjI1dFpYTnpZV2RsSUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlZKYzBGemVXNWphSEp2Ym05MWN5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RzYjJKaGJDNXdiM04wVFdWemMyRm5aU2hjSWx3aUxDQmNJaXBjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuYkc5aVlXd3ViMjV0WlhOellXZGxJRDBnYjJ4a1QyNU5aWE56WVdkbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ2YzNSTlpYTnpZV2RsU1hOQmMzbHVZMmh5YjI1dmRYTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQnBibk4wWVd4c1VHOXpkRTFsYzNOaFoyVkpiWEJzWlcxbGJuUmhkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdMeThnU1c1emRHRnNiSE1nWVc0Z1pYWmxiblFnYUdGdVpHeGxjaUJ2YmlCZ1oyeHZZbUZzWUNCbWIzSWdkR2hsSUdCdFpYTnpZV2RsWUNCbGRtVnVkRG9nYzJWbFhHNGdJQ0FnSUNBZ0lDOHZJQ29nYUhSMGNITTZMeTlrWlhabGJHOXdaWEl1Ylc5NmFXeHNZUzV2Y21jdlpXNHZSRTlOTDNkcGJtUnZkeTV3YjNOMFRXVnpjMkZuWlZ4dUlDQWdJQ0FnSUNBdkx5QXFJR2gwZEhBNkx5OTNkM2N1ZDJoaGRIZG5MbTl5Wnk5emNHVmpjeTkzWldJdFlYQndjeTlqZFhKeVpXNTBMWGR2Y21zdmJYVnNkR2x3WVdkbEwyTnZiVzF6TG1oMGJXd2pZM0p2YzNORWIyTjFiV1Z1ZEUxbGMzTmhaMlZ6WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJRzFsYzNOaFoyVlFjbVZtYVhnZ1BTQmNJbk5sZEVsdGJXVmthV0YwWlNSY0lpQXJJRTFoZEdndWNtRnVaRzl0S0NrZ0t5QmNJaVJjSWp0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzl1UjJ4dlltRnNUV1Z6YzJGblpTQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdWMyOTFjbU5sSUQwOVBTQm5iRzlpWVd3Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsYjJZZ1pYWmxiblF1WkdGMFlTQTlQVDBnWENKemRISnBibWRjSWlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwTG1SaGRHRXVhVzVrWlhoUFppaHRaWE56WVdkbFVISmxabWw0S1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJrbG1VSEpsYzJWdWRDZ3JaWFpsYm5RdVpHRjBZUzV6YkdsalpTaHRaWE56WVdkbFVISmxabWw0TG14bGJtZDBhQ2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2huYkc5aVlXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvWENKdFpYTnpZV2RsWENJc0lHOXVSMnh2WW1Gc1RXVnpjMkZuWlN3Z1ptRnNjMlVwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc0xtRjBkR0ZqYUVWMlpXNTBLRndpYjI1dFpYTnpZV2RsWENJc0lHOXVSMnh2WW1Gc1RXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WldkcGMzUmxja2x0YldWa2FXRjBaU0E5SUdaMWJtTjBhVzl1S0doaGJtUnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaMnh2WW1Gc0xuQnZjM1JOWlhOellXZGxLRzFsYzNOaFoyVlFjbVZtYVhnZ0t5Qm9ZVzVrYkdVc0lGd2lLbHdpS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCcGJuTjBZV3hzVFdWemMyRm5aVU5vWVc1dVpXeEpiWEJzWlcxbGJuUmhkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdOb1lXNXVaV3dnUFNCdVpYY2dUV1Z6YzJGblpVTm9ZVzV1Wld3b0tUdGNiaUFnSUNBZ0lDQWdZMmhoYm01bGJDNXdiM0owTVM1dmJtMWxjM05oWjJVZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHaGhibVJzWlNBOUlHVjJaVzUwTG1SaGRHRTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeWRXNUpabEJ5WlhObGJuUW9hR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCeVpXZHBjM1JsY2tsdGJXVmthV0YwWlNBOUlHWjFibU4wYVc5dUtHaGhibVJzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGJtNWxiQzV3YjNKME1pNXdiM04wVFdWemMyRm5aU2hvWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YzNSaGJHeFNaV0ZrZVZOMFlYUmxRMmhoYm1kbFNXMXdiR1Z0Wlc1MFlYUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJvZEcxc0lEMGdaRzlqTG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmlBZ0lDQWdJQ0FnY21WbmFYTjBaWEpKYlcxbFpHbGhkR1VnUFNCbWRXNWpkR2x2Ymlob1lXNWtiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVOeVpXRjBaU0JoSUR4elkzSnBjSFErSUdWc1pXMWxiblE3SUdsMGN5QnlaV0ZrZVhOMFlYUmxZMmhoYm1kbElHVjJaVzUwSUhkcGJHd2dZbVVnWm1seVpXUWdZWE41Ym1Ob2NtOXViM1Z6YkhrZ2IyNWpaU0JwZENCcGN5QnBibk5sY25SbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXNTBieUIwYUdVZ1pHOWpkVzFsYm5RdUlFUnZJSE52TENCMGFIVnpJSEYxWlhWcGJtY2dkWEFnZEdobElIUmhjMnN1SUZKbGJXVnRZbVZ5SUhSdklHTnNaV0Z1SUhWd0lHOXVZMlVnYVhRbmN5QmlaV1Z1SUdOaGJHeGxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WTNKcGNIUWdQU0JrYjJNdVkzSmxZWFJsUld4bGJXVnVkQ2hjSW5OamNtbHdkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qY21sd2RDNXZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuVnVTV1pRY21WelpXNTBLR2hoYm1Sc1pTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMk55YVhCMExtOXVjbVZoWkhsemRHRjBaV05vWVc1blpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FIUnRiQzV5WlcxdmRtVkRhR2xzWkNoelkzSnBjSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamNtbHdkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYUhSdGJDNWhjSEJsYm1SRGFHbHNaQ2h6WTNKcGNIUXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR2x1YzNSaGJHeFRaWFJVYVcxbGIzVjBTVzF3YkdWdFpXNTBZWFJwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsWjJsemRHVnlTVzF0WldScFlYUmxJRDBnWm5WdVkzUnBiMjRvYUdGdVpHeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLSEoxYmtsbVVISmxjMlZ1ZEN3Z01Dd2dhR0Z1Wkd4bEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJKWmlCemRYQndiM0owWldRc0lIZGxJSE5vYjNWc1pDQmhkSFJoWTJnZ2RHOGdkR2hsSUhCeWIzUnZkSGx3WlNCdlppQm5iRzlpWVd3c0lITnBibU5sSUhSb1lYUWdhWE1nZDJobGNtVWdjMlYwVkdsdFpXOTFkQ0JsZENCaGJDNGdiR2wyWlM1Y2JpQWdJQ0IyWVhJZ1lYUjBZV05vVkc4Z1BTQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllnSmlZZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LR2RzYjJKaGJDazdYRzRnSUNBZ1lYUjBZV05vVkc4Z1BTQmhkSFJoWTJoVWJ5QW1KaUJoZEhSaFkyaFVieTV6WlhSVWFXMWxiM1YwSUQ4Z1lYUjBZV05vVkc4Z09pQm5iRzlpWVd3N1hHNWNiaUFnSUNBdkx5QkViMjRuZENCblpYUWdabTl2YkdWa0lHSjVJR1V1Wnk0Z1luSnZkM05sY21sbWVTQmxiblpwY205dWJXVnVkSE11WEc0Z0lDQWdhV1lnS0h0OUxuUnZVM1J5YVc1bkxtTmhiR3dvWjJ4dlltRnNMbkJ5YjJObGMzTXBJRDA5UFNCY0lsdHZZbXBsWTNRZ2NISnZZMlZ6YzExY0lpa2dlMXh1SUNBZ0lDQWdJQ0F2THlCR2IzSWdUbTlrWlM1cWN5QmlaV1p2Y21VZ01DNDVYRzRnSUNBZ0lDQWdJR2x1YzNSaGJHeE9aWGgwVkdsamEwbHRjR3hsYldWdWRHRjBhVzl1S0NrN1hHNWNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHTmhibFZ6WlZCdmMzUk5aWE56WVdkbEtDa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JtOXlJRzV2YmkxSlJURXdJRzF2WkdWeWJpQmljbTkzYzJWeWMxeHVJQ0FnSUNBZ0lDQnBibk4wWVd4c1VHOXpkRTFsYzNOaFoyVkpiWEJzWlcxbGJuUmhkR2x2YmlncE8xeHVYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaG5iRzlpWVd3dVRXVnpjMkZuWlVOb1lXNXVaV3dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSbTl5SUhkbFlpQjNiM0pyWlhKekxDQjNhR1Z5WlNCemRYQndiM0owWldSY2JpQWdJQ0FnSUNBZ2FXNXpkR0ZzYkUxbGMzTmhaMlZEYUdGdWJtVnNTVzF3YkdWdFpXNTBZWFJwYjI0b0tUdGNibHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aRzlqSUNZbUlGd2liMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxYQ0lnYVc0Z1pHOWpMbU55WldGMFpVVnNaVzFsYm5Rb1hDSnpZM0pwY0hSY0lpa3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JtOXlJRWxGSURiaWdKTTRYRzRnSUNBZ0lDQWdJR2x1YzNSaGJHeFNaV0ZrZVZOMFlYUmxRMmhoYm1kbFNXMXdiR1Z0Wlc1MFlYUnBiMjRvS1R0Y2JseHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklFWnZjaUJ2YkdSbGNpQmljbTkzYzJWeWMxeHVJQ0FnSUNBZ0lDQnBibk4wWVd4c1UyVjBWR2x0Wlc5MWRFbHRjR3hsYldWdWRHRjBhVzl1S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWVhSMFlXTm9WRzh1YzJWMFNXMXRaV1JwWVhSbElEMGdjMlYwU1cxdFpXUnBZWFJsTzF4dUlDQWdJR0YwZEdGamFGUnZMbU5zWldGeVNXMXRaV1JwWVhSbElEMGdZMnhsWVhKSmJXMWxaR2xoZEdVN1hHNTlLSFI1Y0dWdlppQnpaV3htSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z2RIbHdaVzltSUdkc2IySmhiQ0E5UFQwZ1hDSjFibVJsWm1sdVpXUmNJaUEvSUhSb2FYTWdPaUJuYkc5aVlXd2dPaUJ6Wld4bUtTazdYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdTbTk1Wlc1MExDQkpibU11SUdGdVpDQnZkR2hsY2lCT2IyUmxJR052Ym5SeWFXSjFkRzl5Y3k1Y2JpOHZYRzR2THlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVZ4dUx5OGdZMjl3ZVNCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pWeHVMeThnWENKVGIyWjBkMkZ5WlZ3aUtTd2dkRzhnWkdWaGJDQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5YRzR2THlCM2FYUm9iM1YwSUd4cGJXbDBZWFJwYjI0Z2RHaGxJSEpwWjJoMGN5QjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NYRzR2THlCa2FYTjBjbWxpZFhSbExDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMFhHNHZMeUJ3WlhKemIyNXpJSFJ2SUhkb2IyMGdkR2hsSUZOdlpuUjNZWEpsSUdseklHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdWY2JpOHZJR1p2Ykd4dmQybHVaeUJqYjI1a2FYUnBiMjV6T2x4dUx5OWNiaTh2SUZSb1pTQmhZbTkyWlNCamIzQjVjbWxuYUhRZ2JtOTBhV05sSUdGdVpDQjBhR2x6SUhCbGNtMXBjM05wYjI0Z2JtOTBhV05sSUhOb1lXeHNJR0psSUdsdVkyeDFaR1ZrWEc0dkx5QnBiaUJoYkd3Z1kyOXdhV1Z6SUc5eUlITjFZbk4wWVc1MGFXRnNJSEJ2Y25ScGIyNXpJRzltSUhSb1pTQlRiMlowZDJGeVpTNWNiaTh2WEc0dkx5QlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRYRzR2THlCUFVpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdYRzR2THlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzSUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT1hHNHZMeUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVVnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3hjYmk4dklFUkJUVUZIUlZNZ1QxSWdUMVJJUlZJZ1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWx4dUx5OGdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc0lFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSVnh1THk4Z1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPSUZSSVJTQlRUMFpVVjBGU1JTNWNibHh1SjNWelpTQnpkSEpwWTNRbk8xeHVYRzR2S2p4eVpYQnNZV05sYldWdWRENHFMMXh1WEc1MllYSWdRblZtWm1WeUlEMGdjbVZ4ZFdseVpTZ25jMkZtWlMxaWRXWm1aWEluS1M1Q2RXWm1aWEk3WEc0dktqd3ZjbVZ3YkdGalpXMWxiblErS2k5Y2JseHVkbUZ5SUdselJXNWpiMlJwYm1jZ1BTQkNkV1ptWlhJdWFYTkZibU52WkdsdVp5QjhmQ0JtZFc1amRHbHZiaUFvWlc1amIyUnBibWNwSUh0Y2JpQWdaVzVqYjJScGJtY2dQU0FuSnlBcklHVnVZMjlrYVc1bk8xeHVJQ0J6ZDJsMFkyZ2dLR1Z1WTI5a2FXNW5JQ1ltSUdWdVkyOWthVzVuTG5SdlRHOTNaWEpEWVhObEtDa3BJSHRjYmlBZ0lDQmpZWE5sSUNkb1pYZ25PbU5oYzJVZ0ozVjBaamduT21OaGMyVWdKM1YwWmkwNEp6cGpZWE5sSUNkaGMyTnBhU2M2WTJGelpTQW5ZbWx1WVhKNUp6cGpZWE5sSUNkaVlYTmxOalFuT21OaGMyVWdKM1ZqY3pJbk9tTmhjMlVnSjNWamN5MHlKenBqWVhObElDZDFkR1l4Tm14bEp6cGpZWE5sSUNkMWRHWXRNVFpzWlNjNlkyRnpaU0FuY21GM0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUY5dWIzSnRZV3hwZW1WRmJtTnZaR2x1WnlobGJtTXBJSHRjYmlBZ2FXWWdLQ0ZsYm1NcElISmxkSFZ5YmlBbmRYUm1PQ2M3WEc0Z0lIWmhjaUJ5WlhSeWFXVmtPMXh1SUNCM2FHbHNaU0FvZEhKMVpTa2dlMXh1SUNBZ0lITjNhWFJqYUNBb1pXNWpLU0I3WEc0Z0lDQWdJQ0JqWVhObElDZDFkR1k0SnpwY2JpQWdJQ0FnSUdOaGMyVWdKM1YwWmkwNEp6cGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZDFkR1k0Snp0Y2JpQWdJQ0FnSUdOaGMyVWdKM1ZqY3pJbk9seHVJQ0FnSUNBZ1kyRnpaU0FuZFdOekxUSW5PbHh1SUNBZ0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnSUNCallYTmxJQ2QxZEdZdE1UWnNaU2M2WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuZFhSbU1UWnNaU2M3WEc0Z0lDQWdJQ0JqWVhObElDZHNZWFJwYmpFbk9seHVJQ0FnSUNBZ1kyRnpaU0FuWW1sdVlYSjVKenBjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2RzWVhScGJqRW5PMXh1SUNBZ0lDQWdZMkZ6WlNBblltRnpaVFkwSnpwY2JpQWdJQ0FnSUdOaGMyVWdKMkZ6WTJscEp6cGNiaUFnSUNBZ0lHTmhjMlVnSjJobGVDYzZYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibU03WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0JwWmlBb2NtVjBjbWxsWkNrZ2NtVjBkWEp1T3lBdkx5QjFibVJsWm1sdVpXUmNiaUFnSUNBZ0lDQWdaVzVqSUQwZ0tDY25JQ3NnWlc1aktTNTBiMHh2ZDJWeVEyRnpaU2dwTzF4dUlDQWdJQ0FnSUNCeVpYUnlhV1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQjlYRzRnSUgxY2JuMDdYRzVjYmk4dklFUnZJRzV2ZENCallXTm9aU0JnUW5WbVptVnlMbWx6Ulc1amIyUnBibWRnSUhkb1pXNGdZMmhsWTJ0cGJtY2daVzVqYjJScGJtY2dibUZ0WlhNZ1lYTWdjMjl0WlZ4dUx5OGdiVzlrZFd4bGN5QnRiMjVyWlhrdGNHRjBZMmdnYVhRZ2RHOGdjM1Z3Y0c5eWRDQmhaR1JwZEdsdmJtRnNJR1Z1WTI5a2FXNW5jMXh1Wm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsUlc1amIyUnBibWNvWlc1aktTQjdYRzRnSUhaaGNpQnVaVzVqSUQwZ1gyNXZjbTFoYkdsNlpVVnVZMjlrYVc1bktHVnVZeWs3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdibVZ1WXlBaFBUMGdKM04wY21sdVp5Y2dKaVlnS0VKMVptWmxjaTVwYzBWdVkyOWthVzVuSUQwOVBTQnBjMFZ1WTI5a2FXNW5JSHg4SUNGcGMwVnVZMjlrYVc1bktHVnVZeWtwS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFWdWEyNXZkMjRnWlc1amIyUnBibWM2SUNjZ0t5QmxibU1wTzF4dUlDQnlaWFIxY200Z2JtVnVZeUI4ZkNCbGJtTTdYRzU5WEc1Y2JpOHZJRk4wY21sdVowUmxZMjlrWlhJZ2NISnZkbWxrWlhNZ1lXNGdhVzUwWlhKbVlXTmxJR1p2Y2lCbFptWnBZMmxsYm5Sc2VTQnpjR3hwZEhScGJtY2dZU0J6WlhKcFpYTWdiMlpjYmk4dklHSjFabVpsY25NZ2FXNTBieUJoSUhObGNtbGxjeUJ2WmlCS1V5QnpkSEpwYm1keklIZHBkR2h2ZFhRZ1luSmxZV3RwYm1jZ1lYQmhjblFnYlhWc2RHa3RZbmwwWlZ4dUx5OGdZMmhoY21GamRHVnljeTVjYm1WNGNHOXlkSE11VTNSeWFXNW5SR1ZqYjJSbGNpQTlJRk4wY21sdVowUmxZMjlrWlhJN1hHNW1kVzVqZEdsdmJpQlRkSEpwYm1kRVpXTnZaR1Z5S0dWdVkyOWthVzVuS1NCN1hHNGdJSFJvYVhNdVpXNWpiMlJwYm1jZ1BTQnViM0p0WVd4cGVtVkZibU52WkdsdVp5aGxibU52WkdsdVp5azdYRzRnSUhaaGNpQnVZanRjYmlBZ2MzZHBkR05vSUNoMGFHbHpMbVZ1WTI5a2FXNW5LU0I3WEc0Z0lDQWdZMkZ6WlNBbmRYUm1NVFpzWlNjNlhHNGdJQ0FnSUNCMGFHbHpMblJsZUhRZ1BTQjFkR1l4TmxSbGVIUTdYRzRnSUNBZ0lDQjBhR2x6TG1WdVpDQTlJSFYwWmpFMlJXNWtPMXh1SUNBZ0lDQWdibUlnUFNBME8xeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdZMkZ6WlNBbmRYUm1PQ2M2WEc0Z0lDQWdJQ0IwYUdsekxtWnBiR3hNWVhOMElEMGdkWFJtT0VacGJHeE1ZWE4wTzF4dUlDQWdJQ0FnYm1JZ1BTQTBPMXh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5ZbUZ6WlRZMEp6cGNiaUFnSUNBZ0lIUm9hWE11ZEdWNGRDQTlJR0poYzJVMk5GUmxlSFE3WEc0Z0lDQWdJQ0IwYUdsekxtVnVaQ0E5SUdKaGMyVTJORVZ1WkR0Y2JpQWdJQ0FnSUc1aUlEMGdNenRjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0IwYUdsekxuZHlhWFJsSUQwZ2MybHRjR3hsVjNKcGRHVTdYRzRnSUNBZ0lDQjBhR2x6TG1WdVpDQTlJSE5wYlhCc1pVVnVaRHRjYmlBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnZlZ4dUlDQjBhR2x6TG14aGMzUk9aV1ZrSUQwZ01EdGNiaUFnZEdocGN5NXNZWE4wVkc5MFlXd2dQU0F3TzF4dUlDQjBhR2x6TG14aGMzUkRhR0Z5SUQwZ1FuVm1abVZ5TG1Gc2JHOWpWVzV6WVdabEtHNWlLVHRjYm4xY2JseHVVM1J5YVc1blJHVmpiMlJsY2k1d2NtOTBiM1I1Y0dVdWQzSnBkR1VnUFNCbWRXNWpkR2x2YmlBb1luVm1LU0I3WEc0Z0lHbG1JQ2hpZFdZdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdKeWM3WEc0Z0lIWmhjaUJ5TzF4dUlDQjJZWElnYVR0Y2JpQWdhV1lnS0hSb2FYTXViR0Z6ZEU1bFpXUXBJSHRjYmlBZ0lDQnlJRDBnZEdocGN5NW1hV3hzVEdGemRDaGlkV1lwTzF4dUlDQWdJR2xtSUNoeUlEMDlQU0IxYm1SbFptbHVaV1FwSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0JwSUQwZ2RHaHBjeTVzWVhOMFRtVmxaRHRjYmlBZ0lDQjBhR2x6TG14aGMzUk9aV1ZrSUQwZ01EdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnBJRDBnTUR0Y2JpQWdmVnh1SUNCcFppQW9hU0E4SUdKMVppNXNaVzVuZEdncElISmxkSFZ5YmlCeUlEOGdjaUFySUhSb2FYTXVkR1Y0ZENoaWRXWXNJR2twSURvZ2RHaHBjeTUwWlhoMEtHSjFaaXdnYVNrN1hHNGdJSEpsZEhWeWJpQnlJSHg4SUNjbk8xeHVmVHRjYmx4dVUzUnlhVzVuUkdWamIyUmxjaTV3Y205MGIzUjVjR1V1Wlc1a0lEMGdkWFJtT0VWdVpEdGNibHh1THk4Z1VtVjBkWEp1Y3lCdmJteDVJR052YlhCc1pYUmxJR05vWVhKaFkzUmxjbk1nYVc0Z1lTQkNkV1ptWlhKY2JsTjBjbWx1WjBSbFkyOWtaWEl1Y0hKdmRHOTBlWEJsTG5SbGVIUWdQU0IxZEdZNFZHVjRkRHRjYmx4dUx5OGdRWFIwWlcxd2RITWdkRzhnWTI5dGNHeGxkR1VnWVNCd1lYSjBhV0ZzSUc1dmJpMVZWRVl0T0NCamFHRnlZV04wWlhJZ2RYTnBibWNnWW5sMFpYTWdabkp2YlNCaElFSjFabVpsY2x4dVUzUnlhVzVuUkdWamIyUmxjaTV3Y205MGIzUjVjR1V1Wm1sc2JFeGhjM1FnUFNCbWRXNWpkR2x2YmlBb1luVm1LU0I3WEc0Z0lHbG1JQ2gwYUdsekxteGhjM1JPWldWa0lEdzlJR0oxWmk1c1pXNW5kR2dwSUh0Y2JpQWdJQ0JpZFdZdVkyOXdlU2gwYUdsekxteGhjM1JEYUdGeUxDQjBhR2x6TG14aGMzUlViM1JoYkNBdElIUm9hWE11YkdGemRFNWxaV1FzSURBc0lIUm9hWE11YkdGemRFNWxaV1FwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG14aGMzUkRhR0Z5TG5SdlUzUnlhVzVuS0hSb2FYTXVaVzVqYjJScGJtY3NJREFzSUhSb2FYTXViR0Z6ZEZSdmRHRnNLVHRjYmlBZ2ZWeHVJQ0JpZFdZdVkyOXdlU2gwYUdsekxteGhjM1JEYUdGeUxDQjBhR2x6TG14aGMzUlViM1JoYkNBdElIUm9hWE11YkdGemRFNWxaV1FzSURBc0lHSjFaaTVzWlc1bmRHZ3BPMXh1SUNCMGFHbHpMbXhoYzNST1pXVmtJQzA5SUdKMVppNXNaVzVuZEdnN1hHNTlPMXh1WEc0dkx5QkRhR1ZqYTNNZ2RHaGxJSFI1Y0dVZ2IyWWdZU0JWVkVZdE9DQmllWFJsTENCM2FHVjBhR1Z5SUdsMEozTWdRVk5EU1Vrc0lHRWdiR1ZoWkdsdVp5QmllWFJsTENCdmNpQmhYRzR2THlCamIyNTBhVzUxWVhScGIyNGdZbmwwWlM0Z1NXWWdZVzRnYVc1MllXeHBaQ0JpZVhSbElHbHpJR1JsZEdWamRHVmtMQ0F0TWlCcGN5QnlaWFIxY201bFpDNWNibVoxYm1OMGFXOXVJSFYwWmpoRGFHVmphMEo1ZEdVb1lubDBaU2tnZTF4dUlDQnBaaUFvWW5sMFpTQThQU0F3ZURkR0tTQnlaWFIxY200Z01EdGxiSE5sSUdsbUlDaGllWFJsSUQ0K0lEVWdQVDA5SURCNE1EWXBJSEpsZEhWeWJpQXlPMlZzYzJVZ2FXWWdLR0o1ZEdVZ1BqNGdOQ0E5UFQwZ01IZ3dSU2tnY21WMGRYSnVJRE03Wld4elpTQnBaaUFvWW5sMFpTQStQaUF6SUQwOVBTQXdlREZGS1NCeVpYUjFjbTRnTkR0Y2JpQWdjbVYwZFhKdUlHSjVkR1VnUGo0Z05pQTlQVDBnTUhnd01pQS9JQzB4SURvZ0xUSTdYRzU5WEc1Y2JpOHZJRU5vWldOcmN5QmhkQ0J0YjNOMElETWdZbmwwWlhNZ1lYUWdkR2hsSUdWdVpDQnZaaUJoSUVKMVptWmxjaUJwYmlCdmNtUmxjaUIwYnlCa1pYUmxZM1FnWVc1Y2JpOHZJR2x1WTI5dGNHeGxkR1VnYlhWc2RHa3RZbmwwWlNCVlZFWXRPQ0JqYUdGeVlXTjBaWEl1SUZSb1pTQjBiM1JoYkNCdWRXMWlaWElnYjJZZ1lubDBaWE1nS0RJc0lETXNJRzl5SURRcFhHNHZMeUJ1WldWa1pXUWdkRzhnWTI5dGNHeGxkR1VnZEdobElGVlVSaTA0SUdOb1lYSmhZM1JsY2lBb2FXWWdZWEJ3YkdsallXSnNaU2tnWVhKbElISmxkSFZ5Ym1Wa0xseHVablZ1WTNScGIyNGdkWFJtT0VOb1pXTnJTVzVqYjIxd2JHVjBaU2h6Wld4bUxDQmlkV1lzSUdrcElIdGNiaUFnZG1GeUlHb2dQU0JpZFdZdWJHVnVaM1JvSUMwZ01UdGNiaUFnYVdZZ0tHb2dQQ0JwS1NCeVpYUjFjbTRnTUR0Y2JpQWdkbUZ5SUc1aUlEMGdkWFJtT0VOb1pXTnJRbmwwWlNoaWRXWmJhbDBwTzF4dUlDQnBaaUFvYm1JZ1BqMGdNQ2tnZTF4dUlDQWdJR2xtSUNodVlpQStJREFwSUhObGJHWXViR0Z6ZEU1bFpXUWdQU0J1WWlBdElERTdYRzRnSUNBZ2NtVjBkWEp1SUc1aU8xeHVJQ0I5WEc0Z0lHbG1JQ2d0TFdvZ1BDQnBJSHg4SUc1aUlEMDlQU0F0TWlrZ2NtVjBkWEp1SURBN1hHNGdJRzVpSUQwZ2RYUm1PRU5vWldOclFubDBaU2hpZFdaYmFsMHBPMXh1SUNCcFppQW9ibUlnUGowZ01Da2dlMXh1SUNBZ0lHbG1JQ2h1WWlBK0lEQXBJSE5sYkdZdWJHRnpkRTVsWldRZ1BTQnVZaUF0SURJN1hHNGdJQ0FnY21WMGRYSnVJRzVpTzF4dUlDQjlYRzRnSUdsbUlDZ3RMV29nUENCcElIeDhJRzVpSUQwOVBTQXRNaWtnY21WMGRYSnVJREE3WEc0Z0lHNWlJRDBnZFhSbU9FTm9aV05yUW5sMFpTaGlkV1piYWwwcE8xeHVJQ0JwWmlBb2JtSWdQajBnTUNrZ2UxeHVJQ0FnSUdsbUlDaHVZaUErSURBcElIdGNiaUFnSUNBZ0lHbG1JQ2h1WWlBOVBUMGdNaWtnYm1JZ1BTQXdPMlZzYzJVZ2MyVnNaaTVzWVhOMFRtVmxaQ0E5SUc1aUlDMGdNenRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1aU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBd08xeHVmVnh1WEc0dkx5QldZV3hwWkdGMFpYTWdZWE1nYldGdWVTQmpiMjUwYVc1MVlYUnBiMjRnWW5sMFpYTWdabTl5SUdFZ2JYVnNkR2t0WW5sMFpTQlZWRVl0T0NCamFHRnlZV04wWlhJZ1lYTmNiaTh2SUc1bFpXUmxaQ0J2Y2lCaGNtVWdZWFpoYVd4aFlteGxMaUJKWmlCM1pTQnpaV1VnWVNCdWIyNHRZMjl1ZEdsdWRXRjBhVzl1SUdKNWRHVWdkMmhsY21VZ2QyVWdaWGh3WldOMFhHNHZMeUJ2Ym1Vc0lIZGxJRndpY21Wd2JHRmpaVndpSUhSb1pTQjJZV3hwWkdGMFpXUWdZMjl1ZEdsdWRXRjBhVzl1SUdKNWRHVnpJSGRsSjNabElITmxaVzRnYzI4Z1ptRnlJSGRwZEdoY2JpOHZJR0VnYzJsdVoyeGxJRlZVUmkwNElISmxjR3hoWTJWdFpXNTBJR05vWVhKaFkzUmxjaUFvSjF4Y2RXWm1abVFuS1N3Z2RHOGdiV0YwWTJnZ2RqZ25jeUJWVkVZdE9DQmtaV052WkdsdVoxeHVMeThnWW1Wb1lYWnBiM0l1SUZSb1pTQmpiMjUwYVc1MVlYUnBiMjRnWW5sMFpTQmphR1ZqYXlCcGN5QnBibU5zZFdSbFpDQjBhSEpsWlNCMGFXMWxjeUJwYmlCMGFHVWdZMkZ6WlZ4dUx5OGdkMmhsY21VZ1lXeHNJRzltSUhSb1pTQmpiMjUwYVc1MVlYUnBiMjRnWW5sMFpYTWdabTl5SUdFZ1kyaGhjbUZqZEdWeUlHVjRhWE4wSUdsdUlIUm9aU0J6WVcxbElHSjFabVpsY2k1Y2JpOHZJRWwwSUdseklHRnNjMjhnWkc5dVpTQjBhR2x6SUhkaGVTQmhjeUJoSUhOc2FXZG9kQ0J3WlhKbWIzSnRZVzVqWlNCcGJtTnlaV0Z6WlNCcGJuTjBaV0ZrSUc5bUlIVnphVzVuSUdGY2JpOHZJR3h2YjNBdVhHNW1kVzVqZEdsdmJpQjFkR1k0UTJobFkydEZlSFJ5WVVKNWRHVnpLSE5sYkdZc0lHSjFaaXdnY0NrZ2UxeHVJQ0JwWmlBb0tHSjFabHN3WFNBbUlEQjRRekFwSUNFOVBTQXdlRGd3S1NCN1hHNGdJQ0FnYzJWc1ppNXNZWE4wVG1WbFpDQTlJREE3WEc0Z0lDQWdjbVYwZFhKdUlDZGNYSFZtWm1aa0p6dGNiaUFnZlZ4dUlDQnBaaUFvYzJWc1ppNXNZWE4wVG1WbFpDQStJREVnSmlZZ1luVm1MbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0JwWmlBb0tHSjFabHN4WFNBbUlEQjRRekFwSUNFOVBTQXdlRGd3S1NCN1hHNGdJQ0FnSUNCelpXeG1MbXhoYzNST1pXVmtJRDBnTVR0Y2JpQWdJQ0FnSUhKbGRIVnliaUFuWEZ4MVptWm1aQ2M3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h6Wld4bUxteGhjM1JPWldWa0lENGdNaUFtSmlCaWRXWXViR1Z1WjNSb0lENGdNaWtnZTF4dUlDQWdJQ0FnYVdZZ0tDaGlkV1piTWwwZ0ppQXdlRU13S1NBaFBUMGdNSGc0TUNrZ2UxeHVJQ0FnSUNBZ0lDQnpaV3htTG14aGMzUk9aV1ZrSUQwZ01qdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZGNYSFZtWm1aa0p6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVMeThnUVhSMFpXMXdkSE1nZEc4Z1kyOXRjR3hsZEdVZ1lTQnRkV3gwYVMxaWVYUmxJRlZVUmkwNElHTm9ZWEpoWTNSbGNpQjFjMmx1WnlCaWVYUmxjeUJtY205dElHRWdRblZtWm1WeUxseHVablZ1WTNScGIyNGdkWFJtT0VacGJHeE1ZWE4wS0dKMVppa2dlMXh1SUNCMllYSWdjQ0E5SUhSb2FYTXViR0Z6ZEZSdmRHRnNJQzBnZEdocGN5NXNZWE4wVG1WbFpEdGNiaUFnZG1GeUlISWdQU0IxZEdZNFEyaGxZMnRGZUhSeVlVSjVkR1Z6S0hSb2FYTXNJR0oxWml3Z2NDazdYRzRnSUdsbUlDaHlJQ0U5UFNCMWJtUmxabWx1WldRcElISmxkSFZ5YmlCeU8xeHVJQ0JwWmlBb2RHaHBjeTVzWVhOMFRtVmxaQ0E4UFNCaWRXWXViR1Z1WjNSb0tTQjdYRzRnSUNBZ1luVm1MbU52Y0hrb2RHaHBjeTVzWVhOMFEyaGhjaXdnY0N3Z01Dd2dkR2hwY3k1c1lYTjBUbVZsWkNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWJHRnpkRU5vWVhJdWRHOVRkSEpwYm1jb2RHaHBjeTVsYm1OdlpHbHVaeXdnTUN3Z2RHaHBjeTVzWVhOMFZHOTBZV3dwTzF4dUlDQjlYRzRnSUdKMVppNWpiM0I1S0hSb2FYTXViR0Z6ZEVOb1lYSXNJSEFzSURBc0lHSjFaaTVzWlc1bmRHZ3BPMXh1SUNCMGFHbHpMbXhoYzNST1pXVmtJQzA5SUdKMVppNXNaVzVuZEdnN1hHNTlYRzVjYmk4dklGSmxkSFZ5Ym5NZ1lXeHNJR052YlhCc1pYUmxJRlZVUmkwNElHTm9ZWEpoWTNSbGNuTWdhVzRnWVNCQ2RXWm1aWEl1SUVsbUlIUm9aU0JDZFdabVpYSWdaVzVrWldRZ2IyNGdZVnh1THk4Z2NHRnlkR2xoYkNCamFHRnlZV04wWlhJc0lIUm9aU0JqYUdGeVlXTjBaWEluY3lCaWVYUmxjeUJoY21VZ1luVm1abVZ5WldRZ2RXNTBhV3dnZEdobElISmxjWFZwY21Wa1hHNHZMeUJ1ZFcxaVpYSWdiMllnWW5sMFpYTWdZWEpsSUdGMllXbHNZV0pzWlM1Y2JtWjFibU4wYVc5dUlIVjBaamhVWlhoMEtHSjFaaXdnYVNrZ2UxeHVJQ0IyWVhJZ2RHOTBZV3dnUFNCMWRHWTRRMmhsWTJ0SmJtTnZiWEJzWlhSbEtIUm9hWE1zSUdKMVppd2dhU2s3WEc0Z0lHbG1JQ2doZEdocGN5NXNZWE4wVG1WbFpDa2djbVYwZFhKdUlHSjFaaTUwYjFOMGNtbHVaeWduZFhSbU9DY3NJR2twTzF4dUlDQjBhR2x6TG14aGMzUlViM1JoYkNBOUlIUnZkR0ZzTzF4dUlDQjJZWElnWlc1a0lEMGdZblZtTG14bGJtZDBhQ0F0SUNoMGIzUmhiQ0F0SUhSb2FYTXViR0Z6ZEU1bFpXUXBPMXh1SUNCaWRXWXVZMjl3ZVNoMGFHbHpMbXhoYzNSRGFHRnlMQ0F3TENCbGJtUXBPMXh1SUNCeVpYUjFjbTRnWW5WbUxuUnZVM1J5YVc1bktDZDFkR1k0Snl3Z2FTd2daVzVrS1R0Y2JuMWNibHh1THk4Z1JtOXlJRlZVUmkwNExDQmhJSEpsY0d4aFkyVnRaVzUwSUdOb1lYSmhZM1JsY2lCcGN5QmhaR1JsWkNCM2FHVnVJR1Z1WkdsdVp5QnZiaUJoSUhCaGNuUnBZV3hjYmk4dklHTm9ZWEpoWTNSbGNpNWNibVoxYm1OMGFXOXVJSFYwWmpoRmJtUW9ZblZtS1NCN1hHNGdJSFpoY2lCeUlEMGdZblZtSUNZbUlHSjFaaTVzWlc1bmRHZ2dQeUIwYUdsekxuZHlhWFJsS0dKMVppa2dPaUFuSnp0Y2JpQWdhV1lnS0hSb2FYTXViR0Z6ZEU1bFpXUXBJSEpsZEhWeWJpQnlJQ3NnSjF4Y2RXWm1abVFuTzF4dUlDQnlaWFIxY200Z2NqdGNibjFjYmx4dUx5OGdWVlJHTFRFMlRFVWdkSGx3YVdOaGJHeDVJRzVsWldSeklIUjNieUJpZVhSbGN5QndaWElnWTJoaGNtRmpkR1Z5TENCaWRYUWdaWFpsYmlCcFppQjNaU0JvWVhabElHRnVJR1YyWlc1Y2JpOHZJRzUxYldKbGNpQnZaaUJpZVhSbGN5QmhkbUZwYkdGaWJHVXNJSGRsSUc1bFpXUWdkRzhnWTJobFkyc2dhV1lnZDJVZ1pXNWtJRzl1SUdFZ2JHVmhaR2x1Wnk5b2FXZG9YRzR2THlCemRYSnliMmRoZEdVdUlFbHVJSFJvWVhRZ1kyRnpaU3dnZDJVZ2JtVmxaQ0IwYnlCM1lXbDBJR1p2Y2lCMGFHVWdibVY0ZENCMGQyOGdZbmwwWlhNZ2FXNGdiM0prWlhJZ2RHOWNiaTh2SUdSbFkyOWtaU0IwYUdVZ2JHRnpkQ0JqYUdGeVlXTjBaWElnY0hKdmNHVnliSGt1WEc1bWRXNWpkR2x2YmlCMWRHWXhObFJsZUhRb1luVm1MQ0JwS1NCN1hHNGdJR2xtSUNnb1luVm1MbXhsYm1kMGFDQXRJR2twSUNVZ01pQTlQVDBnTUNrZ2UxeHVJQ0FnSUhaaGNpQnlJRDBnWW5WbUxuUnZVM1J5YVc1bktDZDFkR1l4Tm14bEp5d2dhU2s3WEc0Z0lDQWdhV1lnS0hJcElIdGNiaUFnSUNBZ0lIWmhjaUJqSUQwZ2NpNWphR0Z5UTI5a1pVRjBLSEl1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNCcFppQW9ZeUErUFNBd2VFUTRNREFnSmlZZ1l5QThQU0F3ZUVSQ1JrWXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXNZWE4wVG1WbFpDQTlJREk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZEZSdmRHRnNJRDBnTkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFEyaGhjbHN3WFNBOUlHSjFabHRpZFdZdWJHVnVaM1JvSUMwZ01sMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHRnpkRU5vWVhKYk1WMGdQU0JpZFdaYlluVm1MbXhsYm1kMGFDQXRJREZkTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY2k1emJHbGpaU2d3TENBdE1TazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5TzF4dUlDQjlYRzRnSUhSb2FYTXViR0Z6ZEU1bFpXUWdQU0F4TzF4dUlDQjBhR2x6TG14aGMzUlViM1JoYkNBOUlESTdYRzRnSUhSb2FYTXViR0Z6ZEVOb1lYSmJNRjBnUFNCaWRXWmJZblZtTG14bGJtZDBhQ0F0SURGZE8xeHVJQ0J5WlhSMWNtNGdZblZtTG5SdlUzUnlhVzVuS0NkMWRHWXhObXhsSnl3Z2FTd2dZblZtTG14bGJtZDBhQ0F0SURFcE8xeHVmVnh1WEc0dkx5QkdiM0lnVlZSR0xURTJURVVnZDJVZ1pHOGdibTkwSUdWNGNHeHBZMmwwYkhrZ1lYQndaVzVrSUhOd1pXTnBZV3dnY21Wd2JHRmpaVzFsYm5RZ1kyaGhjbUZqZEdWeWN5QnBaaUIzWlZ4dUx5OGdaVzVrSUc5dUlHRWdjR0Z5ZEdsaGJDQmphR0Z5WVdOMFpYSXNJSGRsSUhOcGJYQnNlU0JzWlhRZ2RqZ2dhR0Z1Wkd4bElIUm9ZWFF1WEc1bWRXNWpkR2x2YmlCMWRHWXhOa1Z1WkNoaWRXWXBJSHRjYmlBZ2RtRnlJSElnUFNCaWRXWWdKaVlnWW5WbUxteGxibWQwYUNBL0lIUm9hWE11ZDNKcGRHVW9ZblZtS1NBNklDY25PMXh1SUNCcFppQW9kR2hwY3k1c1lYTjBUbVZsWkNrZ2UxeHVJQ0FnSUhaaGNpQmxibVFnUFNCMGFHbHpMbXhoYzNSVWIzUmhiQ0F0SUhSb2FYTXViR0Z6ZEU1bFpXUTdYRzRnSUNBZ2NtVjBkWEp1SUhJZ0t5QjBhR2x6TG14aGMzUkRhR0Z5TG5SdlUzUnlhVzVuS0NkMWRHWXhObXhsSnl3Z01Dd2daVzVrS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY2p0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWW1GelpUWTBWR1Y0ZENoaWRXWXNJR2twSUh0Y2JpQWdkbUZ5SUc0Z1BTQW9ZblZtTG14bGJtZDBhQ0F0SUdrcElDVWdNenRjYmlBZ2FXWWdLRzRnUFQwOUlEQXBJSEpsZEhWeWJpQmlkV1l1ZEc5VGRISnBibWNvSjJKaGMyVTJOQ2NzSUdrcE8xeHVJQ0IwYUdsekxteGhjM1JPWldWa0lEMGdNeUF0SUc0N1hHNGdJSFJvYVhNdWJHRnpkRlJ2ZEdGc0lEMGdNenRjYmlBZ2FXWWdLRzRnUFQwOUlERXBJSHRjYmlBZ0lDQjBhR2x6TG14aGMzUkRhR0Z5V3pCZElEMGdZblZtVzJKMVppNXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IwYUdsekxteGhjM1JEYUdGeVd6QmRJRDBnWW5WbVcySjFaaTVzWlc1bmRHZ2dMU0F5WFR0Y2JpQWdJQ0IwYUdsekxteGhjM1JEYUdGeVd6RmRJRDBnWW5WbVcySjFaaTVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnWW5WbUxuUnZVM1J5YVc1bktDZGlZWE5sTmpRbkxDQnBMQ0JpZFdZdWJHVnVaM1JvSUMwZ2JpazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHSmhjMlUyTkVWdVpDaGlkV1lwSUh0Y2JpQWdkbUZ5SUhJZ1BTQmlkV1lnSmlZZ1luVm1MbXhsYm1kMGFDQS9JSFJvYVhNdWQzSnBkR1VvWW5WbUtTQTZJQ2NuTzF4dUlDQnBaaUFvZEdocGN5NXNZWE4wVG1WbFpDa2djbVYwZFhKdUlISWdLeUIwYUdsekxteGhjM1JEYUdGeUxuUnZVM1J5YVc1bktDZGlZWE5sTmpRbkxDQXdMQ0F6SUMwZ2RHaHBjeTVzWVhOMFRtVmxaQ2s3WEc0Z0lISmxkSFZ5YmlCeU8xeHVmVnh1WEc0dkx5QlFZWE56SUdKNWRHVnpJRzl1SUhSb2NtOTFaMmdnWm05eUlITnBibWRzWlMxaWVYUmxJR1Z1WTI5a2FXNW5jeUFvWlM1bkxpQmhjMk5wYVN3Z2JHRjBhVzR4TENCb1pYZ3BYRzVtZFc1amRHbHZiaUJ6YVcxd2JHVlhjbWwwWlNoaWRXWXBJSHRjYmlBZ2NtVjBkWEp1SUdKMVppNTBiMU4wY21sdVp5aDBhR2x6TG1WdVkyOWthVzVuS1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYzJsdGNHeGxSVzVrS0dKMVppa2dlMXh1SUNCeVpYUjFjbTRnWW5WbUlDWW1JR0oxWmk1c1pXNW5kR2dnUHlCMGFHbHpMbmR5YVhSbEtHSjFaaWtnT2lBbkp6dGNibjBpTENKMllYSWdjMk52Y0dVZ1BTQW9kSGx3Wlc5bUlHZHNiMkpoYkNBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQm5iRzlpWVd3cElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBb2RIbHdaVzltSUhObGJHWWdJVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdKaVlnYzJWc1ppa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHp0Y2JuWmhjaUJoY0hCc2VTQTlJRVoxYm1OMGFXOXVMbkJ5YjNSdmRIbHdaUzVoY0hCc2VUdGNibHh1THk4Z1JFOU5JRUZRU1hNc0lHWnZjaUJqYjIxd2JHVjBaVzVsYzNOY2JseHVaWGh3YjNKMGN5NXpaWFJVYVcxbGIzVjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnVkdsdFpXOTFkQ2hoY0hCc2VTNWpZV3hzS0hObGRGUnBiV1Z2ZFhRc0lITmpiM0JsTENCaGNtZDFiV1Z1ZEhNcExDQmpiR1ZoY2xScGJXVnZkWFFwTzF4dWZUdGNibVY0Y0c5eWRITXVjMlYwU1c1MFpYSjJZV3dnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnY21WMGRYSnVJRzVsZHlCVWFXMWxiM1YwS0dGd2NHeDVMbU5oYkd3b2MyVjBTVzUwWlhKMllXd3NJSE5qYjNCbExDQmhjbWQxYldWdWRITXBMQ0JqYkdWaGNrbHVkR1Z5ZG1Gc0tUdGNibjA3WEc1bGVIQnZjblJ6TG1Oc1pXRnlWR2x0Wlc5MWRDQTlYRzVsZUhCdmNuUnpMbU5zWldGeVNXNTBaWEoyWVd3Z1BTQm1kVzVqZEdsdmJpaDBhVzFsYjNWMEtTQjdYRzRnSUdsbUlDaDBhVzFsYjNWMEtTQjdYRzRnSUNBZ2RHbHRaVzkxZEM1amJHOXpaU2dwTzF4dUlDQjlYRzU5TzF4dVhHNW1kVzVqZEdsdmJpQlVhVzFsYjNWMEtHbGtMQ0JqYkdWaGNrWnVLU0I3WEc0Z0lIUm9hWE11WDJsa0lEMGdhV1E3WEc0Z0lIUm9hWE11WDJOc1pXRnlSbTRnUFNCamJHVmhja1p1TzF4dWZWeHVWR2x0Wlc5MWRDNXdjbTkwYjNSNWNHVXVkVzV5WldZZ1BTQlVhVzFsYjNWMExuQnliM1J2ZEhsd1pTNXlaV1lnUFNCbWRXNWpkR2x2YmlncElIdDlPMXh1VkdsdFpXOTFkQzV3Y205MGIzUjVjR1V1WTJ4dmMyVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdkR2hwY3k1ZlkyeGxZWEpHYmk1allXeHNLSE5qYjNCbExDQjBhR2x6TGw5cFpDazdYRzU5TzF4dVhHNHZMeUJFYjJWeklHNXZkQ0J6ZEdGeWRDQjBhR1VnZEdsdFpTd2dhblZ6ZENCelpYUnpJSFZ3SUhSb1pTQnRaVzFpWlhKeklHNWxaV1JsWkM1Y2JtVjRjRzl5ZEhNdVpXNXliMnhzSUQwZ1puVnVZM1JwYjI0b2FYUmxiU3dnYlhObFkzTXBJSHRjYmlBZ1kyeGxZWEpVYVcxbGIzVjBLR2wwWlcwdVgybGtiR1ZVYVcxbGIzVjBTV1FwTzF4dUlDQnBkR1Z0TGw5cFpHeGxWR2x0Wlc5MWRDQTlJRzF6WldOek8xeHVmVHRjYmx4dVpYaHdiM0owY3k1MWJtVnVjbTlzYkNBOUlHWjFibU4wYVc5dUtHbDBaVzBwSUh0Y2JpQWdZMnhsWVhKVWFXMWxiM1YwS0dsMFpXMHVYMmxrYkdWVWFXMWxiM1YwU1dRcE8xeHVJQ0JwZEdWdExsOXBaR3hsVkdsdFpXOTFkQ0E5SUMweE8xeHVmVHRjYmx4dVpYaHdiM0owY3k1ZmRXNXlaV1pCWTNScGRtVWdQU0JsZUhCdmNuUnpMbUZqZEdsMlpTQTlJR1oxYm1OMGFXOXVLR2wwWlcwcElIdGNiaUFnWTJ4bFlYSlVhVzFsYjNWMEtHbDBaVzB1WDJsa2JHVlVhVzFsYjNWMFNXUXBPMXh1WEc0Z0lIWmhjaUJ0YzJWamN5QTlJR2wwWlcwdVgybGtiR1ZVYVcxbGIzVjBPMXh1SUNCcFppQW9iWE5sWTNNZ1BqMGdNQ2tnZTF4dUlDQWdJR2wwWlcwdVgybGtiR1ZVYVcxbGIzVjBTV1FnUFNCelpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUlHOXVWR2x0Wlc5MWRDZ3BJSHRjYmlBZ0lDQWdJR2xtSUNocGRHVnRMbDl2YmxScGJXVnZkWFFwWEc0Z0lDQWdJQ0FnSUdsMFpXMHVYMjl1VkdsdFpXOTFkQ2dwTzF4dUlDQWdJSDBzSUcxelpXTnpLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5OGdjMlYwYVcxdFpXUnBZWFJsSUdGMGRHRmphR1Z6SUdsMGMyVnNaaUIwYnlCMGFHVWdaMnh2WW1Gc0lHOWlhbVZqZEZ4dWNtVnhkV2x5WlNoY0luTmxkR2x0YldWa2FXRjBaVndpS1R0Y2JpOHZJRTl1SUhOdmJXVWdaWGh2ZEdsaklHVnVkbWx5YjI1dFpXNTBjeXdnYVhRbmN5QnViM1FnWTJ4bFlYSWdkMmhwWTJnZ2IySnFaV04wSUdCelpYUnBiVzFsWkdsaGRHVmdJSGRoYzF4dUx5OGdZV0pzWlNCMGJ5QnBibk4wWVd4c0lHOXVkRzh1SUNCVFpXRnlZMmdnWldGamFDQndiM056YVdKcGJHbDBlU0JwYmlCMGFHVWdjMkZ0WlNCdmNtUmxjaUJoY3lCMGFHVmNiaTh2SUdCelpYUnBiVzFsWkdsaGRHVmdJR3hwWW5KaGNua3VYRzVsZUhCdmNuUnpMbk5sZEVsdGJXVmthV0YwWlNBOUlDaDBlWEJsYjJZZ2MyVnNaaUFoUFQwZ1hDSjFibVJsWm1sdVpXUmNJaUFtSmlCelpXeG1Mbk5sZEVsdGJXVmthV0YwWlNrZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUjVjR1Z2WmlCbmJHOWlZV3dnSVQwOUlGd2lkVzVrWldacGJtVmtYQ0lnSmlZZ1oyeHZZbUZzTG5ObGRFbHRiV1ZrYVdGMFpTa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFJvYVhNZ0ppWWdkR2hwY3k1elpYUkpiVzFsWkdsaGRHVXBPMXh1Wlhod2IzSjBjeTVqYkdWaGNrbHRiV1ZrYVdGMFpTQTlJQ2gwZVhCbGIyWWdjMlZzWmlBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQnpaV3htTG1Oc1pXRnlTVzF0WldScFlYUmxLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGVYQmxiMllnWjJ4dlltRnNJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltSUdkc2IySmhiQzVqYkdWaGNrbHRiV1ZrYVdGMFpTa2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvZEdocGN5QW1KaUIwYUdsekxtTnNaV0Z5U1cxdFpXUnBZWFJsS1R0Y2JpSXNJbHh1THlvcVhHNGdLaUJOYjJSMWJHVWdaWGh3YjNKMGN5NWNiaUFxTDF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHUmxjSEpsWTJGMFpUdGNibHh1THlvcVhHNGdLaUJOWVhKcklIUm9ZWFFnWVNCdFpYUm9iMlFnYzJodmRXeGtJRzV2ZENCaVpTQjFjMlZrTGx4dUlDb2dVbVYwZFhKdWN5QmhJRzF2WkdsbWFXVmtJR1oxYm1OMGFXOXVJSGRvYVdOb0lIZGhjbTV6SUc5dVkyVWdZbmtnWkdWbVlYVnNkQzVjYmlBcVhHNGdLaUJKWmlCZ2JHOWpZV3hUZEc5eVlXZGxMbTV2UkdWd2NtVmpZWFJwYjI0Z1BTQjBjblZsWUNCcGN5QnpaWFFzSUhSb1pXNGdhWFFnYVhNZ1lTQnVieTF2Y0M1Y2JpQXFYRzRnS2lCSlppQmdiRzlqWVd4VGRHOXlZV2RsTG5Sb2NtOTNSR1Z3Y21WallYUnBiMjRnUFNCMGNuVmxZQ0JwY3lCelpYUXNJSFJvWlc0Z1pHVndjbVZqWVhSbFpDQm1kVzVqZEdsdmJuTmNiaUFxSUhkcGJHd2dkR2h5YjNjZ1lXNGdSWEp5YjNJZ2QyaGxiaUJwYm5admEyVmtMbHh1SUNwY2JpQXFJRWxtSUdCc2IyTmhiRk4wYjNKaFoyVXVkSEpoWTJWRVpYQnlaV05oZEdsdmJpQTlJSFJ5ZFdWZ0lHbHpJSE5sZEN3Z2RHaGxiaUJrWlhCeVpXTmhkR1ZrSUdaMWJtTjBhVzl1YzF4dUlDb2dkMmxzYkNCcGJuWnZhMlVnWUdOdmJuTnZiR1V1ZEhKaFkyVW9LV0FnYVc1emRHVmhaQ0J2WmlCZ1kyOXVjMjlzWlM1bGNuSnZjaWdwWUM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJpQXRJSFJvWlNCbWRXNWpkR2x2YmlCMGJ5QmtaWEJ5WldOaGRHVmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J0YzJjZ0xTQjBhR1VnYzNSeWFXNW5JSFJ2SUhCeWFXNTBJSFJ2SUhSb1pTQmpiMjV6YjJ4bElIZG9aVzRnWUdadVlDQnBjeUJwYm5admEyVmtYRzRnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OUlHRWdibVYzSUZ3aVpHVndjbVZqWVhSbFpGd2lJSFpsY25OcGIyNGdiMllnWUdadVlGeHVJQ29nUUdGd2FTQndkV0pzYVdOY2JpQXFMMXh1WEc1bWRXNWpkR2x2YmlCa1pYQnlaV05oZEdVZ0tHWnVMQ0J0YzJjcElIdGNiaUFnYVdZZ0tHTnZibVpwWnlnbmJtOUVaWEJ5WldOaGRHbHZiaWNwS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1p1TzF4dUlDQjlYRzVjYmlBZ2RtRnlJSGRoY201bFpDQTlJR1poYkhObE8xeHVJQ0JtZFc1amRHbHZiaUJrWlhCeVpXTmhkR1ZrS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkMkZ5Ym1Wa0tTQjdYRzRnSUNBZ0lDQnBaaUFvWTI5dVptbG5LQ2QwYUhKdmQwUmxjSEpsWTJGMGFXOXVKeWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0cxelp5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR052Ym1acFp5Z25kSEpoWTJWRVpYQnlaV05oZEdsdmJpY3BLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZEhKaFkyVW9iWE5uS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaHRjMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnZDJGeWJtVmtJRDBnZEhKMVpUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvYVhNc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaR1Z3Y21WallYUmxaRHRjYm4xY2JseHVMeW9xWEc0Z0tpQkRhR1ZqYTNNZ1lHeHZZMkZzVTNSdmNtRm5aV0FnWm05eUlHSnZiMnhsWVc0Z2RtRnNkV1Z6SUdadmNpQjBhR1VnWjJsMlpXNGdZRzVoYldWZ0xseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCdVlXMWxYRzRnS2lCQWNtVjBkWEp1Y3lCN1FtOXZiR1ZoYm4xY2JpQXFJRUJoY0drZ2NISnBkbUYwWlZ4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUdOdmJtWnBaeUFvYm1GdFpTa2dlMXh1SUNBdkx5QmhZMk5sYzNOcGJtY2daMnh2WW1Gc0xteHZZMkZzVTNSdmNtRm5aU0JqWVc0Z2RISnBaMmRsY2lCaElFUlBUVVY0WTJWd2RHbHZiaUJwYmlCellXNWtZbTk0WldRZ2FXWnlZVzFsYzF4dUlDQjBjbmtnZTF4dUlDQWdJR2xtSUNnaFoyeHZZbUZzTG14dlkyRnNVM1J2Y21GblpTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlJR05oZEdOb0lDaGZLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUhaaGNpQjJZV3dnUFNCbmJHOWlZV3d1Ykc5allXeFRkRzl5WVdkbFcyNWhiV1ZkTzF4dUlDQnBaaUFvYm5Wc2JDQTlQU0IyWVd3cElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2NtVjBkWEp1SUZOMGNtbHVaeWgyWVd3cExuUnZURzkzWlhKRFlYTmxLQ2tnUFQwOUlDZDBjblZsSnp0Y2JuMWNiaUlzSW5aaGNpQm5PMXh1WEc0dkx5QlVhR2x6SUhkdmNtdHpJR2x1SUc1dmJpMXpkSEpwWTNRZ2JXOWtaVnh1WnlBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmx4MGNtVjBkWEp1SUhSb2FYTTdYRzU5S1NncE8xeHVYRzUwY25rZ2UxeHVYSFF2THlCVWFHbHpJSGR2Y210eklHbG1JR1YyWVd3Z2FYTWdZV3hzYjNkbFpDQW9jMlZsSUVOVFVDbGNibHgwWnlBOUlHY2dmSHdnYm1WM0lFWjFibU4wYVc5dUtGd2ljbVYwZFhKdUlIUm9hWE5jSWlrb0tUdGNibjBnWTJGMFkyZ2dLR1VwSUh0Y2JseDBMeThnVkdocGN5QjNiM0pyY3lCcFppQjBhR1VnZDJsdVpHOTNJSEpsWm1WeVpXNWpaU0JwY3lCaGRtRnBiR0ZpYkdWY2JseDBhV1lnS0hSNWNHVnZaaUIzYVc1a2IzY2dQVDA5SUZ3aWIySnFaV04wWENJcElHY2dQU0IzYVc1a2IzYzdYRzU5WEc1Y2JpOHZJR2NnWTJGdUlITjBhV3hzSUdKbElIVnVaR1ZtYVc1bFpDd2dZblYwSUc1dmRHaHBibWNnZEc4Z1pHOGdZV0p2ZFhRZ2FYUXVMaTVjYmk4dklGZGxJSEpsZEhWeWJpQjFibVJsWm1sdVpXUXNJR2x1YzNSbFlXUWdiMllnYm05MGFHbHVaeUJvWlhKbExDQnpieUJwZENkelhHNHZMeUJsWVhOcFpYSWdkRzhnYUdGdVpHeGxJSFJvYVhNZ1kyRnpaUzRnYVdZb0lXZHNiMkpoYkNrZ2V5QXVMaTU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1p6dGNiaUlzSW1sdGNHOXlkQ0JtWlhSamFDQWdabkp2YlNBblkzSnZjM010Wm1WMFkyZ25PMXh1YVcxd2IzSjBJSHRrWldaaGRXeDBJR0Z6SUZOMGNtVmhiWDBnWm5KdmJTQW5MaTl6ZEhKbFlXMG5PMXh1YVcxd2IzSjBJSHRrWldaaGRXeDBJR0Z6SUZCc1lYUm1iM0p0ZlNCbWNtOXRJQ2N1TDNCc1lYUm1iM0p0Snp0Y2JtbHRjRzl5ZENCbVpYUmphRk4wY21WaGJTQm1jbTl0SUNkbVpYUmphQzF5WldGa1lXSnNaWE4wY21WaGJTYzdYRzVjYm1OdmJuTjBJRTV2WkdWVGRISmxZVzFOYVhocGJuTWdQU0FvUm1WMFkyaERiR0Z6Y3lrOVBpQmpiR0Z6Y3lCbGVIUmxibVJ6SUVabGRHTm9RMnhoYzNON0lGeHVJQ0FnSUhOMFlYUnBZeUJoYzNsdVl5QnpkSEpsWVcxRVlYUmhLSFZ5YkNsN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzQnZibk5sSUQwZ1lYZGhhWFFnWm1WMFkyZ29kWEpzS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNCdmJuTmxMbk4wWVhSMWN5QStQU0EwTURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRVZ5Y205eUtGd2lRbUZrSUhKbGMzQnZibk5sSUdaeWIyMGdjMlZ5ZG1WeVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOd2IyNXpaUzVpYjJSNU8xeHVJQ0FnSUgxY2JuMDdYRzVjYm1OdmJuTjBJRmRsWWxOMGNtVmhiVTFwZUdsdWN5QTlJQ2hHWlhSamFFTnNZWE56S1QwK0lHTnNZWE56SUdWNGRHVnVaSE1nUm1WMFkyaERiR0Z6YzNzZ1hHNGdJQ0FnYzNSaGRHbGpJR0Z6ZVc1aklITjBjbVZoYlVSaGRHRW9kWEpzS1h0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsYzNCdmJuTmxJRDBnWVhkaGFYUWdabVYwWTJoVGRISmxZVzBvZFhKc0tUdGNiaUFnSUNBZ0lDQWdhV1lvY21WemNHOXVjMlV1YzNSaGRIVnpJRDQ5SURRd01DbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLSEpsYzNCdmJuTmxMbk4wWVhSMWN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWENKQ1lXUWdjbVZ6Y0c5dWMyVWdabkp2YlNCelpYSjJaWEpjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzUnlaV0Z0VW1WaFpHVnlJRDBnY21WemNHOXVjMlV1WW05a2VTNW5aWFJTWldGa1pYSW9LVHRjYmlBZ0lDQWdJQ0FnYkdWMElISmxZV1JsY2lBOUlGTjBjbVZoYlM1dFlXdGxVbVZoWkdGaWJHVW9LVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZqZFhOcGRtVlNaV0ZrSUQwZ0tDazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtUMCtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wY21WaGJWSmxZV1JsY2k1eVpXRmtLQ2t1ZEdobGJpZ29leUIyWVd4MVpTd2daRzl1WlNCOUtUMCtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aRzl1WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVmhaR1Z5TG5CMWMyZ29iblZzYkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0RBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlY3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldGa1pYSXVjSFZ6YUNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLREVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnVW1WaFpFNWxlSFFnUFNBb2NtVmpkWE5wZG1WU1pXRmtLVDArZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZqZFhOcGRtVlNaV0ZrS0NrdWRHaGxiaWhvWVhOT1pYaDBQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2FHRnpUbVY0ZENsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkpsWVdST1pYaDBLSEpsWTNWemFYWmxVbVZoWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJRkpsWVdST1pYaDBLSEpsWTNWemFYWmxVbVZoWkNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXRmtaWEk3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1kyeGhjM01nUm1WMFkyZ2daWGgwWlc1a2N5QlFiR0YwWm05eWJTNXRhWGhYYVhSb0tHWmxkR05vTENCN0oyNXZaR1VuT2lCYlRtOWtaVk4wY21WaGJVMXBlR2x1YzEwc0lDZDNaV0luT2x0WFpXSlRkSEpsWVcxTmFYaHBibk5kZlNsN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tYdDlYRzRnSUNBZ2MzUmhkR2xqSUdGemVXNWpJR1psZEdOb1JHRjBZU2gxY213cGUxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDazlQbnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWmxkR05vS0hWeWJDa3VkR2hsYmloeVpYTndiMjV6WlQwK2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOd2IyNXpaUzV6ZEdGMGRYTWdQajBnTkRBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9jbVZ6Y0c5dWMyVXVjM1JoZEhWektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLRndpUW1Ga0lISmxjM0J2Ym5ObElHWnliMjBnYzJWeWRtVnlYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzQnZibk5sTG5SbGVIUW9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR0Z6ZVc1aklHWmxkR05vU25OdmJpaDFjbXdwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1lYTjVibU1nS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2s5UG50Y2JpQWdJQ0FnSUNBZ0lDQWdJR1psZEdOb0tIVnliQ2t1ZEdobGJpaHlaWE53YjI1elpUMCtlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlM1emRHRjBkWE1nUGowZ05EQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvY21WemNHOXVjMlV1YzNSaGRIVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0Z3aVFtRmtJSEpsYzNCdmJuTmxJR1p5YjIwZ2MyVnlkbVZ5WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtISmxjM0J2Ym5ObExtcHpiMjRvS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVmVnh1WEc0aUxDSnBiWEJ2Y25RZ2NHeGhkR1p2Y20wZ1puSnZiU0FuY0d4aGRHWnZjbTBuTzF4dWFXMXdiM0owSUhCeWIyTmxjM01nWm5KdmJTQW5jSEp2WTJWemN5YzdYRzVjYm1OdmJuTjBJRkJzWVhSbWIzSnRUV0Z3Y0dsdVp5QTlJQ2h1WVcxbEtUMCtlMXh1SUNBZ0lHbG1LRzVoYldVZ1BUMDlJQ2RPYjJSbExtcHpKeWw3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuYm05a1pTYzdYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5kMlZpSnp0Y2JpQWdJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCUWJHRjBabTl5Ylh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncGUxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lYUm1iM0p0SUQwZ2NHeGhkR1p2Y20wN1hHNGdJQ0FnZlZ4dUlDQWdJSE4wWVhScFl5QlFTVVFvS1h0Y2JpQWdJQ0FnSUNBZ2FXWW9kSGx3Wlc5bUlIQnliMk5sYzNNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlIQnliMk5sYzNNdWNHbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISnZZMlZ6Y3k1d2FXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpYdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdOMWNuSmxiblJRYkdGMFptOXliU2dwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0d4aGRHWnZjbTB1Y0dGeWMyVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ2JXbDRWMmwwYUNoQ1lYTmxRMnhoYzNNc0lHMXBlR2x1Y3lsN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0YVhocGJuTk1hWE4wSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR2xtS0VGeWNtRjVMbWx6UVhKeVlYa29iV2w0YVc1ektTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCdGFYaHBibk5NYVhOMElEMGdiV2w0YVc1ek8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJWN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQlFaazVoYldVZ1BTQlFiR0YwWm05eWJVMWhjSEJwYm1jb2NHeGhkR1p2Y20wdWNHRnljMlVvS1ZzbmJtRnRaU2RkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFwZUdsdWMweHBjM1FnUFNCdGFYaHBibk5iVUdaT1lXMWxYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppaHRhWGhwYm5OTWFYTjBJRDA5UFNCMWJtUmxabWx1WldRcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb1lDUjdVR1pPWVcxbGZTQnViM1FnWm05MWJtUWdhVzRnYldsNGFXNXpZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUcxcGVHbHVjMHhwYzNRdWNtVmtkV05sS0NoakxDQnRhWGhwYmlrZ1BUNGdiV2w0YVc0b1l5a3NJRUpoYzJWRGJHRnpjeWs3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIc2dVRTVISUgwZ1puSnZiU0FuY0c1bmFuTXpKenRjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkJPUnpzaUxDSnBiWEJ2Y25RZ2NtRnVaRzl0SUdaeWIyMG5jbUZ1Wkc5dEp6dGNibVY0Y0c5eWRDQmtaV1poZFd4MElHTnNZWE56SUZOaGJYQnNhVzVuZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NsN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21GdVpHOXRJRDBnY21GdVpHOXRPeUFnSUNCY2JpQWdJQ0I5WEc0Z0lDQWdaMlYwSUVOdmNtVlNZVzVrYjIwb0tYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21GdVpHOXRPMXh1SUNBZ0lIMWNiaUFnSUNCemRHRjBhV01nYldGclpVTm9aV05yUlc1dmRXZG9LSE5wZW1VcGUxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tITmhiWEJzWlNrOVBuTmhiWEJzWlM1c1pXNW5kR2c4YzJsNlpUc2dJQ0FnWEc0Z0lDQWdmVnh1SUNBZ0lITjBZWFJwWXlCeVlXNW5aU2h6YVhwbEtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFRnljbUY1TG1aeWIyMG9ibVYzSUVac2IyRjBNekpCY25KaGVTaHphWHBsS1NrdWJXRndLQ2gyTEdrcFBUNXBLVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnYzNSaGRHbGpJR05vYjJsalpTaGhMQ0J6YVhwbExDQnlaWEJzWVdObFBXWmhiSE5sTENCd1BXNTFiR3dwZTF4dUlDQWdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdRWEp5WVhrdWFYTkJjbkpoZVNoaEtUOWhMbk5zYVdObEtEQXBPbE5oYlhCc2FXNW5MbkpoYm1kbEtHRXBPMXh1SUNBZ0lDQWdJQ0JwWmloemFYcGxQbVJ2YldGcGJpNXNaVzVuZEdnZ0ppWWdjbVZ3YkdGalpTQTlQVDBnZEhKMVpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJGY25KdmNpZ25jMkZ0Y0d4bElITnBlbVVnYzJoaGJHd2dibTkwSUdKcFoyZGxjaUIwYUdGdUlHUnZiV0ZwYmlCc1pXNW5kR2dnZDJsMGFHOTFkQ0J5WlhCc1lXTnBibWNuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnNaWFFnYzJGdGNHeGxjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCSFpYUlZkR2xzUlc1dmRXZG9JRDBnVTJGdGNHeHBibWN1YldGclpVTm9aV05yUlc1dmRXZG9LSE5wZW1VcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYVdSNElEMGdMVEU3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxLRWRsZEZWMGFXeEZibTkxWjJnb2MyRnRjR3hsY3lrcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdSNElEMGdjbUZ1Wkc5dExtbHVkQ2d3TENCa2IyMWhhVzR1YkdWdVozUm9MVEVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWkc5dFlXbHVXMmxrZUYwaFBUMXVkV3hzS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCellXMXdiR1Z6SUQwZ1d5NHVMbk5oYlhCc1pYTXNJR1J2YldGcGJsdHBaSGhkWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppZ2hjbVZ3YkdGalpTbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdmJXRnBibHRwWkhoZFBXNTFiR3c3THk5dWIyNGdjbVZ3YkdGalpXRmliR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnSUNBZ1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCellXMXdiR1Z6TzF4dUlDQWdJSDFjYm4waUxDSnBiWEJ2Y25RZ2MzUnlaV0Z0SUdaeWIyMGdKM0psWVdSaFlteGxMWE4wY21WaGJTYzdYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQmpiR0Z6Y3lCVGRISmxZVzE3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1h0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMGdQU0J6ZEhKbFlXMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRDQmpiM0psVTNSeVpXRnRLQ2w3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBjbVZoYlR0Y2JpQWdJQ0I5WEc0Z0lDQWdjM1JoZEdsaklHMWhhMlZTWldGa1lXSnNaU2h5WldGa1JtNDliblZzYkNsN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5WldGa1pYSWdQU0J1WlhjZ2MzUnlaV0Z0TGxKbFlXUmhZbXhsS0h0dlltcGxZM1JOYjJSbE9pQjBjblZsZlNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUVSbFptRjFiSFJTWldGa1pYSWdQU0FvS1QwK2UzMDdYRzRnSUNBZ0lDQWdJSEpsWVdSbGNpNWZjbVZoWkNBOUlISmxZV1JHYmlCOGZDQkVaV1poZFd4MFVtVmhaR1Z5TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WaFpHVnlPMXh1SUNBZ0lIMWNiaUFnSUNCemRHRjBhV01nZDNKaGNGSmxZV1JoWW14bEtISmxZV1JoWW14bFQySnFLWHRjYmlBZ0lDQWdJQ0FnYkdWMElISmxZV1JsY2lBOUlHNWxkeUJ6ZEhKbFlXMHVVbVZoWkdGaWJHVW9LVHRjYmlBZ0lDQWdJQ0FnY21WaFpHVnlMbmR5WVhBb2NtVmhaR0ZpYkdWUFltb3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZoWkdWeU8xeHVJQ0FnSUgxY2JpQWdJQ0J6ZEdGMGFXTWdiV0ZyWlZkeWFYUmhZbXhsS0hkeWFYUmxSbTRwZTF4dUlDQWdJQ0FnSUNCc1pYUWdkM0pwZEdWeUlEMGdibVYzSUhOMGNtVmhiUzVYY21sMFlXSnNaU2g3YjJKcVpXTjBUVzlrWlRvZ2RISjFaWDBwTzF4dUlDQWdJQ0FnSUNCM2NtbDBaWEl1WDNkeWFYUmxJRDBnZDNKcGRHVkdianRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSGR5YVhSbGNqdGNiaUFnSUNCOVhHNGdJQ0FnYzNSaGRHbGpJRzFoYTJWRWRYQnNaWGdvZDNKcGRHVkdiaXdnY21WaFpFWnVQVzUxYkd3cGUxeHVJQ0FnSUNBZ0lDQnNaWFFnWkhWd2JHVjRJRDBnYm1WM0lITjBjbVZoYlM1RWRYQnNaWGdvZTI5aWFtVmpkRTF2WkdVNklIUnlkV1Y5S1R0Y2JpQWdJQ0FnSUNBZ1pIVndiR1Y0TGw5M2NtbDBaU0E5SUhkeWFYUmxSbTQ3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRVJsWm1GMWJIUlNaV0ZrWlhJZ1BTQW9LVDArZTMwN1hHNGdJQ0FnSUNBZ0lHUjFjR3hsZUM1ZmNtVmhaQ0E5SUhKbFlXUkdiaUI4ZkNCRVpXWmhkV3gwVW1WaFpHVnlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaSFZ3YkdWNE8xeHVJQ0FnSUgxY2JpQWdJQ0J6ZEdGMGFXTWdiV0ZyWlZSeVlXNXpabTl5YlNoMGNtRnVabTl5YlVadUtYdGNiaUFnSUNBZ0lDQWdiR1YwSUhSeVlXNXpabTl5YldWeUlEMGdibVYzSUhOMGNtVmhiUzVVY21GdWMyWnZjbTBvZTI5aWFtVmpkRTF2WkdVNklIUnlkV1Y5S1R0Y2JpQWdJQ0FnSUNBZ2RISmhibk5tYjNKdFpYSXVYM1J5WVc1elptOXliU0E5SUhSeVlXNW1iM0p0Um00N1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNtRnVjMlp2Y20xbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nWVhONWJtTWdiV0ZyWlZCcGNHVnNhVzVsS0hOMGNtVmhiWE1zSUc5dVJHRjBZVVp1UFc1MWJHd3BlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2s5UG50Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCM2NtbDBaWElnUFNCemRISmxZVzF6TG5Oc2FXTmxLQzB4S1Zzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaV0ZrWlhJZ1BTQnpkSEpsWVcxeld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QzSnBkR1Z5TG05dUtDZG1hVzVwYzJnbkxDZ3BQVDU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2duYzNWalkyVnpjeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNjbWwwWlhJdWIyNG9KMlZ5Y205eUp5d29aWEp5S1QwK2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoZ1VHbHdaV3hwYm1VZ1ptRnBiR1ZrTGlBa2UyVnljbjFnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZoWkdWeUxtOXVLQ2RrWVhSaEp5d29aR0YwWVNrOVBudGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaWh2YmtSaGRHRkdiaWw3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVSR0YwWVVadUtHUmhkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlITjBjbVZoYlhNdWNtVmtkV05sS0Nod0xDQnpLVDArY0M1d2FYQmxLSE1wS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVmU0lzSWk4cUlDaHBaMjV2Y21Wa0tTQXFMeUlzSWk4cUlDaHBaMjV2Y21Wa0tTQXFMeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDE5WFJVSlFRVU5MWDBWWVZFVlNUa0ZNWDAxUFJGVk1SVjlqY205emMxOW1aWFJqYUY5Zk95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMTlYUlVKUVFVTkxYMFZZVkVWU1RrRk1YMDFQUkZWTVJWOW1aWFJqYUY5eVpXRmtZV0pzWlhOMGNtVmhiVjlmT3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gxOVhSVUpRUVVOTFgwVllWRVZTVGtGTVgwMVBSRlZNUlY5d2JHRjBabTl5YlY5Zk95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYMTlYUlVKUVFVTkxYMFZZVkVWU1RrRk1YMDFQUkZWTVJWOXdibWRxY3pOZlh6c2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZjbUZ1Wkc5dFgxODdJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09IiwiLyogKGlnbm9yZWQpICovIiwiLyogKGlnbm9yZWQpICovIl0sInNvdXJjZVJvb3QiOiIifQ==