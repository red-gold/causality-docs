[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js",
    "content": "/**\n * The EnsembleDeploymentMixins class is the mixis class for deploying ensemble model\n * @class CausalNet\n * @extends { BasePipelineClass }\n */\nconst EnsembleDeploymentMixins = (BasePipelineClass)=> class extends BasePipelineClass {\n    /**\n     * Provide EnsembleInferencer caller, EnsembleModelPredict must be set in prior\n     * @readonly\n     */\n    get EnsembleInferencer(){\n        const ModelLenses = ()=>({ EnsemblePredict: this.EnsembleModelPredict });\n        const T = this.T;\n        return async (input)=>{\n            let { EnsemblePredict } = input;\n            let infer = {};\n            if(EnsemblePredict){\n                let inputTensor = T.tensor(EnsemblePredict).asType('float32').reshape([1, -1]);\n                let predictTensor = await ModelLenses().EnsemblePredict(inputTensor);\n                infer.EnsemblePredict = await predictTensor.data();\n            }\n            return infer;\n        };\n    }\n    /**\n     * process pipelineConfig object for ensemble deployment\n     * @param { Object } pipelineConfig\n     * @returns\n     */\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set ensemble deployment by config');\n        this.Deployment.EnsembleInferencer = this.EnsembleInferencer;\n        this.Logger.groupEnd();\n        return pipelineConfig;\n    }\n    /**\n     * deploy model\n     * @returns { Promise } deployment summary\n     */\n    async deploy(){\n        return await this.Deployment.deploy();\n    }\n};\n\nexport default EnsembleDeploymentMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/Ensemble/ensembleDeployment.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "EnsembleDeploymentMixins",
    "memberof": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js",
    "static": true,
    "longname": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/Ensemble/ensembleDeployment.mixins.js",
    "importStyle": "EnsembleDeploymentMixins",
    "description": "The EnsembleDeploymentMixins class is the mixis class for deploying ensemble model",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNet"
      }
    ],
    "interface": false,
    "extends": [
      " BasePipelineClass "
    ]
  },
  {
    "__docId__": 2,
    "kind": "get",
    "name": "EnsembleInferencer",
    "memberof": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins#EnsembleInferencer",
    "access": "public",
    "description": "Provide EnsembleInferencer caller, EnsembleModelPredict must be set in prior",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins#setByConfig",
    "access": "public",
    "description": "process pipelineConfig object for ensemble deployment",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "pipelineConfig",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "deploy",
    "memberof": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleDeployment.mixins.js~EnsembleDeploymentMixins#deploy",
    "access": "public",
    "description": "deploy model",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } deployment summary"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "deployment summary"
    },
    "params": []
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "packages/causality/src/Ensemble/ensembleEvaluator.mixins.js",
    "content": "const EnsembleEvaluatorMixins = (BasePipelineClass)=> class extends BasePipelineClass{ \n    async ensembleTest(batchSize, method='accuracy'){\n        throw Error('implement require'); \n    }\n};\nexport default EnsembleEvaluatorMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/Ensemble/ensembleEvaluator.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "class",
    "name": "EnsembleEvaluatorMixins",
    "memberof": "packages/causality/src/Ensemble/ensembleEvaluator.mixins.js",
    "static": true,
    "longname": "packages/causality/src/Ensemble/ensembleEvaluator.mixins.js~EnsembleEvaluatorMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/Ensemble/ensembleEvaluator.mixins.js",
    "importStyle": "EnsembleEvaluatorMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "ensembleTest",
    "memberof": "packages/causality/src/Ensemble/ensembleEvaluator.mixins.js~EnsembleEvaluatorMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleEvaluator.mixins.js~EnsembleEvaluatorMixins#ensembleTest",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "batchSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "method",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "accuracy",
        "defaultValue": "accuracy"
      }
    ],
    "return": null
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "packages/causality/src/Ensemble/ensembleModel.mixins.js",
    "content": "/**\n * The EnsembleModelMixins class is the mixis class for ensemble model caller\n * @class EnsembleModelMixins\n * @extends {BasePipelineClass}\n */\nconst EnsembleModelMixins = (BasePipelineClass)=> class extends BasePipelineClass{ \n\n    get EnsembleModelPredict(){\n        const FitModel = this.FitModel;\n        const T = this.T;\n        const EnsembleModels = this.EnsembleModels;\n        const Bagging = async (inputTensor)=>{\n            let probFits = [];\n            for(let model of EnsembleModels){\n                await this.loadParams(model);\n                let prob = FitModel(inputTensor).exp();\n                probFits.push(prob);\n            }\n            let meanProb = T.stack(probFits).mean(0);\n            return meanProb.argMax(1);\n        };\n        return Bagging;   \n    }\n\n    set EnsembleModels(modelist){\n        this.ensembleModels = modelist;\n    }\n\n    get EnsembleModels(){\n        if(!this.ensembleModels){\n            throw Error('EnsembleModels is not set');\n        }\n        return this.ensembleModels;\n    }\n};\nexport default EnsembleModelMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/Ensemble/ensembleModel.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "class",
    "name": "EnsembleModelMixins",
    "memberof": "packages/causality/src/Ensemble/ensembleModel.mixins.js",
    "static": true,
    "longname": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/Ensemble/ensembleModel.mixins.js",
    "importStyle": "EnsembleModelMixins",
    "description": "The EnsembleModelMixins class is the mixis class for ensemble model caller",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EnsembleModelMixins"
      }
    ],
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 10,
    "kind": "get",
    "name": "EnsembleModelPredict",
    "memberof": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins#EnsembleModelPredict",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "set",
    "name": "EnsembleModels",
    "memberof": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins#EnsembleModels",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "ensembleModels",
    "memberof": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins",
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins#ensembleModels",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "get",
    "name": "EnsembleModels",
    "memberof": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleModel.mixins.js~EnsembleModelMixins#EnsembleModels",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "packages/causality/src/Ensemble/ensembleTrainer.mixins.js",
    "content": "/**\n * The EnsembleTrainerMixins class is the mixins class for training ensamblable models\n * @class EnsembleTrainerMixins\n * @extends {BasePipelineClass}\n */\nconst EnsembleTrainerMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    /**\n     * Train model and save to storage under the given filename. parameters is reinited for each training\n     * @param { Number } numEpochs\n     * @param { Number } batchSize\n     * @param { String } saveFileName\n     * @returns { Promise } Training losses\n     */\n    async ensembleTrain(numEpochs, batchSize, saveFileName){\n        this.LayerRunner.NetParameters = this.ParameterInitializer(this.LayerRunner.NetLayers);\n        let {losses} = await this.train(numEpochs, batchSize);\n        await this.saveParams(saveFileName);\n        return {[saveFileName]: losses};\n    }\n};\n\nexport default EnsembleTrainerMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/Ensemble/ensembleTrainer.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "class",
    "name": "EnsembleTrainerMixins",
    "memberof": "packages/causality/src/Ensemble/ensembleTrainer.mixins.js",
    "static": true,
    "longname": "packages/causality/src/Ensemble/ensembleTrainer.mixins.js~EnsembleTrainerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/Ensemble/ensembleTrainer.mixins.js",
    "importStyle": "EnsembleTrainerMixins",
    "description": "The EnsembleTrainerMixins class is the mixins class for training ensamblable models",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EnsembleTrainerMixins"
      }
    ],
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "ensembleTrain",
    "memberof": "packages/causality/src/Ensemble/ensembleTrainer.mixins.js~EnsembleTrainerMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality/src/Ensemble/ensembleTrainer.mixins.js~EnsembleTrainerMixins#ensembleTrain",
    "access": "public",
    "description": "Train model and save to storage under the given filename. parameters is reinited for each training",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Training losses"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "numEpochs",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "batchSize",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "saveFileName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Training losses"
    }
  },
  {
    "__docId__": 17,
    "kind": "file",
    "name": "packages/causality/src/Ensemble/index.js",
    "content": "export { default as EnsembleTrainerMixins } from './ensembleTrainer.mixins'; \nexport { default as EnsembleModelMixins } from './ensembleModel.mixins'; \nexport { default as EnsembleDeploymentMixins } from './ensembleDeployment.mixins';\nexport { default as EnsembleEvaluatorMixins } from './ensembleEvaluator.mixins'; ",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/Ensemble/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 18,
    "kind": "file",
    "name": "packages/causality/src/causalNet.js",
    "content": "import { DataSourceMixins } from 'causal-net.datasets';\nimport { PreprocessingMixins, causalNetPreprocessingStream } from 'causal-net.preprocessing';\nimport { TrainerMixins, EvaluatorMixins } from 'causal-net.optimizers';\nimport { ModelMixins } from 'causal-net.models';\nimport { causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { Tensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { causalNetDeployment, DeploymentMixins } from 'causal-net.deployment';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\nimport { default as functor } from './functor';\nimport { EnsembleTrainerMixins, EnsembleModelMixins, EnsembleDeploymentMixins } from './Ensemble/index';\n\n/**\n * The CausalNet class is the prebuilt pipeline with methods for \n * processing data/train/evaluate/deploy/ensemble deploy\n * { mixWith: [ \n *         DataSourceMixins,\n *         PreprocessingMixins,\n *         LayerRunnerMixins, \n *         ModelMixins, \n *         EvaluatorMixins,\n *         TrainerMixins, \n *         LoggerMixins,\n *         DeploymentMixins,\n *         EnsembleTrainerMixins,\n *         EnsembleModelMixins, \n *         EnsembleDeploymentMixins ] }\n * @class CausalNet\n * @extends {Tensor}\n * @example\n * [EXAMPLE ../examples/causalNet/ensemble.logisticRegression.babel.js]\n */\nclass CausalNet extends platform.mixWith(Tensor, [ \n        DataSourceMixins,\n        PreprocessingMixins,\n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        TrainerMixins, \n        LoggerMixins,\n        DeploymentMixins,\n        EnsembleTrainerMixins,\n        EnsembleModelMixins, \n        EnsembleDeploymentMixins ]){\n    /**\n     *Creates an instance of CausalNet.\n     * @param { Functor } functor\n     * @param { Log } logger\n     * @param { Functor } streamPreprocessing\n     * @param { Tensor } netParameters\n     * @param { Tensor } netRunner\n     * @param { Event } streamDeployment\n     * @memberof CausalNet\n     */\n    constructor( functor, logger, streamPreprocessing, netRunner, streamDeployment){\n        super();\n        this.F = functor;\n        this.R = this.F.CoreFunctor;\n        this.Logger = logger;\n        this.Preprocessing = streamPreprocessing;\n        this.LayerRunner = netRunner;        \n        this.Deployment = streamDeployment;\n    }\n}\n\nexport default new  CausalNet(  functor, \n                                termLogger, \n                                causalNetPreprocessingStream, \n                                causalNetRunner, \n                                causalNetDeployment );",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/causalNet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 19,
    "kind": "class",
    "name": "CausalNet",
    "memberof": "packages/causality/src/causalNet.js",
    "static": true,
    "longname": "packages/causality/src/causalNet.js~CausalNet",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/causalNet.js",
    "importStyle": null,
    "description": "The CausalNet class is the prebuilt pipeline with methods for \nprocessing data/train/evaluate/deploy/ensemble deploy\n{ mixWith: [ \n        DataSourceMixins,\n        PreprocessingMixins,\n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        TrainerMixins, \n        LoggerMixins,\n        DeploymentMixins,\n        EnsembleTrainerMixins,\n        EnsembleModelMixins, \n        EnsembleDeploymentMixins ] }",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality/src/causalNet.js, /home/huynhnguyen/github/causality/packages/causality/examples/causalNet/ensemble.logisticRegression.babel.js]"
    ],
    "lineNumber": 33,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNet"
      }
    ],
    "interface": false,
    "extends": [
      "Tensor"
    ]
  },
  {
    "__docId__": 20,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#constructor",
    "access": "public",
    "description": "Creates an instance of CausalNet.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          " Functor "
        ],
        "spread": false,
        "optional": false,
        "name": "functor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Log "
        ],
        "spread": false,
        "optional": false,
        "name": "logger",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Functor "
        ],
        "spread": false,
        "optional": false,
        "name": "streamPreprocessing",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Tensor "
        ],
        "spread": false,
        "optional": false,
        "name": "netParameters",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Tensor "
        ],
        "spread": false,
        "optional": false,
        "name": "netRunner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Event "
        ],
        "spread": false,
        "optional": false,
        "name": "streamDeployment",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#F",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#R",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "Logger",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#Logger",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "Preprocessing",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#Preprocessing",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "LayerRunner",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "Deployment",
    "memberof": "packages/causality/src/causalNet.js~CausalNet",
    "static": false,
    "longname": "packages/causality/src/causalNet.js~CausalNet#Deployment",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "name": "causalNet",
    "memberof": "packages/causality/src/causalNet.js",
    "static": true,
    "longname": "packages/causality/src/causalNet.js~causalNet",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/causalNet.js",
    "importStyle": "causalNet",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality/src/causalNet.js~CausalNet"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "file",
    "name": "packages/causality/src/functor.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\n/**\n * This Functor class provides common used data processing methods for pipeline\n * @class Functor\n * @extends BaseFunctor\n */\nclass Functor extends platform.mixWith(BaseFunctor, [] ){\n    constructor(){\n        super();\n    }\n}\n\nexport default new Functor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 29,
    "kind": "class",
    "name": "Functor",
    "memberof": "packages/causality/src/functor.js",
    "static": true,
    "longname": "packages/causality/src/functor.js~Functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/functor.js",
    "importStyle": null,
    "description": "This Functor class provides common used data processing methods for pipeline",
    "lineNumber": 8,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Functor"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 30,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality/src/functor.js~Functor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 31,
    "kind": "variable",
    "name": "functor",
    "memberof": "packages/causality/src/functor.js",
    "static": true,
    "longname": "packages/causality/src/functor.js~functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality/src/functor.js",
    "importStyle": "functor",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality/src/functor.js~Functor"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "packages/causality/src/index.js",
    "content": "export { default as causalNet } from './causalNet';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "file",
    "name": "packages/causality-core/src/causalNetCore.js",
    "content": "import { default as Tensor } from './tensor';\nimport { default as Functor } from './functor';\n/**\n * CausalNetCore class provides access to core function and core tensor\n *\n * @class CausalNetCore\n * @example\n * [EXAMPLE ../examples/core.babel.js]\n */\nclass CausalNetCore{\n    constructor(){\n    }\n    get CoreFunctor(){\n        this.F = new Functor();\n        return this.F.CoreFunctor; \n    }\n\n    get CoreTensor(){\n        this.T = new Tensor();\n        return this.T.CoreTensor; \n    }\n}\nexport default new CausalNetCore();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/causalNetCore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 34,
    "kind": "class",
    "name": "CausalNetCore",
    "memberof": "packages/causality-core/src/causalNetCore.js",
    "static": true,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/causalNetCore.js",
    "importStyle": null,
    "description": "CausalNetCore class provides access to core function and core tensor",
    "examples": [
      "import { causalNetCore } from 'causal-net.core';\nconsole.log(causalNetCore.CoreTensor);\nconsole.log(causalNetCore.CoreFunctor);"
    ],
    "lineNumber": 13,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetCore"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 35,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 36,
    "kind": "get",
    "name": "CoreFunctor",
    "memberof": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore#CoreFunctor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "static": false,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore#F",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "get",
    "name": "CoreTensor",
    "memberof": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore#CoreTensor",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "T",
    "memberof": "packages/causality-core/src/causalNetCore.js~CausalNetCore",
    "static": false,
    "longname": "packages/causality-core/src/causalNetCore.js~CausalNetCore#T",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "variable",
    "name": "causalNetCore",
    "memberof": "packages/causality-core/src/causalNetCore.js",
    "static": true,
    "longname": "packages/causality-core/src/causalNetCore.js~causalNetCore",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/causalNetCore.js",
    "importStyle": "causalNetCore",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-core/src/causalNetCore.js~CausalNetCore"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "packages/causality-core/src/event.js",
    "content": "import { EventEmitter } from 'events';\n/**\n * class Event is the primitive class for composing higher event-based class. \n * @export {EventEmitter}\n * @class Event\n * @extends {EventEmitter}\n * @example\n * [EXAMPLE ../examples/event.babel.js]\n */\nexport default class Event extends EventEmitter{\n    constructor(){\n        super();\n    }\n\n    async emit(name, data){\n        return new Promise((resolve, reject)=>{\n            super.emit(name, data, (msg)=>{\n                resolve(msg);\n            });\n        });\n    }\n\n    on(name, handler, bypass=false){\n        const Handler = bypass?handler:(data, cb)=>{\n            let message = handler(data);\n            cb(message);\n        };\n        super.on(name, Handler);\n    }\n\n    pipe(destStream){\n        let events = destStream.eventNames();\n        for(let event of events){\n            this.on(event, async (data, cb)=>{ \n                let message = await destStream.emit(event, data);\n                cb(message);\n            }, true);\n        }\n    }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/event.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 42,
    "kind": "class",
    "name": "Event",
    "memberof": "packages/causality-core/src/event.js",
    "static": true,
    "longname": "packages/causality-core/src/event.js~Event",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/event.js",
    "importStyle": "Event",
    "description": "class Event is the primitive class for composing higher event-based class. ",
    "examples": [
      "import { Event } from 'causal-net.core';\n\n(async ()=>{\n    let eventA = new Event();\n    let eventB = new Event();    \n    eventA.on('data', (data)=>{\n        console.log({'event handler': data});\n        return 'this is done';\n    })\n    console.log(await eventA.emit('data', [1,2,3]));\n    console.log('send event');\n    eventB.pipe(eventA);\n    console.log(await eventB.emit('data', ['1,2,3']));\n})();"
    ],
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Event"
      }
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 43,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-core/src/event.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/event.js~Event#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "emit",
    "memberof": "packages/causality-core/src/event.js~Event",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/event.js~Event#emit",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "on",
    "memberof": "packages/causality-core/src/event.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/event.js~Event#on",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      },
      {
        "name": "bypass",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 46,
    "kind": "method",
    "name": "pipe",
    "memberof": "packages/causality-core/src/event.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/event.js~Event#pipe",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "destStream",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 47,
    "kind": "file",
    "name": "packages/causality-core/src/functor.js",
    "content": "/**\n * class Functor is the primitive class for composing higher functor based class.\n * This class wrap [Ramda](https://ramdajs.com/) for providing Functional programming style method.\n * @example\n * [EXAMPLE ../examples/functor.babel.js]\n */\nclass Functor {\n    constructor(){\n        /**\n         * @private { Object } Ramda instance\n         */\n        this.R = require('ramda');\n    \n        /**\n         * @private { Logger } logger   \n         */        \n        this.logger = console;\n    }\n    /**\n     * This method return core Ramda instance\n     * @readonly\n     * @memberof Functor\n     */\n    get CoreFunctor(){\n        return this.R;\n    }\n    \n    /**\n     *\n     * @param { Array } keys\n     * @param { Object } item\n     * @param { Any } defaultValue - return value in case of not found\n     * @returns { Any } return found value or defaultValue\n     * @memberof Functor\n     */\n    getIn(keys, item, defaultValue){\n        return this.R.pathOr(defaultValue, keys, item);\n    }\n    \n    /**\n     * set value into object by the keys list\n     * @param { Array } keys\n     * @param { Object } value\n     * @param { Object } item - item to set\n     * @returns { Any } return found value or defaultValue\n     * @memberof Functor\n     */\n    setIn(keys, value, item){\n        return this.R.assocPath(keys, value, item);\n    }\n\n    /**\n     * zip two array\n     * @param { Array } pairs - two arrays to zip\n     * @returns { Array } array after zip\n     * @memberof Functor\n     */\n    zip(...pairs){\n        return this.R.zip(...pairs);\n    }\n    /**\n     * Unzip array of pairs to two arrays\n     * @param { Array } pairs - array of pairs to unzip\n     * @returns { [Array1, Array2] } - two arrays \n     * @memberof Functor\n     */\n    unzip(pairs){\n        const R = this.R;\n        const Unzip = (uz, [v1, v2])=>{\n            uz[0] = [...uz[0], v1];\n            uz[1] = [...uz[1], v2];\n            return uz;\n        };\n        return R.reduce(Unzip,[[], []],pairs);\n    }\n\n    /**\n     * Return an array with the given range\n     * @param { Array } size - array of pairs to unzip\n     * @returns { [Array] } - arrays from [beginAt, ...size]\n     * @memberof Functor\n     */\n    range(size, beginIdx=0){\n        const R = this.R;\n        return R.range(beginIdx, size);\n    }\n\n    enumerate(array){\n        const R = this.R;\n        return R.addIndex(R.map)((v,i)=>([i,v]))(array);\n    }    \n    zeros(range){\n        const R = this.R;\n        return R.compose(R.map(()=>0), R.range(0))(range);\n    }\n    ones(range){\n        const R = this.R;\n        return R.compose(R.map(()=>1), R.range(0))(range);\n    }\n}\n\nexport default Functor;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 48,
    "kind": "class",
    "name": "Functor",
    "memberof": "packages/causality-core/src/functor.js",
    "static": true,
    "longname": "packages/causality-core/src/functor.js~Functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/functor.js",
    "importStyle": "Functor",
    "description": "class Functor is the primitive class for composing higher functor based class.\nThis class wrap [Ramda](https://ramdajs.com/) for providing Functional programming style method.",
    "examples": [
      "import { Functor } from 'causal-net.core';\n\n(async ()=>{\n    let functor = new Functor();\n    console.log(functor.range(10));\n    console.log(functor.zeros(10));\n    console.log(functor.ones(10));\n})();"
    ],
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 49,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#R",
    "access": "private",
    "description": "",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "logger",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#logger",
    "access": "private",
    "description": "",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "get",
    "name": "CoreFunctor",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#CoreFunctor",
    "access": "public",
    "description": "This method return core Ramda instance",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "getIn",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#getIn",
    "access": "public",
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Any } return found value or defaultValue"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Any "
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "return value in case of not found"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Any "
      ],
      "spread": false,
      "description": "return found value or defaultValue"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "setIn",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#setIn",
    "access": "public",
    "description": "set value into object by the keys list",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Any } return found value or defaultValue"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "keys",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "item to set"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Any "
      ],
      "spread": false,
      "description": "return found value or defaultValue"
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "zip",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#zip",
    "access": "public",
    "description": "zip two array",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } array after zip"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "pairs",
        "description": "two arrays to zip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array after zip"
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "unzip",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#unzip",
    "access": "public",
    "description": "Unzip array of pairs to two arrays",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ [Array1, Array2] } - two arrays "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "pairs",
        "description": "array of pairs to unzip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " [Array1, Array2] "
      ],
      "spread": false,
      "description": "two arrays"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "range",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#range",
    "access": "public",
    "description": "Return an array with the given range",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ [Array] } - arrays from [beginAt, ...size]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "array of pairs to unzip"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " [Array] "
      ],
      "spread": false,
      "description": "arrays from [beginAt, ...size]"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "enumerate",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#enumerate",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "zeros",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#zeros",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "ones",
    "memberof": "packages/causality-core/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/functor.js~Functor#ones",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "packages/causality-core/src/index.js",
    "content": "export { default as Tensor } from './tensor';\nexport { default as Functor } from './functor';\nexport { default as Store } from './store';\nexport { default as Event } from './event';\nexport { default as causalNetCore } from './causalNetCore';\n\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "packages/causality-core/src/store.js",
    "content": "/**\n * class Store is the primitive class for composing higher storage class.\n * This class wrap [levelup](https://www.tensorflow.org/js) \n * for connect with abstract-leveldown compliant stores.\n * @class Store\n */\nexport default class Store{\n    \n    constructor(){\n        this.levelup = require('levelup');\n        this.logger = console;\n    }\n    \n    async connect(){\n        throw Error('implement required');\n    }\n\n    /**\n     * Get item given the key\n     * @param { String } key - key name\n     * @param {boolean} [asBuffer=false] - return object or buffer array, default object\n     * @returns { Object } item object \n     */\n    async getItem(key, asBuffer=false, noError=false){\n        if(!this.store){\n            throw Error('store is not connect');\n        }\n        return new Promise((resolve, reject)=>{\n            this.store.get(key, {asBuffer}, (err, data)=>{\n                if(err){\n                    if(noError){\n                        resolve({[key]: null});\n                    }\n                    else{\n                        this.logger.debug({key, err});\n                        reject('error read');\n                    }\n                }\n                else{\n                    resolve({[key]: data});\n                }\n            });\n        });\n    }\n    /**\n     * Set new item with the given key and value\n     * @param { String } key - key name of item\n     * @param { Object } data - value of item\n     * @returns { Promise } - new key promise\n     * @memberof MemoryCache\n     */\n    async setItem(key, data, noError=false){\n        if(!this.store){\n            throw Error('store is not connect');\n        }\n        return new Promise((resolve, reject)=>{\n            this.store.put(key, data, (err)=>{\n                if(err){\n                    if(noError){\n                        resolve({[key]: null});\n                    }\n                    else{\n                        this.logger.debug({key, err});\n                        reject('error write');\n                    }\n                }\n                else{\n                    resolve({[key]: data});\n                }\n            });\n        });\n    }\n    /**\n     * Delete item given the item key\n     * @param { String } key - key name to delete\n     * @returns { Promise } deleted key promise\n     * @memberof MemoryCache\n     */\n    async delItem(key, noError=false){\n        if(!this.store){\n            throw Error('store is not connect');\n        }\n        return new Promise((resolve, reject)=>{\n            this.store.del(key, (err)=>{\n                if(err){\n                    if(noError){\n                        resolve(null);\n                    }\n                    else{\n                        this.logger.debug(err);\n                        reject(`error delete ${key}`);\n                    }\n                }\n                else{\n                    resolve(key);\n                }\n            });\n        });\n    }\n    /**\n     * Make name maching function based on prefix path\n     * @param { String } pattern - prefix name\n     * @returns { Function } name matching function\n     * @memberof MemoryCache\n     */\n    makeCheckItemNameFn(pattern){\n        var regex = new RegExp(`${pattern}.*`,'g');\n        return (fileName)=>fileName.match(regex) || [];\n    }\n    \n    /**\n     * Get the current items under the prefix path\n     * @param { String } namePrefix\n     * @returns { Array } list of item names\n     * @memberof MemoryCache\n     */\n    async getItemList(namePrefix, noError=false){\n        if(!this.store){\n            throw Error('store is not connect');\n        }\n        const NameTester = this.makeCheckItemNameFn(namePrefix);\n        return new Promise((resolve, reject)=>{\n            let fileList = [];\n            this.store.createKeyStream()\n                .on('data', (key) =>{\n                    key = key.toString('utf8');\n                    if(NameTester(key).length===1){\n                        fileList.push(key);\n                    }\n                })\n                .on('close', () => resolve(fileList) )\n                .on('end',  () => resolve(fileList) )\n                .on('error', (err) =>{ \n                    if(noError){\n                        resolve(fileList);\n                    }\n                    else{\n                        this.logger.debug( err );\n                        reject(`error getItemList ${namePrefix}`);\n                    }\n                });\n        });\n    }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/store.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "Store",
    "memberof": "packages/causality-core/src/store.js",
    "static": true,
    "longname": "packages/causality-core/src/store.js~Store",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/store.js",
    "importStyle": "Store",
    "description": "class Store is the primitive class for composing higher storage class.\nThis class wrap [levelup](https://www.tensorflow.org/js) \nfor connect with abstract-leveldown compliant stores.",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Store"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "levelup",
    "memberof": "packages/causality-core/src/store.js~Store",
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#levelup",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "logger",
    "memberof": "packages/causality-core/src/store.js~Store",
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#logger",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#connect",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "getItem",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#getItem",
    "access": "public",
    "description": "Get item given the key",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object } item object "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "key name"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "asBuffer",
        "description": "return object or buffer array, default object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "item object"
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "setItem",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#setItem",
    "access": "public",
    "description": "Set new item with the given key and value",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - new key promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "key name of item"
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "value of item"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "new key promise"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "delItem",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#delItem",
    "access": "public",
    "description": "Delete item given the item key",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } deleted key promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "key name to delete"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "deleted key promise"
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "makeCheckItemNameFn",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#makeCheckItemNameFn",
    "access": "public",
    "description": "Make name maching function based on prefix path",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Function } name matching function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "pattern",
        "description": "prefix name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Function "
      ],
      "spread": false,
      "description": "name matching function"
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getItemList",
    "memberof": "packages/causality-core/src/store.js~Store",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-core/src/store.js~Store#getItemList",
    "access": "public",
    "description": "Get the current items under the prefix path",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } list of item names"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "namePrefix",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "list of item names"
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "packages/causality-core/src/tensor.js",
    "content": "/**\n * class Tensor is the primitive class for composing higher tensor based class.\n * This class wrap [tensorflowjs](https://www.tensorflow.org/js) for providing tensor calculation\n * @class Tensor\n * @example\n * [EXAMPLE ../examples/tensor.babel.js]\n */\nexport default class Tensor{\n    constructor(){\n        this.T = require('@tensorflow/tfjs-node');\n        // require('@tensorflow/tfjs-node-gpu');\n    }\n    /**\n     * This method return the core tensor instance\n     * @readonly\n     * @memberof Tensor\n     */\n    get CoreTensor(){\n        return this.T;\n    }\n    /**\n     * Check if object is tensor\n     * @param { Object } object\n     * @returns { Boolean } true if input is tensor\n     * @memberof Tensor\n     */\n    isTensor(object){\n       return object instanceof this.T.Tensor; \n    }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/src/tensor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "Tensor",
    "memberof": "packages/causality-core/src/tensor.js",
    "static": true,
    "longname": "packages/causality-core/src/tensor.js~Tensor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-core/src/tensor.js",
    "importStyle": "Tensor",
    "description": "class Tensor is the primitive class for composing higher tensor based class.\nThis class wrap [tensorflowjs](https://www.tensorflow.org/js) for providing tensor calculation",
    "examples": [
      "import { Tensor, causalNetCore } from 'causal-net.core';\nlet tensor = new Tensor();\nlet T = causalNetCore.CoreTensor;\nlet ta = T.tensor([1, 2]);\nconsole.log(tensor.isTensor(ta));\nconsole.log(tensor.isTensor([1,2,3]));"
    ],
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Tensor"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-core/src/tensor.js~Tensor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/tensor.js~Tensor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "T",
    "memberof": "packages/causality-core/src/tensor.js~Tensor",
    "static": false,
    "longname": "packages/causality-core/src/tensor.js~Tensor#T",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "CoreTensor",
    "memberof": "packages/causality-core/src/tensor.js~Tensor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/tensor.js~Tensor#CoreTensor",
    "access": "public",
    "description": "This method return the core tensor instance",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "isTensor",
    "memberof": "packages/causality-core/src/tensor.js~Tensor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-core/src/tensor.js~Tensor#isTensor",
    "access": "public",
    "description": "Check if object is tensor",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Boolean } true if input is tensor"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Boolean "
      ],
      "spread": false,
      "description": "true if input is tensor"
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "packages/causality-datasets/src/Readers/bufferReader.mixins.js",
    "content": "import { bufferUtils } from 'causal-net.utils';\nconst BufferReaderMixins = ( BaseDataSource ) => class extends BaseDataSource {\n    makeBufferReader(baseLink, SplitFnLense=(d)=>(d)){\n        return async (fileName) => {\n            \n            let chunkData = [];\n            if( baseLink.startsWith('http') ){\n                chunkData = await bufferUtils.fetchBuffer(baseLink + fileName);\n            }           \n            else{\n                chunkData =  await bufferUtils.readBuffer(baseLink + fileName);\n            }\n            return SplitFnLense(chunkData);\n        };\n    }\n};\n\nexport default BufferReaderMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/Readers/bufferReader.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "BufferReaderMixins",
    "memberof": "packages/causality-datasets/src/Readers/bufferReader.mixins.js",
    "static": true,
    "longname": "packages/causality-datasets/src/Readers/bufferReader.mixins.js~BufferReaderMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/Readers/bufferReader.mixins.js",
    "importStyle": "BufferReaderMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseDataSource"
    ]
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "makeBufferReader",
    "memberof": "packages/causality-datasets/src/Readers/bufferReader.mixins.js~BufferReaderMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/Readers/bufferReader.mixins.js~BufferReaderMixins#makeBufferReader",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "baseLink",
        "types": [
          "*"
        ]
      },
      {
        "name": "SplitFnLense",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "packages/causality-datasets/src/Readers/csvReader.mixins.js",
    "content": "import { csvUtils } from 'causal-net.utils';\nconst CSVReaderMixins = ( BaseDataSource ) => class extends BaseDataSource {\n    extractingAttribute(rows, sampleAttributes=[], labelAttributes=[]){\n        let samples = [], labels = [];\n        let i = 0;\n        for(let row of rows){\n            if(sampleAttributes.length){\n                samples.push(sampleAttributes.map(k=>row[k]));\n            }\n            if(labelAttributes.length){\n                labels.push(labelAttributes.map(k=>row[k]));\n            }\n        }\n        if(samples.length>0 && labels.length>0){\n            return {samples, labels};\n        }\n        else if(samples.length>0){\n            return samples;\n        }\n        else if(labels.length>0){\n            return labels;\n        }\n        else{\n            throw Error(`${JSON.stringify(rows)} do not match ${sampleAttributes} and ${labelAttributes}`);\n        }\n    }\n    makeCSVReader(baseLink, sampleAttributes=[], labelAttributes=[]){\n        if( baseLink.startsWith('http') ){\n            return async (fileName) => {\n                let rows = await csvUtils.fetchCSV(baseLink + fileName);\n                return this.extractingAttribute(rows, sampleAttributes, labelAttributes);\n            };\n        }\n        else{\n            return async (fileName) => { \n                let rows = await csvUtils.readCSV(baseLink + fileName);\n                return this.extractingAttribute(rows, sampleAttributes, labelAttributes);\n            };\n        }\n    }\n};\n\nexport default CSVReaderMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/Readers/csvReader.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "CSVReaderMixins",
    "memberof": "packages/causality-datasets/src/Readers/csvReader.mixins.js",
    "static": true,
    "longname": "packages/causality-datasets/src/Readers/csvReader.mixins.js~CSVReaderMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/Readers/csvReader.mixins.js",
    "importStyle": "CSVReaderMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseDataSource"
    ]
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "extractingAttribute",
    "memberof": "packages/causality-datasets/src/Readers/csvReader.mixins.js~CSVReaderMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/Readers/csvReader.mixins.js~CSVReaderMixins#extractingAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "rows",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleAttributes",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "labelAttributes",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "makeCSVReader",
    "memberof": "packages/causality-datasets/src/Readers/csvReader.mixins.js~CSVReaderMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/Readers/csvReader.mixins.js~CSVReaderMixins#makeCSVReader",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "baseLink",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleAttributes",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "labelAttributes",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "packages/causality-datasets/src/Readers/init.js",
    "content": "export { default as PNGReaderMixins } from './pngReader.mixins';\nexport { default as CSVReaderMixins } from './csvReader.mixins';\nexport { default as BufferReaderMixins } from './bufferReader.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/Readers/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "packages/causality-datasets/src/Readers/pngReader.mixins.js",
    "content": "import { pngUtils } from 'causal-net.utils';\nconst PNGReaderMixins = ( BaseDataSource ) => class extends BaseDataSource {\n    makePNGReader(baseLink, SplitFnLense=(d)=>(d)){\n        return async (fileName) => { \n            let chunkData = [];\n            if( baseLink.startsWith('http') ){\n                chunkData = await pngUtils.fetchPNG(baseLink + fileName); \n            }\n            else{\n                chunkData = await pngUtils.readPNG(baseLink + fileName);\n            }\n            return SplitFnLense(chunkData);\n        };\n    }\n};\n\nexport default PNGReaderMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/Readers/pngReader.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "class",
    "name": "PNGReaderMixins",
    "memberof": "packages/causality-datasets/src/Readers/pngReader.mixins.js",
    "static": true,
    "longname": "packages/causality-datasets/src/Readers/pngReader.mixins.js~PNGReaderMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/Readers/pngReader.mixins.js",
    "importStyle": "PNGReaderMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseDataSource"
    ]
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "makePNGReader",
    "memberof": "packages/causality-datasets/src/Readers/pngReader.mixins.js~PNGReaderMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/Readers/pngReader.mixins.js~PNGReaderMixins#makePNGReader",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "baseLink",
        "types": [
          "*"
        ]
      },
      {
        "name": "SplitFnLense",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "packages/causality-datasets/src/causalNetDataSource.js",
    "content": "import { Event } from 'causal-net.core';\nimport { default as functor } from './functor';\nimport { platform, jsonUtils } from 'causal-net.utils';\nimport { causalNetSampling, SamplingMixins } from 'causal-net.sampling';\nimport { PNGReaderMixins, BufferReaderMixins, CSVReaderMixins } from './Readers/init';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n/**\n * This CausalNetDataSource class provides a standard implementation for pipeline Source.\n * { mixWith: [ SamplingMixins, PNGReaderMixins, BufferReaderMixins ]}\n * @class CausalNetDataSource\n * @extends Event\n * @experiment\n * @example\n * [EXAMPLE ../examples/causalNetDataSource.js]\n */\nclass CausalNetDataSource extends platform.mixWith( Event, [\n    SamplingMixins, PNGReaderMixins, CSVReaderMixins, LoggerMixins, BufferReaderMixins ] ){\n    /**\n     *Creates an instance of CausalNetDataSource.\n     * @param {Functor} functor\n     * @param {Functor} sampling\n     * @memberof CausalNetDataSource\n     */\n    constructor(functor, logger, sampling){\n        super();\n        this.F = functor;\n        this.R = functor.CoreFunctor;\n        this.Logger = logger;\n        this.Sampling = sampling;\n    }\n\n    async connect(baseLink){\n        if(!baseLink){\n            throw Error(`expect baseLink get ${JSON.stringify(baseLink)}`);\n        }\n        let descriptionLink = baseLink + '/dataset.summary.json';\n\n        this.Logger.groupBegin('query datasource');\n        this.Logger.log({descriptionLink});\n        \n        this.description = await this.query(descriptionLink);\n        this.description.BaseLink = baseLink;\n        this.setChunks(this.description);\n        this.setSampleSize(this.description);\n        this.setLabelSize(this.description);\n        this.setDataReader(this.description);\n        this.Logger.groupEnd();\n        return this.description;\n    }\n    \n\n    /**\n     * fetch or read configure depends on provied link format\n     * @param {*} link\n     * @returns\n     * @memberof CausalNetEmbedding\n     */\n    async query(link){\n        if(link.startsWith('http')){\n            return await jsonUtils.fetchJSON(link);\n        }\n        else{\n            return await jsonUtils.readJSON(link);\n        }\n    }\n\n    get DataChunks(){\n        return this.dataChunks;\n    }\n\n    get SampleReader(){\n        return this.sampleReader;\n    }\n\n    get LabelReader(){\n        return this.labelReader;\n    }\n\n    get DataReader(){\n        return this.dataReader;\n    }\n\n    get SampleSize(){\n        if(!this.sampleSize){\n            throw Error('SampleSize is not set');\n        }\n        return this.sampleSize;\n    }\n\n    get LabelSize(){\n        if(!this.labelSize){\n            throw Error('labelSize is not set');\n        }\n        return this.labelSize;\n    }\n\n    setSampleSize(description){\n        let { SampleSize } = description;\n        if(!SampleSize){\n            throw Error(`expect { SampleSize }  get ${JSON.stringify(description, null, 4)}`);\n        }\n        if(Array.isArray(SampleSize)){\n            this.sampleSize = SampleSize.reduce((s,d)=>s*d);\n        }\n        else{\n            this.sampleSize = SampleSize;\n        }\n    }\n\n    setLabelSize(description){\n        let { LabelSize } = description;\n        if(!LabelSize){\n            throw Error(`expect { LabelSize }  get ${JSON.stringify(description, null, 4)}`);\n        }\n        if(Array.isArray(LabelSize)){\n            this.labelSize = LabelSize.reduce((s,d)=>s*d);\n        }\n        else{\n            this.labelSize = LabelSize;\n        }\n    }\n\n    setChunks(description){\n        const { SampleChunkName, LabelChunkName, ChunkList } = description;\n        if(!SampleChunkName || !LabelChunkName || !ChunkList ){\n            throw Error(`expect {SampleChunkName, LabelChunkName, ChunkList} get ${JSON.stringify(description)}`);\n        }\n        this.dataChunks = ChunkList.map( cidx=> {\n                return {  ChunkName: cidx,\n                          Sample: SampleChunkName.replace('{}', cidx),\n                          Label: LabelChunkName.replace('{}', cidx)  };\n            });\n    }\n    \n    setDataReader(description){\n        const SampleType = description.SampleType;\n        const LabelType = description.LabelType;\n        const DataType = description.DataType;\n        const BaseLink = description.BaseLink;\n        if(SampleType === 'Image/PNG'){\n            const SplitFnLenses = (d)=>(this.splitSample(d));\n            this.sampleReader = this.makePNGReader(BaseLink, SplitFnLenses);\n        }\n        if(LabelType === 'Buffer/OneHot'){\n            const SplitFnLenses = (d)=>(this.splitLabel(d));\n            this.labelReader = this.makeBufferReader(BaseLink, SplitFnLenses);\n        }\n        const SampleAttributes = description.SampleAttributes;\n        const LabelAttributes = description.LabelAttributes;\n        if(SampleType === 'Text/CSV'){\n            this.sampleReader = this.makeCSVReader(BaseLink, SampleAttributes, null);\n        }\n        if(LabelType === 'Text/CSV'){\n            this.labelReader = this.makeCSVReader(BaseLink, null, LabelAttributes);\n        }\n        if(DataType === 'Text/CSV'){\n            this.dataReader = this.makeCSVReader(BaseLink, SampleAttributes, LabelAttributes);\n        }\n    }\n\n    splitSample(data){\n        const SampleSize = this.SampleSize;\n        return this.R.splitEvery(SampleSize, data);\n    }\n\n    splitLabel(data){\n        const LabelSize = this.LabelSize;\n        return this.R.splitEvery(LabelSize, data);\n    }\n\n    chunkSelect(numChunks){\n        let chunkList = this.DataChunks;\n        this.selectedChunks = this.Sampling.subSampling(numChunks, chunkList, false);\n        return this.selectedChunks;\n    }\n\n    read(){\n        if(!this.selectedChunks){\n            throw Error('selectChunks is not call');\n        }\n        let selectedChunks = this.selectedChunks;\n        const SampleReader = this.SampleReader;\n        const LabelReader = this.LabelReader;\n        const DataReader = this.DataReader;\n        return new Promise(async (resolve, reject)=>{\n            let sampleData = [], labelData = [];\n            for(let { Sample, Label, ChunkName } of selectedChunks ){\n                if(Sample === Label){\n                    let data = await DataReader(Sample);\n                    sampleData = data.samples;\n                    labelData = data.labels;\n                }\n                else{\n                    sampleData = await SampleReader(Sample);\n                    labelData = await LabelReader(Label);\n                }\n                if(sampleData.length !== labelData.length){\n                    reject('lengths of sample and label are not the same');\n                }\n                this.Logger.log({'read': [sampleData.length, labelData.length]});\n                await this.emit('data', { 'Sample': sampleData, 'Label': labelData,  ChunkName });\n            }\n            resolve(selectedChunks.length);\n        });\n    }\n};\n\nexport default new CausalNetDataSource(functor, termLogger, causalNetSampling);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/causalNetDataSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "CausalNetDataSource",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js",
    "static": true,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/causalNetDataSource.js",
    "importStyle": null,
    "description": "This CausalNetDataSource class provides a standard implementation for pipeline Source.\n{ mixWith: [ SamplingMixins, PNGReaderMixins, BufferReaderMixins ]}",
    "examples": [
      "import { causalNetDataSource } from 'causal-net.datasets';\n\n(async ()=>{\n    let description = await causalNetDataSource.connect('../../datasets/MNIST_dataset_NoSplit/');\n    console.log( description );\n    console.log( causalNetDataSource.SampleSize );\n    console.log( causalNetDataSource.chunkSelect(1) );\n    const SampleReader = causalNetDataSource.SampleReader;\n    const LabelReader = causalNetDataSource.LabelReader;\n    for(let { Sample, Label, ChunkName } of causalNetDataSource.chunkSelect(1) ){\n        let sampleData = await SampleReader(Sample);\n        let labelData = await LabelReader(Label);\n        console.log({ ChunkName, \n                      [Sample]: sampleData.length, \n                      [Label]: labelData.length });\n    }\n    let readreport = await causalNetDataSource.read();\n    console.log({ readreport });\n})().catch(console.error);"
    ],
    "lineNumber": 34,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetDataSource"
      },
      {
        "tagName": "@experiment",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#constructor",
    "access": "public",
    "description": "Creates an instance of CausalNetDataSource.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Functor"
        ],
        "spread": false,
        "optional": false,
        "name": "functor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Functor"
        ],
        "spread": false,
        "optional": false,
        "name": "sampling",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#F",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#R",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "Logger",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#Logger",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "Sampling",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#Sampling",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#connect",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "baseLink",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "description",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#description",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "query",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#query",
    "access": "public",
    "description": "fetch or read configure depends on provied link format",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "name": "DataChunks",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#DataChunks",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "get",
    "name": "SampleReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#SampleReader",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "get",
    "name": "LabelReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#LabelReader",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "get",
    "name": "DataReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#DataReader",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "get",
    "name": "SampleSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#SampleSize",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "LabelSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#LabelSize",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "setSampleSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#setSampleSize",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "description",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "sampleSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#sampleSize",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "setLabelSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#setLabelSize",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "description",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "labelSize",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#labelSize",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "setChunks",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#setChunks",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "description",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "dataChunks",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#dataChunks",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "setDataReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#setDataReader",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "description",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "sampleReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#sampleReader",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "labelReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#labelReader",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "dataReader",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#dataReader",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "splitSample",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#splitSample",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "splitLabel",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#splitLabel",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "chunkSelect",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#chunkSelect",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "numChunks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "selectedChunks",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#selectedChunks",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "read",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource#read",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "causalNetDataSource",
    "memberof": "packages/causality-datasets/src/causalNetDataSource.js",
    "static": true,
    "longname": "packages/causality-datasets/src/causalNetDataSource.js~causalNetDataSource",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/causalNetDataSource.js",
    "importStyle": "causalNetDataSource",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-datasets/src/causalNetDataSource.js~CausalNetDataSource"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "packages/causality-datasets/src/dataSource.mixins.js",
    "content": "/**\n * This pipeline mixin provides DataSourceReader attibute, source reading methods for pipeline \n * and getting Source in pipelineConfig\n * @class DataSourceMixins\n * @extends Event\n * @example\n * [EXAMPLE ../examples/dataset.mixins.babel.js]\n */\nconst DataSourceMixins = (BasePipelineClass)=> class extends BasePipelineClass {\n   \n    set DataSourceReader(sourceReader){\n        this.sourceReader = sourceReader;\n    }\n\n    get DataSourceReader(){\n        return this.sourceReader;\n    }\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set Source by config');\n        const { Source } = pipelineConfig.Dataset;\n        if(Source){\n            this.DataSourceReader = Source;\n        }\n        else{\n            this.DataSourceReader = null;\n            this.Logger.log('***Source is not defined \\n' + \n                            '***TrainDataGenerator and TestDataGenerator must be set manually');\n        }\n        this.Logger.groupEnd();\n        return pipelineConfig;\n    }\n\n    async read(numChunks){\n        let selectedChunk = this.DataSourceReader.chunkSelect(numChunks);\n        this.Logger.log({'select chunks': selectedChunk});\n        await this.DataSourceReader.read();\n        return this.Preprocessing.PreprocessingData;\n    }\n};\n\nexport default DataSourceMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/dataSource.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "class",
    "name": "DataSourceMixins",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js",
    "static": true,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-datasets/src/dataSource.mixins.js",
    "importStyle": "DataSourceMixins",
    "description": "This pipeline mixin provides DataSourceReader attibute, source reading methods for pipeline \nand getting Source in pipelineConfig",
    "examples": [
      "import { causalNetDataSource, DataSourceMixins } from 'causal-net.datasets';\nimport { PreprocessingMixins,\n    causalNetPreprocessingStream } from 'causal-net.preprocessing';\nimport { causalNetCore, Functor as BaseFunctor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\nimport { platform } from 'causal-net.utils';\n\nconst R = causalNetCore.CoreFunctor;\nconst sampleTransformer = (chunkSamples) => { \n    console.log({chunkSamples: chunkSamples.length});\n    return chunkSamples;\n};\nconst labelTransformer = (chunkLabels) => {\n    console.log({chunkLabel: chunkLabels.length});\n    return chunkLabels;\n}\n\nconst PipeLineConfigure = {\n    Dataset: {\n        Source: causalNetDataSource,\n        Preprocessing: {\n            SampleTransformer: sampleTransformer,\n            LabelTransformer: labelTransformer\n        }\n    }\n};\n\n\nclass SimpleDataset extends platform.mixWith(BaseFunctor, \n    [   PreprocessingMixins,\n        DataSourceMixins,\n        LoggerMixins ]){\n    constructor( preprocessing, logger ){\n        super();\n        this.Preprocessing = preprocessing;\n        this.Logger = logger;\n    }\n}\n(async ()=>{\n    await causalNetDataSource.connect('../../datasets/MNIST_dataset_NoSplit/');\n    let dataset = new SimpleDataset( causalNetPreprocessingStream, termLogger );\n    dataset.setByConfig(PipeLineConfigure);\n    dataset.DataSourceReader.chunkSelect(1);\n    console.log( await dataset.read() );\n})().catch(console.error);"
    ],
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DataSourceMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 128,
    "kind": "set",
    "name": "DataSourceReader",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins#DataSourceReader",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "sourceReader",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "static": false,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins#sourceReader",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "DataSourceReader",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins#DataSourceReader",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "read",
    "memberof": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-datasets/src/dataSource.mixins.js~DataSourceMixins#read",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "numChunks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "packages/causality-datasets/src/functor.js",
    "content": "import { Functor } from 'causal-net.core';\nexport default new Functor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "packages/causality-datasets/src/index.js",
    "content": "export { default as causalNetDataSource } from './causalNetDataSource';\nexport { default as DataSourceMixins } from './dataSource.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "packages/causality-deployment/src/causalNetDeployment.js",
    "content": "import { Event } from 'causal-net.core';\nimport { default as functor } from './functor';\nimport { platform } from 'causal-net.utils';\n/**\n * The implementation for event-based model deployment which is supplied \n * to pipeline class instance as **Deployment** attribute. Pipeline class must be mixed with DeploymentMixins.\n * @class CausalNetDeployment\n * @extends Event\n * @example\n * [EXAMPLE ../examples/causalNetDeployment.babel.js]\n */\nclass CausalNetDeployment extends platform.mixWith( Event, [] ){\n    \n    constructor(functor){\n        super();\n        this.F = functor;\n        this.R = functor.CoreFunctor;\n    }\n\n    set Emitter(emitter){\n        this.deployEmitter = emitter;\n    }\n\n    get Emitter(){\n        if(!this.deployEmitter){\n            throw Error('Emitter is not set');\n        }\n        return this.deployEmitter;\n    }\n\n    set Listener(listener){\n        this.deployListener = listener;\n        this.on('inferencer', (infer)=>{\n            this.deployListener(infer);\n        });\n        this.on('ensembleInferencer', (infer)=>{\n            this.deployListener(infer);\n        });\n    }\n    \n    get Listener(){\n        if(!this.deployListener){\n            throw Error('Listener is not set');\n        }\n        return this.deployListener;\n    }\n\n    set Inferencer(inferencer){\n        this.deployInferencer = inferencer;\n        this.on('emitter', async (emitValue)=>{\n            let inferValue = await this.deployInferencer(emitValue);\n            if(inferValue && inferValue !== {}){\n                this.emit('inferencer', inferValue);\n            }\n        });\n    }\n\n    get Inferencer(){\n        if(!this.deployInferencer){\n            throw Error('Inferencer is not set');\n        }\n        return this.deployInferencer;\n    }\n\n    set EnsembleInferencer(ensembleInferencer){\n        this.deployEnsembleInferencer = ensembleInferencer;\n        this.on('emitter', async (emitValue)=>{\n            let inferValue = await this.deployEnsembleInferencer(emitValue);\n            if(inferValue && inferValue !== {}){\n                this.emit('ensembleInferencer', inferValue);\n            }\n        });\n    }\n\n    get EnsembleInferencer(){\n        if(!this.deployEnsembleInferencer){\n            throw Error('EnsembleInferencer is not set');\n        }\n        return this.deployEnsembleInferencer;\n    }\n\n    async deploy(){\n        return new Promise(async (resolve, reject)=>{\n            let counter = 0;\n            let emitValue = await this.Emitter();\n            while(emitValue !== null){\n                this.emit('emitter', emitValue);\n                counter += 1;\n                emitValue = await this.Emitter();\n            }\n            resolve(counter);\n        });\n    }\n}\n\nexport default new CausalNetDeployment(functor);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-deployment/src/causalNetDeployment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "CausalNetDeployment",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js",
    "static": true,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-deployment/src/causalNetDeployment.js",
    "importStyle": null,
    "description": "The implementation for event-based model deployment which is supplied \nto pipeline class instance as **Deployment** attribute. Pipeline class must be mixed with DeploymentMixins.",
    "examples": [
      "import { causalNetDeployment } from 'causal-net.deployment';\n\n(async ()=>{\n    var emitCounter = 0;\n    causalNetDeployment.Emitter = async ()=>{\n        \n        return new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                emitCounter += 1;\n                console.log({ emitter: data});\n                resolve(data);\n            }, 1000);\n        });\n    };\n    causalNetDeployment.Listener = async (data)=>{\n        console.log({listener: data});\n    };\n    causalNetDeployment.Inferencer = (data)=>{\n        console.log({'inferencer': data});  \n        return data;\n    };\n    console.log(await causalNetDeployment.deploy());\n})().catch(console.error);"
    ],
    "lineNumber": 35,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetDeployment"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#F",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#R",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "set",
    "name": "Emitter",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Emitter",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "deployEmitter",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#deployEmitter",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "Emitter",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Emitter",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "set",
    "name": "Listener",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Listener",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "deployListener",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#deployListener",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "get",
    "name": "Listener",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Listener",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "set",
    "name": "Inferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Inferencer",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "deployInferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#deployInferencer",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "Inferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#Inferencer",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "set",
    "name": "EnsembleInferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#EnsembleInferencer",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "deployEnsembleInferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#deployEnsembleInferencer",
    "access": "public",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "name": "EnsembleInferencer",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#EnsembleInferencer",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "deploy",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment#deploy",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "causalNetDeployment",
    "memberof": "packages/causality-deployment/src/causalNetDeployment.js",
    "static": true,
    "longname": "packages/causality-deployment/src/causalNetDeployment.js~causalNetDeployment",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-deployment/src/causalNetDeployment.js",
    "importStyle": "causalNetDeployment",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-deployment/src/causalNetDeployment.js~CausalNetDeployment"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "file",
    "name": "packages/causality-deployment/src/deployment.mixins.js",
    "content": "/**\n * This mixin class provides attributes: **Deployment**, **Inferencer**, and handle Deployment setting of pipelineConfig.\n * @class DeploymentMixins\n * @extends BasePipelineClass\n * @example\n * [EXAMPLE ../examples/causalNetDeployment.babel.js]\n */\nconst DeploymentMixins = (BasePipelineClass)=> class extends BasePipelineClass {\n   \n    set Deployment(deployment){\n        this.deployment = deployment;\n    }\n\n    get Deployment(){\n        if(!this.deployment){\n            throw Error('deployment is not set');\n        }\n        return this.deployment;\n    }\n\n    get Inferencer(){\n        const ModelLenses = ()=>{\n            return this.Model;\n        };\n        const T = this.T;\n        return async (input)=>{\n            let { Predict, Encode, Decode } = input;\n            let infer = {};\n            const Model = ModelLenses();\n            if(Predict){\n                console.log(Predict);\n                let inputTensor = T.tensor(Predict).asType('float32').reshape([1, -1]);\n                inputTensor.print();\n                let predictTensor = Model.Predict(inputTensor);\n                infer.Predict = await predictTensor.data();\n            }\n            if(Encode){\n                let inputTensor = T.tensor(Encode).asType('float32').reshape([1, -1]);\n                let encodeTensor = Model.Encode(inputTensor);\n                infer.Encode = await encodeTensor.data();\n            }\n            if(Decode){\n                let inputTensor = T.tensor(Decode).asType('float32').reshape([1, -1]);\n                let decodeTensor = Model.Encode(inputTensor);\n                infer.Decode = await decodeTensor.data();\n            }\n            return infer;\n        };\n    }\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set deployment by config');\n        const { Emitter, Listener } = pipelineConfig.Deployment;\n        this.Deployment.Emitter = Emitter;\n        this.Deployment.Listener = Listener;\n        this.Deployment.Inferencer = this.Inferencer;\n        this.Logger.groupEnd();\n        return pipelineConfig;\n    }\n\n    async deploy(){\n        return await this.Deployment.deploy();\n    }\n};\n\nexport default DeploymentMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-deployment/src/deployment.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 157,
    "kind": "class",
    "name": "DeploymentMixins",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js",
    "static": true,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-deployment/src/deployment.mixins.js",
    "importStyle": "DeploymentMixins",
    "description": "This mixin class provides attributes: **Deployment**, **Inferencer**, and handle Deployment setting of pipelineConfig.",
    "examples": [
      "import { causalNetDeployment } from 'causal-net.deployment';\n\n(async ()=>{\n    var emitCounter = 0;\n    causalNetDeployment.Emitter = async ()=>{\n        \n        return new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                emitCounter += 1;\n                console.log({ emitter: data});\n                resolve(data);\n            }, 1000);\n        });\n    };\n    causalNetDeployment.Listener = async (data)=>{\n        console.log({listener: data});\n    };\n    causalNetDeployment.Inferencer = (data)=>{\n        console.log({'inferencer': data});  \n        return data;\n    };\n    console.log(await causalNetDeployment.deploy());\n})().catch(console.error);"
    ],
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DeploymentMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 158,
    "kind": "set",
    "name": "Deployment",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#Deployment",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "deployment",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#deployment",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "get",
    "name": "Deployment",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#Deployment",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "get",
    "name": "Inferencer",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#Inferencer",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "deploy",
    "memberof": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-deployment/src/deployment.mixins.js~DeploymentMixins#deploy",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "file",
    "name": "packages/causality-deployment/src/functor.js",
    "content": "import { Functor } from 'causal-net.core';\nexport default new Functor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-deployment/src/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "packages/causality-deployment/src/index.js",
    "content": "export { default as causalNetDeployment } from './causalNetDeployment';\nexport { default as DeploymentMixins } from './deployment.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-deployment/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "content": "import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as DenseMixins } from './dense.mixins';\nimport { default as ConvolutionalMixins } from './convolution.mixins';\n/**\n * This class provides common used layers which can be accessed via **causalNetLayers** instance.\n * { mixWith: [ LayerMixins, DenseMixins ] }\n * @class CausalNetLayers\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../examples/dense.layer.js]\n */\nclass CausalNetLayers extends platform.mixWith(BaseTensor, \n    [ DenseMixins, ConvolutionalMixins ] ){\n    constructor(){\n        super();\n        this.layerNames = [];\n    }\n    nameGenerator(layerType){\n        const layerIdx = this.layerNames.length; \n        let newName = layerType + '/' + layerIdx;\n        this.layerNames.push(newName);\n        return newName;\n    }\n}\n\nexport default new CausalNetLayers();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "class",
    "name": "CausalNetLayers",
    "memberof": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "importStyle": null,
    "description": "This class provides common used layers which can be accessed via **causalNetLayers** instance.\n{ mixWith: [ LayerMixins, DenseMixins ] }",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/causalNetLayers.js, /home/huynhnguyen/github/causality/packages/causality-layer/src/examples/dense.layer.js]"
    ],
    "lineNumber": 13,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetLayers"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "layerNames",
    "memberof": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers#layerNames",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "nameGenerator",
    "memberof": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers#nameGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "layerType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "causalNetLayers",
    "memberof": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~causalNetLayers",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetLayers/causalNetLayers.js",
    "importStyle": "causalNetLayers",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-layer/src/CausalNetLayers/causalNetLayers.js~CausalNetLayers"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js",
    "content": "const ConvolutionMixins = (PipelineClass)=> class extends PipelineClass{\n    /**\n     * Convolutional layer\n     * @param {Number} inputSize - size of net input\n     * @param {Array} kernelSize - size of net output\n     * @param {String|Function} activator - activator function can be customed or get from built-in by string name\n     * @param {String} name - layer name, default by null\n     * @returns { Object } layer\n     */\n    convolution({ kernelSize, filters, \n                  strides=1, padding='same',\n                  dilations=[1,1], flatten=false, \n                  activator='sigmoid', name=null}){\n        if(!name){\n            name = this.nameGenerator('convolution');\n        }\n        const FConv = this.T.conv2d;\n        const shapeType = 'NHWC';\n        return { \n            Name: name, Type: 'Layer',\n            Config: {kernelSize, filters, strides, padding, dilations, flatten, activator, name, shapeType},\n            Parameters: { Kernel: [...kernelSize, ...filters] },\n            Net: (value, params)=>{\n                    let trace = {};\n                    let { Kernel } = params;\n                    let result = FConv(value, Kernel, strides, padding, shapeType, dilations);\n                    if(typeof activator === \"string\"){\n                        result = result[activator]();\n                    }\n                    else{\n                        result = activator(result);\n                    }  \n                    if(flatten){\n                        const [B, W, H, C] = result.shape;\n                        result = result.reshape([B, -1]);\n                    }\n                    return { result, trace };\n                }\n            };\n    }\n};\nexport default ConvolutionMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/convolution.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "ConvolutionMixins",
    "memberof": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js~ConvolutionMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetLayers/convolution.mixins.js",
    "importStyle": "ConvolutionMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "PipelineClass"
    ]
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "convolution",
    "memberof": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js~ConvolutionMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js~ConvolutionMixins#convolution",
    "access": "public",
    "description": "Convolutional layer",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object } layer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSize",
        "description": "size of net input"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "kernelSize",
        "description": "size of net output"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "activator",
        "description": "activator function can be customed or get from built-in by string name"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "layer name, default by null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "layer"
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js",
    "content": "const DenseLayerMixins = (PipelineClass)=> class extends PipelineClass{\n    /**\n     * Simple dense layer\n     * @param {Number} inputSize - size of net input\n     * @param {Number} outputSize - size of net output\n     * @param {String|Function} activator - activator function can be customed or get from built-in by string name\n     * @param {String} name - layer name, default by null\n     * @returns { Object } layer\n     */\n    dense({inputSize, outputSize, activator='sigmoid', name=null}){\n        if(!name){\n            name = this.nameGenerator('dense');\n        }\n        return { \n            Name: name, Type: 'Layer',\n            Config: {inputSize, outputSize, activator, name},\n            Parameters: { Weight: [inputSize, outputSize], Bias: [outputSize] },\n            Net: (value, params)=>{\n                    let trace = {};\n                    let {Weight, Bias} = params;\n                    let result = value.dot(Weight).add(Bias);\n                    \n                    if(typeof activator === \"string\"){\n                        result = result[activator]();\n                    }\n                    else{\n                        result = activator(result);\n                    }   \n                    return { result, trace };\n                }\n            };\n    }\n};\nexport default DenseLayerMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/dense.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "DenseLayerMixins",
    "memberof": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js~DenseLayerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetLayers/dense.mixins.js",
    "importStyle": "DenseLayerMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "PipelineClass"
    ]
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "dense",
    "memberof": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js~DenseLayerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js~DenseLayerMixins#dense",
    "access": "public",
    "description": "Simple dense layer",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object } layer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "inputSize",
        "description": "size of net input"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "outputSize",
        "description": "size of net output"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "activator",
        "description": "activator function can be customed or get from built-in by string name"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "layer name, default by null"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "layer"
    }
  },
  {
    "__docId__": 178,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetLayers/index.js",
    "content": "export { default as causalNetLayers } from './causalNetLayers';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetLayers/recurrent.mixins.js",
    "content": "",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetLayers/recurrent.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "content": "import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { StorageMixins, indexDBStorage } from 'causal-net.storage';\nimport { default as ParameterMixins } from './parameter.mixins';\nimport { default as parameterfunctor } from './parameterFunctor';\n/**\n * This class is a standard implementation for model parameters which can be accessed via **causalNetParameters** instance\n * { mixWith: [StorageMixins, ParameterMixins] }\n * @class CausalNetParameters\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../example/parameters.babel.js]\n */\nclass CausalNetParameters extends platform.mixWith(BaseTensor, [StorageMixins, ParameterMixins] ){\n    constructor(storage, parameterfunctor){\n        super();\n        this.parameters = null;\n        this.Storage = storage;\n        this.F = parameterfunctor;\n        this.R = this.F.CoreFunctor;\n    }\n}   \n\nexport default new CausalNetParameters(indexDBStorage, parameterfunctor);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "CausalNetParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "importStyle": null,
    "description": "This class is a standard implementation for model parameters which can be accessed via **causalNetParameters** instance\n{ mixWith: [StorageMixins, ParameterMixins] }",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/causalNetParameters.js, /home/huynhnguyen/github/causality/packages/causality-layer/src/example/parameters.babel.js]"
    ],
    "lineNumber": 14,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetParameters"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 182,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "parameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters#parameters",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "Storage",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters#Storage",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters#F",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters#R",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "causalNetParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~causalNetParameters",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/causalNetParameters.js",
    "importStyle": "causalNetParameters",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-layer/src/CausalNetParameters/causalNetParameters.js~CausalNetParameters"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetParameters/index.js",
    "content": "export { default as causalNetParameters } from './causalNetParameters';\nexport { default as ParameterMixins } from './parameter.mixins';\nexport { default as ParameterFunctorMixins } from './parameterFunctor.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js",
    "content": "const ParameterMixins = (BaseParameterClass)=> class extends BaseParameterClass{ \n    \n    get PredictParameters(){\n        if(!this.parameters || !this.parameters.Predict){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Predict;\n    }\n    \n    get EncodeParameters(){\n        if(!this.parameters || !this.parameters.Encode){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Encode;\n    }\n    \n    get DecodeParameters(){\n        if(!this.parameters || !this.parameters.Decode){\n            throw Error('parameters is not set');\n        }\n        return this.parameters.Decode;\n    }\n    \n    set PredictParameters(predictParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Predict = predictParameters;\n    }\n    \n    set EncodeParameters(encodeParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Encode = encodeParameters;\n    }\n    \n    set DecodeParameters(decodeParameters){\n        this.parameters = (this.parameters)? this.parameters: {};\n        this.parameters.Decode = decodeParameters;\n    }\n\n    set ParameterSizes(parameterSizes){\n        this.parameterSizes = parameterSizes;\n    }\n\n    get ParameterSizes(){\n        if(!this.parameterSizes){\n            throw Error('parameterSizes is not set');\n        }\n        return this.parameterSizes;\n    }\n    \n    get SaveModelDir(){\n        return 'saveModel/';\n    }\n    \n    exportParameters(){\n        if(!this.parameters){\n            throw Error('parameter is not set');\n        }\n        return (async ()=>{\n            const Fn = async (param)=>(Array.from(await param.data()));\n            let params = await this.extractParamFromTensorDict(this.parameters, Fn);\n            return params;\n        })();\n    }\n\n    \n    async extractParamFromTensorDict(params, fn){\n        const R = this.R;\n        const Traveller = async (params, fn)=>{\n            if(this.isTensor(params)){\n                return await fn(params);\n            }\n            else{\n                let kVals = R.toPairs(params);\n                let res = {};\n                for(let [k, val] of kVals){\n                    res[k] = await Traveller(val, fn); \n                }\n                return res;\n            }\n        };\n        return await Traveller(params, fn);\n    }\n    \n    async parametersSummary(){\n        if(!this.parameters){\n            throw Error('parameter must be set');\n        }\n        const Fn = async (param)=>Array.from(await param.mean().data());\n        return await this.extractParamFromTensorDict(this.parameters, Fn);\n    }\n    \n    initParamSizesByLayers(layers){\n        const R = this.R, T = this.T, F = this.F;\n        const GetParamSize = R.compose(R.fromPairs, R.map(p=>[p.Name, p.Parameters]));\n        const PredictSize = GetParamSize(F.getIn(['Predict'], layers, []));\n        const EncodeSize  = GetParamSize(F.getIn(['Encode'], layers, []));\n        const DecodeSize  = GetParamSize(F.getIn(['Decode'], layers, [])); \n        this.ParameterSizes = {PredictSize, EncodeSize, DecodeSize};\n    }\n\n    importParameters(paramObject){\n        const T = this.T, F = this.F;\n        let predictParamObject = F.getIn(['Predict'], paramObject, {});\n        let encodeParamObject  = F.getIn(['Encode'], paramObject, {});\n        let decodeParamObject  = F.getIn(['Decode'], paramObject, {});\n        const { PredictSize, EncodeSize, DecodeSize } = this.ParameterSizes;\n        const SetOrInit = ( initPredict, paramObject )=>{\n                    return F.parameterMapWithKey((keys, paramSize)=>{\n                        let paramValue = this.F.getIn(keys, paramObject, null);\n                        if(paramValue === null){\n                            return T.variable(T.randomNormal(paramSize).asType('float32'));\n                        }\n                        else{\n                            return T.variable(T.tensor(paramValue, paramSize, 'float32'));\n                        }                        \n                    }, initPredict);\n                };\n        this.PredictParameters = SetOrInit( PredictSize, predictParamObject );\n        this.EncodeParameters  = SetOrInit( EncodeSize, encodeParamObject );\n        this.DecodeParameters  = SetOrInit( DecodeSize, decodeParamObject ); \n    }\n\n    InitParameters(paramObject={}){\n        return (layers)=>{\n            return this.setOrInitParams(layers, paramObject);\n        };\n    }\n\n    setOrInitParams(layers, paramObject){\n        this.initParamSizesByLayers(layers);\n        this.importParameters(paramObject);\n        return this;\n    }\n\n    async getSavedParamList(){\n        const Storage = this.Storage, SaveDir = this.SaveModelDir;\n        let fileList = await Storage.getFileList(SaveDir);\n        return fileList.map(fileName=>fileName.replace(SaveDir,''));\n    }\n\n    async saveParams(fileName){\n        const SaveDir = this.SaveModelDir;\n        const Storage = this.Storage;\n        let params = await this.exportParameters();\n        await Storage.writeFile(SaveDir + fileName, JSON.stringify(params));\n        return params;\n    }\n    async loadParams(fileName){\n        const Storage = this.Storage, SaveDir = this.SaveModelDir;\n        let strParams = await Storage.readFile(SaveDir+fileName);\n        let params = JSON.parse(strParams);\n        this.importParameters(params);\n        return this;\n    }\n};\n\nexport default ParameterMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/parameter.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "ParameterMixins",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/parameter.mixins.js",
    "importStyle": "ParameterMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseParameterClass"
    ]
  },
  {
    "__docId__": 191,
    "kind": "get",
    "name": "PredictParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#PredictParameters",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "get",
    "name": "EncodeParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#EncodeParameters",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "get",
    "name": "DecodeParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#DecodeParameters",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "set",
    "name": "PredictParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#PredictParameters",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "parameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#parameters",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "set",
    "name": "EncodeParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#EncodeParameters",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 198,
    "kind": "set",
    "name": "DecodeParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#DecodeParameters",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 200,
    "kind": "set",
    "name": "ParameterSizes",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#ParameterSizes",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "parameterSizes",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#parameterSizes",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "get",
    "name": "ParameterSizes",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#ParameterSizes",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "get",
    "name": "SaveModelDir",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#SaveModelDir",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "exportParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#exportParameters",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "extractParamFromTensorDict",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#extractParamFromTensorDict",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "parametersSummary",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#parametersSummary",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "initParamSizesByLayers",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#initParamSizesByLayers",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "layers",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "importParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#importParameters",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "paramObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "InitParameters",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#InitParameters",
    "access": "public",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "params": [
      {
        "name": "paramObject",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "setOrInitParams",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#setOrInitParams",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "layers",
        "types": [
          "*"
        ]
      },
      {
        "name": "paramObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "getSavedParamList",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#getSavedParamList",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "saveParams",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#saveParams",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "loadParams",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameter.mixins.js~ParameterMixins#loadParams",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "content": "import {Functor as BaseFunctor} from 'causal-net.core';\nimport {platform} from 'causal-net.utils';\nimport {default as ParameterFunctorMixins } from './parameterFunctor.mixins';\n\nclass ParameterFunctor extends platform.mixWith(BaseFunctor, [ ParameterFunctorMixins ] ){\n    constructor(){\n        super();\n    }\n}\n\nexport default new ParameterFunctor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "ParameterFunctor",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js~ParameterFunctor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "expressionExtends": "platform.mixWith(BaseFunctor, [ ParameterFunctorMixins ] )"
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js~ParameterFunctor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js~ParameterFunctor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "parameterFunctor",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js~parameterFunctor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/parameterFunctor.js",
    "importStyle": "parameterFunctor",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-layer/src/CausalNetParameters/parameterFunctor.js~ParameterFunctor"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js",
    "content": "const ParameterFunctorMixins = (FunctorClass)=> class extends FunctorClass{ \n    isParameter(val){\n        const R = this.R;\n        return R.ifElse(R.is(Array), R.all(R.is(Number)), R.always(false))(val);\n    }\n    parameterMapWithKey(fn, parameterObject){\n        const R = this.R;\n        \n        const Res = (keys, subObject) => R.compose(R.fromPairs, \n                        R.map(([key, subObject])=>{\n                            if(this.isParameter(subObject)){\n                                return [key, fn([...keys, key], subObject)];\n                            }\n                            else{\n                                if(R.is(Object, subObject)){\n                                    return [key, Res([...keys, key], subObject)];\n                                }\n                                else{\n                                    return [key, subObject];\n                                }\n                            }\n                        }), R.toPairs)(subObject);\n        return Res([], parameterObject);\n    }        \n};\n\nexport default ParameterFunctorMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 223,
    "kind": "class",
    "name": "ParameterFunctorMixins",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js~ParameterFunctorMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js",
    "importStyle": "ParameterFunctorMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "FunctorClass"
    ]
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "isParameter",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js~ParameterFunctorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js~ParameterFunctorMixins#isParameter",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "parameterMapWithKey",
    "memberof": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js~ParameterFunctorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetParameters/parameterFunctor.mixins.js~ParameterFunctorMixins#parameterMapWithKey",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameterObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "content": "import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as RunnerMixins } from './runner.mixins';\n/**\n * This CausalNetRunner class provide net excecutor which is provided pipeline instance at **LayerRunner** attribute.\n * { mixWith: [ RunnerMixins ] }\n * @class CausalNetRunner\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../examples/runner.mixins.babel.js]\n */\nclass CausalNetRunner extends platform.mixWith(BaseTensor, [ RunnerMixins ] ){\n    constructor(){\n        super();\n    }\n}\n\nexport default new CausalNetRunner();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "CausalNetRunner",
    "memberof": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js~CausalNetRunner",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "importStyle": null,
    "description": "This CausalNetRunner class provide net excecutor which is provided pipeline instance at **LayerRunner** attribute.\n{ mixWith: [ RunnerMixins ] }",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetRunner/causalNetRunner.js, /home/huynhnguyen/github/causality/packages/causality-layer/src/examples/runner.mixins.babel.js]"
    ],
    "lineNumber": 12,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetRunner"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js~CausalNetRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js~CausalNetRunner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "causalNetRunner",
    "memberof": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js~causalNetRunner",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetRunner/causalNetRunner.js",
    "importStyle": "causalNetRunner",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-layer/src/CausalNetRunner/causalNetRunner.js~CausalNetRunner"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetRunner/index.js",
    "content": "export { default as causalNetRunner } from './causalNetRunner';\nexport { default as RunnerMixins } from './runner.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetRunner/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js",
    "content": "/**\n * This RunnerMixins class provide methods for runner class.\n * @class RunnerMixins\n * @extends BaseRunnerClass\n */\nconst RunnerMixins = ( BaseRunnerClass )=> class extends BaseRunnerClass{\n    set NetParameters(parameters){\n        this.netParameters = parameters;\n    }\n    set NetLayers(netLayers){\n        this.netLayers = netLayers;\n    }\n    get NetParameters(){\n        if(!this.netParameters){\n            throw Error('netParameters is not set');\n        }\n        return this.netParameters;\n    }\n    get NetLayers(){\n        if(!this.netLayers){\n            throw Error('netLayers is not set');\n        }\n        return this.netLayers;\n    }\n    runOpFlow(value, flow, parameters){\n        const R = this.R;\n        const OpsRunner = R.addIndex(R.reduce)(R.__,{result: value, trace: {}}, flow);\n        var {result, trace} = OpsRunner(({result, trace}, node, idx)=>{\n            if(node.Parameter){\n                let params = parameters[node.Parameter];\n                result = result[node.Op](params, ...node.Args);\n            }\n            else{\n                result = result[node.Op](...node.Args);    \n            };\n            trace[idx] = result.shape;\n            return {result, trace};\n        });\n        return {result, trace};\n    }\n\n    runOpLayer(value, net, parameters){\n        let { result, trace } = net(value, parameters);\n        return {result, trace};\n    }\n    runLayer(value, layerConfigure, layerParameters){\n        const {Name, Type, Flow, Net} = layerConfigure;\n        if(Type === 'Tensor'){\n            let {result, trace} = this.runOpFlow(value, Flow, layerParameters);\n            return {[Name]: result, trace};\n        }   \n        else if(Type === 'Layer'){\n            let {result, trace} = this.runOpLayer(value, Net, layerParameters);\n            return {[Name]: result, trace};\n        }   \n        else{\n            throw Error('type must be either Layer or Tensor');\n        }\n    }\n\n    tracing(traces, name, trace){\n        if(traces){\n            traces.push({[name]: trace});\n        }\n    }\n    run(layers, samples, parameters, traces=null){\n        let pipeValue = {PipeInput: samples}, lastLayer = 'PipeInput';\n        for(let layer of layers){\n            let layerOutput = this.runLayer(pipeValue[lastLayer], layer, parameters[layer.Name]);\n            pipeValue[layer.Name] = layerOutput[layer.Name];\n            lastLayer = layer.Name;\n            this.tracing(traces, layer.Name, layerOutput.trace);\n        }\n        if(traces){\n            this.logger.debug({traces});\n        }\n        return pipeValue[lastLayer];\n    }\n\n    get Predictor(){\n        let predictLayers = this.NetLayers.Predict;\n        const PredictParametersLenses = ()=>this.NetParameters.PredictParameters;\n        return (samples)=>{\n            let predictParameters = PredictParametersLenses();\n            return this.run(predictLayers, samples, predictParameters);\n        };\n    }\n    get Encoder(){\n        let encodeLayers = this.NetLayers.Encode;\n        const EncodeParametersLenses = ()=>this.NetParameters.EncodeParameters;\n        return (samples)=>{\n            let encodeParameters = EncodeParametersLenses();\n            return this.run(encodeLayers, samples, encodeParameters);\n        };\n    }\n    get Decoder(){\n        let decodeLayers = this.NetLayers.Decode;\n        const DecodeParametersLenses = ()=>this.NetParameters.EncodeParameters;\n        return (samples)=>{\n            let decodeParameters = DecodeParametersLenses();\n            return this.run(decodeLayers, samples, decodeParameters);\n        };\n    }\n};\n\nexport default RunnerMixins;\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/CausalNetRunner/runner.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "RunnerMixins",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/CausalNetRunner/runner.mixins.js",
    "importStyle": "RunnerMixins",
    "description": "This RunnerMixins class provide methods for runner class.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RunnerMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 233,
    "kind": "set",
    "name": "NetParameters",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#NetParameters",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "netParameters",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#netParameters",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "set",
    "name": "NetLayers",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#NetLayers",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "netLayers",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#netLayers",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "get",
    "name": "NetParameters",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#NetParameters",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "get",
    "name": "NetLayers",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#NetLayers",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "runOpFlow",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#runOpFlow",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "flow",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"result\": *, \"trace\": *}"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "runOpLayer",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#runOpLayer",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "net",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"result\": *, \"trace\": *}"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "runLayer",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#runLayer",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "layerConfigure",
        "types": [
          "*"
        ]
      },
      {
        "name": "layerParameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"Name\": *, \"trace\": *}"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "tracing",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#tracing",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "traces",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "trace",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "run",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#run",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "layers",
        "types": [
          "*"
        ]
      },
      {
        "name": "samples",
        "types": [
          "*"
        ]
      },
      {
        "name": "parameters",
        "types": [
          "*"
        ]
      },
      {
        "name": "traces",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "get",
    "name": "Predictor",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#Predictor",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "get",
    "name": "Encoder",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#Encoder",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "get",
    "name": "Decoder",
    "memberof": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/CausalNetRunner/runner.mixins.js~RunnerMixins#Decoder",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "packages/causality-layer/src/index.js",
    "content": "export { causalNetLayers } from './CausalNetLayers/index';\nexport { causalNetParameters, ParameterMixins, ParameterFunctorMixins } from './CausalNetParameters/index';\nexport { causalNetRunner, RunnerMixins } from './CausalNetRunner/index';\nexport { default as LayerRunnerMixins } from './layerRunner.mixins';\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "packages/causality-layer/src/layerRunner.mixins.js",
    "content": "/**\n * This mixin class provide attributes: **ParameterInitializer**, **LayerRunner**, \n * and handle **Net** setting of pipelineConfig \n * @class LayerRunnerMixins\n * @extends BasePipelineClass\n * @example\n * [EXAMPLE ../examples/layerRunner.mixins.babel.js]\n */\nconst LayerRunnerMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    async saveParams(fileName){\n        await this.LayerRunner.NetParameters.saveParams(fileName);\n        return this;\n    }\n    async loadParams(fileName){\n        this.LayerRunner.NetParameters = await this.LayerRunner.NetParameters.loadParams(fileName);\n        return this;\n    }\n\n    async getSavedParamList(){\n        return await this.LayerRunner.NetParameters.getSavedParamList();\n    }\n\n    get ParameterInitializer(){\n        if(!this.parameterInitializer){\n            throw Error('ParameterInitializer is not set');\n        }\n        return this.parameterInitializer;\n    }\n\n    set ParameterInitializer(parameterInitializer){\n        this.parameterInitializer = parameterInitializer;\n    }\n\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set LayerRunner by config');\n        const { Net } = pipelineConfig;\n        const { Layers, Parameters } = Net; \n        this.LayerRunner.NetLayers = Layers;\n        this.ParameterInitializer = Parameters;       \n        this.LayerRunner.NetParameters = this.ParameterInitializer(Layers);\n        this.Logger.groupEnd();\n    }\n\n    set LayerRunner(runner){\n        this.layerRunner = runner;\n    }\n    get LayerRunner(){\n        if(!this.layerRunner){\n            throw Error('layerRunner is not set');\n        }\n        return this.layerRunner;\n    }\n};\n\nexport default LayerRunnerMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/src/layerRunner.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "LayerRunnerMixins",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js",
    "static": true,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-layer/src/layerRunner.mixins.js",
    "importStyle": "LayerRunnerMixins",
    "description": "This mixin class provide attributes: **ParameterInitializer**, **LayerRunner**, \nand handle **Net** setting of pipelineConfig ",
    "examples": [
      "import { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins  } from 'causal-net.layer';\nimport { causalNetCore } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger } from 'causal-net.log';\nconst PipeLineConfigure = {\n    Net: { \n            Parameters: causalNetParameters.InitParameters(),\n            Layers: { \n                Predict: [  causalNetLayers.dense(4, 3), \n                            causalNetLayers.dense(3, 2)], \n                Encode: [ causalNetLayers.dense(4, 2) ], \n                Decode: [ causalNetLayers.dense(4, 2) ] \n            }\n    }\n}\nclass SimplePipeline extends platform.mixWith(Tensor, [ LayerRunnerMixins ]){\n    constructor(layerRunner, logger){\n        super();\n        this.logger = logger;\n        this.LayerRunner = layerRunner;\n    }\n}\nconst T = causalNetCore.CoreTensor;\n(async ()=>{\n    let pipeline = new SimplePipeline(causalNetRunner, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    const { Predictor, Encoder, Decoder } = pipeline.LayerRunner;\n    console.log({ Predictor, Encoder, Decoder });   \n})().catch(err=>{\n    console.error({err});\n});"
    ],
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LayerRunnerMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "saveParams",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#saveParams",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "loadParams",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#loadParams",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "fileName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "getSavedParamList",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#getSavedParamList",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "ParameterInitializer",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#ParameterInitializer",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "set",
    "name": "ParameterInitializer",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#ParameterInitializer",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "parameterInitializer",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#parameterInitializer",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "set",
    "name": "LayerRunner",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "layerRunner",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#layerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "get",
    "name": "LayerRunner",
    "memberof": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-layer/src/layerRunner.mixins.js~LayerRunnerMixins#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/init.js",
    "content": "export { default as vivid } from './vivid';\nexport { default as PlotMixins } from './plot.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/init.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/line.chart.mixins.js",
    "content": "const LineChartMixins = (BasePlotClass)=> class extends BasePlotClass{\n    line({data, title, xRange, yRange, xLabel, yLabel, style, width, height, plotId}){\n        const d3 = this.d3;\n        style = style!==undefined?style:{};\n        const defaultStyle = {'.line':{ fill: 'none', 'stroke-width': '2px'}};\n        style = Object.assign({}, defaultStyle, style);\n        let kwdata = Array.isArray(data)?\n                data.map((d,ith)=>[...(Array.isArray(d))?d:[ith,d],'data']):\n                Object.entries(data).reduce((s,[k, data])=>[...s, \n                    ...data.map((d,ith)=>[...(Array.isArray(d))?d:[ith,d], k])],[]);\n        var { svg, xMap, yMap, color } = \n            this.basePlot({kwdata, title, xRange, yRange, xLabel, yLabel, style, width, height});\n        var lineGenerator = d3.line()\n                .x(function(d) { \n                    return xMap(d[0]); \n                }) \n                .y(function(d) { \n                    return yMap(d[1]); \n                }) \n                .curve(d3.curveMonotoneX) ;\n        \n        let byName = d3.nest().key(([x,y,name]) => name).entries(kwdata);\n        svg.selectAll(\".line-groups\")\n            .data(byName).enter().append(\"g\")\n            .attr('class','.line-groups')\n            .attr(\"id\", (d)=>d.key)\n            .selectAll(\"path\").data((d)=>[d]).enter()\n            .append(\"path\").attr(\"class\", \"line\")\n            .attr('stroke', (d)=>color(d.key))\n            .attr(\"d\", (d)=>lineGenerator(d.values));\n        svg.selectAll(\".dot\")\n            .data(kwdata)\n            .enter().append(\"circle\") // Uses the enter().append() method\n            .attr(\"class\", \"dot\") // Assign a class for styling\n            .attr(\"cx\", function([x,y]) { return xMap(x); })\n            .attr(\"cy\", function([x,y]) { return yMap(y); })\n            .attr(\"fill\", function([x,y,name]) { return color(name); })\n            .attr(\"r\", 5);\n        title = title?title:'unname';\n        plotId = plotId?plotId:title.replace(/\\s/g,'_') + '.png';\n        return plotId;\n    }\n};\n\nexport default LineChartMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/line.chart.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "class",
    "name": "LineChartMixins",
    "memberof": "packages/causality-log/src/Vivid/line.chart.mixins.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/line.chart.mixins.js~LineChartMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/line.chart.mixins.js",
    "importStyle": "LineChartMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BasePlotClass"
    ]
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "line",
    "memberof": "packages/causality-log/src/Vivid/line.chart.mixins.js~LineChartMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/line.chart.mixins.js~LineChartMixins#line",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"title\": *, \"xRange\": *, \"yRange\": *, \"xLabel\": *, \"yLabel\": *, \"style\": *, \"width\": *, \"height\": *, \"plotId\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "title": null,
          "xRange": null,
          "yRange": null,
          "xLabel": null,
          "yLabel": null,
          "style": null,
          "width": null,
          "height": null,
          "plotId": null
        },
        "defaultValue": "{\"data\":null,\"title\":null,\"xRange\":null,\"yRange\":null,\"xLabel\":null,\"yLabel\":null,\"style\":null,\"width\":null,\"height\":null,\"plotId\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/plot.mixins.js",
    "content": "const PlotMixins = (BaseLogClass)=> class extends BaseLogClass{\n    connect(target){\n        if(super.connect){\n            super.connect(target);\n        }\n        this.Plot.connect(target);\n    }\n\n    set Plot(plot){\n        this.plotter = plot;\n    }\n    get Plot(){\n        if(!this.plotter){\n            throw Error('Plot is not set');\n        }\n        return this.plotter;\n    }\n};\nexport default PlotMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/plot.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "class",
    "name": "PlotMixins",
    "memberof": "packages/causality-log/src/Vivid/plot.mixins.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/plot.mixins.js",
    "importStyle": "PlotMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseLogClass"
    ]
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins#connect",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "set",
    "name": "Plot",
    "memberof": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins#Plot",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "plotter",
    "memberof": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins",
    "static": false,
    "longname": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins#plotter",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "get",
    "name": "Plot",
    "memberof": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/plot.mixins.js~PlotMixins#Plot",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/scatter.chart.mixins.js",
    "content": "const ScatterChartMixins = (BasePlotClass)=> class extends BasePlotClass{\n    scatter({data, title, xRange, yRange, xLabel, yLabel, style, width, height, plotId}){\n        let kwdata = Array.isArray(data)?\n                data.map(d=>[...d,'data']):\n                Object.entries(data).reduce((s,[k, data])=>[...s, ...data.map(d=>[...d, k])],[]);\n        let { svg, xMap, yMap, color } = \n            this.basePlot({kwdata, title, xRange, yRange, xLabel, yLabel, style, width, height});\n        svg.selectAll(\"circle\")\n            .data(kwdata)\n            .enter().append(\"circle\")\n            .attr(\"cx\", ([x,y, name])=>xMap(x))\n            .attr(\"cy\", ([x,y, name])=>yMap(y))\n            .attr(\"r\", 5)\n            .attr(\"fill\", ([x,y,name])=>color(name));\n        title = title?title:'unname';\n        plotId = plotId?plotId:title.replace(/\\s/g,'_') + '.png';\n        return plotId;\n    }\n};\n\nexport default ScatterChartMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/scatter.chart.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "ScatterChartMixins",
    "memberof": "packages/causality-log/src/Vivid/scatter.chart.mixins.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/scatter.chart.mixins.js~ScatterChartMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/scatter.chart.mixins.js",
    "importStyle": "ScatterChartMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BasePlotClass"
    ]
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "scatter",
    "memberof": "packages/causality-log/src/Vivid/scatter.chart.mixins.js~ScatterChartMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/scatter.chart.mixins.js~ScatterChartMixins#scatter",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"data\": *, \"title\": *, \"xRange\": *, \"yRange\": *, \"xLabel\": *, \"yLabel\": *, \"style\": *, \"width\": *, \"height\": *, \"plotId\": *}"
        ],
        "defaultRaw": {
          "data": null,
          "title": null,
          "xRange": null,
          "yRange": null,
          "xLabel": null,
          "yLabel": null,
          "style": null,
          "width": null,
          "height": null,
          "plotId": null
        },
        "defaultValue": "{\"data\":null,\"title\":null,\"xRange\":null,\"yRange\":null,\"xLabel\":null,\"yLabel\":null,\"style\":null,\"width\":null,\"height\":null,\"plotId\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/vivid.js",
    "content": "import * as d3 from 'd3';\nimport { platform } from 'causal-net.utils';\nimport { default as LineChartMixins } from './line.chart.mixins';\nimport { default as ScatterChartMixins } from './scatter.chart.mixins';\nimport { default as VividWebMixins } from './vivid.mixins.web';\nimport { default as VividNodeMixins } from './vivid.mixins.node';\nclass BasePlot{\n    constructor(){\n\n    }\n    connect(){\n        throw Error('implement require');\n    }\n}\nclass Vivid extends platform.mixWith(BasePlot, \n        { node: [VividNodeMixins, ScatterChartMixins, LineChartMixins],\n           web: [VividWebMixins, ScatterChartMixins, LineChartMixins]}){\n    constructor(d3){\n        super();\n        this.d3 = d3;\n        this.DefaultWidth = 900;\n        this.DefaultHeight = 600;\n        this.defaultStyle = { svg:  {font: '10px sans-serif' },\n                              '.label': {'fill': 'white'},\n                              '.axis path, .axis line': { fill: 'none',\n                                    'stroke': '#000; shape-rendering: crispEdges' },\n                              '.dot' : { 'stroke': '#000' } };\n    }\n\n    png({data, width, height, title, plotId}){\n        let canvas = this.makeCanvasNode({width, height});\n        let context = canvas.getContext?canvas.getContext('2d'):canvas.node().getContext(\"2d\");\n        let imagedata = context.createImageData(width, height);\n        for (var x=0; x<width; x++) {\n            for (var y=0; y<height; y++) {\n                var pixelindex = (y * width + x) * 4;\n                imagedata.data[pixelindex]   = data[pixelindex];\n                imagedata.data[pixelindex+1] = data[pixelindex+1];\n                imagedata.data[pixelindex+2] = data[pixelindex+2];\n                imagedata.data[pixelindex+3] = data[pixelindex+3];\n            }\n        }\n        context.putImageData(imagedata, 0, 0);\n        title = title?title:'unname';\n        plotId = plotId?plotId:title.replace(/\\s/g,'_') + '.png';\n        return plotId;\n    }\n\n    basePlot({kwdata, width, height, xLabel, yLabel, style}){\n        const d3 = this.d3;\n        style = style!==undefined?style:{};\n        style = Object.assign({}, this.defaultStyle, style);\n        let cssStyle = this.json2css(style);\n        width  = width?width : this.DefaultWidth;\n        height = height?height : this.DefaultHeight;\n        const plotMargin = {top: 20, right: 20, bottom: 30, left: 40},\n              plotWidth  = width - plotMargin.left - plotMargin.right,\n              plotHeight = height - plotMargin.top - plotMargin.bottom;\n        \n        \n        var svg = this.makeSVGnode({width, height, styles: cssStyle});\n        \n        svg = svg.append(\"g\")\n                    .attr(\"transform\", \n                          \"translate(\" + plotMargin.left + \",\" + plotMargin.top + \")\");\n        let xDomain = d3.extent(kwdata, ([xPoint, yPoint, name])=>xPoint);\n        let yDomain = d3.extent(kwdata, ([xPoint, yPoint, name])=>yPoint);\n        \n        var xMap = d3.scaleLinear().range([0, plotWidth]).domain(xDomain);\n        var yMap = d3.scaleLinear().range([plotHeight, 0]).domain(yDomain);\n        \n        var xAxis = d3.axisBottom(xMap);\n        var yAxis = d3.axisLeft(yMap);\n        var color = d3.scaleOrdinal(d3.schemeCategory10);\n        kwdata.map(([x,y,name])=>color(name));\n        xLabel = xLabel?xLabel:'x axis';\n        yLabel = yLabel?yLabel:'y axis';\n        svg.append(\"g\").attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + plotHeight + \")\").call(xAxis)\n            .append(\"text\").attr(\"class\", \"label\")\n            .attr(\"x\", plotWidth).attr(\"y\", 0).style('fill','white')\n            .style(\"text-anchor\", \"end\").text(xLabel);\n        svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis)\n            .append(\"text\").attr(\"class\", \"label\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .attr(\"y\", 6).attr(\"dy\", \".91em\").style('fill','white')\n            .style(\"text-anchor\", \"end\").text(yLabel);\n        \n        var legend = svg.selectAll(\".legend\")\n            .data(color.domain()).enter()\n            .append(\"g\").attr(\"class\", \"legend\")\n            .attr(\"transform\", (d,i)=>\"translate(0,\" + i * 20 + \")\");\n\n        legend.append(\"rect\").attr(\"x\", plotWidth - 18).attr(\"width\", 18)\n            .attr(\"height\", 18).style(\"fill\", color);\n\n        legend.append(\"text\").attr(\"x\", plotWidth - 24).attr(\"y\", 9)\n            .attr(\"dy\", \".35em\").style(\"text-anchor\", \"end\").text(d=>d);\n        this.plotStyle = cssStyle;\n        return  { svg, xMap, yMap, color };\n    }\n}\nlet vivid = new Vivid(d3);\nexport default vivid;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/vivid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "class",
    "name": "BasePlot",
    "memberof": "packages/causality-log/src/Vivid/vivid.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/vivid.js~BasePlot",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-log/src/Vivid/vivid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-log/src/Vivid/vivid.js~BasePlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.js~BasePlot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/Vivid/vivid.js~BasePlot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.js~BasePlot#connect",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Vivid",
    "memberof": "packages/causality-log/src/Vivid/vivid.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/vivid.js~Vivid",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/vivid.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "expressionExtends": "platform.mixWith(BasePlot, ",
    "extends": [
      "BasePlot"
    ]
  },
  {
    "__docId__": 279,
    "kind": "variable",
    "name": "vivid",
    "memberof": "packages/causality-log/src/Vivid/vivid.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/vivid.js~vivid",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/vivid.js",
    "importStyle": "vivid",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-log/src/Vivid/vivid.js~Vivid"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/vivid.mixins.node.js",
    "content": "import { default as D3N } from 'vivid.d3-node';\nimport { default as canvasModule } from 'canvas';\nimport { default as svg2png } from 'svg2png';\nimport * as fs from 'fs';\nconst VividNodeMixins = (BaseVividClass)=> class extends BaseVividClass{\n    connect(channel){\n        \n    }\n\n    async export2png(outputPath){\n        const d3n = this.d3plot;\n        if (d3n.options.canvas) {\n            const canvas = d3n.options.canvas;\n            let stream = canvas.pngStream().pipe(fs.createWriteStream(outputPath));\n            return new Promise((resolve, reject)=>{\n                stream.on('finish', function () { resolve(outputPath); });\n            });\n        }\n        else{\n            \n            var svgBuffer = Buffer.from(d3n.svgString(), 'utf-8');\n            let buffer = await svg2png(svgBuffer);\n            return new Promise((resolve, reject)=>{\n                fs.writeFile(outputPath, buffer, (err)=>{\n                    if(err){ \n                        reject('error export file'); \n                    }\n                    else{\n                        resolve(outputPath);\n                    }\n                }); });\n        }\n    }\n\n    json2css(objectStyle){\n        let cssString = Object.entries(objectStyle).reduce((acc1, cur1) => {\n                return `${acc1}\\n\\n${cur1[0]} ` + \n                    Object.keys(cur1[1])\n                        .reduce((acc2, cur2) => \n                            `${acc2}\\n\\t${cur2}: ${cur1[1][cur2]};`, '{') + '\\n}';\n            }, '');\n        return cssString;\n    }\n\n    makeSVGnode({width, height, styles}){\n        var options = { styles, canvasModule, d3:this.d3 };\n        this.d3plot = new D3N(options);\n        return this.d3plot.createSVG(width, height);\n    }\n\n    makeCanvasNode({width, height}){\n        var options = { styles:'', canvasModule, d3:this.d3 };\n        this.d3plot = new D3N(options);\n        return this.d3plot.createCanvas(width, height);\n    }\n\n    async show(option={}){\n        let {plotId} = option;\n        this.open = require(\"open\");\n        await this.export2png(plotId);\n        return await this.open(plotId);\n    }\n};\nexport default VividNodeMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/vivid.mixins.node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "VividNodeMixins",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/vivid.mixins.node.js",
    "importStyle": "VividNodeMixins",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseVividClass"
    ]
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#connect",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "export2png",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#export2png",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "outputPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "json2css",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#json2css",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "objectStyle",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "makeSVGnode",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#makeSVGnode",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"width\": *, \"height\": *, \"styles\": *}"
        ],
        "defaultRaw": {
          "width": null,
          "height": null,
          "styles": null
        },
        "defaultValue": "{\"width\":null,\"height\":null,\"styles\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "d3plot",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#d3plot",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "makeCanvasNode",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#makeCanvasNode",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"width\": *, \"height\": *}"
        ],
        "defaultRaw": {
          "width": null,
          "height": null
        },
        "defaultValue": "{\"width\":null,\"height\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "show",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#show",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "open",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins",
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.node.js~VividNodeMixins#open",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "file",
    "name": "packages/causality-log/src/Vivid/vivid.mixins.web.js",
    "content": "import { resolve } from \"path\";\n\nconst VividWebMixins = (BaseVividClass)=> class extends BaseVividClass{\n    connect(target){\n        console.log(target);\n        if(typeof target === 'string' && target.startsWith('#')){\n            this.d3n = this.d3.select(target);\n            let { width } = this.d3n.node().getBoundingClientRect();\n            this.DefaultWidth = width - 40;\n            this.DefaultWidth = width*0.8;\n        }\n        else{\n            throw Error(`cannot connect to ${target}`);\n        }\n    }\n\n    makeSVGnode({width, height}){\n        return this.d3n.append('svg').attr('width', width).attr('height', height);\n    }\n\n    makeCanvasNode({width, height}){\n        return this.d3n.append('canvas').attr('width', width).attr('height', height);\n    }\n\n    json2css(objectStyle){\n        let cssString = Object.entries(objectStyle).reduce((acc1, cur1) => {\n                return `${acc1}\\n\\n${cur1[0]} ` + \n                    Object.keys(cur1[1])\n                        .reduce((acc2, cur2) => \n                            `${acc2}\\n\\t${cur2}: ${cur1[1][cur2]};`, '{') + '\\n}';\n            }, '');\n        \n        var style = document.createElement('style');\n        style.type = 'text/css';\n        style.innerHTML = cssString;\n        document.getElementsByTagName('head')[0].appendChild(style);\n        return cssString;\n    }\n\n    async show(option={plotId:'new plot'}){\n        let {plotId} = option;\n        //TODO: remove if not need\n        return new Promise((resolve, reject)=>{\n            resolve(plotId);\n        });\n    }\n};\nexport default VividWebMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/Vivid/vivid.mixins.web.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 292,
    "kind": "class",
    "name": "VividWebMixins",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js",
    "static": true,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/Vivid/vivid.mixins.web.js",
    "importStyle": "VividWebMixins",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseVividClass"
    ]
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#connect",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "d3n",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#d3n",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "DefaultWidth",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#DefaultWidth",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "makeSVGnode",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#makeSVGnode",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"width\": *, \"height\": *}"
        ],
        "defaultRaw": {
          "width": null,
          "height": null
        },
        "defaultValue": "{\"width\":null,\"height\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "makeCanvasNode",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#makeCanvasNode",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"width\": *, \"height\": *}"
        ],
        "defaultRaw": {
          "width": null,
          "height": null
        },
        "defaultValue": "{\"width\":null,\"height\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "json2css",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#json2css",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "objectStyle",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "show",
    "memberof": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-log/src/Vivid/vivid.mixins.web.js~VividWebMixins#show",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "optional": true,
        "types": [
          "{\"plotId\": string}"
        ],
        "defaultRaw": {
          "plotId": "new plot"
        },
        "defaultValue": "{\"plotId\":\"new plot\"}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "file",
    "name": "packages/causality-log/src/baseLogger.js",
    "content": "/**\n * This BaseLogger class provided abstract class for extending new logger class\n * @class BaseLog\n */\nclass BaseLogger{\n    constructor(){\n        this.AcceptedLevels = {debug: 0, log:1, warn:2, error: 3};\n        this.rAcceptedLevels = {0:'debug', 1: 'log', 2: 'warn', 3: 'error'};\n        this.level = this.AcceptedLevels['debug'];\n    }\n    set Level(level){\n        if(this.AcceptedLevels[level]!==undefined){\n            this.level = this.AcceptedLevels[level];    \n        }\n        else{\n            throw Error(`${level} must be one of ${Object.keys(this.AcceptedLevels)}`);\n        }\n    }\n    get Level(){\n        return this.rAcceptedLevels[this.level];\n    }\n\n    connect(){\n        throw Error('implement required');\n    }\n\n    log(message){\n        throw Error('implement required');\n    }\n    \n    warn(message){\n        throw Error('implement required');\n    }\n    \n    error(message){\n        throw Error('implement required');\n    }\n\n    debug(message){\n        throw Error('implement required');\n    }\n\n    groupBegin(name){\n        throw Error('implement required');\n    }\n\n    groupEnd(){\n        throw Error('implement required');\n    }\n\n    progressBegin(range){\n        throw Error('implement required');\n    }\n\n    progressUpdate(message){\n        throw Error('implement required');\n    }\n\n    progressEnd(message){\n        throw Error('implement required');\n    }\n}\n\nexport default BaseLogger;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/baseLogger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 302,
    "kind": "class",
    "name": "BaseLogger",
    "memberof": "packages/causality-log/src/baseLogger.js",
    "static": true,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/baseLogger.js",
    "importStyle": "BaseLogger",
    "description": "This BaseLogger class provided abstract class for extending new logger class",
    "lineNumber": 5,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BaseLog"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 303,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "AcceptedLevels",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#AcceptedLevels",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"debug\": *, \"log\": number, \"warn\": number, \"error\": number}"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "rAcceptedLevels",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#rAcceptedLevels",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"0\": string, \"1\": string, \"2\": string, \"3\": string}"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "level",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#level",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "set",
    "name": "Level",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#Level",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 309,
    "kind": "get",
    "name": "Level",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#Level",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#connect",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "log",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#log",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "warn",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#warn",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "error",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#error",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "debug",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#debug",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "groupBegin",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#groupBegin",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "groupEnd",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#groupEnd",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "progressBegin",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#progressBegin",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "progressUpdate",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#progressUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "progressEnd",
    "memberof": "packages/causality-log/src/baseLogger.js~BaseLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/baseLogger.js~BaseLogger#progressEnd",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "file",
    "name": "packages/causality-log/src/index.js",
    "content": "export { default as termLogger } from './termLogger';\nexport { vivid } from './Vivid/init';\nexport { default as LoggerMixins } from './logger.mixins';\nexport { default as BaseLogger } from './baseLogger';\n\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "packages/causality-log/src/logger.mixins.js",
    "content": "import {default as BaseLogger } from './baseLogger';\nimport { assert } from 'causal-net.utils';\n/**\n * This LoggerMixins class provides mixins for accquiring logger\n * @class LoggerMixins\n * @extends BaseClass\n * @example\n * [EXAMPLE ../examples/logger.mixins.babel.js]\n */\nconst LoggerMixins = (BaseClass)=> class extends BaseClass{\n    \n    set Logger(logger){\n        assert.beInstanceOf(logger, BaseLogger);\n        this.logger = logger;\n    }\n    \n    get Logger(){\n        if(!this.logger){\n            throw Error('logger is not set');\n        }\n        return this.logger;\n    }\n};\n\nexport default LoggerMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/logger.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "LoggerMixins",
    "memberof": "packages/causality-log/src/logger.mixins.js",
    "static": true,
    "longname": "packages/causality-log/src/logger.mixins.js~LoggerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/logger.mixins.js",
    "importStyle": "LoggerMixins",
    "description": "This LoggerMixins class provides mixins for accquiring logger",
    "examples": [
      "import { LoggerMixins, termLogger, BaseLogger } from 'causal-net.log';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [LoggerMixins]){\n    constructor(){\n        super();\n        this.Logger = termLogger;\n    }\n}\nlet pipeline = new SimplePipeline();\nconsole.log(pipeline.Logger instanceof BaseLogger);"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LoggerMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 323,
    "kind": "set",
    "name": "Logger",
    "memberof": "packages/causality-log/src/logger.mixins.js~LoggerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/logger.mixins.js~LoggerMixins#Logger",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "logger",
    "memberof": "packages/causality-log/src/logger.mixins.js~LoggerMixins",
    "static": false,
    "longname": "packages/causality-log/src/logger.mixins.js~LoggerMixins#logger",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "get",
    "name": "Logger",
    "memberof": "packages/causality-log/src/logger.mixins.js~LoggerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/logger.mixins.js~LoggerMixins#Logger",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "file",
    "name": "packages/causality-log/src/prettyJson.js",
    "content": "// origin code from https://github.com/lucygilbert/json-display/blob/master/json-display.js\n// Copyright (c) 2017 Lucy Gilbert\nexport default class JsonView{\n    constructor(){\n    }\n    static JSONDisplay(json, openLevelsArg, styleOptionsArg) {\n        var DEFAULT_STYLE_OPTIONS = {\n          root: { tag: 'pre', style: 'padding: 5px; font-size: 1rem;' },\n          titleContainer: { tag: 'div', style: 'margin-bottom: 3px;' },\n          title: { tag: 'span', style: 'cursor: pointer;' },\n          titleText: { tag: 'span', style: '' },\n          openButton: { \n            tag: 'span',\n            style: 'display: inline-block; margin: 0px 7px 0px 2px; border-top: 5px solid transparent; '\n                 + 'border-bottom: 5px solid transparent; border-left: 5px solid black;',\n          },\n          contentsContainer: { tag: 'div', style: 'padding-left: 18px;' },\n          keyValuePair: { tag: 'span', style: 'display: block; margin-bottom: 2px;' },\n          key: { tag: 'span', style: 'color: darkblue;' },\n          symbolValue: { tag: 'span', style: 'color: darkgreen;' },\n          stringValue: { tag: 'span', style: 'color: crimson;' },\n          numberValue: { tag: 'span', style: 'color: blue;' },\n          booleanValue: { tag: 'span', style: 'color: blue;' },\n          nullValue: { tag: 'span', style: 'color: blue;' },\n        };\n        var openLevels = isNaN(parseInt(openLevelsArg)) ? Infinity : parseInt(openLevelsArg);\n        var styleOptions = typeof styleOptionsArg === 'object' \n                           ? mergeStyleOptions(DEFAULT_STYLE_OPTIONS, styleOptionsArg)\n                           : DEFAULT_STYLE_OPTIONS;\n    \n        if (typeof Object.assign != 'function') {\n          Object.assign = function(target) {\n            if (target == null) {\n              throw new TypeError('Cannot convert undefined or null to object');\n            }\n    \n            var to = Object(target);\n    \n            for (var index = 1; index < arguments.length; index++) {\n              var nextSource = arguments[index];\n    \n              if (nextSource != null) {\n                for (var nextKey in nextSource) {\n                  if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                    to[nextKey] = nextSource[nextKey];\n                  }\n                }\n              }\n            }\n            return to;\n          };\n        }\n    \n        function render() {\n          var element = document.createElement(styleOptions.root.tag);\n          element.style.cssText = styleOptions.root.style;\n    \n          if (json === null || json === undefined) {\n            var voidElement = getValue(null);\n            element.appendChild(voidElement);\n          } else if (json instanceof Date) {\n            var dateElement = getValue(json.toISOString());\n            element.appendChild(dateElement);\n          } else if (typeof json !== 'object') {\n            var nonExpandableElement = getValue(json);\n            element.appendChild(nonExpandableElement);\n          } else {\n            var title = Array.isArray(json) ? 'Array[' + json.length + ']' : 'Object';\n            var thisLevelIsClosed = openLevels < 1;\n            element.appendChild(getTitle(title, null, thisLevelIsClosed));\n            element.appendChild(convertJsonToElements(json, 1));\n          }\n    \n          return element;\n        }\n    \n        function convertJsonToElements(json, index) {\n          var thisLevelIsClosed = index > openLevels;\n          var nextLevelIsClosed = index + 1 > openLevels;\n          var container = getContentsContainer(thisLevelIsClosed);\n          for (var key in json) {\n            if (Array.isArray(json[key])) {\n              container.appendChild(getTitle('Array[' + json[key].length + ']', key, nextLevelIsClosed));\n              container.appendChild(convertJsonToElements(json[key], index + 1));\n            } else if (json[key] === null || json[key] === undefined) {\n              container.appendChild(getStandardPair(key, null));\n            } else if (json[key] instanceof Date) {\n              container.appendChild(getStandardPair(key, json[key].toISOString()));\n            } else if (typeof json[key] === 'object') {\n              container.appendChild(getTitle('Object', key, nextLevelIsClosed));\n              container.appendChild(convertJsonToElements(json[key], index + 1));\n            } else {\n              container.appendChild(getStandardPair(key, json[key]));\n            }\n          }\n          if (typeof Object.getOwnPropertySymbols === 'function') {\n            Object.getOwnPropertySymbols(json).forEach(function(symbol) {\n              container.appendChild(getStandardPair(symbol.toString(), json[symbol]));\n            });\n          }\n    \n          return container;\n        }\n    \n        function getTitle(titleText, optionalKey, levelIsClosed) {\n          var currentlyClosed = levelIsClosed;\n          var containerElement = document.createElement(styleOptions.titleContainer.tag);\n          containerElement.style.cssText = styleOptions.titleContainer.style;\n          containerElement.setAttribute('data-test', 'titleContainer');\n          var textElement = document.createElement(styleOptions.titleText.tag);\n          var titleElement = document.createElement(styleOptions.title.tag);\n          titleElement.style.cssText = styleOptions.title.style;\n          textElement.style.cssText = styleOptions.titleText.style;\n    \n          titleElement.appendChild(getOpenButton(levelIsClosed));\n          if (optionalKey) {\n            textElement.appendChild(getKey(optionalKey));\n          }\n          textElement.appendChild(document.createTextNode(titleText));\n          titleElement.appendChild(textElement);\n    \n          titleElement.onclick = function () {\n            var openButton = titleElement.firstChild;\n            var objectContents = titleElement.parentNode.nextSibling;\n            objectContents.style.display = currentlyClosed ? 'block' : 'none';\n            openButton.style.transform = currentlyClosed ? 'rotate(90deg)' : 'rotate(0deg)';\n            currentlyClosed = !currentlyClosed;\n          };\n    \n          containerElement.appendChild(titleElement);\n          return containerElement;\n        }\n    \n        function getOpenButton(levelIsClosed) {\n          var buttonElement = document.createElement(styleOptions.openButton.tag);\n          buttonElement.style.cssText = styleOptions.openButton.style;\n          buttonElement.style.transform = levelIsClosed ? 'rotate(0deg)' : 'rotate(90deg)';\n          return buttonElement;\n        }\n    \n        function getContentsContainer(isClosed) {\n          var containerElement = document.createElement(styleOptions.contentsContainer.tag);\n          containerElement.setAttribute('data-test', 'contentsContainer');\n          containerElement.style.cssText = styleOptions.contentsContainer.style;\n          containerElement.style.display = (isClosed ? 'none' : 'block');\n          return containerElement;\n        }\n    \n        function getStandardPair(key, value) {\n          var pairElement = document.createElement(styleOptions.keyValuePair.tag);\n          pairElement.style.cssText = styleOptions.keyValuePair.style;\n          pairElement.appendChild(getKey(key));\n          pairElement.appendChild(getValue(value));\n          return pairElement;\n        }\n    \n        function getKey(name) {\n          var keyElement = document.createElement(styleOptions.key.tag);\n          keyElement.style.cssText = styleOptions.key.style;\n          keyElement.appendChild(document.createTextNode(name + ': '));\n          return keyElement;\n        }\n    \n        function getValue(value) {\n          var valueElement;\n          var nullType = 'object';\n          switch (typeof value) {\n            case 'symbol':\n              valueElement = document.createElement(styleOptions.symbolValue.tag);\n              valueElement.style.cssText = styleOptions.symbolValue.style;\n              valueElement.appendChild(document.createTextNode(value.toString()));\n              break;\n            case 'string':\n              valueElement = document.createElement(styleOptions.stringValue.tag);\n              valueElement.style.cssText = styleOptions.stringValue.style;\n              valueElement.appendChild(document.createTextNode('' + value + ''));\n              break;\n            case 'number':\n              valueElement = document.createElement(styleOptions.numberValue.tag);\n              valueElement.style.cssText = styleOptions.numberValue.style;\n              valueElement.appendChild(document.createTextNode(value));\n              break;\n            case 'boolean':\n              valueElement = document.createElement(styleOptions.booleanValue.tag);\n              valueElement.style.cssText = styleOptions.booleanValue.style;\n              valueElement.appendChild(document.createTextNode(value));\n              break;\n            case nullType:\n              valueElement = document.createElement(styleOptions.nullValue.tag);\n              valueElement.style.cssText = styleOptions.nullValue.style;\n              valueElement.appendChild(document.createTextNode(value));\n              break;\n          }\n          return valueElement;\n        }\n    \n        function mergeStyleOptions(defaults, overrides) {\n          var merged = {};\n          for (var key in defaults) {\n            merged[key] = Object.assign({}, defaults[key], overrides[key]);\n          }\n          return merged;\n        }\n    \n        return render();\n    }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/prettyJson.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 327,
    "kind": "class",
    "name": "JsonView",
    "memberof": "packages/causality-log/src/prettyJson.js",
    "static": true,
    "longname": "packages/causality-log/src/prettyJson.js~JsonView",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/prettyJson.js",
    "importStyle": "JsonView",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 328,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-log/src/prettyJson.js~JsonView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/prettyJson.js~JsonView#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "JSONDisplay",
    "memberof": "packages/causality-log/src/prettyJson.js~JsonView",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/causality-log/src/prettyJson.js~JsonView.JSONDisplay",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      },
      {
        "name": "openLevelsArg",
        "types": [
          "*"
        ]
      },
      {
        "name": "styleOptionsArg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "file",
    "name": "packages/causality-log/src/termLogger.js",
    "content": "import { default as BaseLogger } from './baseLogger';\nimport { default as LogNodeMixins } from './termLogger.mixins.node';\nimport { default as LogWebMixins } from './termLogger.mixins.web';\nimport { platform } from 'causal-net.utils';\nimport { vivid, PlotMixins } from './Vivid/init';\n/**\n * This TermLogger provide isomorphic logger\n * { mixWith : { 'node': [LogNodeMixins], 'web': [WebNodeMixins] } }\n * @class TermLogger\n * @extends BaseLogger\n * @example\n * [EXAMPLE ../examples/log.babel.js]\n */\nclass TermLogger extends platform.mixWith(BaseLogger, \n        { node:[LogNodeMixins, PlotMixins], \n          web:[LogWebMixins, PlotMixins] } ){\n    constructor(vivid){\n        super();\n        /**@private {Array} stack of groups */\n        this.groupStack = [];\n        this.Plot = vivid;\n    }\n    \n    groupBegin(name){   \n        let group = {name, beginTime: new Date()};\n        this.groupStack.push(group);\n        let indentSpace = '';\n        \n        this.log(`**********************************\\n${indentSpace}${group.name}: begin at ${group.beginTime}`);\n    }\n    groupEnd(){\n        if(this.groupStack.length > 0){\n            let group = this.groupStack.pop();\n            let indentSpace = '';\n            this.log(`${indentSpace}${group.name}: end after ${(new Date() - group.beginTime)} (ms)\n                        \\n**********************************`);\n        }\n    }\n}\n\nlet termLogger = new TermLogger(vivid);\nexport default termLogger;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/termLogger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 331,
    "kind": "class",
    "name": "TermLogger",
    "memberof": "packages/causality-log/src/termLogger.js",
    "static": true,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/termLogger.js",
    "importStyle": null,
    "description": "This TermLogger provide isomorphic logger\n{ mixWith : { 'node': [LogNodeMixins], 'web': [WebNodeMixins] } }",
    "examples": [
      "import { termLogger } from 'causal-net.log';\n\ntermLogger.log('this is text');\ntermLogger.log({'name':'this is text'});\n\ntermLogger.log({'father':{'name':'this is text','alias':'this is another text'}});\ntermLogger.log({'father':{'name':{sub:'this is text'},'alias':'this is another text'}});\ntermLogger.log({'array':[0,1,2,3,4]});\ntermLogger.log({'array':[{a:0}, {b:1}, {c:2},  {d:4},  {e:6}]});\n\ntermLogger.Level = 'debug';\nconsole.log(termLogger.Level);\ntermLogger.log({'not to show': true});\ntermLogger.Level = 'log';\nconsole.log(termLogger.Level);\n\ntermLogger.progressBegin(5);\nfor(let i of [1,2,3,4,5]){\n    termLogger.progressUpdate({current: i});\n}\ntermLogger.progressEnd();\n\ntermLogger.groupBegin('group A');\ntermLogger.groupBegin('group B');\ntermLogger.groupBegin('group C');\ntermLogger.groupEnd();\ntermLogger.groupEnd();\ntermLogger.groupEnd();"
    ],
    "lineNumber": 43,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "TermLogger"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 332,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-log/src/termLogger.js~TermLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "groupStack",
    "memberof": "packages/causality-log/src/termLogger.js~TermLogger",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger#groupStack",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "Plot",
    "memberof": "packages/causality-log/src/termLogger.js~TermLogger",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger#Plot",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "groupBegin",
    "memberof": "packages/causality-log/src/termLogger.js~TermLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger#groupBegin",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "groupEnd",
    "memberof": "packages/causality-log/src/termLogger.js~TermLogger",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.js~TermLogger#groupEnd",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "termLogger",
    "memberof": "packages/causality-log/src/termLogger.js",
    "static": true,
    "longname": "packages/causality-log/src/termLogger.js~termLogger",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/termLogger.js",
    "importStyle": "termLogger",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-log/src/termLogger.js~TermLogger"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "packages/causality-log/src/termLogger.mixins.node.js",
    "content": "import * as cliProgress from 'cli-progress';\n\nconst LogNodeMixins = (LogClass)=> class extends LogClass{\n    connect(channel){\n        this.currentBar = false;\n    }\n    log(message){\n        //TODO: make decorator \n        this.currentBar = false;\n        if(this.level >= this.AcceptedLevels['log']){\n            return null;\n        }\n        console.log(message);\n    }\n    plot(data){\n        const Plot = this.Plot;\n        if(!data.type){\n            throw Error(`plot type is not defined in ${JSON.stringify(data)}`);\n        }\n        let { plotId } = data;\n        if(!plotId){\n            this.plotCounter = this.plotCounter!==undefined?this.plotCounter+1:0;\n            plotId = `plot-${this.plotCounter}`;\n            data.plotId = plotId;\n        }\n        Plot[data.type](data);\n        return plotId;\n    }\n    \n    async show(option={}){\n        let {plotId} = option;\n        return await this.Plot.show(option);\n    }\n\n    progressBegin(range){\n        this.processCounter += 1;\n        this.currentBar = new cliProgress.Bar({}, cliProgress.Presets.shades_classic);\n        this.currentBar.setTotal(range);\n    }\n    progressUpdate(progressMessage){\n        if(!this.currentBar){\n            this.progressBegin();\n        }\n        this.processCounter += 1;\n        this.currentBar.update(this.processCounter);\n    }\n    progressEnd(){\n        this.currentBar.stop();\n        this.processCounter = 0;\n    }\n    debug(message){\n        \n        if(this.level >= this.AcceptedLevels['debug']){\n            return null;\n        }\n        console.debug(message);\n    }\n\n    warn(message){\n        \n        if(this.level >= this.AcceptedLevels['warn']){\n            return null;\n        }\n        console.warn(message);\n    }\n\n    error(message){\n        \n        if(this.level >= this.AcceptedLevels['error']){\n            return null;\n        }\n        console.error(message);\n    }\n};\n\nexport default LogNodeMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/termLogger.mixins.node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "LogNodeMixins",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js",
    "static": true,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/termLogger.mixins.node.js",
    "importStyle": "LogNodeMixins",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "LogClass"
    ]
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#connect",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "currentBar",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#currentBar",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "log",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#log",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "plot",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#plot",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "plotCounter",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#plotCounter",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "show",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#show",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "progressBegin",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#progressBegin",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "processCounter",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#processCounter",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "progressUpdate",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#progressUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "progressMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "progressEnd",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#progressEnd",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "debug",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#debug",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "warn",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#warn",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "error",
    "memberof": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.node.js~LogNodeMixins#error",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "packages/causality-log/src/termLogger.mixins.web.js",
    "content": "import {default as JsonView} from './prettyJson';\nconst LogWebMixins = (LogClass)=> class extends LogClass{\n    connect(target=null){\n        let documentEl = target?document.getElementById(target.replace('#','')):document.body;\n        this.target = target;\n        \n        let node = document.createElement(\"ul\");\n        node.style.cssText = \"list-style-type: none;\";\n        documentEl.appendChild(node);\n        console.log({documentEl, node});\n        this.frameEl = documentEl;\n        this.loggerEl = documentEl.getElementsByTagName(\"ul\")[0];\n        this.colorCode = { debug: '#f1f1f1',\n                             log: '#010101', \n                            warn: '#eae26e', \n                           error: '#ea6e78' };\n    }\n    scrollBottom(element=null){\n        element = element || this.frameEl;\n        element.scrollTop = element.scrollHeight - element.clientHeight;\n    }\n\n    plot(data){\n        const Plot = this.Plot;\n        if(!data.type){\n            throw Error(`plot type is not defined in ${JSON.stringify(data)}`);\n        }\n        \n        \n        let { plotId } = data;\n        if(!plotId){\n            this.plotCounter = this.plotCounter!==undefined?this.plotCounter+1:0;\n            plotId = `plot-${this.plotCounter}`;\n            let node = document.createElement(\"li\");\n            node.style.cssText = 'border-bottom: 1px solid #dedede;';\n            var date = new Date();\n            node.innerHTML = `<p style=\"font-size: 12px; text-align:right\">${date}</p>`;\n            node.setAttribute(\"id\", plotId);\n            this.loggerEl.appendChild(node);\n            Plot.connect('#'+plotId);\n            this.scrollBottom();\n        }\n        else{\n            Plot.connect('#'+plotId);\n        }\n        Plot[data.type](data);\n        return plotId;\n    }\n\n    async show(option={}){\n        return await this.Plot.show(option);\n    }\n\n    progressBegin(range){\n        this.progressRange = range;\n        this.progressCounter = 0;\n    }\n    progressUpdate(processMessage){\n        this.progressCounter += 1;\n        // let node = this.loggerEl.getElementsByTagName(\"li:nth-last-of-type(1)\");\n        let LINodes = this.loggerEl.getElementsByTagName(\"li\");\n        let node = LINodes[LINodes.length-1];\n        if(!node || node.classList.contains(\"logger-progress\")){\n            //create new el\n            node = document.createElement(\"li\");\n            node.classList.add(\"logger-progress\");\n            this.loggerEl.appendChild(node);\n        }\n        let jsonNode = JsonView.JSONDisplay(processMessage);\n        var date = new Date();\n        node.innerHTML = `<p style=\"font-size: 12px; text-align:right\">\n                    ${this.progressCounter}/${this.progressRange} ${date}</p>`;\n        node.appendChild(jsonNode);\n        this.scrollBottom();\n    }\n    progressEnd(){\n\n    }\n    log(message, style=''){\n        \n        if(this.level >= this.AcceptedLevels['log']){\n            return null;\n        }\n        if(!this.loggerEl || !this.loggerEl.appendChild){\n            throw Error(`cannot print log`);\n        }\n        let node = document.createElement(\"li\");\n        node.style.cssText = 'border-bottom: 1px solid #dedede;list-style-type: none;'; \n        let jsonNode = JsonView.JSONDisplay(message);\n        var date = new Date();\n        node.innerHTML = `<p style=\"font-size: 12px; text-align:right\">${date}</p>`;\n        jsonNode.style.cssText += ';'+style;\n        node.appendChild(jsonNode);\n        this.loggerEl.appendChild(node);\n        this.scrollBottom();\n        console.log(message);\n    }\n\n    debug(message){\n        if(this.level >= this.AcceptedLevels['debug']){\n            return null;\n        }\n        \n        let style = 'color:' + this.colorCode['debug'];\n        this.log(message, style);      \n    }\n\n    warn(message){\n        if(this.level >= this.AcceptedLevels['warn']){\n            return null;\n        }\n        let style = 'color:' + this.colorCode['warn'];\n        this.log(message, style);\n    }\n\n    error(message){\n        if(this.level >= this.AcceptedLevels['error']){\n            return null;\n        }\n        let style = 'color:' + this.colorCode['error'];\n        this.log(message, style);\n    }\n};\n\nexport default LogWebMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/src/termLogger.mixins.web.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "class",
    "name": "LogWebMixins",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js",
    "static": true,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-log/src/termLogger.mixins.web.js",
    "importStyle": "LogWebMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "LogClass"
    ]
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#connect",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "target",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#target",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "frameEl",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#frameEl",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "loggerEl",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#loggerEl",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "colorCode",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#colorCode",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"debug\": string, \"log\": string, \"warn\": string, \"error\": string}"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "scrollBottom",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#scrollBottom",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "plot",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#plot",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "plotCounter",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#plotCounter",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "show",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#show",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "option",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "progressBegin",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#progressBegin",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "range",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "progressRange",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#progressRange",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "progressCounter",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#progressCounter",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "progressUpdate",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#progressUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "processMessage",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "progressEnd",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#progressEnd",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "log",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#log",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "debug",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#debug",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "warn",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#warn",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "error",
    "memberof": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-log/src/termLogger.mixins.web.js~LogWebMixins#error",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "packages/causality-memcache/src/index.js",
    "content": "export { default as memDownCache } from './memdownCache';\nexport { default as MemCacheMixins } from './memcache.mixins';\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "packages/causality-memcache/src/memcache.mixins.js",
    "content": "/**\n * This mixins class provides attributes: **MemCache**.\n * @class MemCacheMixins\n * @extends {BaseClass}\n */\nconst MemCacheMixins = (BaseClass)=> class extends BaseClass{\n    /**\n     * This methods return summary about items of the current memcache \n     * @returns\n     */\n    async memCacheSummary(){\n        return await this.memCache.getItemList();\n    }\n    \n    set MemCache(memCache){\n        this.memCache = memCache;\n    }\n\n    get MemCache(){\n        return this.memCache;\n    }\n};\nexport default MemCacheMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/src/memcache.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "class",
    "name": "MemCacheMixins",
    "memberof": "packages/causality-memcache/src/memcache.mixins.js",
    "static": true,
    "longname": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memcache/src/memcache.mixins.js",
    "importStyle": "MemCacheMixins",
    "description": "This mixins class provides attributes: **MemCache**.",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemCacheMixins"
      }
    ],
    "interface": false,
    "extends": [
      "BaseClass"
    ]
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "memCacheSummary",
    "memberof": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins#memCacheSummary",
    "access": "public",
    "description": "This methods return summary about items of the current memcache ",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "set",
    "name": "MemCache",
    "memberof": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins#MemCache",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "memCache",
    "memberof": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins",
    "static": false,
    "longname": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins#memCache",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "get",
    "name": "MemCache",
    "memberof": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memcache/src/memcache.mixins.js~MemCacheMixins#MemCache",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "file",
    "name": "packages/causality-memcache/src/memdownCache.js",
    "content": "import { platform } from 'causal-net.utils';\nimport { Store as BaseMemCache } from 'causal-net.core';\nimport { default as MemorizingMixins } from './memorizing.mixins';\n/**\n * This class provides storage implementation for memory caching on top of\n * [memdown](https://www.npmjs.com/package/memdown) which can be accessed via **memDownCache**.\n * { mixWith: [ MemorizingMixins ] }\n * @class MemdownCache\n * @extends BaseMemCache\n */\nclass MemdownCache extends platform.mixWith( BaseMemCache,\n    [ MemorizingMixins ]){\n    constructor(){\n        super();\n        this.connect();\n    }\n    /**\n     * Connect to database, this function shall be call when construct instance\n     * @memberof MemdownCache\n     */\n    connect(){\n        let memdown = require('memdown');\n        this.store = this.levelup(memdown());        \n    }\n}\n\nexport default new MemdownCache();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/src/memdownCache.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 386,
    "kind": "class",
    "name": "MemdownCache",
    "memberof": "packages/causality-memcache/src/memdownCache.js",
    "static": true,
    "longname": "packages/causality-memcache/src/memdownCache.js~MemdownCache",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memcache/src/memdownCache.js",
    "importStyle": null,
    "description": "This class provides storage implementation for memory caching on top of\n[memdown](https://www.npmjs.com/package/memdown) which can be accessed via **memDownCache**.\n{ mixWith: [ MemorizingMixins ] }",
    "lineNumber": 11,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemdownCache"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 387,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-memcache/src/memdownCache.js~MemdownCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memcache/src/memdownCache.js~MemdownCache#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-memcache/src/memdownCache.js~MemdownCache",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memcache/src/memdownCache.js~MemdownCache#connect",
    "access": "public",
    "description": "Connect to database, this function shall be call when construct instance",
    "lineNumber": 21,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "store",
    "memberof": "packages/causality-memcache/src/memdownCache.js~MemdownCache",
    "static": false,
    "longname": "packages/causality-memcache/src/memdownCache.js~MemdownCache#store",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "variable",
    "name": "memdownCache",
    "memberof": "packages/causality-memcache/src/memdownCache.js",
    "static": true,
    "longname": "packages/causality-memcache/src/memdownCache.js~memdownCache",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memcache/src/memdownCache.js",
    "importStyle": "memdownCache",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-memcache/src/memdownCache.js~MemdownCache"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "file",
    "name": "packages/causality-memcache/src/memorizing.mixins.js",
    "content": "/**\n * This MemorizingMixins class is a mixins class for implement memory methods\n * @class MemorizingMixins\n * @experiment\n * @extends BaseMemCacheClass\n */\nconst MemorizingMixins = (BaseMemCacheClass)=> class extends BaseMemCacheClass{\n    /**\n     * Read content from \n     * @experiment\n     * @param { String|Number } memorySlotIndex - memory slot index\n     * @returns\n     */\n    async read(memorySlotIndex){\n        const GetFromMemory = async (memorySlotIndex)=>{\n            try{\n                let data = await this.getItem(memorySlotIndex);\n                return Object.values(data)[0];\n            }\n            catch(err){\n                return null;    \n            }\n        };\n        return await GetFromMemory(memorySlotIndex);\n    }\n    /**\n     * \n     * @param { String|Number } memorySlotIndex - positive number for memory slot\n     * @param { Array } memory value\n     * @returns { Promise } memory slot index value\n     */\n    async write(memorySlotIndex, value){\n        return await this.setItem(memorySlotIndex, value);\n    }\n    /**\n     *\n     *\n     * @param {*} slotIdxs\n     * @returns\n     */\n    async recall(slotIdxs){\n        let memory = [];\n        for(let slotIdx of slotIdxs){\n            memory.push(await this.read(slotIdx));\n        }\n        return memory;\n    }\n};\nexport default MemorizingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/src/memorizing.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "class",
    "name": "MemorizingMixins",
    "memberof": "packages/causality-memcache/src/memorizing.mixins.js",
    "static": true,
    "longname": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memcache/src/memorizing.mixins.js",
    "importStyle": "MemorizingMixins",
    "description": "This MemorizingMixins class is a mixins class for implement memory methods",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MemorizingMixins"
      },
      {
        "tagName": "@experiment",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "read",
    "memberof": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins#read",
    "access": "public",
    "description": "Read content from ",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@experiment",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String",
          "Number "
        ],
        "spread": false,
        "optional": false,
        "name": "memorySlotIndex",
        "description": "memory slot index"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "write",
    "memberof": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins#write",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } memory slot index value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String",
          "Number "
        ],
        "spread": false,
        "optional": false,
        "name": "memorySlotIndex",
        "description": "positive number for memory slot"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "memory",
        "description": "value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "memory slot index value"
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "recall",
    "memberof": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memcache/src/memorizing.mixins.js~MemorizingMixins#recall",
    "access": "public",
    "description": "",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "slotIdxs",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "packages/causality-memory/src/causalNetMemory.js",
    "content": "import { Tensor, causalNetCore } from 'causal-net.core';\nimport { memDownCache } from 'causal-net.memcache';\n/**\n * This class is under experimented\n * @experiment\n * @class CausalNetMemory\n * @extends {Tensor}\n */\nclass CausalNetMemory extends Tensor{\n    constructor(){\n        super();\n        this.Memory = memDownCache;\n        this.R = causalNetCore.CoreFunction;\n    }\n    set Memory(memory){\n        //TODO: type checking \n        this.memory = memory;\n    }\n    get Memory(){\n        if(!this.memory){\n            throw Error(`memory is not set`);\n        }\n        return this.memory;\n    }\n    get MemorySize(){\n        return this.memorySize;\n    }\n    set MemorySize(size){\n        this.memorySize = size;\n    }\n    get NumSlots(){\n        return this.memorySize[0];\n    }\n    get SlotSize(){\n        \n        return this.memorySize[1];\n    }\n    async initMemory(size, initTensor=null){\n        this.MemorySize = size;\n        const R = this.R;\n        if(!initTensor){\n            initTensor = await this.T.randomNormal(size);\n        }        \n        let slotIdxs = R.range(0, this.NumSlots);\n        return this.writeSlots(slotIdxs, initTensor);\n    }\n\n    async normalize(){\n        const Memory = this.Memory, NumSlots = this.NumSlots, R = this.R;\n        let memValues = await Memory.recall(R.range(0, NumSlots));\n        let allTs = this.T.tensor(memValues);\n        let meanTs = allTs.mean(1, true);\n        let stdTs = allTs.sub(meanTs).pow(2).mean(1, true).pow(0.5);\n        return allTs.sub(meanTs).div(stdTs);    \n    }\n\n    async getMatchScore(slotIdxs){\n        let normTs = await this.normalize();\n        let cTs = normTs.gather(slotIdxs);\n        let similarityScore = normTs.dot(cTs.transpose());\n        return similarityScore;\n    }\n\n    async getTopKSimilar(slotIdxs, k){\n        let matchScoreTensor = await this.getMatchScore(slotIdxs);\n        const {values, indices} = matchScoreTensor.transpose().topk(k);\n        return indices;\n    }\n    \n    async writeSlots(slotIdxs, memoryTensor){   \n        const R = this.R, SlotSize = this.SlotSize, Memory = this.Memory;\n        let tensorData = await memoryTensor.data(); \n        let values = R.splitEvery(SlotSize, tensorData);\n        for(let idx of R.range(0, slotIdxs.length)){\n            await Memory.write(slotIdxs[idx], values[idx]);\n        }\n        return memoryTensor;\n    }\n    async readSlots(slotIndexs){\n        const Memory = this.Memory, T = this.T;\n        let values = [];\n        for(let slotIdx of slotIndexs){\n            let value = await Memory.read(slotIdx);\n            values.push(value);\n        }\n        return T.variable(T.tensor(values));\n    }\n}\n\nexport default new CausalNetMemory();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memory/src/causalNetMemory.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "CausalNetMemory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js",
    "static": true,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memory/src/causalNetMemory.js",
    "importStyle": null,
    "description": "This class is under experimented",
    "lineNumber": 9,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@experiment",
        "tagValue": ""
      },
      {
        "tagName": "@class",
        "tagValue": "CausalNetMemory"
      }
    ],
    "interface": false,
    "extends": [
      "Tensor"
    ]
  },
  {
    "__docId__": 398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#R",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "set",
    "name": "Memory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#Memory",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "memory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#memory",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "get",
    "name": "Memory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#Memory",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "get",
    "name": "MemorySize",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#MemorySize",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "set",
    "name": "MemorySize",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#MemorySize",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "memorySize",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#memorySize",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "get",
    "name": "NumSlots",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#NumSlots",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "get",
    "name": "SlotSize",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#SlotSize",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "initMemory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#initMemory",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "initTensor",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "normalize",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#normalize",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "getMatchScore",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#getMatchScore",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "slotIdxs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "getTopKSimilar",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#getTopKSimilar",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "slotIdxs",
        "types": [
          "*"
        ]
      },
      {
        "name": "k",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "writeSlots",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#writeSlots",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "slotIdxs",
        "types": [
          "*"
        ]
      },
      {
        "name": "memoryTensor",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "readSlots",
    "memberof": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory#readSlots",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "slotIndexs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "variable",
    "name": "causalNetMemory",
    "memberof": "packages/causality-memory/src/causalNetMemory.js",
    "static": true,
    "longname": "packages/causality-memory/src/causalNetMemory.js~causalNetMemory",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-memory/src/causalNetMemory.js",
    "importStyle": "causalNetMemory",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-memory/src/causalNetMemory.js~CausalNetMemory"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "packages/causality-memory/src/index.js",
    "content": "export { default as causalNetMemory } from './causalNetMemory';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memory/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "file",
    "name": "packages/causality-models/src/baseModel.js",
    "content": "import { Tensor } from 'causal-net.core';\nclass BaseModel extends Tensor{\n    constructor(){\n        super();\n        this.modelName = '';\n    }\n\n    set LayerRunner(runner){\n        throw Error('implement required');\n    }\n\n    get LayerRunner(){\n        throw Error('implement required');\n    }\n\n    fit(){\n        throw Error('implement required');\n    }\n\n    loss(){\n        throw Error('implement required');\n    }\n\n    predict(){\n        throw Error('implement required');\n    }\n    oneHotPredict(){\n        throw Error('implement required');\n    }\n}\n\nexport default BaseModel;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/src/baseModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 419,
    "kind": "class",
    "name": "BaseModel",
    "memberof": "packages/causality-models/src/baseModel.js",
    "static": true,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-models/src/baseModel.js",
    "importStyle": "BaseModel",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "causal-net.core~Tensor"
    ]
  },
  {
    "__docId__": 420,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "modelName",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#modelName",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "set",
    "name": "LayerRunner",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 423,
    "kind": "get",
    "name": "LayerRunner",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "fit",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#fit",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "loss",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#loss",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "predict",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#predict",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "oneHotPredict",
    "memberof": "packages/causality-models/src/baseModel.js~BaseModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/baseModel.js~BaseModel#oneHotPredict",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "file",
    "name": "packages/causality-models/src/causalNetModels.js",
    "content": "import { platform } from 'causal-net.utils';\nimport { Tensor as BaseTensor } from 'causal-net.core';\nimport { default as SingleLabelClassification } from './singleLableClassification';\n/**\n * This class provide common used models which can be accessed via **causalNetModels** instance.\n * @class CausalNetModels\n * @extends BaseTensor\n * @example\n * [EXAMPLE ../examples/singleLabelClassification.babel.js]\n */\nclass CausalNetModels extends platform.mixWith( BaseTensor, [] ){\n    constructor(){\n        super();\n    }\n    \n    classification(numClass){\n        this.model = new SingleLabelClassification(numClass);\n        return this.model;\n    }\n}\nexport default new CausalNetModels();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/src/causalNetModels.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 429,
    "kind": "class",
    "name": "CausalNetModels",
    "memberof": "packages/causality-models/src/causalNetModels.js",
    "static": true,
    "longname": "packages/causality-models/src/causalNetModels.js~CausalNetModels",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-models/src/causalNetModels.js",
    "importStyle": null,
    "description": "This class provide common used models which can be accessed via **causalNetModels** instance.",
    "examples": [
      "import { SingleLabelClassification } from 'causal-net.models';\nimport { causalNetCore } from 'causal-net.core';\nlet model = new SingleLabelClassification(2);\nlet T = causalNetCore.CoreTensor;\nlet inputs = T.tensor([[0.1, 0.2]], [1, 2], 'float32');\nlet labels = T.tensor([[0, 1]], [1, 2], 'float32');\nmodel.LayerRunner = { Predictor: (input)=>input};\nmodel.Fit(inputs).print();\nmodel.Loss(inputs, labels).print();\nmodel.Predict(inputs).print();\nmodel.OneHotPredict(inputs).print();"
    ],
    "lineNumber": 22,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetModels"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 430,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-models/src/causalNetModels.js~CausalNetModels",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/causalNetModels.js~CausalNetModels#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "classification",
    "memberof": "packages/causality-models/src/causalNetModels.js~CausalNetModels",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/causalNetModels.js~CausalNetModels#classification",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "numClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "model",
    "memberof": "packages/causality-models/src/causalNetModels.js~CausalNetModels",
    "static": false,
    "longname": "packages/causality-models/src/causalNetModels.js~CausalNetModels#model",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "variable",
    "name": "causalNetModels",
    "memberof": "packages/causality-models/src/causalNetModels.js",
    "static": true,
    "longname": "packages/causality-models/src/causalNetModels.js~causalNetModels",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-models/src/causalNetModels.js",
    "importStyle": "causalNetModels",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-models/src/causalNetModels.js~CausalNetModels"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "file",
    "name": "packages/causality-models/src/index.js",
    "content": "export { default as causalNetModels } from './causalNetModels';\nexport { default as ModelMixins } from './model.mixins';\n\nexport { default as BaseModel } from './baseModel';\nexport { default as SingleLabelClassification } from './singleLableClassification';\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 435,
    "kind": "file",
    "name": "packages/causality-models/src/model.mixins.js",
    "content": "const ModelMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    get LossModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.Loss;\n    }\n\n    get FitModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.Fit;\n    }\n    \n    get OneHotPredictModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.OneHotPredict;\n    }\n\n    get PredictModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.Predict;\n    }\n\n    get EncodeModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.Encode;\n    }\n\n    get DecodeModel(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel.Decode;\n    }\n\n\n    get Model(){\n        if(!this.netModel){\n            throw Error('netModel is not set');\n        }\n        return this.netModel;\n    }\n    \n\n    set Model(model){        \n        this.netModel = model;\n    }\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set Model by config');\n        const { Model } = pipelineConfig.Net;\n        if(!Model){\n            throw Error(`Model is not set in ${JSON.stringlify(pipelineConfig)}`);\n        }\n        Model.LayerRunner = this.LayerRunner;\n        this.Model = Model;\n        this.Logger.groupEnd();\n    }\n};\n\nexport default ModelMixins;\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/src/model.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 436,
    "kind": "class",
    "name": "ModelMixins",
    "memberof": "packages/causality-models/src/model.mixins.js",
    "static": true,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-models/src/model.mixins.js",
    "importStyle": "ModelMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 437,
    "kind": "get",
    "name": "LossModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#LossModel",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "get",
    "name": "FitModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#FitModel",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "get",
    "name": "OneHotPredictModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#OneHotPredictModel",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "get",
    "name": "PredictModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#PredictModel",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "get",
    "name": "EncodeModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#EncodeModel",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "get",
    "name": "DecodeModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#DecodeModel",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "get",
    "name": "Model",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#Model",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "set",
    "name": "Model",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#Model",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "netModel",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#netModel",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-models/src/model.mixins.js~ModelMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/model.mixins.js~ModelMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "file",
    "name": "packages/causality-models/src/singleLableClassification.js",
    "content": "import { default as BaseModel } from './baseModel';\n\nclass SingleLabelClassification extends BaseModel{\n    constructor(numClass){\n        super();\n        if(numClass > 0){\n            this.numClass = numClass;\n        }\n        else{\n            throw Error(`expect numclass, get ${numClass}`);\n        }\n    }\n\n    set LayerRunner(layerRunner){\n        let { Predictor } = layerRunner;\n        this.runner = { Predictor };\n    }\n\n    get LayerRunner(){\n        if(!this.runner){\n            throw Error('runner is not set');\n        }\n        return this.runner;\n    }\n    \n    get Fit(){\n        const { Predictor } = this.LayerRunner;\n        return (inputTensor)=>{\n            let outPutTensor = Predictor(inputTensor);\n            let logProb = outPutTensor.sub(outPutTensor.logSumExp(1, true));\n            return logProb;\n        };\n    }\n    \n    get Predict(){\n        const Fit = this.Fit;\n        return (inputTensor)=>{\n            let logProb = Fit(inputTensor);\n            let predictedClass = logProb.argMax(1);\n            return predictedClass;\n        };\n    }\n\n    get OneHotPredict(){\n        const Predict = this.Predict;\n        return (inputTensor)=>{\n            let predictedClass = Predict(inputTensor);\n            let oneHotPredict = this.T.oneHot(predictedClass, this.numClass);\n            return oneHotPredict;\n        };\n    }\n    get Loss(){\n        const Fit = this.Fit;\n        return (inputTensor, labelTensor)=>{\n            let logProb = Fit(inputTensor);\n            let likelihood = logProb.neg().mul(labelTensor);\n            let loss = likelihood.sum(1).mean();\n            return loss;\n        };\n    }\n}\nexport default SingleLabelClassification;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/src/singleLableClassification.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 449,
    "kind": "class",
    "name": "SingleLabelClassification",
    "memberof": "packages/causality-models/src/singleLableClassification.js",
    "static": true,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-models/src/singleLableClassification.js",
    "importStyle": "SingleLabelClassification",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "packages/causality-models/src/baseModel.js~BaseModel"
    ]
  },
  {
    "__docId__": 450,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 451,
    "kind": "member",
    "name": "numClass",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#numClass",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "set",
    "name": "LayerRunner",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 453,
    "kind": "member",
    "name": "runner",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#runner",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"Predictor\": *}"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "get",
    "name": "LayerRunner",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#LayerRunner",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "get",
    "name": "Fit",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#Fit",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "get",
    "name": "Predict",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#Predict",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "get",
    "name": "OneHotPredict",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#OneHotPredict",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "get",
    "name": "Loss",
    "memberof": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-models/src/singleLableClassification.js~SingleLabelClassification#Loss",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "file",
    "name": "packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js",
    "content": "const SGDFitParamsMixins = (BaseOptimizerClass) => class extends BaseOptimizerClass{\n    fit(lossFn, trainableVars){\n        return this.trainer.minimize(lossFn, true, trainableVars);\n    }\n};\n\nexport default SGDFitParamsMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 460,
    "kind": "class",
    "name": "SGDFitParamsMixins",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js~SGDFitParamsMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js",
    "importStyle": "SGDFitParamsMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseOptimizerClass"
    ]
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "fit",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js~SGDFitParamsMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/SGDFitParams.mixins.js~SGDFitParamsMixins#fit",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "lossFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "trainableVars",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "file",
    "name": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js",
    "content": "import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as functor } from './functor';\nimport { default as SGDFitParamsMixins } from './SGDFitParams.mixins';\nexport default class AdamOptimizer extends platform.mixWith(BaseTensor, \n    [ SGDFitParamsMixins ]){\n    constructor(optimizerParams={}){\n        super();\n        let DefaultParameters = {beta1: 0.1, beta2: 0.2, epsilon:0.03};\n        const {learningRate, beta1, beta2, epsilon} = functor.mergeParams(optimizerParams, DefaultParameters);\n        this.params = { learningRate, beta1, beta2, epsilon };\n        console.log({'this is adam': this.T.train.adam});\n        this.trainer = this.T.train.adam(learningRate, beta1, beta2, epsilon);\n    }\n\n    get Params(){\n        return this.params;\n    }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 463,
    "kind": "class",
    "name": "AdamOptimizer",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js",
    "importStyle": "AdamOptimizer",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "expressionExtends": ""
  },
  {
    "__docId__": 464,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 465,
    "kind": "member",
    "name": "params",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer",
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer#params",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"learningRate\": *, \"beta1\": *, \"beta2\": *, \"epsilon\": *}"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "member",
    "name": "trainer",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer",
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer#trainer",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "get",
    "name": "Params",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/adamOptimizer.js~AdamOptimizer#Params",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "file",
    "name": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "content": "import {default as AdamOptimizer} from './adamOptimizer';\nimport { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as SGDFitParamsMixins } from './SGDFitParams.mixins';\n/**\n * This class provides optimizing methods which can be accessed via **causalNetSGDOptimizer** instance.\n *\n * @class CausalNetSGDOptimizer\n * @extends {Tensor}\n * @example\n * [EXAMPLE ../examples/causalNetSGDOptimizers.babel.js]\n */\nclass CausalNetSGDOptimizer extends platform.mixWith(BaseTensor, [SGDFitParamsMixins]){\n    constructor(){\n        super();\n    }\n    adam(optimizerParams){\n        return new AdamOptimizer(optimizerParams); \n    }\n}\n\nexport default new CausalNetSGDOptimizer();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 469,
    "kind": "class",
    "name": "CausalNetSGDOptimizer",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "importStyle": null,
    "description": "This class provides optimizing methods which can be accessed via **causalNetSGDOptimizer** instance.",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js, /home/huynhnguyen/github/causality/packages/causality-optimizers/src/examples/causalNetSGDOptimizers.babel.js]"
    ],
    "lineNumber": 13,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetSGDOptimizer"
      }
    ],
    "interface": false,
    "extends": [
      "Tensor"
    ]
  },
  {
    "__docId__": 470,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "adam",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer#adam",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "optimizerParams",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "variable",
    "name": "causalNetSGDOptimizer",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~causalNetSGDOptimizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js",
    "importStyle": "causalNetSGDOptimizer",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-optimizers/src/StochasticGradientDescent/causalNetSGDOptimizer.js~CausalNetSGDOptimizer"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "file",
    "name": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nclass Functor extends BaseFunctor{\n    constructor(){\n        super();\n    }\n    \n    mergeParams(optimizerParams, defaultOptimizerParameters){\n        const R = this.R;\n        return R.mergeDeepLeft(optimizerParams, defaultOptimizerParameters);\n    }\n}\n\nexport default new Functor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 474,
    "kind": "class",
    "name": "Functor",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "extends": [
      "causal-net.core~BaseFunctor"
    ]
  },
  {
    "__docId__": 475,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "mergeParams",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor#mergeParams",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "optimizerParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultOptimizerParameters",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "variable",
    "name": "functor",
    "memberof": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/StochasticGradientDescent/functor.js",
    "importStyle": "functor",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-optimizers/src/StochasticGradientDescent/functor.js~Functor"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "file",
    "name": "packages/causality-optimizers/src/StochasticGradientDescent/index.js",
    "content": "export { default as causalNetSGDOptimizer } from './causalNetSGDOptimizer';\nexport { default as SGDFitParamsMixins } from './SGDFitParams.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/StochasticGradientDescent/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 479,
    "kind": "file",
    "name": "packages/causality-optimizers/src/evaluator.mixins.js",
    "content": "/**\n * This mixin class provides methods: **test** and \n * handle **TestDataGenerator** setting of pipelineConfig.Dataset.\n *\n * @class EvaluatorMixins\n * @extends {BasePipelineClass}\n * @example\n * [EXAMPLE ../examples/trainer.mixins.babel.js]\n */\nconst EvaluatorMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    \n    get TestDataGenerator(){\n        if(!this.testDataGenerator){\n            throw Error('testDataGenerator is not set');\n        }\n        return this.testDataGenerator;\n    }\n    set TestDataGenerator(testDataGenerator){\n        this.testDataGenerator = testDataGenerator;\n    }\n\n    async test(batchSize=32){\n        const T = this.T, R = this.F.CoreFunctor;\n        const TestDataGenerator = this.TestDataGenerator, OneHotPredictModel = this.OneHotPredictModel;\n        return new Promise(async (resolve, reject)=>{\n            const testData = TestDataGenerator(batchSize);    \n            let pass = [];\n            for await (let { samples, labels } of testData){\n                let sampleTensor = T.tensor(samples).asType('float32');\n                let labelTensor = T.tensor(labels).asType('float32');\n                let predictLabelTensor = OneHotPredictModel(sampleTensor);\n                let correctPredicts = predictLabelTensor.mul(labelTensor);\n                pass = [...pass, ... await correctPredicts.sum(1).data()];\n            }\n            let accuracy = R.mean(pass);\n            resolve({accuracy, pass});     \n        });\n    }\n\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set Evaluator by config');\n        this.TestDataGenerator = pipelineConfig.Dataset.TestDataGenerator;\n        this.Logger.groupEnd();\n    }\n};\n\nexport default EvaluatorMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/evaluator.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 480,
    "kind": "class",
    "name": "EvaluatorMixins",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/evaluator.mixins.js",
    "importStyle": "EvaluatorMixins",
    "description": "This mixin class provides methods: **test** and \nhandle **TestDataGenerator** setting of pipelineConfig.Dataset.",
    "examples": [
      "import { causalNetSGDOptimizer, TrainerMixins, EvaluatorMixins } from 'causal-net.optimizers';\nimport { causalNetModels, ModelMixins } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { causalNetCore, Functor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [ \n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        LoggerMixins,\n        TrainerMixins]){\n    constructor( netRunner, functor, logger){\n        super();\n        this.F = functor;\n        this.LayerRunner = netRunner;\n        this.Logger = logger;\n    }\n}\nconst T = causalNetCore.CoreTensor;\nconst R = causalNetCore.CoreFunctor;\nconst F = new Functor();\nconst DummyData = (batchSize)=>{\n    let samples = [  [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]] ];\n    let labels  = [ [0,1] ];\n    return [{samples, labels}];\n}\nconsole.log(DummyData(1));\n(async ()=>{\n    let convLayer = causalNetLayers.convolution({ kernelSize: [2, 2], \n                                                  filters: [1, 2], \n                                                  flatten: true } );\n    let denseLayer = causalNetLayers.dense({ inputSize: 8, outputSize: 2 });\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData,\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { Predict: [ convLayer, denseLayer ] },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        }\n    };\n\n    let pipeline = new SimplePipeline( causalNetRunner, F, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    const NumEpochs = 10, BatchSize = 1;\n    console.log(await pipeline.train(NumEpochs, BatchSize));\n    console.log(await pipeline.test());\n})();"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EvaluatorMixins"
      }
    ],
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 481,
    "kind": "get",
    "name": "TestDataGenerator",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins#TestDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "set",
    "name": "TestDataGenerator",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins#TestDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "testDataGenerator",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "static": false,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins#testDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "test",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins#test",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "batchSize",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 32,
        "defaultValue": "32"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/evaluator.mixins.js~EvaluatorMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 487,
    "kind": "file",
    "name": "packages/causality-optimizers/src/index.js",
    "content": "export { causalNetSGDOptimizer } from './StochasticGradientDescent/index';\nexport { default as TrainerMixins } from './trainer.mixins';\nexport { default as EvaluatorMixins } from './evaluator.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 488,
    "kind": "file",
    "name": "packages/causality-optimizers/src/trainer.mixins.js",
    "content": "/**\n * This mixin class provides attributes: **Optimizer**, **Trainer**, **TrainDataGenerator**, \n * methods **train**, handle **Optimizer** setting of pipelineConfig.Net\n * and **TrainDataGenerator** setting of pipelineConfig.Dataset.\n *\n * @class TrainerMixins\n * @extends {BasePipelineClass}\n * @example\n * [EXAMPLE ../examples/trainer.mixins.babel.js]\n */\nconst TrainerMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    \n    get Trainer(){\n        const T = this.T;\n        const Loss=this.LossModel, Optimizer=this.Optimizer;\n        return (sampleTensor, labelTensor)=>{\n            const LossFn = ()=>{\n                return T.tidy( ()=>{ \n                    Loss(sampleTensor, labelTensor);\n                    return Loss(sampleTensor, labelTensor); \n                } );\n            };\n            return Optimizer.fit(LossFn);\n        };\n    }\n\n    get Optimizer(){\n        if(!this.optimizer){\n            throw Error('optimizer is not set');\n        }\n        return this.optimizer;\n    }\n    \n\n    set Optimizer(optimizer){\n        this.optimizer = optimizer;\n    }\n\n    get TrainDataGenerator(){\n        if(!this.trainDataGenerator){\n            throw Error('TrainDataGenerator is not set');\n        }\n        return this.trainDataGenerator;\n    }\n    set TrainDataGenerator(TrainDataGenerator){\n        this.trainDataGenerator = TrainDataGenerator;\n    }\n\n    async train(numEpochs, batchSize){\n        \n        const F = this.F, R = this.F.CoreFunctor, T = this.T;\n        const TrainDataGenerator = this.TrainDataGenerator, Trainer = this.Trainer;\n        let losses = [], logger = this.Logger;\n        return new Promise(async (resolve, reject)=>{\n            logger.progressBegin(numEpochs);\n            for(let epochIdx of F.range(numEpochs)){\n                const TrainData = TrainDataGenerator(batchSize);\n                let iterLosses = [];\n                for await (let { samples, labels } of TrainData){\n                    let sampleTensor = T.tensor(samples).asType('float32');\n                    let labelTensor = T.tensor(labels).asType('float32');\n                    let loss = Trainer(sampleTensor, labelTensor);\n                    iterLosses.push(await loss.data());\n                }\n                losses.push(R.mean(iterLosses));\n                iterLosses = [];\n                logger.progressUpdate({epochIdx, losses, numEpochs});\n            }\n            logger.progressEnd();\n            resolve({losses});\n        });\n    }\n\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set Trainer by config');\n        const { Optimizer } = pipelineConfig.Net;\n        this.Optimizer = Optimizer;\n        Optimizer.LayerRunner = this.LayerRunner;\n        this.TrainDataGenerator = pipelineConfig.Dataset.TrainDataGenerator;\n        this.Logger.groupEnd();\n    }\n};\n\nexport default TrainerMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/src/trainer.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 489,
    "kind": "class",
    "name": "TrainerMixins",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js",
    "static": true,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-optimizers/src/trainer.mixins.js",
    "importStyle": "TrainerMixins",
    "description": "This mixin class provides attributes: **Optimizer**, **Trainer**, **TrainDataGenerator**, \nmethods **train**, handle **Optimizer** setting of pipelineConfig.Net\nand **TrainDataGenerator** setting of pipelineConfig.Dataset.",
    "examples": [
      "import { causalNetSGDOptimizer, TrainerMixins, EvaluatorMixins } from 'causal-net.optimizers';\nimport { causalNetModels, ModelMixins } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { causalNetCore, Functor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [ \n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        LoggerMixins,\n        TrainerMixins]){\n    constructor( netRunner, functor, logger){\n        super();\n        this.F = functor;\n        this.LayerRunner = netRunner;\n        this.Logger = logger;\n    }\n}\nconst T = causalNetCore.CoreTensor;\nconst R = causalNetCore.CoreFunctor;\nconst F = new Functor();\nconst DummyData = (batchSize)=>{\n    let samples = [  [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]] ];\n    let labels  = [ [0,1] ];\n    return [{samples, labels}];\n}\nconsole.log(DummyData(1));\n(async ()=>{\n    let convLayer = causalNetLayers.convolution({ kernelSize: [2, 2], \n                                                  filters: [1, 2], \n                                                  flatten: true } );\n    let denseLayer = causalNetLayers.dense({ inputSize: 8, outputSize: 2 });\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData,\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { Predict: [ convLayer, denseLayer ] },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        }\n    };\n\n    let pipeline = new SimplePipeline( causalNetRunner, F, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    const NumEpochs = 10, BatchSize = 1;\n    console.log(await pipeline.train(NumEpochs, BatchSize));\n    console.log(await pipeline.test());\n})();"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "TrainerMixins"
      }
    ],
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 490,
    "kind": "get",
    "name": "Trainer",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#Trainer",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "get",
    "name": "Optimizer",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#Optimizer",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "set",
    "name": "Optimizer",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#Optimizer",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "optimizer",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#optimizer",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "get",
    "name": "TrainDataGenerator",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#TrainDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "set",
    "name": "TrainDataGenerator",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#TrainDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "trainDataGenerator",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#trainDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "train",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#train",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "numEpochs",
        "types": [
          "*"
        ]
      },
      {
        "name": "batchSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-optimizers/src/trainer.mixins.js~TrainerMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Image/boxScaling.js",
    "content": "//origin code: https://github.com/jjstiff/png-scale/blob/master/algos/box-scaling.js\nexport default function(buffer, originSize, newSize)\n{ \n  let sX = 0;\n  let sY = 0;\n  let [sW, sH] = originSize;\n  let dX = 0;\n  let dY = 0;\n  let [dW, dH] = newSize;\n  let targetBuffer = Buffer.alloc(dW*dH*4);\n  \n  var copy = function(ys,yd,xs,xd,count) {\n    buffer.copy(targetBuffer,\n      ((dY + yd) * dW + dX + xd) << 2,\n      ((sY + ys) * sW + sX + xs) << 2,\n      ((sY + ys) * sH + sX + xs + count) << 2\n    );\n  };\n  \n  var y_shrink = function(x_fun) {\n    var y_ = [];\n    for (var ys = 0; ys < sH; ys++) {\n      var yd = Math.floor(ys*dH/sH);\n      if(y_[yd]) continue;\n      y_[yd] = true;\n      x_fun(ys,yd);\n    }\n  };\n  \n  var y_grow = function(x_fun) {\n    for (var yd = 0; yd < dH; yd++) {\n      var ys = Math.floor(yd*sH/dH);\n      x_fun(ys,yd);\n    }\n  };\n  \n  var x_shrink = function(ys,yd) {\n    var x_ = [];\n    for(var xs = 0; xs < sW; xs++ ) {\n      var xd = Math.floor(xs*dW/sW);\n      if(x_[xd]) continue;\n      x_[xd] = true;\n      copy(ys,yd,xs,xd,1);\n    }\n  };\n  \n  var x_grow = function(ys,yd) {\n    for(var xd = 0; xd < dW; xd++ ) {\n      var xs = Math.floor(xd*sW/dW);\n      copy(ys,yd,xs,xd,1); // Could be faster by doing more than 1 when needed.\n    }\n  };\n  \n  if(sH >= dH && sW >= dW) { y_shrink(x_shrink); }\n  else if(sH >= dH) { y_shrink(x_grow); }\n  else if(sW >= dW) { y_grow(x_shrink); }\n  else { y_grow(x_grow); }\n  return targetBuffer;\n}\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Image/boxScaling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "boxScaling",
    "memberof": "packages/causality-preprocessing/src/Image/boxScaling.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/causality-preprocessing/src/Image/boxScaling.js~boxScaling",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Image/boxScaling.js",
    "importStyle": "boxScaling",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "originSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "newSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js",
    "content": "const ColorTransformingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    \n    colorTransform(tranformFn, sampleBuffer, channelSize){\n        const R = this.R;\n        return R.flatten(R.map(tranformFn, R.splitEvery(channelSize, sampleBuffer)));\n    }\n    /**\n     * Transform color image to black on white image. This function also reduce chanel to 1.\n     * @param { Array|Buffer } sampleBuffer\n     * @param { Number } channelSize\n     * @return { Array } image data after transform\n     */\n    blackWhiteTransform(sampleBuffer){\n        const BlackWhiteFn = (pixel)=>{\n            let pixelValue = (pixel[0] + pixel[1] +pixel[2])/3;\n            return ~~pixelValue;\n        };\n        return this.colorTransform(BlackWhiteFn, sampleBuffer, 4);\n    }\n\n    oneBitTransform(sampleBuffer){\n        const BlackWhiteFn = (pixel)=>{\n            let pixelValue = (pixel[0] + pixel[1] +pixel[2])/3;\n            return pixelValue>127?1:0;\n        };\n        return this.colorTransform(BlackWhiteFn, sampleBuffer, 4);\n    }\n};\n\nexport default ColorTransformingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Image/colorTransforming.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 504,
    "kind": "class",
    "name": "ColorTransformingMixins",
    "memberof": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Image/colorTransforming.mixins.js",
    "importStyle": "ColorTransformingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "colorTransform",
    "memberof": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins#colorTransform",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "tranformFn",
        "types": [
          "*"
        ]
      },
      {
        "name": "sampleBuffer",
        "types": [
          "*"
        ]
      },
      {
        "name": "channelSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "blackWhiteTransform",
    "memberof": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins#blackWhiteTransform",
    "access": "public",
    "description": "Transform color image to black on white image. This function also reduce chanel to 1.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          " Array",
          "Buffer "
        ],
        "spread": false,
        "optional": false,
        "name": "sampleBuffer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "channelSize",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "image data after transform"
    }
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "oneBitTransform",
    "memberof": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js~ColorTransformingMixins#oneBitTransform",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "sampleBuffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Image/imageScaling.mixins.js",
    "content": "import { default as BoxScaling } from './boxScaling';\nconst ImageScalingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    /**\n     * scaling image from origin size to new size, image chanel must be 4\n     * @param { Array|Buffer } sampleBuffer - original image\n     * @param { Array } originSize - originize of image [weight, height]\n     * @param { Array } newSize - new size of image [weight, height]\n     * @returns { Array } - array of sub image\n     */\n    imageResize(sampleBuffer, originSize, newSize){\n        sampleBuffer = Buffer.from(sampleBuffer);\n        return BoxScaling(sampleBuffer, originSize, newSize);\n    }\n};\n\nexport default ImageScalingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Image/imageScaling.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "ImageScalingMixins",
    "memberof": "packages/causality-preprocessing/src/Image/imageScaling.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Image/imageScaling.mixins.js~ImageScalingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Image/imageScaling.mixins.js",
    "importStyle": "ImageScalingMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "imageResize",
    "memberof": "packages/causality-preprocessing/src/Image/imageScaling.mixins.js~ImageScalingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Image/imageScaling.mixins.js~ImageScalingMixins#imageResize",
    "access": "public",
    "description": "scaling image from origin size to new size, image chanel must be 4",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } - array of sub image"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array",
          "Buffer "
        ],
        "spread": false,
        "optional": false,
        "name": "sampleBuffer",
        "description": "original image"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "originSize",
        "description": "originize of image [weight, height]"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "newSize",
        "description": "new size of image [weight, height]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array of sub image"
    }
  },
  {
    "__docId__": 511,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Image/imageSplitting.mixins.js",
    "content": "const ImageSplittingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    /**\n     * Split image into sub images based on split size\n     * @param { Array|Buffer } sampleBuffer - original image\n     * @param { Number } splitSize - positive number\n     * @returns { Array } - array of sub image\n     */\n    imageSplit(sampleBuffer, splitSize){\n        return this.R.splitEvery(splitSize, sampleBuffer);\n    }\n};\n\nexport default ImageSplittingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Image/imageSplitting.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 512,
    "kind": "class",
    "name": "ImageSplittingMixins",
    "memberof": "packages/causality-preprocessing/src/Image/imageSplitting.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Image/imageSplitting.mixins.js~ImageSplittingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Image/imageSplitting.mixins.js",
    "importStyle": "ImageSplittingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "imageSplit",
    "memberof": "packages/causality-preprocessing/src/Image/imageSplitting.mixins.js~ImageSplittingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Image/imageSplitting.mixins.js~ImageSplittingMixins#imageSplit",
    "access": "public",
    "description": "Split image into sub images based on split size",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } - array of sub image"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array",
          "Buffer "
        ],
        "spread": false,
        "optional": false,
        "name": "sampleBuffer",
        "description": "original image"
      },
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "splitSize",
        "description": "positive number"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array of sub image"
    }
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Image/index.js",
    "content": "export {default as ColorTransformingMixins } from './colorTransforming.mixins';\nexport {default as ImageSplittingMixins } from './imageSplitting.mixins';\nexport {default as ImageScalingMixins } from './imageScaling.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Image/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/NLP/index.js",
    "content": "export {default as TokenTransformingMixins } from './tokenTransforming.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/NLP/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 516,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js",
    "content": "const TokenTransformingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    /**\n     * tokenized sentence\n     * @param { String } sentence - array of string sentence\n     * @returns { Array } array of tokenized sentences\n     */\n    tokenize(sentence){\n        const R = this.R, Tokenizer = this.tokenizer;\n        return Tokenizer.tokenize(sentence);\n    }\n    /**\n     * Remove bad words from tokens\n     * @param { Array } tokens - array of string token\n     * @param { Array } badWordList - Array of bad words\n     * @returns { Array } tokens without bad words\n     */\n    badWordsFilter(tokens, badWordList){\n        const R = this.R;\n        return R.filter((token)=>R.not(R.find(R.equals(token))(badWordList)), tokens);\n    }\n    /**\n     * Count number of apperance of each token in the token list\n     * @param { Array } tokens - array of string tokens\n     * @param { Object } [freqCount={}] - objec or previous wordFreqCount, empty object if not provided\n     * @returns { Object } - json object with token as key and counting number as corresponding value\n     */\n    wordFreqCount(tokens, freqCount={}){\n        const R = this.R;\n        const UpdateFreq = (freqCount, token)=>{\n            if(freqCount[token] === undefined){\n                freqCount[token] = 1;\n            }\n            else{\n                freqCount[token] += 1;\n            }\n            return freqCount;\n        };\n        return R.reduce(UpdateFreq, freqCount, tokens);\n    }\n    /**\n     * Remove duplicated tokens\n     * @param { Array } tokens - array of string token\n     * @returns\n     */\n    wordDuplicateRemove(tokens){\n        const R = this.R;\n        return R.uniq(tokens);\n    }\n};\nexport default TokenTransformingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 517,
    "kind": "class",
    "name": "TokenTransformingMixins",
    "memberof": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js",
    "importStyle": "TokenTransformingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "tokenize",
    "memberof": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins#tokenize",
    "access": "public",
    "description": "tokenized sentence",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } array of tokenized sentences"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "sentence",
        "description": "array of string sentence"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array of tokenized sentences"
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "badWordsFilter",
    "memberof": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins#badWordsFilter",
    "access": "public",
    "description": "Remove bad words from tokens",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } tokens without bad words"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "array of string token"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "badWordList",
        "description": "Array of bad words"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "tokens without bad words"
    }
  },
  {
    "__docId__": 520,
    "kind": "method",
    "name": "wordFreqCount",
    "memberof": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins#wordFreqCount",
    "access": "public",
    "description": "Count number of apperance of each token in the token list",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object } - json object with token as key and counting number as corresponding value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "array of string tokens"
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "freqCount",
        "description": "objec or previous wordFreqCount, empty object if not provided"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "json object with token as key and counting number as corresponding value"
    }
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "wordDuplicateRemove",
    "memberof": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/NLP/tokenTransforming.mixins.js~TokenTransformingMixins#wordDuplicateRemove",
    "access": "public",
    "description": "Remove duplicated tokens",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "array of string token"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js",
    "content": "/**\n * @experiment\n */\nconst CategoryNormalizingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    oneHotEncode(sample, categories){\n        const R = this.R;\n        let code = this.zeros(categories.length);\n        const idx = R.indexOf(sample, categories);\n        if(idx>-1){\n            code[idx] = 1;\n        }\n        return code;\n    }\n};\n\nexport default CategoryNormalizingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 523,
    "kind": "class",
    "name": "CategoryNormalizingMixins",
    "memberof": "packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js~CategoryNormalizingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js",
    "importStyle": "CategoryNormalizingMixins",
    "description": "",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@experiment",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "oneHotEncode",
    "memberof": "packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js~CategoryNormalizingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tabular/categoryNormalizing.mixins.js~CategoryNormalizingMixins#oneHotEncode",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "sample",
        "types": [
          "*"
        ]
      },
      {
        "name": "categories",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js",
    "content": "/**\n * @experiment\n */\nconst ItemNormalizingMixins = (PreprocessingClass) => class extends PreprocessingClass{\n    itemNormalize(sample){\n        throw Error('implement require');\n    }\n};\n\nexport default ItemNormalizingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 526,
    "kind": "class",
    "name": "ItemNormalizingMixins",
    "memberof": "packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js~ItemNormalizingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js",
    "importStyle": "ItemNormalizingMixins",
    "description": "",
    "lineNumber": 4,
    "unknown": [
      {
        "tagName": "@experiment",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      "PreprocessingClass"
    ]
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "itemNormalize",
    "memberof": "packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js~ItemNormalizingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tabular/continuousNormalizing.mixins.js~ItemNormalizingMixins#itemNormalize",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "sample",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tabular/index.js",
    "content": "export { default as CategoryNormalizingMixins } from './categoryNormalizing.mixins'; ",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tabular/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 529,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tokenizer/index.js",
    "content": "export { default as tokenizer } from './tokenizer';\nimport { default as SentencePieceModel } from './sentencePiece';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 530,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "content": "/**\n * This code origin from \n * https://github.com/tensorflow/tfjs-models/tree/master/universal-sentence-encoder\n * \n * Tokenizer.encode() is a port of `EncodeAsIds` from the SentencePiece library\n * (https://github.com/google/sentencepiece). Encode uses the Viterbi algorithm\n * to find the most likely sequence of tokens that comprise the input. For more\n * details, refer to https://arxiv.org/pdf/1804.10959.pdf.\n */\n\nimport { default as stringToChars } from './utils';\n\nimport { default as Trie } from './trie';\n\nconst separator = '\\u2581';  // This is the unicode character 'lower one eighth block'.\n\nfunction processInput(str) {\n  const normalized = str.normalize('NFKC');\n  return separator + normalized.replace(/ /g, separator);\n}\n\n// The first tokens are reserved for unk, control symbols, and user-defined\n// symbols.\nconst RESERVED_SYMBOLS_COUNT = 6;\n\n// type Vocabulary = Array<[string, number]>;\n\n// type Score = {\n//   key: string[],\n//   score: number,\n//   index: number\n// };\n\nexport default class SentencePieceTokenizer {\n\n  constructor(Vocabulary) {\n    this.vocabulary = Vocabulary;\n    this.trie = new Trie();\n\n    for (let i = RESERVED_SYMBOLS_COUNT; i < this.vocabulary.length; i++) {\n      this.trie.insert(this.vocabulary[i][0], this.vocabulary[i][1], i);\n    }\n  }\n\n  encode(input){\n    const nodes = [];\n    const words = [];\n    const best = [];\n\n    input = processInput(input);\n\n    const symbols = stringToChars(input);\n\n    for (let i = 0; i <= symbols.length; i++) {\n      nodes.push({});\n      words.push(0);\n      best.push(0);\n    }\n\n    // Construct the lattice.\n    for (let i = 0; i < symbols.length; i++) {\n      const matches = this.trie.commonPrefixSearch(symbols.slice(i));\n\n      for (let j = 0; j < matches.length; j++) {\n        const piece = matches[j];\n        const obj = {key: piece[0], score: piece[1], index: piece[2]};\n\n        const endPos = piece[0].length;\n        if (nodes[i + endPos][i] == null) {\n          nodes[i + endPos][i] = [];\n        }\n\n        nodes[i + endPos][i].push(obj);\n      }\n    }\n\n    for (let endPos = 0; endPos <= symbols.length; endPos++) {\n      for (const startPos in nodes[endPos]) {\n        const arr = nodes[endPos][startPos];\n\n        for (let j = 0; j < arr.length; j++) {\n          const word = arr[j];\n          const score = word.score + best[endPos - word.key.length];\n\n          if (best[endPos] === 0 || score >= best[endPos]) {\n            best[endPos] = score;\n            words[endPos] = arr[j].index;\n          }\n        }\n      }\n    }\n\n    const results = [];\n\n    // Backward pass.\n    let iter = words.length - 1;\n    while (iter > 0) {\n      results.push(words[iter]);\n      iter -= this.vocabulary[words[iter]][0].length;\n    }\n\n    // Merge consecutive unks.\n    const merged = [];\n    let isPreviousUnk = false;\n    for (let i = 0; i < results.length; i++) {\n      const id = results[i];\n      if (!(isPreviousUnk && id === 0)) {\n        merged.push(id);\n      }\n\n      isPreviousUnk = id === 0;\n    }\n    \n    return merged.reverse();\n  }\n}",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "separator",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~separator",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "processInput",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~processInput",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 533,
    "kind": "variable",
    "name": "RESERVED_SYMBOLS_COUNT",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~RESERVED_SYMBOLS_COUNT",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "SentencePieceTokenizer",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/sentencePiece.js",
    "importStyle": "SentencePieceTokenizer",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 535,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "vocabulary",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer#vocabulary",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "trie",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer#trie",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "encode",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/sentencePiece.js~SentencePieceTokenizer#encode",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "content": "import { default as SentencePieceModel } from './sentencePiece';\nimport { jsonUtils } from 'causal-net.utils';\n/**\n * This Tokenizer class is for tokenizer sentence\n * @experiment\n * @class Tokenizer\n * @example\n * [EXAMPLE ../../nlpPreprocessing.babel.js]\n */\nclass Tokenizer{\n    constructor(){\n        this.model = null;\n        this.vocab = [];\n    }\n    async connect(link){\n        this.vocab = await jsonUtils.queryJSON(link);\n        this.model = new SentencePieceModel(this.vocab);\n    }\n    tokenize(text, asEncode=true){\n        let wids =  this.encode(text);\n        if(asEncode){\n            return wids;\n        }\n        else{\n            return wids.map(id=>this.vocab[id][0]);\n        }\n    }\n    encode(text){\n        if(!this.model){\n            throw Error(`model is not loaded`);\n        }\n        return this.model.encode(text);\n    }\n}\nvar tokenizer = new Tokenizer();\nexport default tokenizer;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "class",
    "name": "Tokenizer",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "importStyle": null,
    "description": "This Tokenizer class is for tokenizer sentence",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/tokenizer.js, /home/huynhnguyen/github/causality/packages/causality-preprocessing/nlpPreprocessing.babel.js]"
    ],
    "lineNumber": 10,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@experiment",
        "tagValue": ""
      },
      {
        "tagName": "@class",
        "tagValue": "Tokenizer"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 541,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "model",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#model",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "vocab",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#vocab",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#connect",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "tokenize",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#tokenize",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      },
      {
        "name": "asEncode",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "encode",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer#encode",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "variable",
    "name": "tokenizer",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~tokenizer",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/tokenizer.js",
    "importStyle": "tokenizer",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-preprocessing/src/Tokenizer/tokenizer.js~Tokenizer"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tokenizer/trie.js",
    "content": "import {default as stringToChars} from './utils';\n// [token, score, index]\n// type OutputNode = [string[], number, number];\n\nclass TrieNode {\n\n  constructor(key) {\n    this.key = key;\n    this.parent = null;\n    this.children = {};\n    this.end = false;\n  }\n\n  /**\n   * Traverse upwards through the trie to construct the token.\n   */\n  getWord() {\n    const output = [];\n    let node = this;\n\n    while (node !== null) {\n      if (node.key !== null) {\n        output.unshift(node.key);\n      }\n      node = node.parent;\n    }\n\n    return [output, this.score, this.index];\n  }\n}\n\nexport default class Trie {\n  constructor() {\n    this.root = new TrieNode(null);\n  }\n\n  /**\n   * Checks whether a node starts with ss.\n   *\n   * @param ss The prefix.\n   * @param node The node currently being considered.\n   * @param arr An array of the matching tokens uncovered so far.\n   */\n  findAllCommonPrefixes(ss, node, arr) {\n    if (node.end) {\n      const word = node.getWord();\n      if (ss.slice(0, word[0].length).join('') === word[0].join('')) {\n        arr.unshift(word);\n      }\n    }\n\n    for (const child in node.children) {\n      this.findAllCommonPrefixes(ss, node.children[child], arr);\n    }\n  }\n\n  /**\n   * Inserts a token into the trie.\n   */\n  insert(word, score, index) {\n    let node = this.root;\n\n    const symbols = stringToChars(word);\n\n    for (let i = 0; i < symbols.length; i++) {\n      if (!node.children[symbols[i]]) {\n        node.children[symbols[i]] = new TrieNode(symbols[i]);\n        node.children[symbols[i]].parent = node;\n      }\n\n      node = node.children[symbols[i]];\n\n      if (i === symbols.length - 1) {\n        node.end = true;\n        node.score = score;\n        node.index = index;\n      }\n    }\n  }\n\n  /**\n   * Returns an array of all tokens starting with ss.\n   *\n   * @param ss The prefix to match on.\n   */\n  commonPrefixSearch(ss){\n    const node = this.root.children[ss[0]];\n    const output = [];\n    if (node) {\n      this.findAllCommonPrefixes(ss, node, output);\n    } else {\n      output.push([[ss[0]], 0, 0]);  // unknown token\n    }\n    return output;\n  }\n}\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/trie.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 551,
    "kind": "class",
    "name": "TrieNode",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/trie.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 552,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 553,
    "kind": "member",
    "name": "key",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#key",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "member",
    "name": "parent",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#parent",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "children",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#children",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "name": "end",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#end",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "getWord",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~TrieNode#getWord",
    "access": "public",
    "description": "Traverse upwards through the trie to construct the token.",
    "lineNumber": 17,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 558,
    "kind": "class",
    "name": "Trie",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/trie.js",
    "importStyle": "Trie",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 559,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 560,
    "kind": "member",
    "name": "root",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie#root",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "findAllCommonPrefixes",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie#findAllCommonPrefixes",
    "access": "public",
    "description": "Checks whether a node starts with ss.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ss",
        "description": "The prefix."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "The node currently being considered."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "An array of the matching tokens uncovered so far."
      }
    ],
    "return": null
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "insert",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie#insert",
    "access": "public",
    "description": "Inserts a token into the trie.",
    "lineNumber": 60,
    "params": [
      {
        "name": "word",
        "types": [
          "*"
        ]
      },
      {
        "name": "score",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "commonPrefixSearch",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/Tokenizer/trie.js~Trie#commonPrefixSearch",
    "access": "public",
    "description": "Returns an array of all tokens starting with ss.",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ss",
        "description": "The prefix to match on."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/Tokenizer/utils.js",
    "content": "const stringToChars = (input) => {\n    const symbols = [];\n    for (const symbol of input) {\n      symbols.push(symbol);\n    }\n    return symbols;\n};\nexport default stringToChars;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/Tokenizer/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 565,
    "kind": "function",
    "name": "stringToChars",
    "memberof": "packages/causality-preprocessing/src/Tokenizer/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/causality-preprocessing/src/Tokenizer/utils.js~stringToChars",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/Tokenizer/utils.js",
    "importStyle": "stringToChars",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "content": "import { Event, Functor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { indexDBStorage, StorageMixins } from 'causal-net.storage';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\nclass CausalNetPreprocessingStream extends platform.mixWith(Event, \n    [ StorageMixins, LoggerMixins ]){\n    constructor(preprocessingStorage, functor, logger){\n        super();\n        this.Storage = preprocessingStorage;\n        this.F = functor;\n        this.Logger = logger;\n        this.preprocessingData = { samples: [], labels: [], finished: false, trainSet: [], testSet: [] };  \n    }\n    get PreprocessingData(){\n        return this.preprocessingData;\n    }\n\n    get TrainSet(){\n        return this.preprocessingData.trainSet;\n    }\n\n    get TestSet(){\n        return this.preprocessingData.testSet;\n    }\n    \n    set SampleTransformer(sampleFn){\n        this.sampleFn = sampleFn;\n    }\n    set LabelTransformer(labelFn){\n        this.labelFn = labelFn;\n    }\n    get SampleTransformer(){\n        if(!this.sampleFn){\n            throw Error('SampleTransformer is not set');\n        }\n        return this.sampleFn;\n    }\n    get LabelTransformer(){\n        if(!this.labelFn){\n            throw Error('LabelTransformer is not set');\n        }\n        return this.labelFn;\n    }\n    get DataHandler(){\n        if(!this.dataHandler){\n            throw Error('DataHandler is not set');\n        }\n        this.dataHandler;\n    }\n\n    setDataHandler(){\n        const SampleTransformer = this.SampleTransformer;\n        const LabelTransformer = this.LabelTransformer;\n        const Storage = this.Storage;\n        const ProgressLenses = ({idx, range, message})=>{ \n            if(idx === 0){\n                this.Logger.progressBegin(range);\n                return;\n            }\n            if(idx + 1 === range){\n                this.Logger.progressEnd();\n                return;\n            }\n            this.Logger.progressUpdate(message);\n        };\n            \n        this.dataHandler = (data)=>{\n            return new Promise(async (resolve, reject)=>{\n                let chunkName = data.ChunkName;\n                if(chunkName === undefined){\n                    reject(`chunkName is not defined`);\n                }\n                if(data.Sample){\n                    let identity = '';\n                    \n                    for(let [idx, sample] of this.F.enumerate(data.Sample)){\n                        ProgressLenses({idx, range: data.Sample.length, message: 'preprocessing Sample: ' + idx });\n                        sample = await SampleTransformer(sample);\n                        identity = chunkName + '/' + idx;\n                        await Storage.setItem('preprocessing/sample/' + identity, JSON.stringify(sample));\n                        this.preprocessingData.samples.push(identity);\n                        \n                    }\n                }\n                if(data.Label){\n                    let identity = '';\n                    for(let [idx, label] of this.F.enumerate(data.Label)){\n                        ProgressLenses({idx, range: data.Label.length, message: 'preprocessing Label: ' + idx });\n                        label = await LabelTransformer(label);\n                        identity = chunkName + '/' + idx;\n                        await Storage.setItem('preprocessing/label/' + identity, JSON.stringify(label));\n                        this.preprocessingData.labels.push(identity);\n                    }\n                }\n                resolve(true);\n            }); \n        };\n        this.on('data', this.dataHandler);\n    }\n    \n    splitDataset(trainSize=0.9){\n        const R = this.F.CoreFunctor;\n        //TODO: enhance this for handle missing data/label case\n        let { samples, labels } = this.preprocessingData;\n        let data = this.F.zip(samples, labels);\n        if(trainSize < 1){\n            trainSize = parseInt(data.length*trainSize);\n        }    \n        const [ trainSet, testSet ] = R.splitAt(trainSize, data);\n        this.preprocessingData.trainSet = trainSet;\n        this.preprocessingData.testSet = testSet;\n        return [trainSet, testSet];\n    }\n    makeBatchGenerator(batchData){\n        const Storage = this.Storage;\n        let nextIndex = 0;\n        const batchGenerator = {\n                next: async()=>{\n                    let samples = [], labels = [];\n                    \n                    for(let [samplePath, labelPath] of batchData[nextIndex]){\n                        samplePath = 'preprocessing/sample/' + samplePath;\n                        labelPath = 'preprocessing/label/' + labelPath;\n                        let sampleItem = await Storage.getItem(samplePath);\n                        let labelItem = await Storage.getItem(labelPath);\n                        //TODO: fix this issue of unalign format of item\n                        let sample = JSON.parse(sampleItem[samplePath]);\n                        sample = (sample.data)?sample.data:sample;\n                        let label = JSON.parse(labelItem[labelPath]);\n                        label = (label.data)?label.data:label;\n                        samples.push(sample);\n                        labels.push(label);\n                    }\n                    nextIndex += 1;\n                    \n                    return { samples, labels };\n                },\n                *[Symbol.iterator]() {\n                    while(nextIndex < batchData.length){\n                        yield this.next();\n                    }\n                }\n            };\n        return batchGenerator;\n    }\n    makeTrainDataGenerator(){\n        return (batchSize)=>{\n            const TrainSet = this.TrainSet;\n            const R = this.F.CoreFunctor;\n            //TODO: perform permutate\n            let batchData = R.splitEvery(batchSize, TrainSet);\n            return this.makeBatchGenerator(batchData);\n        };\n        \n    }\n    makeTestDataGenerator(){\n        return (batchSize)=>{\n            const TestSet = this.TestSet;\n            const R = this.F.CoreFunctor;\n            //TODO: perform permutate\n            let batchData = R.splitEvery(batchSize, TestSet);\n            return this.makeBatchGenerator(batchData);\n        };\n    }\n}\nvar functor = new Functor();\nexport default new CausalNetPreprocessingStream(indexDBStorage, functor, termLogger);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 567,
    "kind": "variable",
    "name": "functor",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~functor",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 568,
    "kind": "class",
    "name": "CausalNetPreprocessingStream",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "expressionExtends": ""
  },
  {
    "__docId__": 569,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "Storage",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#Storage",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#F",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "member",
    "name": "Logger",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#Logger",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "preprocessingData",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#preprocessingData",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"samples\": *, \"labels\": *, \"finished\": *, \"trainSet\": *, \"testSet\": *}"
      ]
    }
  },
  {
    "__docId__": 574,
    "kind": "get",
    "name": "PreprocessingData",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#PreprocessingData",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 575,
    "kind": "get",
    "name": "TrainSet",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#TrainSet",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 576,
    "kind": "get",
    "name": "TestSet",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#TestSet",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "set",
    "name": "SampleTransformer",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#SampleTransformer",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 578,
    "kind": "member",
    "name": "sampleFn",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#sampleFn",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 579,
    "kind": "set",
    "name": "LabelTransformer",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#LabelTransformer",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 580,
    "kind": "member",
    "name": "labelFn",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#labelFn",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 581,
    "kind": "get",
    "name": "SampleTransformer",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#SampleTransformer",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 582,
    "kind": "get",
    "name": "LabelTransformer",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#LabelTransformer",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 583,
    "kind": "get",
    "name": "DataHandler",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#DataHandler",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "setDataHandler",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#setDataHandler",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 585,
    "kind": "member",
    "name": "dataHandler",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#dataHandler",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "splitDataset",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#splitDataset",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "trainSize",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.9,
        "defaultValue": "0.9"
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "makeBatchGenerator",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#makeBatchGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [
      {
        "name": "batchData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "makeTrainDataGenerator",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#makeTrainDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "makeTestDataGenerator",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream#makeTestDataGenerator",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "variable",
    "name": "causalNetPreprocessingStream",
    "memberof": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~causalNetPreprocessingStream",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/causalNetPreprocessingStream.js",
    "importStyle": "causalNetPreprocessingStream",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-preprocessing/src/causalNetPreprocessingStream.js~CausalNetPreprocessingStream"
      ]
    }
  },
  {
    "__docId__": 591,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/imagePreprocessing.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { ColorTransformingMixins, ImageSplittingMixins, ImageScalingMixins } from './Image/index';\n\n/**\n * This ImagePreprocessing provide methods for preprocessing image data\n * { MixWith: [\n *         ColorTransformingMixins, ImageSplittingMixins\n *     ] }\n * @class ImagePreprocessing\n * @extends BaseFunctor\n * @example\n * [EXAMPLE ../examples/imagePreprocessing.babel.node.js]\n */\nclass ImagePreprocessing extends platform.mixWith(BaseFunctor, [\n        ColorTransformingMixins, \n        ImageSplittingMixins,\n        ImageScalingMixins ]){\n    constructor(){\n        super();\n    }\n}\n\nexport default new ImagePreprocessing;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/imagePreprocessing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 592,
    "kind": "class",
    "name": "ImagePreprocessing",
    "memberof": "packages/causality-preprocessing/src/imagePreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/imagePreprocessing.js~ImagePreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/imagePreprocessing.js",
    "importStyle": null,
    "description": "This ImagePreprocessing provide methods for preprocessing image data\n{ MixWith: [\n        ColorTransformingMixins, ImageSplittingMixins\n    ] }",
    "examples": [
      "[EXAMPLE  ERROR! /home/huynhnguyen/github/causality/packages/causality-preprocessing/src/imagePreprocessing.js, /home/huynhnguyen/github/causality/packages/causality-preprocessing/examples/imagePreprocessing.babel.node.js]"
    ],
    "lineNumber": 15,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ImagePreprocessing"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 593,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/imagePreprocessing.js~ImagePreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/imagePreprocessing.js~ImagePreprocessing#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 594,
    "kind": "variable",
    "name": "imagePreprocessing",
    "memberof": "packages/causality-preprocessing/src/imagePreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/imagePreprocessing.js~imagePreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/imagePreprocessing.js",
    "importStyle": "imagePreprocessing",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-preprocessing/src/imagePreprocessing.js~ImagePreprocessing"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/index.js",
    "content": "export { default as causalNetPreprocessingStream } from './causalNetPreprocessingStream';\nexport { default as PreprocessingMixins} from './preprocessing.mixins';\n\nexport { default as imagePreprocessing } from './imagePreprocessing';\nexport { default as nlpPreprocessing } from './nlpPreprocessing';\nexport { default as tabularPreprocessing } from './tabularPreprocessing';\n\nexport { tokenizer } from './Tokenizer/index';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/nlpPreprocessing.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { TokenTransformingMixins } from './NLP/index';\n/**\n * This NLPPreprocessing class provide methods for preprocessing text and output valid tokens.\n * { MixWith:\n *     [ TokenTransformingMixins ]) }\n * @class NLPPreprocessing\n * @extends BaseFunctor\n * @example\n * [!EXAMPLE ../examples/nlpPreprocessing.babel.node.js]\n */\n\nclass NLPPreprocessing extends platform.mixWith(BaseFunctor, \n    [ TokenTransformingMixins ]){\n    constructor(){\n        super();\n    }\n    /**\n     * This method is used in case tokenizer requires data setup.\n     * @param { Url|FilePath } configLink\n     * @memberof NLPPreprocessing\n     */\n    connect(configLink){\n        this.tokenizer.connect(configLink);\n    }\n    /**\n     * Get tokenizer\n     *\n     * @memberof NLPPreprocessing\n     */\n    get Tokenizer(){\n        if(!this.tokenizer){\n            throw Error('tokenizer is not set');\n        }\n        return this.tokenizer;\n    }\n    /**\n     * Set tokenizer\n     * @param { Object } tokenizer - tokenizer object\n     * @memberof NLPPreprocessing\n     */\n    set Tokenizer(tokenizer){\n        this.tokenizer = tokenizer;\n    }\n}\n\nexport default new NLPPreprocessing;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/nlpPreprocessing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 597,
    "kind": "class",
    "name": "NLPPreprocessing",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/nlpPreprocessing.js",
    "importStyle": null,
    "description": "This NLPPreprocessing class provide methods for preprocessing text and output valid tokens.\n{ MixWith:\n    [ TokenTransformingMixins ]) }",
    "examples": [
      "[!EXAMPLE ../examples/nlpPreprocessing.babel.node.js]"
    ],
    "lineNumber": 14,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NLPPreprocessing"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 598,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing#connect",
    "access": "public",
    "description": "This method is used in case tokenizer requires data setup.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          " Url",
          "FilePath "
        ],
        "spread": false,
        "optional": false,
        "name": "configLink",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 600,
    "kind": "get",
    "name": "Tokenizer",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing#Tokenizer",
    "access": "public",
    "description": "Get tokenizer",
    "lineNumber": 32,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 601,
    "kind": "set",
    "name": "Tokenizer",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing#Tokenizer",
    "access": "public",
    "description": "Set tokenizer",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "tokenizer",
        "description": "tokenizer object"
      }
    ]
  },
  {
    "__docId__": 602,
    "kind": "member",
    "name": "tokenizer",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing",
    "static": false,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing#tokenizer",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "nLPPreprocessing",
    "memberof": "packages/causality-preprocessing/src/nlpPreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/nlpPreprocessing.js~nLPPreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/nlpPreprocessing.js",
    "importStyle": "nLPPreprocessing",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-preprocessing/src/nlpPreprocessing.js~NLPPreprocessing"
      ]
    }
  },
  {
    "__docId__": 604,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/preprocessing.mixins.js",
    "content": "const PreprocessingMixins = (BasePipelineClass) => class extends BasePipelineClass{\n    get Preprocessing(){\n        if( !this.streamPreprocessing ){\n            throw Error('streamPreprocessing is not set');\n        }\n        return this.streamPreprocessing;\n    }\n\n    set Preprocessing(streamPreprocessing){\n        this.streamPreprocessing = streamPreprocessing;\n    }\n\n    splitDataset(ratio=0.9){\n        return this.Preprocessing.splitDataset(ratio);\n    }\n\n    setByConfig(pipelineConfig){\n        if(super.setByConfig){\n            super.setByConfig(pipelineConfig);\n        }\n        this.Logger.groupBegin('set Preprocessing by config');\n        if(this.DataSourceReader){\n            const { Preprocessing } = pipelineConfig.Dataset;\n            if(!Preprocessing){\n                throw Error(`expect { Preprocessing } get ${JSON.stringify(pipelineConfig.Dataset)}`);\n            }\n            const { SampleTransformer, LabelTransformer } = Preprocessing;\n            if(!SampleTransformer || !LabelTransformer){\n                throw Error(`expect { SampleTransformer, LabelTransformer } \n                    get ${JSON.stringify(pipelineConfig.Dataset.Preprocessing)}`);\n            }\n            this.Preprocessing.SampleTransformer = SampleTransformer;\n            this.Preprocessing.LabelTransformer = LabelTransformer;\n            this.Preprocessing.SampleTransformer = this.Preprocessing.SampleTransformer.bind(this);\n            this.Preprocessing.LabelTransformer = this.Preprocessing.LabelTransformer.bind(this);\n            this.Preprocessing.setDataHandler();\n            this.DataSourceReader.pipe(this.Preprocessing);\n            pipelineConfig.Dataset.TrainDataGenerator = this.Preprocessing.makeTrainDataGenerator();\n            pipelineConfig.Dataset.TestDataGenerator = this.Preprocessing.makeTestDataGenerator();\n        }\n        this.Logger.groupEnd();\n        return pipelineConfig;\n    }\n};\n\nexport default PreprocessingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/preprocessing.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 605,
    "kind": "class",
    "name": "PreprocessingMixins",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/preprocessing.mixins.js",
    "importStyle": "PreprocessingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BasePipelineClass"
    ]
  },
  {
    "__docId__": 606,
    "kind": "get",
    "name": "Preprocessing",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins#Preprocessing",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 607,
    "kind": "set",
    "name": "Preprocessing",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins#Preprocessing",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "streamPreprocessing",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "static": false,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins#streamPreprocessing",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "splitDataset",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins#splitDataset",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "ratio",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0.9,
        "defaultValue": "0.9"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "setByConfig",
    "memberof": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/preprocessing.mixins.js~PreprocessingMixins#setByConfig",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "pipelineConfig",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "file",
    "name": "packages/causality-preprocessing/src/tabularPreprocessing.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { CategoryNormalizingMixins } from './Tabular/index';\nclass TabularPreprocessing extends platform.mixWith(BaseFunctor, \n    [CategoryNormalizingMixins]){\n    constructor(){\n        super();\n    }\n}\n\nexport default new TabularPreprocessing;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/src/tabularPreprocessing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 612,
    "kind": "class",
    "name": "TabularPreprocessing",
    "memberof": "packages/causality-preprocessing/src/tabularPreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/tabularPreprocessing.js~TabularPreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/tabularPreprocessing.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "pseudoExport": true,
    "undocument": true,
    "interface": false,
    "expressionExtends": ""
  },
  {
    "__docId__": 613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-preprocessing/src/tabularPreprocessing.js~TabularPreprocessing",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-preprocessing/src/tabularPreprocessing.js~TabularPreprocessing#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 614,
    "kind": "variable",
    "name": "tabularPreprocessing",
    "memberof": "packages/causality-preprocessing/src/tabularPreprocessing.js",
    "static": true,
    "longname": "packages/causality-preprocessing/src/tabularPreprocessing.js~tabularPreprocessing",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-preprocessing/src/tabularPreprocessing.js",
    "importStyle": "tabularPreprocessing",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-preprocessing/src/tabularPreprocessing.js~TabularPreprocessing"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "file",
    "name": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js",
    "content": "/**\n * This ChunkLookupMixins class provide mixins for chunk lookup that first look from the cached chunk then\n * fetch and cache new chunk\n * @class ChunkLookupMixins\n * @extends {  BaseWordEmbeddingClass } \n */\nconst ChunkLookupMixins = ( BaseWordEmbeddingClass )=> class extends BaseWordEmbeddingClass{ \n    \n    /**\n     * Return the storage lookup function\n     * @readonly\n     */\n    get ChunkLookUp(){\n        const Storage = this.Storage;\n        return (chunkId)=>{\n            return new Promise(async (resolve, reject)=>{\n                try{\n                    const ChunkPath = this.embeddingSavePath + chunkId;\n                    let chunkItem = await Storage.getItem(ChunkPath);\n                    let chunk = chunkItem[ChunkPath];\n                    resolve(JSON.parse(chunk));\n                }\n                catch(err){\n                    resolve(null);\n                }\n            });\n        };\n    }\n   /**\n    * Update the storage lookup\n    * @param { String|Number } chunkId - id in positive integer range\n    * @param { Object } chunk - chunk object containing token keys and correponding vec value\n    * @returns { String } - updated chunk path in storage\n    */\n   async updateChunkLookUp(chunkId, chunk){\n        const Storage = this.Storage;\n        const UpdateChunkPath = this.embeddingSavePath + chunkId;\n        return await Storage.setItem(UpdateChunkPath, chunk);\n    }\n    /**\n     * Query chunk either read from file or fetch from remote server\n     * @param { String|Number } chunkId - id in positive interger range\n     * @returns { Object }  chunk object containing token keys and correponding vec value\n     */\n    async queryChunk(chunkId){\n        const ChunkUrl = `${this.baseLink}wordvec_chunk_${chunkId}.json`;\n        return await this.query(ChunkUrl);\n    }\n   \n};\nexport default ChunkLookupMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/Lookup/chunkLookup.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 616,
    "kind": "class",
    "name": "ChunkLookupMixins",
    "memberof": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/Lookup/chunkLookup.mixins.js",
    "importStyle": "ChunkLookupMixins",
    "description": "This ChunkLookupMixins class provide mixins for chunk lookup that first look from the cached chunk then\nfetch and cache new chunk",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ChunkLookupMixins"
      }
    ],
    "interface": false,
    "extends": [
      "  BaseWordEmbeddingClass "
    ]
  },
  {
    "__docId__": 617,
    "kind": "get",
    "name": "ChunkLookUp",
    "memberof": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins#ChunkLookUp",
    "access": "public",
    "description": "Return the storage lookup function",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "updateChunkLookUp",
    "memberof": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins#updateChunkLookUp",
    "access": "public",
    "description": "Update the storage lookup",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ String } - updated chunk path in storage"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String",
          "Number "
        ],
        "spread": false,
        "optional": false,
        "name": "chunkId",
        "description": "id in positive integer range"
      },
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "chunk object containing token keys and correponding vec value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " String "
      ],
      "spread": false,
      "description": "updated chunk path in storage"
    }
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "queryChunk",
    "memberof": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/Lookup/chunkLookup.mixins.js~ChunkLookupMixins#queryChunk",
    "access": "public",
    "description": "Query chunk either read from file or fetch from remote server",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object }  chunk object containing token keys and correponding vec value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String",
          "Number "
        ],
        "spread": false,
        "optional": false,
        "name": "chunkId",
        "description": "id in positive interger range"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "chunk object containing token keys and correponding vec value"
    }
  },
  {
    "__docId__": 620,
    "kind": "file",
    "name": "packages/causality-representation/src/Lookup/index.js",
    "content": "export { default as ChunkLookupMixins } from './chunkLookup.mixins';\nexport { default as TokenLookUpMixins } from './tokenLookup.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/Lookup/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 621,
    "kind": "file",
    "name": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js",
    "content": "const TokenLookUpMixins = (BaseWordEmbeddingClass)=> class extends BaseWordEmbeddingClass{ \n    get TokenLookUp(){\n        const MemCache = this.MemCache;\n        return (token)=>{\n            return new Promise(async (resolve, reject)=>{\n                try{\n                    let vec = await MemCache.getItem(this.embeddingSavePath + token);\n                    resolve(vec);\n                }\n                catch(err){\n                    resolve(null);\n                }\n            });\n        };\n    }\n    /**\n     * Update token look up\n     * @param { String } token - token \n     * @param { Array } vec - vector representation of token\n     */\n    async updateTokenLookUp(token, vec){\n        console.error('this is update');\n        const MemCache = this.MemCache;\n        await MemCache.setItem(this.embeddingSavePath + token, vec);\n    }\n};\nexport default TokenLookUpMixins;\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/Lookup/tokenLookup.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 622,
    "kind": "class",
    "name": "TokenLookUpMixins",
    "memberof": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js~TokenLookUpMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/Lookup/tokenLookup.mixins.js",
    "importStyle": "TokenLookUpMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseWordEmbeddingClass"
    ]
  },
  {
    "__docId__": 623,
    "kind": "get",
    "name": "TokenLookUp",
    "memberof": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js~TokenLookUpMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js~TokenLookUpMixins#TokenLookUp",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "updateTokenLookUp",
    "memberof": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js~TokenLookUpMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/Lookup/tokenLookup.mixins.js~TokenLookUpMixins#updateTokenLookUp",
    "access": "public",
    "description": "Update token look up",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "token",
        "description": "token"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "vec",
        "description": "vector representation of token"
      }
    ],
    "return": null
  },
  {
    "__docId__": 625,
    "kind": "file",
    "name": "packages/causality-representation/src/causalNetEmbedding.js",
    "content": "import { Tensor as BaseTensor } from 'causal-net.core';\nimport { platform, fetch, jsonUtils } from 'causal-net.utils';\nimport { StorageMixins, indexDBStorage } from 'causal-net.storage';\nimport { MemCacheMixins, memDownCache } from 'causal-net.memcache';\nimport { default as WordEmbeddingMixins } from './wordEmbedding.mixins';\nimport { default as ChunkLookUpMixins } from './Lookup/chunkLookup.mixins';\nimport { default as TokenLookUpMixins } from './Lookup/tokenLookup.mixins';\nimport { default as VectorMetricMixins } from './vectorMetrics.mixins';\nimport { default as functor } from './functor';\n/**\n * This CausalNetEmbedding provide methods for transform raw tokenized sentence into \n * its single vector representation\n * mixWith:\n *         [   StorageMixins, \n *             MemCacheMixins,\n *             TokenLookUpMixins,\n *             ChunkLookUpMixins,\n *             WordEmbeddingMixins ])}\n * @class CausalNetEmbedding\n * @extends  BaseTensor\n * @example\n * [EXAMPLE ../examples/causalNetEmbedding.babel.node.js]\n */\nclass CausalNetEmbedding extends platform.mixWith(BaseTensor, \n        [   StorageMixins, \n            MemCacheMixins,\n            TokenLookUpMixins,\n            ChunkLookUpMixins,\n            VectorMetricMixins,\n            WordEmbeddingMixins ]){\n    constructor(fetch, storage, cache, functor){\n        super();\n        this.fetch = fetch;\n        this.Storage = storage;   //store configure\n        this.MemCache = cache;    //store chunks\n        this.F = functor;\n        this.R = this.F.CoreFunctor;\n        this.embeddingSavePath = '/embedding/';\n        this.embeddingDescriptionPath = this.embeddingSavePath + 'description.json';\n    }\n    /**\n     * Return veczie in positive number\n     *\n     * @readonly\n     * @memberof CausalNetEmbedding\n     */\n    get VecSize(){\n        if(!this.vecsize){\n            throw Error('vecsize is not set');\n        }\n        return this.vecsize;\n    }\n    /**\n     * Load configure of pretrained vector from either local folder or remote server. \n     * After connect, the result is cached for next time init.\n     * @param { URL|FilePath } link - link to load\n     * @param { boolean } [refresh=false] - force to discard local cache\n     * @returns { Promise }\n     * @memberof CausalNetEmbedding\n     */\n    async connect(link, refresh=false){\n        this.baseLink = link;\n        return await this.getDescription(refresh);\n    }\n    /**\n     * This method is called by connect\n     * @private\n     * @param {boolean} [forceFecth=false]\n     * @returns\n     * @memberof CausalNetEmbedding\n     */\n    async getDescription(forceFecth=false){\n        if(!this.description){\n            try{\n                let descriptionItem = await this.Storage.getItem(this.embeddingDescriptionPath);\n                this.description = JSON.parse(descriptionItem[this.embeddingDescriptionPath]);\n            }\n            catch(err){\n                this.logger.debug({'load description from storage': false});\n                this.description = await this.queryDescription();\n            }\n        }\n        if(forceFecth){\n            this.description = await this.queryDescription();\n        }\n        this.TokenChunkIdMapper = (token)=>{\n            return this.F.getIn([token], this.description.chunkLookUp, null);\n        };\n        this.vecsize = this.description.vecsize;//only set from here\n        return this.description;\n    }\n    /**\n     * fetch or read configure depends on provied link format\n     * @private\n     * @param {*} link\n     * @returns\n     * @memberof CausalNetEmbedding\n     */\n    async query(link){\n        if(link.startsWith('http')){\n            return await jsonUtils.fetchJson(link);\n        }\n        else{\n            return await jsonUtils.readJSON(link);\n        }\n    }\n    /**\n     * query the description json \n     * @private\n     * @returns { Object } description json object\n     * @memberof CausalNetEmbedding\n     */\n    async queryDescription(){\n        const DescriptionLink = this.baseLink + 'wordvec.description.json';\n        this.logger.debug({ DescriptionLink });\n        var description = this.query(DescriptionLink);\n        await this.Storage.setItem(this.embeddingDescriptionPath, JSON.stringify(description));\n        this.description = description;\n        return this.description;\n    }\n}\n\nexport default new CausalNetEmbedding(fetch, indexDBStorage, memDownCache, functor);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/causalNetEmbedding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 626,
    "kind": "class",
    "name": "CausalNetEmbedding",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js",
    "static": true,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/causalNetEmbedding.js",
    "importStyle": null,
    "description": "This CausalNetEmbedding provide methods for transform raw tokenized sentence into \nits single vector representation\nmixWith:\n        [   StorageMixins, \n            MemCacheMixins,\n            TokenLookUpMixins,\n            ChunkLookUpMixins,\n            WordEmbeddingMixins ])}",
    "examples": [
      "import { causalNetEmbedding } from 'causal-net.representation';\nimport { termLogger } from 'causal-net.log';\n(async ()=>{\n    const configLink = '../../datasets/WordVec_EN/';\n    await causalNetEmbedding.connect(configLink, true);\n    //first time transform will find on storage cache\n    let vecs = await causalNetEmbedding.transform(['this', 'is', 'test']);\n    for(let vec of vecs){\n        termLogger.log({ vec });\n    }\n    //second time transform will find on memory cache\n    vecs = await causalNetEmbedding.transform(['this', 'is', 'test']);\n    for(let vec of vecs){\n        termLogger.log({ vec });\n    }\n    //return the tensor representing sentence\n    let sentVec = await causalNetEmbedding.sentenceEncode([ ['this', 'is', 'test'] ]);\n    sentVec.print();\n})().catch(err=>{\n    console.error(err);\n});"
    ],
    "lineNumber": 44,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetEmbedding"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 627,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "fetch",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#fetch",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "Storage",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#Storage",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "MemCache",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#MemCache",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "F",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#F",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#R",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "embeddingSavePath",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#embeddingSavePath",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "member",
    "name": "embeddingDescriptionPath",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#embeddingDescriptionPath",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "get",
    "name": "VecSize",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#VecSize",
    "access": "public",
    "description": "Return veczie in positive number",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#connect",
    "access": "public",
    "description": "Load configure of pretrained vector from either local folder or remote server. \nAfter connect, the result is cached for next time init.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise }"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL",
          "FilePath "
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "link to load"
      },
      {
        "nullable": null,
        "types": [
          " boolean "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "refresh",
        "description": "force to discard local cache"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 637,
    "kind": "member",
    "name": "baseLink",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#baseLink",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "getDescription",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#getDescription",
    "access": "private",
    "description": "This method is called by connect",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceFecth",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "member",
    "name": "description",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#description",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "member",
    "name": "TokenChunkIdMapper",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#TokenChunkIdMapper",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "member",
    "name": "vecsize",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#vecsize",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "query",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#query",
    "access": "private",
    "description": "fetch or read configure depends on provied link format",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "queryDescription",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding#queryDescription",
    "access": "private",
    "description": "query the description json ",
    "lineNumber": 133,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Object } description json object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": "description json object"
    },
    "params": []
  },
  {
    "__docId__": 647,
    "kind": "variable",
    "name": "causalNetEmbedding",
    "memberof": "packages/causality-representation/src/causalNetEmbedding.js",
    "static": true,
    "longname": "packages/causality-representation/src/causalNetEmbedding.js~causalNetEmbedding",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/causalNetEmbedding.js",
    "importStyle": "causalNetEmbedding",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-representation/src/causalNetEmbedding.js~CausalNetEmbedding"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "file",
    "name": "packages/causality-representation/src/functor.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { default as WordEmbeddingFunctorMixins } from './wordEmbeddingFunctor.mixins';\n/**\n * This Function class provides methods for common used ultilities function\n * @export\n * @class Function\n * @extends BaseFunctor\n */\n\nclass Functor extends platform.mixWith(BaseFunctor, \n        [WordEmbeddingFunctorMixins]){\n    constructor(){\n        super();\n    }\n}\n\nexport default new Functor();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/functor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 649,
    "kind": "class",
    "name": "Functor",
    "memberof": "packages/causality-representation/src/functor.js",
    "static": true,
    "longname": "packages/causality-representation/src/functor.js~Functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/functor.js",
    "importStyle": null,
    "description": "This Function class provides methods for common used ultilities function",
    "lineNumber": 11,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Function"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 650,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-representation/src/functor.js~Functor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/functor.js~Functor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 651,
    "kind": "variable",
    "name": "functor",
    "memberof": "packages/causality-representation/src/functor.js",
    "static": true,
    "longname": "packages/causality-representation/src/functor.js~functor",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/functor.js",
    "importStyle": "functor",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-representation/src/functor.js~Functor"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "file",
    "name": "packages/causality-representation/src/index.js",
    "content": "export { default as RepresentationMixins } from './representation.mixins';\nexport { default as causalNetEmbedding } from './causalNetEmbedding';\nexport { default as universalEmbedding } from './universalEmbedding';\nexport { default as WordEmbeddingMixins } from './wordEmbedding.mixins';\nexport { ChunkLookupMixins, TokenLookUpMixins } from './Lookup';\nexport { default as WordEmbeddingFunctorMixins } from './wordEmbeddingFunctor.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "file",
    "name": "packages/causality-representation/src/representation.mixins.js",
    "content": "import { Tensor } from 'causal-net.core'; \nimport { assert } from 'causal-net.utils';\n/**\n * This mixin class provides attributes: **Representation**.\n * @class RepresentationMixins\n * @extends  BasePipelineClass\n * @example\n * [EXAMPLE ../examples/embeddingMixins.babel.node.js]\n */\nconst RepresentationMixins = (BasePipelineClass)=> class extends BasePipelineClass{ \n    /**\n     * Return Embedding instance\n     *\n     * @readonly\n     * @memberof RepresentationMixins\n     */\n    get Representation(){\n        if(!this.representation){\n            throw Error('representation is not set');\n        }\n        return this.representation;\n    }\n    \n    set Representation(representation){\n        assert.beInstanceOf(representation, Tensor);\n        this.representation = representation;\n    }\n    /**\n     * Load configure of pretrained vector from either local folder or remote server. \n     * After connect, the result is cached for next time init.\n     * @param { URL|FilePath } link - link to load\n     * @param { boolean } [refresh=false] - force to discard local cache\n     * @returns { Promise }\n     * @memberof RepresentationMixins\n     */\n    async connect(){\n        if(super.connect){\n            super.connect();\n        }\n        let configureLink = this.embeddingConfig;\n        this.logger.log(`representation connect to ${configureLink}`);\n        await this.Representation.connect(configureLink);\n    }\n    /**\n     * set embedding for pipeline\n     * @param { Object } netConfig - contain Embedding instance and Embedding configure\n     * @memberof RepresentationMixins\n     */\n    setRepresentationByConfig(netConfig){\n        let { EmbeddingConfig, Embedding } = netConfig.Representation;\n        assert.beInstanceOf(EmbeddingConfig, String);\n        this.Representation = Embedding;\n        this.embeddingConfig = EmbeddingConfig;\n    }\n};\nexport default RepresentationMixins;    ",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/representation.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 654,
    "kind": "class",
    "name": "RepresentationMixins",
    "memberof": "packages/causality-representation/src/representation.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/representation.mixins.js",
    "importStyle": "RepresentationMixins",
    "description": "This mixin class provides attributes: **Representation**.",
    "examples": [
      "import { RepresentationMixins, causalNetEmbedding } from 'causal-net.representation';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nconst PipeLineConfigure = {\n    Representation: {\n        Embedding: causalNetEmbedding,\n        EmbeddingConfig: '../../datasets/WordVec_EN/',\n    }\n}\nclass SimplePipeline extends platform.mixWith(Tensor, [RepresentationMixins]){\n    constructor(configure){\n        super();\n        this.setRepresentationByConfig(configure);\n    }\n}\nlet pipeline = new SimplePipeline(PipeLineConfigure);\npipeline.connect();\nconsole.log(pipeline.Representation);"
    ],
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RepresentationMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 655,
    "kind": "get",
    "name": "Representation",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#Representation",
    "access": "public",
    "description": "Return Embedding instance",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "set",
    "name": "Representation",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#Representation",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 657,
    "kind": "member",
    "name": "representation",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#representation",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#connect",
    "access": "public",
    "description": "Load configure of pretrained vector from either local folder or remote server. \nAfter connect, the result is cached for next time init.",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise }"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL",
          "FilePath "
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "link to load"
      },
      {
        "nullable": null,
        "types": [
          " boolean "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "refresh",
        "description": "force to discard local cache"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 659,
    "kind": "method",
    "name": "setRepresentationByConfig",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#setRepresentationByConfig",
    "access": "public",
    "description": "set embedding for pipeline",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "netConfig",
        "description": "contain Embedding instance and Embedding configure"
      }
    ],
    "return": null
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "embeddingConfig",
    "memberof": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins",
    "static": false,
    "longname": "packages/causality-representation/src/representation.mixins.js~RepresentationMixins#embeddingConfig",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "file",
    "name": "packages/causality-representation/src/universalEmbedding.js",
    "content": "import { platform, fetch } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { default as functor } from './functor';\nimport { default as VectorMetricMixins } from './vectorMetrics.mixins';\n\n/**\n * This UniversalEmbedding provide methods for transform sentences into \n * its single vector representation \n * based on [use](https://github.com/tensorflow/tfjs-models/tree/master/universal-sentence-encoder)\n * \n * @class UniversalEmbedding\n * @extends {Tensor}\n * @example\n * [EXAMPLE ../examples/universalEmbedding.babel.js]\n */\nclass UniversalEmbedding extends platform.mixWith(Tensor, \n    [ VectorMetricMixins ]){\n    \n    constructor(functor){\n        super();\n        /**\n         * @private { TensorModel } \n         */\n        this.model = null;\n        this.f = functor;\n        this.R = this.f.CoreFunctor;\n        this.vecSize = 512;\n    }\n    \n    async connect(link){\n        this.model = await this.T.loadGraphModel(link);\n        return this;\n    }\n\n    async sentenceEncode(sentences, asTensor=true){\n        if(!this.model){\n            throw Error(`model is not connect`);\n        }\n        const T = this.T;\n        //only one sentence\n        let embeddings = [];\n        for(let tokenIdxs of sentences){\n            let idxs = tokenIdxs.map((t,i)=>[0,i]);\n            let indices = T.tensor(idxs, [tokenIdxs.length, 2], 'int32');\n            let values = T.tensor(tokenIdxs, [tokenIdxs.length], 'int32');\n            embeddings.push( await this.model.executeAsync({indices, values}) );\n        }\n        let sentTensor = T.stack(embeddings);\n        if(asTensor){\n            return sentTensor;\n        }\n        else{\n            let vec = await sentTensor.data();\n            sentTensor.dispose();\n            return this.R.splitEvery(this.vecSize, vec);\n        }\n    }\n\n    async transform(tokenIdxs){\n        let [vec] = await this.sentenceEncode([tokenIdxs], false);\n        return Array.from(vec);\n    }\n}\nexport default new UniversalEmbedding(functor);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/universalEmbedding.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 663,
    "kind": "class",
    "name": "UniversalEmbedding",
    "memberof": "packages/causality-representation/src/universalEmbedding.js",
    "static": true,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/universalEmbedding.js",
    "importStyle": null,
    "description": "This UniversalEmbedding provide methods for transform sentences into \nits single vector representation \nbased on [use](https://github.com/tensorflow/tfjs-models/tree/master/universal-sentence-encoder)",
    "examples": [
      "import { universalEmbedding } from 'causal-net.representation';\nimport { termLogger } from 'causal-net.log';\nimport { tokenizer } from 'causal-net.preprocessing';\n(async ()=>{\n    const BaseModelServer = 'http://0.0.0.0:8080/models/';\n    termLogger.groupBegin('load model');\n    await tokenizer.connect(BaseModelServer + 'use/vocab.json');\n    await universalEmbedding.connect(BaseModelServer + '/use/tensorflowjs_model.json');\n    termLogger.log('load finish');\n    const asEncode = true;\n    let tokens = [tokenizer.tokenize('dog', asEncode),\n                  tokenizer.tokenize('cat', asEncode)]; \n    termLogger.log({tokens});\n    let sentVec = await universalEmbedding.sentenceEncode(tokens);\n    sentVec.print();\n    let score = await universalEmbedding.encodeMatching(tokens[0], tokens[1]);\n    score.print();\n    termLogger.groupEnd();\n})().catch(console.err);        "
    ],
    "lineNumber": 34,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UniversalEmbedding"
      }
    ],
    "interface": false,
    "extends": [
      "Tensor"
    ]
  },
  {
    "__docId__": 664,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "model",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#model",
    "access": "private",
    "description": "",
    "lineNumber": 42,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "f",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#f",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "R",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#R",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "vecSize",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#vecSize",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#connect",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "method",
    "name": "sentenceEncode",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#sentenceEncode",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "sentences",
        "types": [
          "*"
        ]
      },
      {
        "name": "asTensor",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "method",
    "name": "transform",
    "memberof": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding#transform",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "tokenIdxs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "variable",
    "name": "universalEmbedding",
    "memberof": "packages/causality-representation/src/universalEmbedding.js",
    "static": true,
    "longname": "packages/causality-representation/src/universalEmbedding.js~universalEmbedding",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/universalEmbedding.js",
    "importStyle": "universalEmbedding",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-representation/src/universalEmbedding.js~UniversalEmbedding"
      ]
    }
  },
  {
    "__docId__": 674,
    "kind": "file",
    "name": "packages/causality-representation/src/vectorMetrics.mixins.js",
    "content": "/**\n * This VectorMetricMixins class is provide methods for comparing vector representation of different sentences\n * @class VectorMetricMixins\n * @extends  BaseEmbeddingClass\n */\nconst VectorMetricMixins = (BaseEmbeddingClass)=> class extends BaseEmbeddingClass{ \n    \n    /**\n     * return the eucleudian distance between two representation vectors\n     * @returns { Array } vec\n     */\n    async encodeMatching(tokenIdx1, tokenIdx2){\n        let x = await this.sentenceEncode([tokenIdx1], true);\n        x = x.reshape([-1]);\n        let y = await this.sentenceEncode([tokenIdx2], true);\n        y = y.reshape([-1]);\n        return x.dot(y).div(x.norm().mul(y.norm()));\n    }\n};\n\nexport default VectorMetricMixins;\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/vectorMetrics.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 675,
    "kind": "class",
    "name": "VectorMetricMixins",
    "memberof": "packages/causality-representation/src/vectorMetrics.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/vectorMetrics.mixins.js~VectorMetricMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/vectorMetrics.mixins.js",
    "importStyle": "VectorMetricMixins",
    "description": "This VectorMetricMixins class is provide methods for comparing vector representation of different sentences",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "VectorMetricMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "encodeMatching",
    "memberof": "packages/causality-representation/src/vectorMetrics.mixins.js~VectorMetricMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/vectorMetrics.mixins.js~VectorMetricMixins#encodeMatching",
    "access": "public",
    "description": "return the eucleudian distance between two representation vectors",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } vec"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "vec"
    },
    "params": [
      {
        "name": "tokenIdx1",
        "types": [
          "*"
        ]
      },
      {
        "name": "tokenIdx2",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 677,
    "kind": "file",
    "name": "packages/causality-representation/src/wordEmbedding.mixins.js",
    "content": "/**\n * This WordEmbeddingMixins class is provide methods for transforn sentences, tokens to vectors\n * @class CausalNetEmbedding\n * @extends  BaseEmbeddingClass\n */\nconst WordEmbeddingMixins = (BaseEmbeddingClass)=> class extends BaseEmbeddingClass{ \n    /**\n     * return default replacement for unknown vec. Currently it is set to zeros\n     * @returns { Array } vec\n     */\n    unknowVec(){\n        return this.f.zeroVec(this.VecSize);\n    }\n        \n    /**\n     * return the vectors of tokenized sentences\n     * This function require sentence to be tokenized via preprocessing\n     * @param { Array } tokens - array of string tokens of sentence\n     * @returns { Tensor } encoded sentences\n     */\n    async sentenceEncode(sentences, asTensor=true){\n        const T = this.T;\n        let encodedSentences = [];\n        for(let tokens of sentences){\n            let vecs = await this.transform(tokens);\n            let encode = await T.tensor(vecs).mean(0);\n            encodedSentences.push(encode);\n        }\n        let sentTensor = T.stack(encodedSentences);\n        if(asTensor){\n            return sentTensor;\n        }\n        else{\n            let vecs = await sentTensor.data();\n            return this.R.splitEvery(this.VecSize, vecs);\n        }\n        \n    }\n    /**\n     * Transform tokenized sentences into tensor vectors\n     * @param { Array } tokens - 2d array for token of sentences\n     * @returns { Tensor } 2d tensor represent vectors of each input sentences\n     * @example\n     * let sentVec = await causalNetEmbedding.sentenceEncode([ ['this', 'is', 'test'] ]);\n     */\n    async transform(tokens){\n        const TokenLookUp = this.TokenLookUp, ChunkLookUp = this.ChunkLookUp;\n        \n        let vecs = [], missCacheTokens=[];\n        for(let token of tokens){\n            let vec = await TokenLookUp(token);\n            this.logger.debug({[token]: vec});\n            if(vec === null){\n                missCacheTokens = [...missCacheTokens, token];\n            }\n            vecs = [...vecs, token];\n        }\n        if(missCacheTokens.length === 0){\n            return vecs;\n        }\n        \n        let {tokenChunkIds, chunkIds} = \n            this.F.mapTokenToChunkIds(missCacheTokens, this.TokenChunkIdMapper);\n        \n        this.logger.debug({tokenChunkIds, chunkIds});\n        let masterchunk = {};\n        for(let chunkId of chunkIds){\n            if(chunkId !== null){//not in chunk\n                console.log('lookup');\n                let chunk = await ChunkLookUp(chunkId);\n                if(chunk === null){\n                    chunk = await this.queryChunk(chunkId);\n                    await this.updateChunkLookUp(chunkId, chunk);\n                }\n                masterchunk = {...masterchunk, ...chunk};\n            }\n        }\n        \n        let finalVecs = vecs.reduce((finalVecs, vec)=>{\n                            if( typeof(vec) === \"string\" ){\n                                let _vec = masterchunk[vec];\n                                if(_vec === undefined){\n                                    _vec = this.unknowVec();\n                                }\n                                finalVecs.push(_vec);\n                            }\n                            else{\n                                finalVecs.push(vec);\n                            }\n                            return finalVecs;\n                        }, []);\n        return finalVecs;\n    }   \n};\nexport default WordEmbeddingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/wordEmbedding.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 678,
    "kind": "class",
    "name": "WordEmbeddingMixins",
    "memberof": "packages/causality-representation/src/wordEmbedding.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/wordEmbedding.mixins.js",
    "importStyle": "WordEmbeddingMixins",
    "description": "This WordEmbeddingMixins class is provide methods for transforn sentences, tokens to vectors",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetEmbedding"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "unknowVec",
    "memberof": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins#unknowVec",
    "access": "public",
    "description": "return default replacement for unknown vec. Currently it is set to zeros",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } vec"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "vec"
    },
    "params": []
  },
  {
    "__docId__": 680,
    "kind": "method",
    "name": "sentenceEncode",
    "memberof": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins#sentenceEncode",
    "access": "public",
    "description": "return the vectors of tokenized sentences\nThis function require sentence to be tokenized via preprocessing",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Tensor } encoded sentences"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "array of string tokens of sentence"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Tensor "
      ],
      "spread": false,
      "description": "encoded sentences"
    }
  },
  {
    "__docId__": 681,
    "kind": "method",
    "name": "transform",
    "memberof": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-representation/src/wordEmbedding.mixins.js~WordEmbeddingMixins#transform",
    "access": "public",
    "description": "Transform tokenized sentences into tensor vectors",
    "examples": [
      "let sentVec = await causalNetEmbedding.sentenceEncode([ ['this', 'is', 'test'] ]);"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Tensor } 2d tensor represent vectors of each input sentences"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "2d array for token of sentences"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Tensor "
      ],
      "spread": false,
      "description": "2d tensor represent vectors of each input sentences"
    }
  },
  {
    "__docId__": 682,
    "kind": "file",
    "name": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js",
    "content": "const WordEmbeddingFunctorMixins = (BaseFunctionClass) => class extends BaseFunctionClass{\n    /**\n     *\n     * @param { Array } tokens - list of tokens to find coresponding ids\n     * @param { Function } mapper - \n     * @returns \n     */\n    mapTokenToChunkIds(tokens, mapper){\n        const R = this.R;\n        const TokenChunkIdMapper = mapper;\n        let tokenChunkMap = tokens.map( t => {\n            let chunkId = TokenChunkIdMapper(t);\n            return [[t, chunkId], chunkId]; \n        });\n        let [tokenChunkIds, _chunkIds] = this.unzip(tokenChunkMap);\n        let chunkIds = R.uniq(_chunkIds);\n        console.log({chunkIds, tokenChunkIds});\n        return {tokenChunkIds, chunkIds};\n    }\n    /**\n     * return zero vector given the vec size\n     * @param { Number } vecSize - positive integer indicates vector length\n     * @returns { Array } zero vector\n     */\n    zeroVec(vecSize){\n        return this.R.map(()=>0,this.R.range(0, vecSize));\n    };\n};\nexport default WordEmbeddingFunctorMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/src/wordEmbeddingFunctor.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 683,
    "kind": "class",
    "name": "WordEmbeddingFunctorMixins",
    "memberof": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js",
    "static": true,
    "longname": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js~WordEmbeddingFunctorMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-representation/src/wordEmbeddingFunctor.mixins.js",
    "importStyle": "WordEmbeddingFunctorMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseFunctionClass"
    ]
  },
  {
    "__docId__": 684,
    "kind": "method",
    "name": "mapTokenToChunkIds",
    "memberof": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js~WordEmbeddingFunctorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js~WordEmbeddingFunctorMixins#mapTokenToChunkIds",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": "list of tokens to find coresponding ids"
      },
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": false,
        "name": "mapper",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "{\"tokenChunkIds\": *, \"chunkIds\": *}"
      ]
    }
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "zeroVec",
    "memberof": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js~WordEmbeddingFunctorMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-representation/src/wordEmbeddingFunctor.mixins.js~WordEmbeddingFunctorMixins#zeroVec",
    "access": "public",
    "description": "return zero vector given the vec size",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } zero vector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "vecSize",
        "description": "positive integer indicates vector length"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "zero vector"
    }
  },
  {
    "__docId__": 686,
    "kind": "file",
    "name": "packages/causality-sampling/src/causalNetSampling.js",
    "content": "import { Functor as BaseFunctor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport random from 'random';\nimport { default as SubSamplingMixins } from './subSampling.mixins';\nimport { default as NegSamplingMixins } from './negSampling.mixins';\n\n/**\n * This class provides common used sampling methods which can be accessed via **causalNetSampling**.\n * mixwith:\n * [ SubSamplingMixins, NegSamplingMixins ]\n * @class CausalNetSampling\n * @extends Functor\n * @example\n * [EXAMPLE ../examples/causalNetSampling.babel.js]\n */\nclass CausalNetSampling extends platform.mixWith( BaseFunctor, \n    [ SubSamplingMixins, NegSamplingMixins ]){\n    constructor(){\n        super();\n        this.Random = random;    \n    }\n}\n\nexport default new CausalNetSampling();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/src/causalNetSampling.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 687,
    "kind": "class",
    "name": "CausalNetSampling",
    "memberof": "packages/causality-sampling/src/causalNetSampling.js",
    "static": true,
    "longname": "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-sampling/src/causalNetSampling.js",
    "importStyle": null,
    "description": "This class provides common used sampling methods which can be accessed via **causalNetSampling**.\nmixwith:\n[ SubSamplingMixins, NegSamplingMixins ]",
    "examples": [
      "import { causalNetSampling } from 'causal-net.sampling';\nimport {termLogger as Logger} from 'causal-net.log';\nlet numSamples = 4;\nlet idSize = 10;//id list: [0,1,2,3,4,5,6,7,8,9]\nLogger.log(causalNetSampling.subSampling(numSamples, idSize));\n\nnumSamples = 4;\nlet positiveSampleId = [0, 1];\n//ids: [0, 1, 2, 3];\nlet probIds = [0.9, 0.9, 0.3, 0.7];\nlet samples = causalNetSampling.negSampling(numSamples, positiveSampleId, probIds);\ntermLogger.log({ samples });"
    ],
    "lineNumber": 27,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CausalNetSampling"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 688,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 689,
    "kind": "member",
    "name": "Random",
    "memberof": "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling",
    "static": false,
    "longname": "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling#Random",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "variable",
    "name": "causalNetSampling",
    "memberof": "packages/causality-sampling/src/causalNetSampling.js",
    "static": true,
    "longname": "packages/causality-sampling/src/causalNetSampling.js~causalNetSampling",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-sampling/src/causalNetSampling.js",
    "importStyle": "causalNetSampling",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-sampling/src/causalNetSampling.js~CausalNetSampling"
      ]
    }
  },
  {
    "__docId__": 691,
    "kind": "file",
    "name": "packages/causality-sampling/src/index.js",
    "content": "export { default as causalNetSampling } from './causalNetSampling';\nexport { default as SamplingMixins } from './sampling.mixins';\n\nexport { default as SubSamplingMixins } from './subSampling.mixins';\nexport { default as NegSamplingMixins } from './negSampling.mixins';",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 692,
    "kind": "file",
    "name": "packages/causality-sampling/src/negSampling.mixins.js",
    "content": "const NegativeSamplingMixins = (BaseSamplingClass)=> class extends BaseSamplingClass{\n    /**\n     * Perform negative sampling given the select prob of ids and list of positive samples\n     * @param { Number } negativeSize - size to sample\n     * @param { Array } positiveSamples - Array of possitive Ids\n     * @param { Array } candidateProbs - Array of probablity of candidate Ids\n     * @param { Boolean } [replacable=true] - if true, no duplicated sampling Id returned\n     * @returns { Array } array of sampled Ids\n     */\n    negSampling(negativeSize, positiveSamples, candidateProbs, replacable=true){\n        const R = this.R, Random = this.Random;\n        if(R.any((v)=> !R.type(Number,v) || v > 1 || v < 0, candidateProbs)){\n            throw Error(`${JSON.stringify(candidateProbs)} is not allow`);\n        }\n        let seletionProbs = R.reduce((selectionProbs, pidx)=>{\n                                selectionProbs[pidx] = Infinity;//positive candidate never be choosed\n                                return selectionProbs;\n                            }, R.clone(candidateProbs), positiveSamples);\n        let samples = [], takenIdxs = R.clone(seletionProbs);\n        const GenNewCandidateIdx = ()=>Random.int(0, seletionProbs.length-1);\n        const SelectIfHighProb = (prob)=>{\n            let rand = Random.float();\n            return rand>prob;\n        };\n        while(samples.length < negativeSize){\n            let idx = GenNewCandidateIdx();\n            let selected = SelectIfHighProb(seletionProbs[idx]);\n            if(!selected){\n                continue;\n            }\n            if(!replacable && takenIdxs[idx]===null){\n                continue;\n            }\n            samples = [...samples, idx];\n            if(!replacable){\n                takenIdxs[idx]=null;//non replaceable\n            }\n        }    \n        return samples;\n    }\n};\nexport default NegativeSamplingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/src/negSampling.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 693,
    "kind": "class",
    "name": "NegativeSamplingMixins",
    "memberof": "packages/causality-sampling/src/negSampling.mixins.js",
    "static": true,
    "longname": "packages/causality-sampling/src/negSampling.mixins.js~NegativeSamplingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-sampling/src/negSampling.mixins.js",
    "importStyle": "NegativeSamplingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseSamplingClass"
    ]
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "negSampling",
    "memberof": "packages/causality-sampling/src/negSampling.mixins.js~NegativeSamplingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-sampling/src/negSampling.mixins.js~NegativeSamplingMixins#negSampling",
    "access": "public",
    "description": "Perform negative sampling given the select prob of ids and list of positive samples",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } array of sampled Ids"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "negativeSize",
        "description": "size to sample"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "positiveSamples",
        "description": "Array of possitive Ids"
      },
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "candidateProbs",
        "description": "Array of probablity of candidate Ids"
      },
      {
        "nullable": null,
        "types": [
          " Boolean "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "replacable",
        "description": "if true, no duplicated sampling Id returned"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array of sampled Ids"
    }
  },
  {
    "__docId__": 695,
    "kind": "file",
    "name": "packages/causality-sampling/src/sampling.mixins.js",
    "content": "import { Functor } from 'causal-net.core';\nimport { assert } from 'causal-net.utils';\n/**\n * This mixin class provide attributes: **Sampling**.\n * @class SamplingMixins\n * @extends BaseClass\n * @example\n * [EXAMPLE ../examples/sampling.mixins.babel.js]\n */\nconst SamplingMixins = (BaseClass)=> class extends BaseClass{\n    /**\n     * get current random instance\n     */\n    get Sampling(){\n        if(!this.sampling){\n            throw Error(`Sampling is not set`);\n        }\n        return this.sampling;\n    }\n    \n    /**\n     * set Sampling instance\n     * @readonly\n     */\n    set Sampling(sampling){\n        assert.beInstanceOf(sampling, Functor);\n        this.sampling = sampling;\n    }\n};\n\nexport default SamplingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/src/sampling.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 696,
    "kind": "class",
    "name": "SamplingMixins",
    "memberof": "packages/causality-sampling/src/sampling.mixins.js",
    "static": true,
    "longname": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-sampling/src/sampling.mixins.js",
    "importStyle": "SamplingMixins",
    "description": "This mixin class provide attributes: **Sampling**.",
    "examples": [
      "import { SamplingMixins, causalNetSampling } from 'causal-net.sampling';\nimport { Platform } from 'causal-net.utils';\nimport { Tensor, Function } from 'causal-net.core';\nconsole.log(causalNetSampling instanceof Function);\nclass SimplePipeline extends Platform.mixWith(Tensor, [SamplingMixins]){\n    constructor(){\n        super();\n        this.Sampling = causalNetSampling;\n    }\n}\nlet pipeline = new SimplePipeline();\nconsole.log(pipeline.Sampling);"
    ],
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SamplingMixins"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 697,
    "kind": "get",
    "name": "Sampling",
    "memberof": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins#Sampling",
    "access": "public",
    "description": "get current random instance",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "set",
    "name": "Sampling",
    "memberof": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins#Sampling",
    "access": "public",
    "description": "set Sampling instance",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 699,
    "kind": "member",
    "name": "sampling",
    "memberof": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins",
    "static": false,
    "longname": "packages/causality-sampling/src/sampling.mixins.js~SamplingMixins#sampling",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "file",
    "name": "packages/causality-sampling/src/subSampling.mixins.js",
    "content": "const SubSamplingMixins = (BaseSamplingClass) => class extends BaseSamplingClass{\n    /**\n     * Perform uniform sample a sub set of Ids given the candidate list\n     * @param { Number } samplingSize\n     * @param { Array|Number } candidateList - list of candidates or size of candidate list\n     * @param { Boolean } [replacable=true] - if true, no duplicated sampling Id returned\n     * @returns { Array } array of sampled Ids\n     */\n    subSampling(samplingSize, candidateList, replacable=true){\n        const R = this.R, Random = this.Random;\n        let candidates = Array.isArray(candidateList)?R.clone(candidateList):R.range(0, candidateList);\n        if(candidates.length === 0){\n            throw Error('candidate length should be positive');\n        }\n        let samples = [], takenIdxs = R.clone(candidates);\n        const GenNewCandidateIdx = ()=>Random.int(0, candidates.length-1);\n        while(samples.length < samplingSize){\n            let idx = GenNewCandidateIdx();\n            if(!replacable && takenIdxs[idx]===null){\n                continue;\n            }\n            samples = [...samples, candidates[idx]];\n            if(!replacable){\n                takenIdxs[idx]=null;//non replaceable\n            }\n        }    \n        return samples;\n    }\n};\nexport default SubSamplingMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/src/subSampling.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 701,
    "kind": "class",
    "name": "SubSamplingMixins",
    "memberof": "packages/causality-sampling/src/subSampling.mixins.js",
    "static": true,
    "longname": "packages/causality-sampling/src/subSampling.mixins.js~SubSamplingMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-sampling/src/subSampling.mixins.js",
    "importStyle": "SubSamplingMixins",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseSamplingClass"
    ]
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "subSampling",
    "memberof": "packages/causality-sampling/src/subSampling.mixins.js~SubSamplingMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-sampling/src/subSampling.mixins.js~SubSamplingMixins#subSampling",
    "access": "public",
    "description": "Perform uniform sample a sub set of Ids given the candidate list",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Array } array of sampled Ids"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Number "
        ],
        "spread": false,
        "optional": false,
        "name": "samplingSize",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Array",
          "Number "
        ],
        "spread": false,
        "optional": false,
        "name": "candidateList",
        "description": "list of candidates or size of candidate list"
      },
      {
        "nullable": null,
        "types": [
          " Boolean "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "replacable",
        "description": "if true, no duplicated sampling Id returned"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Array "
      ],
      "spread": false,
      "description": "array of sampled Ids"
    }
  },
  {
    "__docId__": 703,
    "kind": "file",
    "name": "packages/causality-storage/src/CSVFile.mixins.js",
    "content": "import { csvUtils } from 'causal-net.utils';\n/** \n * This CSVFileMixins class provide mixins for handle read/write/fetch csv content\n * @class CSVFileMixins\n * @experiment\n * @extends { StorageClass } \n */\nconst CSVFileMixins = (StorageClass)=> class extends StorageClass{\n    /**\n     * Read CSV content as item array given the file path\n     * @param { String } filePath - full file path \n     * @returns { Promise } Array content promise \n     */\n    async readCSVFile(filePath){\n        return await this.readFile(filePath);\n    }\n    /**\n     * @param  {} filePath\n     * @param  {} data\n     */\n    async writeCSVFile(filePath, parsedData){\n        return await this.writeFile(filePath, parsedData);\n    }\n\n    /**\n     * fetch CSV file, transform to get raw pixel data and save to file at the filePath\n     * @param { Url } url - url for png file\n     * @param { String } filePath - file name to save content\n     * @returns { Promise } Array content promiser \n     */\n    async fetchCSVFile(url, filePath){\n        let data = await csvUtils.fetchCSV(url);\n        return await this.writePNGFile(filePath, data);\n    }\n};\nexport default CSVFileMixins;\n    ",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/CSVFile.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 704,
    "kind": "class",
    "name": "CSVFileMixins",
    "memberof": "packages/causality-storage/src/CSVFile.mixins.js",
    "static": true,
    "longname": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/CSVFile.mixins.js",
    "importStyle": "CSVFileMixins",
    "description": "This CSVFileMixins class provide mixins for handle read/write/fetch csv content",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CSVFileMixins"
      },
      {
        "tagName": "@experiment",
        "tagValue": ""
      }
    ],
    "interface": false,
    "extends": [
      " StorageClass "
    ]
  },
  {
    "__docId__": 705,
    "kind": "method",
    "name": "readCSVFile",
    "memberof": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins#readCSVFile",
    "access": "public",
    "description": "Read CSV content as item array given the file path",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Array content promise "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "full file path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Array content promise"
    }
  },
  {
    "__docId__": 706,
    "kind": "method",
    "name": "writeCSVFile",
    "memberof": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins#writeCSVFile",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "fetchCSVFile",
    "memberof": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/CSVFile.mixins.js~CSVFileMixins#fetchCSVFile",
    "access": "public",
    "description": "fetch CSV file, transform to get raw pixel data and save to file at the filePath",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Array content promiser "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Url "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for png file"
      },
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "file name to save content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Array content promiser"
    }
  },
  {
    "__docId__": 708,
    "kind": "file",
    "name": "packages/causality-storage/src/PNGFile.mixins.js",
    "content": "import { pngUtils } from 'causal-net.utils';\n/**\n * This LevelJSMixins class provide mixins for handle read/write/fetch png content\n * @class PNGFileMixins\n * @extends {  BaseStorage } \n */\nconst PNGFileMixins = (StorageClass)=> class extends StorageClass{\n    /**\n     * Read PNG pixel data given the file path\n     * @param { String } filePath - full file path \n     * @returns { Promise } Array content promiser \n     */\n    async readPNGFile(filePath){\n        let item = await this.getItem(filePath, true);\n        return item[filePath];\n    }\n    /**\n     * write raw pixel data as Array to file at filePath\n     * @param  { String } filePath\n     * @param  { Array|ArrayBuffer } imgBuffer\n     * @returns { Promise } Array content promiser \n     */\n    async writePNGFile(filePath, imgBuffer){\n        return await this.writeFile(filePath, imgBuffer);\n    }\n    /**\n     * fetch PNG file, transform to get raw pixel data and save to file at the filePath\n     * @param { Url } url - url for png file\n     * @param { String } filePath - file name to save content\n     * @returns { Promise } Array content promiser \n     */\n    async fetchPNGFile(url, filePath){\n        let data = await pngUtils.fetchPNG(url);\n        return await this.writePNGFile(filePath, data);\n    }\n};\nexport default PNGFileMixins;\n    ",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/PNGFile.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 709,
    "kind": "class",
    "name": "PNGFileMixins",
    "memberof": "packages/causality-storage/src/PNGFile.mixins.js",
    "static": true,
    "longname": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/PNGFile.mixins.js",
    "importStyle": "PNGFileMixins",
    "description": "This LevelJSMixins class provide mixins for handle read/write/fetch png content",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "PNGFileMixins"
      }
    ],
    "interface": false,
    "extends": [
      "  BaseStorage "
    ]
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "readPNGFile",
    "memberof": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins#readPNGFile",
    "access": "public",
    "description": "Read PNG pixel data given the file path",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Array content promiser "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "full file path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Array content promiser"
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "writePNGFile",
    "memberof": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins#writePNGFile",
    "access": "public",
    "description": "write raw pixel data as Array to file at filePath",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Array content promiser "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Array",
          "ArrayBuffer "
        ],
        "spread": false,
        "optional": false,
        "name": "imgBuffer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Array content promiser"
    }
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "fetchPNGFile",
    "memberof": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/PNGFile.mixins.js~PNGFileMixins#fetchPNGFile",
    "access": "public",
    "description": "fetch PNG file, transform to get raw pixel data and save to file at the filePath",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } Array content promiser "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Url "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for png file"
      },
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "file name to save content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "Array content promiser"
    }
  },
  {
    "__docId__": 713,
    "kind": "file",
    "name": "packages/causality-storage/src/index.js",
    "content": "export { default as indexDBStorage } from './indexDBStorage';\nexport { default as StorageMixins } from './storage.mixins';\n\nexport { default as PNGFileMixins } from './PNGFile.mixins';\nexport { default as CSVFileMixins } from './CSVFile.mixins';\nexport { default as TextFileMixins } from './textFile.mixins';\n\n\n\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 714,
    "kind": "file",
    "name": "packages/causality-storage/src/indexDBStorage.js",
    "content": "import { platform } from 'causal-net.utils';\nimport { Store as BaseStorage } from 'causal-net.core';\nimport { default as PNGFileMixins } from './PNGFile.mixins';\nimport { default as TextFileMixins } from './textFile.mixins';\nimport { default as CSVFileMixins } from './CSVFile.mixins';\nimport { default as LevelDownMixins } from './indexDBStorage.mixins.node';\nimport { default as LevelJSMixins } from './indexDBStorage.mixins.web';\n\n/**\n * This indexDBStorage class is the default consistent storage based on \n * [leveldown](https://www.npmjs.com/package/leveldown) storage \n * with support file extends: png, csv, text by those corresponding mixins.\n * { mixWith: { 'node': [LevelDownMixins, TextFileMixins, PNGFileMixins, CSVFileMixins],\n *              'web': [LevelJSMixins, TextFileMixins, PNGFileMixins, CSVFileMixins] } }\n * @class IndexDBStorage\n * @extends {  BaseStorage } \n * @example\n * [EXAMPLE ../examples/storage.babel.js]\n */\nclass IndexDBStorage extends platform.mixWith( BaseStorage, \n                       { 'node': [LevelDownMixins, TextFileMixins, PNGFileMixins, CSVFileMixins],\n                          'web': [LevelJSMixins, TextFileMixins, PNGFileMixins, CSVFileMixins] } ){\n    \n    correctName(filePath){\n        filePath = '/' +filePath;\n        return filePath.replace(/\\/{1,}/g, '/');\n    }\n    /**\n     * Batch operation with Array of ops\n     * @param { String } key\n     * @returns { Promise } key promise\n     * @memberof IndexDBStorage\n     * @example\n     *  let ops = [\n     *   { type: 'put', key: 'temp', value: '123445' },\n     *   { type: 'del', key: 'temp' }];\n     *  //batch does not support 'get' type\n     *  let batchResult = await indexDBStorage.batch(ops);\n     */\n    async batch(ops){\n        return new Promise((resolve, reject)=>{\n            this.store.batch(ops, (err, data)=>{\n                if(err){\n                    this.logger.log({ops, err});\n                    reject('error ops');\n                }\n                else{\n                    resolve(ops);\n                }\n            });\n        });\n    }\n    /**\n     * get list of file base on prefix\n     * @param { String } filePath\n     * @return { Promise } List of filenames \n     * @memberof IndexDBStorage\n     */\n    async getFileList(filePath){\n        filePath = this.correctName(filePath);\n        return await this.getItemList(filePath);\n    }\n\n    /**\n     * delete all files with name match prefix pattern \n     * return list of deleted files\n     * @param { String } filePath - pattern of file path\n     * @returns { Promise } deleted files list promise\n     * @memberof IndexDBStorage\n     */\n    async deleteFileByPrefix(filePath){\n        filePath = this.correctName(filePath);\n        const DelOp = (key)=>({type: 'del', key: key});\n        let fileList = await this.getFileList(filePath);\n        let delFileOps = fileList.map(f=>DelOp(f));\n        return await this.batch(delFileOps);\n    }\n}\n\nexport default new IndexDBStorage();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/indexDBStorage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 715,
    "kind": "class",
    "name": "IndexDBStorage",
    "memberof": "packages/causality-storage/src/indexDBStorage.js",
    "static": true,
    "longname": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/indexDBStorage.js",
    "importStyle": null,
    "description": "This indexDBStorage class is the default consistent storage based on \n[leveldown](https://www.npmjs.com/package/leveldown) storage \nwith support file extends: png, csv, text by those corresponding mixins.\n{ mixWith: { 'node': [LevelDownMixins, TextFileMixins, PNGFileMixins, CSVFileMixins],\n             'web': [LevelJSMixins, TextFileMixins, PNGFileMixins, CSVFileMixins] } }",
    "examples": [
      "import { indexDBStorage } from 'causal-net.storage';\n(async ()=>{\n    await indexDBStorage.writeFile('/temp','12345');\n    let content  = await indexDBStorage.readFile('/temp');\n    console.log({content});\n    \n    //get file list\n    let listFiles = await indexDBStorage.getFileList('/');\n    console.log({listFiles});\n    \n    //fetch png image and save pixel data into file\n    const url = 'https://avatars3.githubusercontent.com/u/43268620?s=200&v=4';\n    await indexDBStorage.fetchPNGFile(url, 'icon');\n    const pixelArray = await indexDBStorage.readPNGFile('icon');\n    console.log({ pixelArray });\n\n    let ops = [\n        { type: 'put', key: 'temp', value: '123445' },\n        { type: 'del', key: 'temp' }];\n    //batch does not support 'get' type\n    let batchResult = await indexDBStorage.batch(ops);\n    console.log({batchResult});\n})().catch(err=>{\n    console.error(err);\n});"
    ],
    "lineNumber": 45,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "IndexDBStorage"
      }
    ],
    "interface": false,
    "extends": [
      "  BaseStorage "
    ]
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "correctName",
    "memberof": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage#correctName",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "batch",
    "memberof": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage#batch",
    "access": "public",
    "description": "Batch operation with Array of ops",
    "examples": [
      " let ops = [\n  { type: 'put', key: 'temp', value: '123445' },\n  { type: 'del', key: 'temp' }];\n //batch does not support 'get' type\n let batchResult = await indexDBStorage.batch(ops);"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } key promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "key promise"
    }
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "getFileList",
    "memberof": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage#getFileList",
    "access": "public",
    "description": "get list of file base on prefix",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "List of filenames"
    }
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "deleteFileByPrefix",
    "memberof": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage#deleteFileByPrefix",
    "access": "public",
    "description": "delete all files with name match prefix pattern \nreturn list of deleted files",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } deleted files list promise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "pattern of file path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "deleted files list promise"
    }
  },
  {
    "__docId__": 720,
    "kind": "variable",
    "name": "indexDBStorage",
    "memberof": "packages/causality-storage/src/indexDBStorage.js",
    "static": true,
    "longname": "packages/causality-storage/src/indexDBStorage.js~indexDBStorage",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/indexDBStorage.js",
    "importStyle": "indexDBStorage",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-storage/src/indexDBStorage.js~IndexDBStorage"
      ]
    }
  },
  {
    "__docId__": 721,
    "kind": "file",
    "name": "packages/causality-storage/src/indexDBStorage.mixins.node.js",
    "content": "/**\n * This LevelDownMixins class provide mixins for implement indexDB-based storage class \n * with [leveldown](https://www.npmjs.com/package/leveldown) storage on node environment\n * @class LevelDownMixins\n * @extends {  StorageClass } \n */\nconst LevelDownMixins = (StorageClass)=> class extends StorageClass{ \n    constructor(){\n        super();\n        try{\n            this.connect('data');\n        }\n        catch(err){\n            this.logger.log('indexDB fails to auto connect with storageName=\\'data\\', please call connect(\\'storageName\\') manually');\n        }\n        \n    }\n    /**\n     * This method must be called to connect with leveldown storage once instance create\n     * @param { String } storageName - storage name\n     */\n    connect(storageName){\n        var leveldown = require('leveldown');\n        this.store = this.levelup(leveldown(storageName));\n    }\n};\nexport default LevelDownMixins;\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/indexDBStorage.mixins.node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 722,
    "kind": "class",
    "name": "LevelDownMixins",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.node.js",
    "static": true,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/indexDBStorage.mixins.node.js",
    "importStyle": "LevelDownMixins",
    "description": "This LevelDownMixins class provide mixins for implement indexDB-based storage class \nwith [leveldown](https://www.npmjs.com/package/leveldown) storage on node environment",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LevelDownMixins"
      }
    ],
    "interface": false,
    "extends": [
      "  StorageClass "
    ]
  },
  {
    "__docId__": 723,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins#connect",
    "access": "public",
    "description": "This method must be called to connect with leveldown storage once instance create",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "storageName",
        "description": "storage name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "member",
    "name": "store",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins",
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.node.js~LevelDownMixins#store",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "file",
    "name": "packages/causality-storage/src/indexDBStorage.mixins.web.js",
    "content": "/**\n * This LevelJSMixins class provide mixins for implement indexDB-based storage class \n * with [level-js](https://www.npmjs.com/package/level-js) storage on web environment\n * @class LevelDownMixins\n * @extends {  StorageClass } \n */\nconst LevelJSMixins = (StorageClass)=> class extends StorageClass{ \n    constructor(){\n        super();\n        this.connect('data');\n    }\n    /**\n     * This method must be called to connect with level-js storage once instance create\n     * @param { String } storageName - storage name\n     */\n    connect(storageName){\n        var leveljs = require('level-js');\n        this.store = this.levelup(leveljs(storageName));\n    }\n};\nexport default LevelJSMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/indexDBStorage.mixins.web.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 727,
    "kind": "class",
    "name": "LevelJSMixins",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.web.js",
    "static": true,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/indexDBStorage.mixins.web.js",
    "importStyle": "LevelJSMixins",
    "description": "This LevelJSMixins class provide mixins for implement indexDB-based storage class \nwith [level-js](https://www.npmjs.com/package/level-js) storage on web environment",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LevelDownMixins"
      }
    ],
    "interface": false,
    "extends": [
      "  StorageClass "
    ]
  },
  {
    "__docId__": 728,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "connect",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins#connect",
    "access": "public",
    "description": "This method must be called to connect with level-js storage once instance create",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "storageName",
        "description": "storage name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "store",
    "memberof": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins",
    "static": false,
    "longname": "packages/causality-storage/src/indexDBStorage.mixins.web.js~LevelJSMixins#store",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "file",
    "name": "packages/causality-storage/src/storage.mixins.js",
    "content": "import { Store as BaseStorage } from 'causal-net.core';\nimport { assert } from 'causal-net.utils';\n/**\n * This indexDBStorage class is the default consistent storage based on \n * [leveldown](https://www.npmjs.com/package/leveldown) storage \n * with support file extends: png, csv, text by those corresponding mixins.\n * mixWith:\n *  - 'node': [LevelDownMixins, TextFileMixins, PNGFileMixins, CSVFileMixins],\n *  - 'web': [LevelJSMixins, TextFileMixins, PNGFileMixins, CSVFileMixins]\n * @class IndexDBStorage\n * @extends {  BaseStorage } \n * @example\n * [EXAMPLE ../examples/storage.mixins.babel.js]\n */\nconst StorageMixins = (BasePipelineClass)=> class extends BasePipelineClass{\n    /**\n     * return file list of current storage\n     * @returns\n     */\n    async storageSummary(){\n        let storage = this.Storage;\n        return await this.storage.getFileList();\n    }\n    \n    /**\n     * set storage instance to pipeline\n     * @param { Object } - storage instance\n     */\n    set Storage(storage){\n        assert.beInstanceOf(storage, BaseStorage);\n        this.storage = storage;\n    }\n    \n    /**\n     * get current storage\n     * @readonly\n     */\n    get Storage(){\n        if(!this.storage){\n            throw Error('storage is not set');\n        }\n        return this.storage;\n    }\n};\nexport default StorageMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/storage.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 732,
    "kind": "class",
    "name": "StorageMixins",
    "memberof": "packages/causality-storage/src/storage.mixins.js",
    "static": true,
    "longname": "packages/causality-storage/src/storage.mixins.js~StorageMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/storage.mixins.js",
    "importStyle": "StorageMixins",
    "description": "This indexDBStorage class is the default consistent storage based on \n[leveldown](https://www.npmjs.com/package/leveldown) storage \nwith support file extends: png, csv, text by those corresponding mixins.\nmixWith:\n - 'node': [LevelDownMixins, TextFileMixins, PNGFileMixins, CSVFileMixins],\n - 'web': [LevelJSMixins, TextFileMixins, PNGFileMixins, CSVFileMixins]",
    "examples": [
      "import { StorageMixins, indexDBStorage } from 'causal-net.storage';\nimport { platform } from 'causal-net.utils';\nimport { Tensor, Store } from 'causal-net.core';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [StorageMixins]){\n    constructor(storage){\n        super();\n        this.Storage = storage;\n    }\n}\nlet pipeline = new SimplePipeline(indexDBStorage);\nconsole.log(pipeline.Storage instanceof Store);"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "IndexDBStorage"
      }
    ],
    "interface": false,
    "extends": [
      "  BaseStorage "
    ]
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "storageSummary",
    "memberof": "packages/causality-storage/src/storage.mixins.js~StorageMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/storage.mixins.js~StorageMixins#storageSummary",
    "access": "public",
    "description": "return file list of current storage",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "set",
    "name": "Storage",
    "memberof": "packages/causality-storage/src/storage.mixins.js~StorageMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/storage.mixins.js~StorageMixins#Storage",
    "access": "public",
    "description": "set storage instance to pipeline",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "storage instance"
      }
    ]
  },
  {
    "__docId__": 735,
    "kind": "member",
    "name": "storage",
    "memberof": "packages/causality-storage/src/storage.mixins.js~StorageMixins",
    "static": false,
    "longname": "packages/causality-storage/src/storage.mixins.js~StorageMixins#storage",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 736,
    "kind": "get",
    "name": "Storage",
    "memberof": "packages/causality-storage/src/storage.mixins.js~StorageMixins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-storage/src/storage.mixins.js~StorageMixins#Storage",
    "access": "public",
    "description": "get current storage",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "file",
    "name": "packages/causality-storage/src/textFile.mixins.js",
    "content": "import { fetch } from 'causal-net.utils';\nconst TextFileMixins = (StorageClass)=> class extends StorageClass{\n    \n    /**\n     * @param  {} filePath\n     */\n    async readFile(filePath){\n        filePath = this.correctName(filePath);\n        let item = await this.getItem(filePath);\n        return item[filePath];\n    }\n    /**\n     * @param  {} filePath\n     * @param  {} data\n     */\n    async writeFile(filePath, data){\n        filePath = this.correctName(filePath);\n        return await this.setItem(filePath, data);\n    }\n\n    async deleteFile(filePath){\n        filePath = this.correctName(filePath);\n        return await this.delItem(filePath);\n    }\n\n    async fetchFile(url, filePath){\n        filePath = this.correctName(filePath);\n        let response = await fetch.fetchData(url);\n        return await this.writeFile(filePath, response);\n    }\n};\nexport default TextFileMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/src/textFile.mixins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 738,
    "kind": "class",
    "name": "TextFileMixins",
    "memberof": "packages/causality-storage/src/textFile.mixins.js",
    "static": true,
    "longname": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-storage/src/textFile.mixins.js",
    "importStyle": "TextFileMixins",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "interface": false,
    "extends": [
      "StorageClass"
    ]
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "readFile",
    "memberof": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins#readFile",
    "access": "public",
    "description": "",
    "lineNumber": 7,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "writeFile",
    "memberof": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins#writeFile",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "deleteFile",
    "memberof": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins#deleteFile",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "fetchFile",
    "memberof": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-storage/src/textFile.mixins.js~TextFileMixins#fetchFile",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "file",
    "name": "packages/causality-utils/src/assert.js",
    "content": "import assert from 'assert';\nimport * as generateSchema from 'generate-schema';\nimport * as Validator from 'ajv';\n/**\n * This Assert class provides asserting methods based on builtin \n * [generate-schema](https://www.npmjs.com/package/generate-schema), \n * and schema checking [ajv](https://www.npmjs.com/package/ajv) \n *\n * @class Assert\n * @example\n * [EXAMPLE ../examples/assert.babel.js]\n */\nclass Assert{\n    /**\n     *Creates an instance of assert.\n     * @memberof assert\n     */\n    constructor(assert, generateSchema, Validator){\n        /** \n         * @private \n         * @type { Object } assert\n        */\n        this.assert = assert;\n        this.generateSchema = generateSchema;\n        this.Validator = Validator;\n    }\n    /**\n     * Try to check if the sample pattern matchs with input value pattern. \n     * Since the auto-learnt sample pattern could be incompleted, \n     * this function usage should follow the examples.\n     * @param { Any } value - input value\n     * @param { Any } sample - sample value pattern\n     * @param { String } [name='sample'] - value name\n     * @memberof assert\n     */\n    seemMatchSample(value, sample, name='sample'){\n        let schema = generateSchema.json(name, sample);\n        delete schema.$schema;\n        let validator = new Validator(); \n        let valid = validator.addSchema(schema, name).validate(name, value);\n        if(!valid){ \n            throw Error(`value ${JSON.stringify(value)} not match schema \\n${JSON.stringify(schema)}`);\n        }\n    }\n    /**\n     * assert object to be instance of class\n     * @param { Object } instance\n     * @param { Class } targetClass\n     * @memberof assert\n     */\n    beInstanceOf(instance, targetClass){\n        if(targetClass === String){\n            if(typeof(instance) !== 'string'){\n                throw Error(`${JSON.stringify(instance)} must be type of ${targetClass.name}`);\n            }\n        }\n        if(targetClass === Function){\n            if(typeof(instance) !== 'function'){\n                throw Error(`${JSON.stringify(instance)} must be type of ${targetClass.name}`);\n            }\n        }\n        else if(!(instance instanceof targetClass)){\n            throw Error(`${JSON.stringify(instance)} must be instance of ${targetClass.name}`);\n        }\n    }\n} \n\nexport default new Assert(assert, generateSchema, Validator);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/assert.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 744,
    "kind": "class",
    "name": "Assert",
    "memberof": "packages/causality-utils/src/assert.js",
    "static": true,
    "longname": "packages/causality-utils/src/assert.js~Assert",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/assert.js",
    "importStyle": null,
    "description": "This Assert class provides asserting methods based on builtin \n[generate-schema](https://www.npmjs.com/package/generate-schema), \nand schema checking [ajv](https://www.npmjs.com/package/ajv) ",
    "examples": [
      "import { assert } from 'causal-net.utils';\nassert.seemMatchSample([2,2,3], [1,2,3], 'validate sample');\nassert.seemMatchSample('sample text', 'pattern text', 'validate sample');\nassert.seemMatchSample( { 'text' : 'pattern text 1', 'number' : 1123 }, \n                        { 'text' : 'pattern text', 'number' : 1123 } , 'validate sample');\ntry{\n    assert.seemMatchSample(['2',2,3], [1,2,3], 'validate sample');\n}\ncatch(err){\n    //error due to mismatch schema\n    console.log(err.message);\n};\nclass A{};\nlet a = new A();\nassert.beInstanceOf(a, A);\ntry{\n    assert.beInstanceOf('1', A);\n}\ncatch(err){\n    console.log(err.message);\n}"
    ],
    "lineNumber": 34,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Assert"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 745,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#constructor",
    "access": "public",
    "description": "Creates an instance of assert.",
    "lineNumber": 39
  },
  {
    "__docId__": 746,
    "kind": "member",
    "name": "assert",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#assert",
    "access": "private",
    "description": "",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        " Object "
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 747,
    "kind": "member",
    "name": "generateSchema",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#generateSchema",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "member",
    "name": "Validator",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#Validator",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "method",
    "name": "seemMatchSample",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#seemMatchSample",
    "access": "public",
    "description": "Try to check if the sample pattern matchs with input value pattern. \nSince the auto-learnt sample pattern could be incompleted, \nthis function usage should follow the examples.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          " Any "
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "input value"
      },
      {
        "nullable": null,
        "types": [
          " Any "
        ],
        "spread": false,
        "optional": false,
        "name": "sample",
        "description": "sample value pattern"
      },
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'sample'",
        "defaultRaw": "'sample'",
        "name": "name",
        "description": "value name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 750,
    "kind": "method",
    "name": "beInstanceOf",
    "memberof": "packages/causality-utils/src/assert.js~Assert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/assert.js~Assert#beInstanceOf",
    "access": "public",
    "description": "assert object to be instance of class",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          " Object "
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          " Class "
        ],
        "spread": false,
        "optional": false,
        "name": "targetClass",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 751,
    "kind": "variable",
    "name": "assert",
    "memberof": "packages/causality-utils/src/assert.js",
    "static": true,
    "longname": "packages/causality-utils/src/assert.js~assert",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/assert.js",
    "importStyle": "assert",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/assert.js~Assert"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "file",
    "name": "packages/causality-utils/src/bufferUtils.js",
    "content": "import { default as  fetch } from './fetch';\n/**\n * This BufferUtils class provide methods\n * for fetch/write/read buffer\n * @todo: verify on web environment\n * @class BufferUtils\n */\nclass BufferUtils{\n    \n    constructor(fetch){\n        this.fetch = fetch;\n        this.fs = require('fs');\n    }\n    \n    /**\n     * fetch buffer content from given url\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof BufferUtils\n     */\n    async fetchBuffer(url){\n        let data = await fetch.fetchData(url);\n        return await new Buffer.from(data);\n    }\n\n    /**\n     * write buffer content from given content\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof BufferUtils\n     */\n    async writeBuffer(data, filePath){\n        const fs = this.fs;\n        if(!fs.writeFile){\n            throw Error('method is not supported');\n        }\n        return new Promise(async (resolve, reject)=>{\n            fs.writeFile(filePath, data, (err)=>{\n                if(err){\n                    reject(err);\n                }\n                else{\n                    resolve(filePath);\n                }\n            });\n        });\n    }\n\n    /**\n     * fetch buffer content from given url\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof BufferUtils\n     */\n    readBuffer(filePath){\n        const fs = this.fs;\n        if(!fs.readFile){\n            throw Error('method is not supported');\n        }\n        return new Promise(async (resolve, reject)=>{\n            fs.readFile(filePath, (err, data)=>{\n                if(err){\n                    reject(err);\n                }\n                else{\n                    resolve(Buffer.from(data));\n                }\n            });\n        });\n    }\n}\nexport default new BufferUtils();",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/bufferUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "class",
    "name": "BufferUtils",
    "memberof": "packages/causality-utils/src/bufferUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/bufferUtils.js",
    "importStyle": null,
    "description": "This BufferUtils class provide methods\nfor fetch/write/read buffer\n@todo: verify on web environment",
    "lineNumber": 8,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BufferUtils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 754,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "fetch",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#fetch",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "member",
    "name": "fs",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#fs",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "method",
    "name": "fetchBuffer",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#fetchBuffer",
    "access": "public",
    "description": "fetch buffer content from given url",
    "lineNumber": 22,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "writeBuffer",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#writeBuffer",
    "access": "public",
    "description": "write buffer content from given content",
    "lineNumber": 34,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "readBuffer",
    "memberof": "packages/causality-utils/src/bufferUtils.js~BufferUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/bufferUtils.js~BufferUtils#readBuffer",
    "access": "public",
    "description": "fetch buffer content from given url",
    "lineNumber": 58,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 760,
    "kind": "variable",
    "name": "bufferUtils",
    "memberof": "packages/causality-utils/src/bufferUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/bufferUtils.js~bufferUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/bufferUtils.js",
    "importStyle": "bufferUtils",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/bufferUtils.js~BufferUtils"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "file",
    "name": "packages/causality-utils/src/csvUtils.js",
    "content": "import { default as  fetch } from './fetch';\nimport { default as CSV } from 'csv-parser';\nimport { default as stream } from './stream';\n/**\n * This CSVUtils class use [csv-parser](https://www.npmjs.com/package/csv-parser)\n * for csv parsing and transform csv data from fetch.\n * @todo: verify on web environment\n * @class CSVUtils\n */\nclass CSVUtils{\n    constructor(CSV, fetch){\n        this.csv = CSV;\n        this.fetch = fetch;\n        this.fs = require('fs');\n    }\n    /**\n     * return csv parser instance\n     * @readonly\n     * @memberof csvUtils\n     */\n    get CoreCSV(){\n        return this.csv;\n    }\n    /**\n     * fetch csv content from given url\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof csvUtils\n     */\n    async fetchCSV(url){\n        return new Promise(async (resolve, reject)=>{\n            let reader = await fetch.streamData(url);\n            let data = [];\n            let csv = CSV();\n            let csvHeaders = [];\n            csv.on('headers', (headers) => csvHeaders=headers);\n            csv.on('end', ()=>{resolve(data);});\n            csv.on('data',(row)=>{\n                data.push(csvHeaders.reduce((s,h)=>{\n                    s[h]=row[h];\n                    return s;\n                },{}));\n            });\n            reader.pipe(csv);\n        });\n    }\n\n    async writeCSV(header, data, filePath){\n        const fs = this.fs;        \n        if(!fs.createWriteStream){\n            throw Error('method is not supported');\n        }\n        return new Promise((resolve, reject)=>{\n            let reader = stream.makeReadable();\n            reader.pipe(fs.createWriteStream(filePath))\n                    .on('close', ()=>{ resolve(filePath); })\n                    .on('error', ()=>{ reject(`error or read png data from file ${filePath}`); });\n            let strHeader = header.join(',');\n            reader.push(strHeader);\n            data.forEach(row=>{ \n                let strRow = '\\n'+header.map(h=>{\n                    let col = row[h];\n                    if(col.match(/[\\s,\"]/)){\n                        return '\"' + col.replace(/\"/g, '\"\"') + '\"';\n                    }\n                    return col;\n                }).join(',');\n                reader.push(strRow);\n            });\n            reader.push(null);\n        });\n    }\n\n    async readCSV(filePath){\n        const fs = this.fs, CSV = this.csv;\n        if(!fs.createReadStream){\n            throw Error('method is not supported');\n        }\n        return new Promise((resolve, reject)=>{\n            let data = [];\n            let csv = CSV();\n            let csvHeaders = [];\n            csv.on('headers', (headers) => csvHeaders=headers);\n            csv.on('end', ()=>{resolve(data);});\n            csv.on('data',(row)=>{\n                data.push(csvHeaders.reduce((s,h)=>{\n                    s[h]=row[h];\n                    return s;\n                },{}));\n            });\n            fs.createReadStream(filePath).pipe(csv);\n        });\n    }\n\n    async chunkCSV(filePath, recordPerChunk, destFilePattern){\n        let data = await this.readCSV(filePath);\n        let headers = Object.keys(data[0]), writeCounter = 0;\n        const writeFile = async (headers, data)=>{\n            let outFile = destFilePattern.replace('{}', writeCounter);\n            await this.writeCSV(headers, data, outFile);\n            writeCounter += 1;\n            return writeCounter;\n        };\n        for(let chunkIdx=0, len=data.length; chunkIdx<len; chunkIdx+=recordPerChunk) {\n            let chunkData = data.slice(chunkIdx,chunkIdx+recordPerChunk);\n            await writeFile(headers, chunkData);\n        };\n        return writeCounter;\n    }\n}\nexport default new CSVUtils(CSV, fetch);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/csvUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 762,
    "kind": "class",
    "name": "CSVUtils",
    "memberof": "packages/causality-utils/src/csvUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/csvUtils.js",
    "importStyle": null,
    "description": "This CSVUtils class use [csv-parser](https://www.npmjs.com/package/csv-parser)\nfor csv parsing and transform csv data from fetch.\n@todo: verify on web environment",
    "lineNumber": 10,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "CSVUtils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 763,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "csv",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#csv",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "fetch",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#fetch",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "fs",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#fs",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "get",
    "name": "CoreCSV",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#CoreCSV",
    "access": "public",
    "description": "return csv parser instance",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "fetchCSV",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#fetchCSV",
    "access": "public",
    "description": "fetch csv content from given url",
    "lineNumber": 31,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "writeCSV",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#writeCSV",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "header",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "readCSV",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#readCSV",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "chunkCSV",
    "memberof": "packages/causality-utils/src/csvUtils.js~CSVUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/csvUtils.js~CSVUtils#chunkCSV",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "filePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "recordPerChunk",
        "types": [
          "*"
        ]
      },
      {
        "name": "destFilePattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "variable",
    "name": "cSVUtils",
    "memberof": "packages/causality-utils/src/csvUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/csvUtils.js~cSVUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/csvUtils.js",
    "importStyle": "cSVUtils",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/csvUtils.js~CSVUtils"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "file",
    "name": "packages/causality-utils/src/fetch.js",
    "content": "import fetch from 'cross-fetch';\nimport { default as platform } from './platform';\nimport { default as NodeStreamMixins } from './fetchStreamMixins.node';\nimport { default as WebStreamMixins } from './fetchStreamMixins.web';\n\nclass Basefetch{\n    constructor(fetch){\n        this.fetch = fetch;\n    }\n}\n\n/**\n * This isomorphic fetch class is mixed with:\n * - NodeStreamMixins  \n * - WebStreamMixins\n * @class Fetch\n * @extends Basefetch\n */\nclass Fetch extends platform.mixWith(Basefetch, {'node': [NodeStreamMixins], 'web':[WebStreamMixins]}){\n    constructor(fetch){\n        super(fetch);\n    }\n    /**\n     * fetch text content given the url\n     * @param { String } url\n     * @returns { Promise } promise of content\n     */\n    fetchData(url){\n        return new Promise((resolve, reject)=>{\n            fetch(url).then(response=>{\n                if (response.status >= 400) {\n                    console.error(response.status);\n                    reject(\"Bad response from server\");\n                }\n                resolve(response.text());\n            });\n        });\n    }\n    /**\n     * fetch json content given the url \n     * @param { String } url\n     * @returns { promise } promise of content\n     */\n    fetchJson(url){\n        return new Promise(async (resolve, reject)=>{\n            fetch(url).then(response=>{\n                if (response.status >= 400) {\n                    console.error(response.status);\n                    reject(\"Bad response from server\");\n                }\n                resolve(response.json());\n            });\n        });\n    }\n}\n\nexport default new Fetch(fetch);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/fetch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 774,
    "kind": "class",
    "name": "Basefetch",
    "memberof": "packages/causality-utils/src/fetch.js",
    "static": true,
    "longname": "packages/causality-utils/src/fetch.js~Basefetch",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-utils/src/fetch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 775,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/fetch.js~Basefetch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/fetch.js~Basefetch#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 776,
    "kind": "member",
    "name": "fetch",
    "memberof": "packages/causality-utils/src/fetch.js~Basefetch",
    "static": false,
    "longname": "packages/causality-utils/src/fetch.js~Basefetch#fetch",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "class",
    "name": "Fetch",
    "memberof": "packages/causality-utils/src/fetch.js",
    "static": true,
    "longname": "packages/causality-utils/src/fetch.js~Fetch",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/fetch.js",
    "importStyle": null,
    "description": "This isomorphic fetch class is mixed with:\n- NodeStreamMixins  \n- WebStreamMixins",
    "lineNumber": 19,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Fetch"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 778,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/fetch.js~Fetch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/fetch.js~Fetch#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "fetchData",
    "memberof": "packages/causality-utils/src/fetch.js~Fetch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/fetch.js~Fetch#fetchData",
    "access": "public",
    "description": "fetch text content given the url",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } promise of content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "promise of content"
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "fetchJson",
    "memberof": "packages/causality-utils/src/fetch.js~Fetch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/fetch.js~Fetch#fetchJson",
    "access": "public",
    "description": "fetch json content given the url ",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ promise } promise of content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " promise "
      ],
      "spread": false,
      "description": "promise of content"
    }
  },
  {
    "__docId__": 781,
    "kind": "variable",
    "name": "fetch",
    "memberof": "packages/causality-utils/src/fetch.js",
    "static": true,
    "longname": "packages/causality-utils/src/fetch.js~fetch",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/fetch.js",
    "importStyle": "fetch",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/fetch.js~Fetch"
      ]
    }
  },
  {
    "__docId__": 782,
    "kind": "file",
    "name": "packages/causality-utils/src/fetchStreamMixins.node.js",
    "content": "import fetch from 'cross-fetch';\n/**\n * mixins function for fetch on node environment\n * @class\n * @param { Class } FetchClass\n * @returns { Class } Fetclass - class with extended methods\n */\nconst NodeStreamMixins = (FetchClass)=> class extends FetchClass{ \n    /**\n     * @param { String } url - url for content\n     * @returns { Readable } content\n     * @memberof fetch\n     */\n    async streamData(url){\n        const response = await fetch(url);\n        if (response.status >= 400) {\n            throw Error(\"Bad response from server\");\n        }\n        return response.body;\n    }\n};\nexport default NodeStreamMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/fetchStreamMixins.node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 783,
    "kind": "class",
    "name": "NodeStreamMixins",
    "memberof": "packages/causality-utils/src/fetchStreamMixins.node.js",
    "static": true,
    "longname": "packages/causality-utils/src/fetchStreamMixins.node.js~NodeStreamMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/fetchStreamMixins.node.js",
    "importStyle": "NodeStreamMixins",
    "description": "mixins function for fetch on node environment",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{ Class } Fetclass - class with extended methods"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Class "
        ],
        "spread": false,
        "optional": false,
        "name": "FetchClass",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Class "
      ],
      "spread": false,
      "description": "Fetclass - class with extended methods"
    },
    "interface": false,
    "extends": [
      "FetchClass"
    ]
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "streamData",
    "memberof": "packages/causality-utils/src/fetchStreamMixins.node.js~NodeStreamMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/fetchStreamMixins.node.js~NodeStreamMixins#streamData",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Readable } content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Readable "
      ],
      "spread": false,
      "description": "content"
    }
  },
  {
    "__docId__": 785,
    "kind": "file",
    "name": "packages/causality-utils/src/fetchStreamMixins.web.js",
    "content": "import fetchStream from 'fetch-readablestream';\n\n/**\n * provide streamData method for web environment\n * @class\n * @param { Class } FetchClass\n * @returns { Class } FetchClass - class with extended methods\n */\nimport { default as streamUtils } from './stream';\nconst WebStreamMixins = (FetchClass)=> class extends FetchClass{ \n    /**\n     * Stream content given the url\n     * @param { String } url - url for content\n     * @returns { Readable } content\n     */\n    async streamData(url){\n        let response = await fetchStream(url);\n        if(response.status >= 400){\n            console.error(response.status);\n            reject(\"Bad response from server\");\n        }\n        const streamReader = response.body.getReader();\n        let reader = streamUtils.makeReadable();\n        const recusiveRead = ()=>{\n            return new Promise((resolve, reject)=>{\n                streamReader.read().then(({ value, done })=>{\n                    if (done) {\n                        reader.push(null);\n                        resolve(false);\n                    }\n                    else{\n                        reader.push(Buffer.from(value));\n                        resolve(true);\n                    }\n                });\n            });\n        };\n        const ReadNext = (recusiveRead)=>{\n            recusiveRead().then(hasNext=>{\n                if(hasNext){\n                    ReadNext(recusiveRead);\n                }\n            });\n        };\n        ReadNext(recusiveRead);\n        return reader;\n    }\n};\n\nexport default WebStreamMixins;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/fetchStreamMixins.web.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 786,
    "kind": "class",
    "name": "WebStreamMixins",
    "memberof": "packages/causality-utils/src/fetchStreamMixins.web.js",
    "static": true,
    "longname": "packages/causality-utils/src/fetchStreamMixins.web.js~WebStreamMixins",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/fetchStreamMixins.web.js",
    "importStyle": "WebStreamMixins",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "FetchClass"
    ]
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "streamData",
    "memberof": "packages/causality-utils/src/fetchStreamMixins.web.js~WebStreamMixins",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/fetchStreamMixins.web.js~WebStreamMixins#streamData",
    "access": "public",
    "description": "Stream content given the url",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Readable } content"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Readable "
      ],
      "spread": false,
      "description": "content"
    }
  },
  {
    "__docId__": 788,
    "kind": "file",
    "name": "packages/causality-utils/src/index.js",
    "content": "export { default as platform } from './platform';\nexport { default as fetch } from './fetch';\nexport { default as stream } from './stream';\nexport { default as assert } from './assert';\n\nexport { default as pngUtils } from './pngUtils';\nexport { default as csvUtils } from './csvUtils';\nexport { default as jsonUtils } from './jsonUtils';\nexport { default as bufferUtils } from './bufferUtils';\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 789,
    "kind": "file",
    "name": "packages/causality-utils/src/jsonUtils.js",
    "content": "import { default as  fetch } from './fetch';\nimport { default as json5 } from 'json5';\n/**\n * This JSONUtils class provide wrapper for \n * [json5](https://www.npmjs.com/package/json5)\n * for fetch/write/read json\n * @todo: verify on web environment\n * @class JSONUtils\n */\nclass JSONUtils{\n    constructor(json5, fetch){\n        this.json = json5;\n        this.fetch = fetch;\n        this.fs = require('fs');\n    }\n    /**\n     * return json5 instance\n     * @readonly\n     * @memberof JSONUtils\n     */\n    get CoreJSON(){\n        return this.json;\n    }\n    /**\n     * fetch json content from given url\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof JSONUtils\n     */\n    async fetchJSON(url){\n        return await fetch.fetchJson(url);\n    }\n\n    /**\n     * write json content from given content\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof JSONUtils\n     */\n    async writeJSON(data, filePath){\n        const fs = this.fs, json = this.json;\n        if(!fs.writeFile){\n            throw Error('method is not supported');\n        }\n        return new Promise(async (resolve, reject)=>{\n            fs.writeFile(filePath, json.stringify(data), (err)=>{\n                if(err){\n                    reject(err);\n                }\n                else{\n                    resolve(filePath);\n                }\n            });\n        });\n    }\n\n    /**\n     * fetch json content from given url\n     * @todo enhance reject case\n     * @param { URL } url - url for csv content\n     * @returns { Promise } - data promise with data if success\n     * @memberof JSONUtils\n     */\n    async readJSON(filePath){\n        const fs = this.fs, json = this.json;\n        if(!fs.readFile){\n            throw Error('method is not supported');\n        }\n        return new Promise(async (resolve, reject)=>{\n            fs.readFile(filePath, (err, data)=>{\n                if(err){\n                    reject(err);\n                }\n                else{\n                    resolve(json.parse(data));\n                }\n            });\n        });\n    }\n\n    async queryJSON(link){\n        if(link.startsWith('http')){\n            return await this.fetchJSON(link);\n        }\n        else{\n            return await this.readJSON(link);\n        }\n    }\n}\n\nconst jsonUtils = new JSONUtils(json5, fetch);\nexport default jsonUtils;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/jsonUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 790,
    "kind": "class",
    "name": "JSONUtils",
    "memberof": "packages/causality-utils/src/jsonUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/jsonUtils.js",
    "importStyle": null,
    "description": "This JSONUtils class provide wrapper for \n[json5](https://www.npmjs.com/package/json5)\nfor fetch/write/read json\n@todo: verify on web environment",
    "lineNumber": 10,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "JSONUtils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 791,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 792,
    "kind": "member",
    "name": "json",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#json",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "member",
    "name": "fetch",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#fetch",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "member",
    "name": "fs",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#fs",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 795,
    "kind": "get",
    "name": "CoreJSON",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#CoreJSON",
    "access": "public",
    "description": "return json5 instance",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "fetchJSON",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#fetchJSON",
    "access": "public",
    "description": "fetch json content from given url",
    "lineNumber": 31,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "writeJSON",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#writeJSON",
    "access": "public",
    "description": "write json content from given content",
    "lineNumber": 42,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "readJSON",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#readJSON",
    "access": "public",
    "description": "fetch json content from given url",
    "lineNumber": 66,
    "todo": [
      "enhance reject case"
    ],
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } - data promise with data if success"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for csv content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise with data if success"
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "queryJSON",
    "memberof": "packages/causality-utils/src/jsonUtils.js~JSONUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/jsonUtils.js~JSONUtils#queryJSON",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "link",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 800,
    "kind": "variable",
    "name": "jsonUtils",
    "memberof": "packages/causality-utils/src/jsonUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/jsonUtils.js~jsonUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/jsonUtils.js",
    "importStyle": "jsonUtils",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/jsonUtils.js~JSONUtils"
      ]
    }
  },
  {
    "__docId__": 801,
    "kind": "file",
    "name": "packages/causality-utils/src/platform.js",
    "content": "import platform from 'platform';\nimport process from 'process';\n\nconst platformMapping = (name)=>{\n    if(name === 'Node.js'){\n        return 'node';\n    }\n    else{\n        return 'web';\n    }\n};\n/**\n * This Platform class wrap [platform](https://www.npmjs.com/package/platform) \n * for checking current platform either 'node' or 'web'. And advance mixins\n * @todo: extend more platform in future\n * @class Platform\n * @example\n * [EXAMPLE ../examples/platform.babel.js]\n */\nclass Platform{\n    /**\n     *Creates an instance of platform.\n     * @memberof Platform\n     */\n    constructor(platform){\n        this.platform = platform;\n        if(typeof process !== 'undefined' && process.pid) {\n            this.pid = process.pid;\n        }\n        else{\n            this.pid = null;\n        }\n    }\n    /**\n     * return current process pid on node or `null` on web\n     * @readonly\n     * @memberof Platform\n     */\n    get PID(){\n        return this.pid;\n    }\n\n    currentPlatform(){\n        return this.platform.parse();\n    }\n    /**\n     * Enhanced mixins for based class and list of mixins\n     * @param { Class } BaseClass - base class\n     * @param { List } mixins - list of mixins function\n     * @returns { Class } \n     * @memberof Platform\n     */\n    mixWith(BaseClass, mixins){\n        var mixinsList = [];\n        if(Array.isArray(mixins)){\n            mixinsList = mixins;\n        }\n        else{\n            const PfName = platformMapping(platform.parse()['name']);\n            mixinsList = mixins[PfName];\n        }\n        if(mixinsList === undefined){\n            throw Error(`${PfName} not found in mixins`);\n        }\n        return mixinsList.reduce((c, mixin) => {\n            if(typeof c === \"function\"){\n                return mixin(c);\n            }\n            else{\n                throw Error(`${JSON.stringify(c)} is not support mixins with ${BaseClass.name}`);\n            }\n        }, BaseClass);\n    }\n};\n\nexport default new Platform(platform);\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/platform.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 802,
    "kind": "function",
    "name": "platformMapping",
    "memberof": "packages/causality-utils/src/platform.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "packages/causality-utils/src/platform.js~platformMapping",
    "access": "public",
    "export": false,
    "importPath": "causal-net/packages/causality-utils/src/platform.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 803,
    "kind": "class",
    "name": "Platform",
    "memberof": "packages/causality-utils/src/platform.js",
    "static": true,
    "longname": "packages/causality-utils/src/platform.js~Platform",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/platform.js",
    "importStyle": null,
    "description": "This Platform class wrap [platform](https://www.npmjs.com/package/platform) \nfor checking current platform either 'node' or 'web'. And advance mixins\n@todo: extend more platform in future",
    "examples": [
      "import {Platform} from 'causal-net.utils';\nconsole.log(Platform.currentPlatform());\nclass A{\n    constructor(){\n    }\n    sayA(){\n        console.log('say A');\n    }\n}\nconst AMixinsNode = (Base)=>class extends Base{\n    sayA(){\n        console.log('mixins on node');\n        super.sayA();\n    }\n    sayAExtend(){\n        console.log('say A with mixins on node');\n    }\n}\nconst AMixinsWeb = (Base)=>class extends Base{\n    sayAExtend(){\n        console.log('say A with mixins on web');\n    }\n}\nclass AExtends extends Platform.mixWith(A, \n    {'node': [AMixinsNode], 'web': [AMixinsWeb]}){\n        constructor(){\n            super();\n        }\n    }\nconst a = new AExtends();\na.sayA();\na.sayAExtend();"
    ],
    "lineNumber": 51,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Platform"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 804,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#constructor",
    "access": "public",
    "description": "Creates an instance of platform.",
    "lineNumber": 56
  },
  {
    "__docId__": 805,
    "kind": "member",
    "name": "platform",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#platform",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "member",
    "name": "pid",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#pid",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 808,
    "kind": "get",
    "name": "PID",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#PID",
    "access": "public",
    "description": "return current process pid on node or `null` on web",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "method",
    "name": "currentPlatform",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#currentPlatform",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "mixWith",
    "memberof": "packages/causality-utils/src/platform.js~Platform",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/platform.js~Platform#mixWith",
    "access": "public",
    "description": "Enhanced mixins for based class and list of mixins",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Class } "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Class "
        ],
        "spread": false,
        "optional": false,
        "name": "BaseClass",
        "description": "base class"
      },
      {
        "nullable": null,
        "types": [
          " List "
        ],
        "spread": false,
        "optional": false,
        "name": "mixins",
        "description": "list of mixins function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Class "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 811,
    "kind": "variable",
    "name": "platform",
    "memberof": "packages/causality-utils/src/platform.js",
    "static": true,
    "longname": "packages/causality-utils/src/platform.js~platform",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/platform.js",
    "importStyle": "platform",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/platform.js~Platform"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "file",
    "name": "packages/causality-utils/src/pngUtils.js",
    "content": "import { default as  fetch } from './fetch';\nimport { PNG } from 'pngjs3';\n/**\n * This PNGUtils class use [pngjs3](https://www.npmjs.com/package/pngjs3)\n * for png parsing and transform png data from fetch.\n * @class pngUtils\n */\nclass PNGUtils{\n    constructor(PNG){\n        this.png = PNG;\n        this.fs = require('fs');\n    }\n    /**\n     * get pngjs3 instance\n     * @readonly\n     * @memberof PNGUtils\n     */\n    get CorePNG(){\n        return this.png;\n    }\n    /**\n     * fetch and tranform png file to raw array from url\n     * @param { URL } url - url for PNG file\n     * @returns { Promise } data promise - return Array if success or reject with error message\n     * @memberof PNGUtils\n     */\n    async fetchPNG(url){\n        return new Promise(async (resolve, reject)=>{\n            let reader = await fetch.streamData(url);\n            let png = new PNG();\n            png.on('parsed', function(){\n                resolve(this.data);\n            });\n            png.on('error',(err)=>{\n                console.error(err);\n                reject(err);\n            });\n            reader.pipe(png);\n        });\n    }\n    /**\n     * write and tranform png file to raw array from filepath\n     * @param { URL } url - url for PNG file\n     * @returns { Promise } data promise - return Array if success or reject with error message\n     * @memberof PNGUtils\n     */\n    async writePNG(data, size, filePath){\n        const fs = this.fs;\n        if(!fs.createWriteStream){\n            throw Error('method is not supported');\n        }\n        return new Promise((resolve, reject)=>{\n            const [width, height, depth] = size;\n            let png = new PNG({ filterType: depth, width: width, height: height });\n            png.data = data;\n            png.pack().pipe(fs.createWriteStream(filePath))\n                    .on('close', ()=>{ resolve(filePath); })\n                    .on('error', ()=>{ reject(`error or read png data from file ${filePath}`); });\n        });\n    }\n    /**\n     * read and tranform png file to raw array from filepath\n     * @param { String } filePath - url for PNG file\n     * @returns { Promise } data promise - return Array if success or reject with error message\n     * @memberof PNGUtils\n     */\n    async readPNG(filePath){\n        const fs = this.fs;\n        if(!fs.createReadStream){\n            throw Error('method is not supported');\n        }\n        return new Promise((resolve, reject)=>{\n            fs.createReadStream(filePath)\n                .pipe(new PNG())\n                .on('parsed', function() {\n                    resolve(this.data);\n                })\n                .on('error', ()=>{\n                    reject(`error or read png data from file ${filePath}`);\n                });\n        });\n    }\n}\nexport default new PNGUtils(PNG);",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/pngUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 813,
    "kind": "class",
    "name": "PNGUtils",
    "memberof": "packages/causality-utils/src/pngUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/pngUtils.js",
    "importStyle": null,
    "description": "This PNGUtils class use [pngjs3](https://www.npmjs.com/package/pngjs3)\nfor png parsing and transform png data from fetch.",
    "lineNumber": 8,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "pngUtils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 814,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 815,
    "kind": "member",
    "name": "png",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#png",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "fs",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#fs",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 817,
    "kind": "get",
    "name": "CorePNG",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#CorePNG",
    "access": "public",
    "description": "get pngjs3 instance",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@readonly",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "fetchPNG",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#fetchPNG",
    "access": "public",
    "description": "fetch and tranform png file to raw array from url",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } data promise - return Array if success or reject with error message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for PNG file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise - return Array if success or reject with error message"
    }
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "writePNG",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#writePNG",
    "access": "public",
    "description": "write and tranform png file to raw array from filepath",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } data promise - return Array if success or reject with error message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " URL "
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "url for PNG file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise - return Array if success or reject with error message"
    }
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "readPNG",
    "memberof": "packages/causality-utils/src/pngUtils.js~PNGUtils",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "packages/causality-utils/src/pngUtils.js~PNGUtils#readPNG",
    "access": "public",
    "description": "read and tranform png file to raw array from filepath",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } data promise - return Array if success or reject with error message"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " String "
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "url for PNG file"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "data promise - return Array if success or reject with error message"
    }
  },
  {
    "__docId__": 821,
    "kind": "variable",
    "name": "pNGUtils",
    "memberof": "packages/causality-utils/src/pngUtils.js",
    "static": true,
    "longname": "packages/causality-utils/src/pngUtils.js~pNGUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/pngUtils.js",
    "importStyle": "pNGUtils",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/pngUtils.js~PNGUtils"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "file",
    "name": "packages/causality-utils/src/stream.js",
    "content": "import stream from 'readable-stream';\n/**\n * This Stream class provide wrapper functions for \n * [readable-stream](https://www.npmjs.com/package/readable-stream)\n * @class StreamUtils\n * @example\n * [EXAMPLE ../examples/stream.babel.js]\n */\nclass Stream{\n    constructor(stream){\n    \n        /** @private { readable-stream } */\n        this.stream = stream;\n    }\n    \n    /**\n     * create reable object from readFn.\n     * @param { Function } readFn - called function for new data\n     * @returns { Readable } \n     */\n    makeReadable(readFn=null){\n        let reader = new stream.Readable({objectMode: true});\n        const DefaultReader = ()=>{};\n        reader._read = readFn || DefaultReader;\n        return reader;\n    }\n    \n    /**\n     * create writeable object from writeFn.\n     * @param { Function } writeFn - called function for new data\n     * @returns { Writable }\n     */\n    makeWritable(writeFn){\n        let writer = new stream.Writable({objectMode: true});\n        writer._write = writeFn;\n        return writer;\n    }\n    \n    /**\n     * create duplex object from writeFn and optional readFn.\n     * @param { Function } writeFn - called function for new data\n     * @param { Function } [readFn=null] \n     * @returns { Duplex } \n     */\n    makeDuplex(writeFn, readFn=null){\n        let duplex = new stream.Duplex({objectMode: true});\n        duplex._write = writeFn;\n        const DefaultReader = ()=>{};\n        duplex._read = readFn || DefaultReader;\n        return duplex;\n    }\n\n    /**\n     * create transform object from transformFn\n     * @param { Function } transformFn - called function for new data\n     * @returns { Transform }\n     */\n    makeTransform(transformFn){\n        let transformer = new stream.Transform({objectMode: true});\n        transformer._transform = transformFn;\n        return transformer;\n    }\n    \n    /**\n     * create pipeline from array of [readable, ...tranforms, writable].\n     * This stream.makePipeline([readable, transform, writable]) \n     * equivalent to readable.pipe(transform).pipe(writable).\n     * @param { Array } streams - array of [readable, ...tranforms, writable]\n     * @param { Function } [onDataFn=null] - handle function for data event at readable \n     * @returns { Promise } promise - resolve \"Success\" after finish or \"Pipeline failed. ${err}\".\n     */\n    makePipeline(streams, onDataFn=null){\n        return new Promise((resolve, reject)=>{\n            let writer = streams.slice(-1)[0];\n            let reader = streams[0];\n            writer.on('finish',()=>{\n                resolve('Success');\n            });\n            writer.on('error',(err)=>{\n                reject(`Pipeline failed. ${err}`);\n            });\n            reader.on('data',(data)=>{\n                if(onDataFn){ onDataFn(data); }\n            });\n            return streams.reduce((p, s)=>p.pipe(s));\n        });\n    }\n};\n\nconst streamUtils = new Stream(stream);\nexport default streamUtils;",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/src/stream.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 823,
    "kind": "class",
    "name": "Stream",
    "memberof": "packages/causality-utils/src/stream.js",
    "static": true,
    "longname": "packages/causality-utils/src/stream.js~Stream",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/stream.js",
    "importStyle": null,
    "description": "This Stream class provide wrapper functions for \n[readable-stream](https://www.npmjs.com/package/readable-stream)",
    "examples": [
      "import { stream } from 'causal-net.utils';\n\nlet reader = stream.makeReadable();\n    \nconst TranformFn = (chunkData, chunkEncoding, afterTransformFn) =>{\n    chunkData.x = (chunkData.x+1.5);\n    let event = null;\n    afterTransformFn(event, chunkData);\n};\nlet transformer = stream.makeTransform(TranformFn);\n    \nconst WriteFn = (chunkData, chunkEncoding, callback) =>{\n    console.log({chunkData});\n    callback();\n};\nlet writer = stream.makeWritable(WriteFn);\n    \nreader.pipe(transformer).pipe(writer);\n//write random int for every 100 ms    \nsetInterval(() => {\n    reader.push({ x: Math.random() });\n}, 100);"
    ],
    "lineNumber": 31,
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "StreamUtils"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 824,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 825,
    "kind": "member",
    "name": "stream",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#stream",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "makeReadable",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#makeReadable",
    "access": "public",
    "description": "create reable object from readFn.",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Readable } "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": false,
        "name": "readFn",
        "description": "called function for new data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Readable "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "makeWritable",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#makeWritable",
    "access": "public",
    "description": "create writeable object from writeFn.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Writable }"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": false,
        "name": "writeFn",
        "description": "called function for new data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Writable "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "makeDuplex",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#makeDuplex",
    "access": "public",
    "description": "create duplex object from writeFn and optional readFn.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Duplex } "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": false,
        "name": "writeFn",
        "description": "called function for new data"
      },
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "readFn",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Duplex "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "makeTransform",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#makeTransform",
    "access": "public",
    "description": "create transform object from transformFn",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Transform }"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": false,
        "name": "transformFn",
        "description": "called function for new data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Transform "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "makePipeline",
    "memberof": "packages/causality-utils/src/stream.js~Stream",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "packages/causality-utils/src/stream.js~Stream#makePipeline",
    "access": "public",
    "description": "create pipeline from array of [readable, ...tranforms, writable].\nThis stream.makePipeline([readable, transform, writable]) \nequivalent to readable.pipe(transform).pipe(writable).",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ Promise } promise - resolve \"Success\" after finish or \"Pipeline failed. ${err}\"."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " Array "
        ],
        "spread": false,
        "optional": false,
        "name": "streams",
        "description": "array of [readable, ...tranforms, writable]"
      },
      {
        "nullable": null,
        "types": [
          " Function "
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "onDataFn",
        "description": "handle function for data event at readable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " Promise "
      ],
      "spread": false,
      "description": "promise - resolve \"Success\" after finish or \"Pipeline failed. ${err}\"."
    }
  },
  {
    "__docId__": 831,
    "kind": "variable",
    "name": "streamUtils",
    "memberof": "packages/causality-utils/src/stream.js",
    "static": true,
    "longname": "packages/causality-utils/src/stream.js~streamUtils",
    "access": "public",
    "export": true,
    "importPath": "causal-net/packages/causality-utils/src/stream.js",
    "importStyle": "streamUtils",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "packages/causality-utils/src/stream.js~Stream"
      ]
    }
  },
  {
    "kind": "index",
    "content": "![Introduction](./causal-doc/index.md)\n\nFull doc link: (https://red-gold.github.io/causality-docs/)\n",
    "longname": "/home/huynhnguyen/github/causality/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "***This project is immature and under active development. Contents will be updated rapidly***\n\n# Portable deep learning models with Causality\n\n![Photo on Unsplash](./manual/asset/coffee-main.jpg)\n\nCausality is a free and open source javascript library that allows building isomorphic machine learning pipeline. Roundly speaking, your trained model can be deployed on client's devices via web environment without re-piping your code. \n\nOn top of Tensorflowjs, our set of reusable components handle data preprocessing, infer data representation, visualizing, training and evaluation on both node and web environment with the same APIs. Thus reduce engineering efforts for making production AI services. By using the same language, developers can simplify development setup, mitigate the communication cost, better coding pattern and share more ideas. \n\nMoreover, with AI models are loaded as client' devices for performing inference, personal or sensitive data is not exposed to the service providers. We also invest in ensemble learning and the recent federated learning approach for distributed training while preserving data privacy without requiring any global data storage. \n\nResearchers can utilize built-in datasets and the prebuilt pipelines to prototype new model ideas and make research results easy to review, present and reproduce. We hope developers and researchers can find this project a meaningful work to contribute and collaborate to push forward a new class of affordable, transparent deep learning services. \n\nThe commercial version of this library, Moderator, is our effort for moderating social network contents heading to protecting community culture. The AI moderator, which is built up by community voted training data, transparently prevent bad contents from propagating, and re-ranking relevant contents prior to client views without revealing any personal preference. The Causality, Moderator alongside with React Social Network are the ideas from our startup, Red Gold, for building a smarter social network with community culture respect and transparent AI moderator.\n\nFor example, we can build a simple Logistic regression model with dummy dataset\n\n```\nimport { causalNetSGDOptimizer } from 'causal-net.optimizers';\nimport { causalNetModels } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers } from 'causal-net.layer';\nimport { causalNet } from 'causal-net';\nimport { termLogger } from 'causal-net.log';\n\n(async ()=>{\n    const DummyData = (batchSize)=>{\n        let samples = [ [0,1,2,3], \n                        [0,1,2,3], \n                        [0,1,2,3] ];\n        let labels  = [ [1,0], \n                        [1,0], \n                        [1,0] ];\n        return [{samples, labels}];\n    };\n    let emitCounter = 0;\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { \n                    Predict: [  causalNetLayers.dense({ inputSize: 4, outputSize: 3, activator: 'sigmoid' }), \n                                causalNetLayers.dense({ inputSize: 3, outputSize: 2, activator: 'sigmoid' })]\n                },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        },\n        Deployment: {\n            Emitter: async ()=>{\n                return new Promise((resolve, reject)=>{\n                    setTimeout(()=>{\n                        let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                        emitCounter += 1;\n                        termLogger.log({ emitter: data});\n                        resolve(data);\n                    }, 1000);\n                });\n            },\n            Listener: async (infer)=>{\n                termLogger.log({ Listener: infer});\n            }\n        }\n    };\n    causalNet.setByConfig(PipeLineConfigure);\n    const numEpochs=10, batchSize=3;\n    let loss = await causalNet.train(numEpochs, batchSize);\n    let plotId = termLogger.plot({ type:'line', data: loss, \n                      xLabel: '# of iter', \n                      yLabel: 'loss'});\n    await termLogger.show({plotId});\n    termLogger.log(await causalNet.test());\n    let deployResult = await causalNet.deploy(); \n    termLogger.log({deployResult});\n})();\n```\n[Run code](./asset/examples/logisticsRegression.babel.js)\n\n",
    "longname": "/home/huynhnguyen/github/causality/causal-doc/index.md",
    "name": "./causal-doc/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/huynhnguyen/github/causality/causal-doc/asset",
    "name": "./causal-doc/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/huynhnguyen/github/causality/causal-doc/overview/introduction.md",
    "name": "./causal-doc/overview/introduction.md",
    "content": "![Photo by Josh Applegate on Unsplash](./asset/josh-applegate-1479284-unsplash.jpg)\n\n# Introduction\n\nKey design principles:\n- All components are isomorphic.\n- self-explaning. \n\nWe not use type script because we try to mitigate early technical debt from unpaid [type tax](https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b). \n\n\n\n## Pipeline\nCausality attempts to standardize the pipeline into those steps:\n- Sampling from raw data.\n- Preprocessing data.\n- Infering representation of data.\n- Training/ensemble training.\n- Evaluation/ensemble evaluation.\n\nFor example, we can build a simple Logistic regression model with dummy dataset\n\n```\nimport { causalNetSGDOptimizer } from 'causal-net.optimizers';\nimport { causalNetModels } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers } from 'causal-net.layer';\nimport { causalNet } from 'causal-net';\nimport { termLogger } from 'causal-net.log';\n\n(async ()=>{\n    const DummyData = (batchSize)=>{\n        let samples = [ [0,1,2,3], \n                        [0,1,2,3], \n                        [0,1,2,3] ];\n        let labels  = [ [1,0], \n                        [1,0], \n                        [1,0] ];\n        return [{samples, labels}];\n    };\n    let emitCounter = 0;\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { \n                    Predict: [  causalNetLayers.dense({ inputSize: 4, outputSize: 3, activator: 'sigmoid' }), \n                                causalNetLayers.dense({ inputSize: 3, outputSize: 2, activator: 'sigmoid' })]\n                },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        },\n        Deployment: {\n            Emitter: async ()=>{\n                return new Promise((resolve, reject)=>{\n                    setTimeout(()=>{\n                        let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                        emitCounter += 1;\n                        termLogger.log({ emitter: data});\n                        resolve(data);\n                    }, 1000);\n                });\n            },\n            Listener: async (infer)=>{\n                termLogger.log({ Listener: infer});\n            }\n        }\n    };\n    causalNet.setByConfig(PipeLineConfigure);\n    const numEpochs=10, batchSize=3;\n    let loss = await causalNet.train(numEpochs, batchSize);\n    let plotId = termLogger.plot({ type:'line', data: loss, \n                      xLabel: '# of iter', \n                      yLabel: 'loss'});\n    await termLogger.show({plotId});\n    termLogger.log(await causalNet.test());\n    let deployResult = await causalNet.deploy(); \n    termLogger.log({deployResult});\n})();\n```\n[Run code](./asset/examples/logisticsRegression.babel.js)\n\nand the ensemble version\n\n```\nimport { causalNetSGDOptimizer } from 'causal-net.optimizers';\nimport { causalNetModels } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers } from 'causal-net.layer';\nimport { causalNet } from 'causal-net';\nimport { termLogger } from 'causal-net.log';\n\n(async ()=>{\n    const DummyData = (batchSize)=>{\n        let samples = [ [0,1,2,3], \n                        [0,1,2,3], \n                        [0,1,2,3] ];\n        let labels  = [ [1,0], \n                        [1,0], \n                        [1,0] ];\n        return [{samples, labels}];\n    };\n    let emitCounter = 0;\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { \n                    Predict: [  causalNetLayers.dense({ inputSize: 4, outputSize: 3, activator: 'sigmoid' }), \n                                causalNetLayers.dense({ inputSize: 3, outputSize: 2, activator: 'sigmoid' })]\n                },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        },\n        Deployment: {\n            Emitter: async ()=>{\n                return new Promise((resolve, reject)=>{\n                    setTimeout(()=>{\n                        let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                        emitCounter += 1;\n                        termLogger.log({ emitter: data});\n                        resolve(data);\n                    }, 1000);\n                });\n            },\n            Listener: async (infer)=>{\n                termLogger.log({ Listener: infer});\n            }\n        }\n    };\n    causalNet.setByConfig(PipeLineConfigure);\n    let models = ['Model1', 'Model2', 'Model3'];\n    let losses = {};\n    const numEpochs=10, batchSize=3;\n    for(let model of models){\n        let result = await causalNet.ensembleTrain(numEpochs, batchSize, model);\n        losses = {...losses, ...result};\n    }\n    let plotId = termLogger.plot({ type:'line', data: losses, \n                      xLabel: '# of iter', \n                      yLabel: 'loss'});\n    await termLogger.show({plotId});\n    termLogger.log(await causalNet.test());\n    let deployResult = await causalNet.deploy(); \n    termLogger.log({deployResult});\n})();\n```\n[Run code](./asset/examples/ensemble.logisticRegression.babel.js)\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/huynhnguyen/github/causality/causal-doc/overview/packages.md",
    "name": "./causal-doc/overview/packages.md",
    "content": "![Photo by Iker Urteaga on Unsplash](./asset/iker-urteaga-246955-unsplash.jpg)\n\n# Monorepo\n\nCausality provides sub-package plugins for build up pipeline as follows:\n\nCausality intensively uses [mixin](https://en.wikipedia.org/wiki/Mixin) for composing class. Mixins allow constructing elastic class that imports just enough methods for target usages. We try to mitigate redundant methods and reduce bundle size. The main mixins for building a pipeline class can be found at the `/src/` folder which pre-built `CausalNet` pipeline ready to use (check tutorials session). Advance mixins \nare seperated into different sub-packages under the `/packages/` folder. Each sub-package exports at most one mixin for building pipeline, For example, causality-optimizer provide trainerMixins for optimizing parameters.\n\n## Project module view\n![overview](./asset/block_diagram.png)\n\n## causal-net.core \nThis package provides:\n\n### causalNetCore\n\nAllow acess to core functor and core tensor instance.\n\n```javascript\nimport { causalNetCore } from 'causal-net.core';\nconsole.log(causalNetCore.CoreTensor);\nconsole.log(causalNetCore.CoreFunctor);\n\n```\n\n[Run code](./asset/examples/core.babel.js)\n\n### Tensor\n\nPrimitive class for composing Tensor based class. This class is based on [tensorflowjs](https://js.tensorflow.org/)\n\n```javascript\nimport { Tensor, causalNetCore } from 'causal-net.core';\nlet tensor = new Tensor();\nlet T = causalNetCore.CoreTensor;\nlet ta = T.tensor([1, 2]);\nconsole.log(tensor.isTensor(ta));\nconsole.log(tensor.isTensor([1,2,3]));\n```\n\n[Run code](./asset/examples/tensor.babel.js)\n\n### Functor\n\nPrimitive class for composing Functor based class. This class is based on [Ramda](https://ramdajs.com/)\n\n```javascript\nimport { Functor } from 'causal-net.core';\n\n(async ()=>{\n    let functor = new Functor();\n    console.log(functor.range(10));\n    console.log(functor.zeros(10));\n    console.log(functor.ones(10));\n})();\n```\n\n[Run code](./asset/examples/functor.babel.js)\n\n### Store\n\nPrimivtive class for composing Store base class. This class is based on [levelup](https://www.npmjs.com/package/levelup)\n\n### Event\n\nPrimivtive class for composing Event base class. This class is extended from [EventEmitter](https://nodejs.org/api/events.html)\n\n```javascript\nimport { Event } from 'causal-net.core';\n\n(async ()=>{\n    let eventA = new Event();\n    let eventB = new Event();    \n    eventA.on('data', (data)=>{\n        console.log({'event handler': data});\n        return 'this is done';\n    })\n    console.log(await eventA.emit('data', [1,2,3]));\n    console.log('send event');\n    eventB.pipe(eventA);\n    console.log(await eventB.emit('data', ['1,2,3']));\n})();\n\n```\n\n[Run code](./asset/examples/event.babel.js)\n\n## causal-net.datasets \nThis package provides:\n\n### CausalNetDataSource\n\nThis class is a standard implementation for pipeline Source which can be accessed via **causalNetDataSource** instance.\n\n\n```javascript\nimport { causalNetDataSource } from 'causal-net.datasets';\n\n(async ()=>{\n    let description = await causalNetDataSource.connect('../../datasets/MNIST_dataset_NoSplit/');\n    console.log( description );\n    console.log( causalNetDataSource.SampleSize );\n    console.log( causalNetDataSource.chunkSelect(1) );\n    const SampleReader = causalNetDataSource.SampleReader;\n    const LabelReader = causalNetDataSource.LabelReader;\n    for(let { Sample, Label, ChunkName } of causalNetDataSource.chunkSelect(1) ){\n        let sampleData = await SampleReader(Sample);\n        let labelData = await LabelReader(Label);\n        console.log({ ChunkName, \n                      [Sample]: sampleData.length, \n                      [Label]: labelData.length });\n    }\n    let readreport = await causalNetDataSource.read();\n    console.log({ readreport });\n})().catch(console.error);\n```\n\n[Run code](./asset/examples/causalNetDataSource.js)\n\n### DatasetMixins\n\nThis mixin class provides attibutea: **DataSourceReader** , methods: **reading** and handle Source setting in pipelineConfig\n\n\n```javascript\nimport { causalNetDataSource, DataSourceMixins } from 'causal-net.datasets';\nimport { PreprocessingMixins,\n    causalNetPreprocessingStream } from 'causal-net.preprocessing';\nimport { causalNetCore, Functor as BaseFunctor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\nimport { platform } from 'causal-net.utils';\n\nconst R = causalNetCore.CoreFunctor;\nconst sampleTransformer = (chunkSamples) => { \n    console.log({chunkSamples: chunkSamples.length});\n    return chunkSamples;\n};\nconst labelTransformer = (chunkLabels) => {\n    console.log({chunkLabel: chunkLabels.length});\n    return chunkLabels;\n}\n\nconst PipeLineConfigure = {\n    Dataset: {\n        Source: causalNetDataSource,\n        Preprocessing: {\n            SampleTransformer: sampleTransformer,\n            LabelTransformer: labelTransformer\n        }\n    }\n};\n\n\nclass SimpleDataset extends platform.mixWith(BaseFunctor, \n    [   PreprocessingMixins,\n        DataSourceMixins,\n        LoggerMixins ]){\n    constructor( preprocessing, logger ){\n        super();\n        this.Preprocessing = preprocessing;\n        this.Logger = logger;\n    }\n}\n(async ()=>{\n    await causalNetDataSource.connect('../../datasets/MNIST_dataset_NoSplit/');\n    let dataset = new SimpleDataset( causalNetPreprocessingStream, termLogger );\n    dataset.setByConfig(PipeLineConfigure);\n    dataset.DataSourceReader.chunkSelect(1);\n    console.log( await dataset.read() );\n})().catch(console.error);\n\n\n\n```\n\n[Run code](./asset/examples/dataset.mixins.babel.js)\n\n## causal-net.deployment \n\nThis package provides:\n\n### causalNetDeployment\n\nThe implementation for event-based model deployment which is supplied to pipeline class instance as **Deployment** attribute. Pipeline class must be mixed with DeploymentMixins.\n\n\n```javascript\nimport { causalNetDeployment } from 'causal-net.deployment';\n\n(async ()=>{\n    var emitCounter = 0;\n    causalNetDeployment.Emitter = async ()=>{\n        \n        return new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                emitCounter += 1;\n                console.log({ emitter: data});\n                resolve(data);\n            }, 1000);\n        });\n    };\n    causalNetDeployment.Listener = async (data)=>{\n        console.log({listener: data});\n    };\n    causalNetDeployment.Inferencer = (data)=>{\n        console.log({'inferencer': data});  \n        return data;\n    };\n    console.log(await causalNetDeployment.deploy());\n})().catch(console.error);\n```\n\n[Run code](./asset/examples/causalNetDeployment.babel.js)\n\n### DeploymentMixins\n\nThis mixin class provides attributes: **Deployment**, **Inferencer**, and handle Deployment setting of pipelineConfig.\n\n```javascript\nimport { causalNetSGDOptimizer, TrainerMixins, EvaluatorMixins } from 'causal-net.optimizers';\nimport { causalNetModels, ModelMixins } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { causalNetCore, Functor, Tensor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { causalNetDeployment, DeploymentMixins } from 'causal-net.deployment';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [ \n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        TrainerMixins, \n        LoggerMixins,\n        DeploymentMixins ]){\n    constructor( netRunner, functor, logger, deployment){\n        super();\n        this.F = functor;\n        this.LayerRunner = netRunner;\n        this.Logger = logger;\n        this.Deployment = deployment;\n    }\n}\nconst T = causalNetCore.CoreTensor;\nconst F = new Functor();\nconst DummyData = (batchSize)=>{\n    let samples = [ [0,1,2,3], \n                    [0,1,2,3], \n                    [0,1,2,3] ];\n    let labels  = [ [1,0], \n                    [1,0], \n                    [1,0] ];\n    return [{samples, labels}];\n}\nconsole.log(F.range(10));\nconsole.log(F.enumerate([0,1,2,3,4]));\nconsole.log(DummyData(1));\n(async ()=>{\n    let emitCounter = 0;\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { \n                    Predict: [  causalNetLayers.dense(4, 3), \n                                causalNetLayers.dense(3, 2)]\n                },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        },\n        Deployment: {\n            Emitter: async ()=>{\n                return new Promise((resolve, reject)=>{\n                    setTimeout(()=>{\n                        let data = (emitCounter < 3)?{Predict: [0,1,2,3]}:null;\n                        emitCounter += 1;\n                        console.log({ emitter: data});\n                        resolve(data);\n                    }, 1000);\n                });\n            },\n            Listener: async (infer)=>{\n                console.log({ Listener: infer});\n            }\n        }\n    };\n\n    let pipeline = new SimplePipeline( causalNetRunner, F, termLogger, causalNetDeployment);\n    pipeline.setByConfig(PipeLineConfigure);\n    let predictInfer = pipeline.PredictModel( T.tensor([[1,2,3,4]]) );\n    predictInfer.print();\n    pipeline.deploy().then(res=>console.log(res));\n    console.log(await pipeline.train(100, 1));\n})().catch(err=>{\n    console.error({err});\n});\n```\n\n[Run code](./asset/examples/deployment.mixins.babel.js)\n\n## causal-net.layer\n\nThis module provides:\n\n### CausalNetLayers\n\nThis class provides common used layers which can be accessed via **causalNetLayers** instance.\n\n\n```javascript\nimport { causalNetLayers } from 'causal-net.layer';\nlet denseLayer = causalNetLayers.dense({inputSize:3,outputSize:2});\nconsole.log({denseLayer: denseLayer.Config});\n\n```\n\n[Run code](./asset/examples/dense.layer.js)\n\n### CausalNetParameters\n\nThis class is a standard implementation for model parameters which can be accessed via **causalNetParameters** instance\n\n\n```javascript\nimport { causalNetParameters } from 'causal-net.layer';\nimport { causalNetLayers } from 'causal-net.layer';\n(async ()=>{\n    const Layers = { \n                    Predict: [  causalNetLayers.dense(4, 3), \n                                 causalNetLayers.dense(3, 2)], \n                    Encode: [ causalNetLayers.dense(4, 2) ], \n                    Decode: [ causalNetLayers.dense(4, 2) ] \n            };\n    const Parameters = {};\n    console.log(causalNetParameters.InitParameters(Parameters)(Layers));\n    console.log(await causalNetParameters.exportParameters());\n    console.log(await causalNetParameters.saveParams('save0'));\n    console.log(await causalNetParameters.getSavedParamList());\n    console.log(await causalNetParameters.loadParams('save0'));\n})();\n```\n\n[Run code](./asset/examples/parameters.babel.js)\n\n### CausalNetRunner\n\nThis CausalNetRunner class provide a standard net excecutor which is provided pipeline instance at **LayerRunner** attribute.\n\n\n```javascript\nimport { causalNetParameters, causalNetLayers, causalNetRunner } from 'causal-net.layer';\nimport { causalNetCore } from 'causal-net.core';\n\n(async ()=>{\n    const T = causalNetCore.CoreTensor;\n\n    const Net = { \n                    Parameters: { Predict: null, Encode: null, Decode: null },\n                    Layers: { \n                        Predict: [  causalNetLayers.dense(4, 3), \n                                    causalNetLayers.dense(3, 2)], \n                        Encode: [ causalNetLayers.dense(4, 2) ], \n                        Decode: [ causalNetLayers.dense(4, 2) ] \n                    }\n                };\n    console.log(causalNetParameters.setOrInitParams(Net.Layers, Net.Parameters));\n    causalNetRunner.NetLayers = Net.Layers;\n    causalNetRunner.NetParameters = causalNetParameters;\n    let predictLayer = causalNetRunner.run(Net.Layers.Predict, T.tensor([[1,2,3,4]]), \n                            causalNetParameters.PredictParameters);\n    predictLayer.print();\n    const PredictRunner = causalNetRunner.Predictor;\n    console.log(PredictRunner);\n    predictLayer = PredictRunner(T.tensor([[1,2,3,4]]));\n    predictLayer.print();\n    let encodeLayer = causalNetRunner.run(Net.Layers.Encode, T.tensor([[1,2,3,4]]), \n                            causalNetParameters.EncodeParameters);\n    encodeLayer.print();\n    const EncodeRunner = causalNetRunner.Encoder;\n    encodeLayer = EncodeRunner( T.tensor([[1,2,3,4]]) );\n    encodeLayer.print();\n    let decodeLayer = causalNetRunner.run(Net.Layers.Decode, T.tensor([[1,2,3,4]]), \n                            causalNetParameters.DecodeParameters);\n    decodeLayer.print();\n    const DecodeRunner = causalNetRunner.Decoder;\n    decodeLayer = DecodeRunner( T.tensor([[1,2,3,4]]) );\n    decodeLayer.print();\n})();\n\n```\n\n[Run code](./asset/examples/runner.babel.js)\n\n### LayerRunnerMixins\n\nThis mixin class provide attributes: **ParameterInitializer**, **LayerRunner**, and handle **Net** setting of pipelineConfig.\n\n\n```javascript\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins  } from 'causal-net.layer';\nimport { causalNetCore } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger } from 'causal-net.log';\nconst PipeLineConfigure = {\n    Net: { \n            Parameters: causalNetParameters.InitParameters(),\n            Layers: { \n                Predict: [  causalNetLayers.dense(4, 3), \n                            causalNetLayers.dense(3, 2)], \n                Encode: [ causalNetLayers.dense(4, 2) ], \n                Decode: [ causalNetLayers.dense(4, 2) ] \n            }\n    }\n}\nclass SimplePipeline extends platform.mixWith(Tensor, [ LayerRunnerMixins ]){\n    constructor(layerRunner, logger){\n        super();\n        this.logger = logger;\n        this.LayerRunner = layerRunner;\n    }\n}\nconst T = causalNetCore.CoreTensor;\n(async ()=>{\n    let pipeline = new SimplePipeline(causalNetRunner, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    const { Predictor, Encoder, Decoder } = pipeline.LayerRunner;\n    console.log({ Predictor, Encoder, Decoder });   \n})().catch(err=>{\n    console.error({err});\n});\n```\n\n[Run code](./asset/examples/layerRunner.mixins.babel.js)\n\n## causal-net.log \n\nThis module provides:\n\n### TermLogger \n\nThis class is isomomorphic logger which can be accessed via **termLogger**.\n\n\n```javascript\nimport { termLogger } from 'causal-net.log';\n\ntermLogger.log('this is text');\ntermLogger.log({'name':'this is text'});\n\ntermLogger.log({'father':{'name':'this is text','alias':'this is another text'}});\ntermLogger.log({'father':{'name':{sub:'this is text'},'alias':'this is another text'}});\ntermLogger.log({'array':[0,1,2,3,4]});\ntermLogger.log({'array':[{a:0}, {b:1}, {c:2},  {d:4},  {e:6}]});\n\ntermLogger.Level = 'debug';\nconsole.log(termLogger.Level);\ntermLogger.log({'not to show': true});\ntermLogger.Level = 'log';\nconsole.log(termLogger.Level);\n\ntermLogger.progressBegin(5);\nfor(let i of [1,2,3,4,5]){\n    termLogger.progressUpdate({current: i});\n}\ntermLogger.progressEnd();\n\ntermLogger.groupBegin('group A');\ntermLogger.groupBegin('group B');\ntermLogger.groupBegin('group C');\ntermLogger.groupEnd();\ntermLogger.groupEnd();\ntermLogger.groupEnd();\n\n\n```\n\n[Run code](./asset/examples/log.babel.js)\n\nUsing builtin plot (vivid)\n\n```javascript\nimport { termLogger, vivid } from 'causal-net.log';\n(async ()=>{\n    termLogger.connect();\n    termLogger.groupBegin('this is log');\n    termLogger.log('this is log');\n    let plotData = {\n                type: 'scatter',\n                data: {\n                    'X': [[0,0],[1,0],[0,1]],\n                    'Y': [[-1,-1],[-1,0],[0,-1]],\n                }, \n                'xRange': [-2,2],\n                'yRange': [-2,2],\n                'xLabel': 'may be x',\n                'yLabel': 'y unit',\n                'title': 'test', \n                style: { \"body\": {\"font\": \"11px\"} } };\n    let plotId = termLogger.plot(plotData);\n    await termLogger.show({plotId});\n    const makeImageData = (offset, width=28, height=28)=>{\n        let imageData = [];\n        for (var x=0; x<width; x++) {\n            for (var y=0; y<height; y++) {\n                var pixelindex = (y * width + x) * 4;\n                // Generate a xor pattern with some random noise\n                var red = ((x+offset) % 256) ^ ((y+offset) % 256);\n                var green = ((2*x+offset) % 256) ^ ((2*y+offset) % 256);\n                var blue = 50 + Math.floor(Math.random()*100);\n                // Rotate the colors\n                blue = (blue + offset) % 256;\n                // Set the pixel data\n                imageData[pixelindex] = red;     // Red\n                imageData[pixelindex+1] = green; // Green\n                imageData[pixelindex+2] = blue;  // Blue\n                imageData[pixelindex+3] = 255;   // Alpha\n            }\n        }\n        return imageData;\n    };\n    let data = makeImageData(0);\n    plotId = termLogger.plot({type: 'png', data, width:28, height:28, title:'test2'});\n    await termLogger.show({plotId});\n    \n    plotData = {\n        type: 'line',\n        data: {\n            'X': [1,2,4,6],\n            'y': [3,4,5,6]\n        }, \n        'xRange': [-2,2],\n        'yRange': [-2,2],\n        'xLabel': 'x unit',\n        'yLabel': 'y unit',\n        'title': 'test3', \n        style: { \"body\": {\"font\": \"11px\"} } };\n    plotId = termLogger.plot(plotData);\n    await termLogger.show({plotId});\n    termLogger.groupEnd('this is log');\n})();\n```\n\n[Run code](./asset/examples/plot.babel.js)\n\n### Vivid \n\nThis class is provide common used plots which can be accessed via **vivid**.\n\nLine chart\n\n```javascript\nimport { vivid } from 'causal-net.log';\n(async ()=>{\n    let plotData = {\n        type: 'line',\n        data: {\n            'X': [1,2,4,6],\n            'y': [3,4,5,6]\n        }, \n        'xRange': [-2,2],\n        'yRange': [-2,2],\n        'xLabel': 'x unit',\n        'yLabel': 'y unit',\n        'title': 'test3', \n        style: { \"body\": {\"font\": \"11px\"} } };\n    let plotId = vivid.line(plotData);\n    await vivid.show({plotId});\n    termLogger.groupEnd('this is log');\n})();\n```\n\n[Run code](./asset/examples/vivid.line.babel.js)\n\nScatter chart\n\n```javascript\nimport { vivid } from 'causal-net.log';\n(async ()=>{\n    let plotData = {\n                type: 'scatter',\n                data: {\n                    'X': [[0,0],[1,0],[0,1]],\n                    'Y': [[-1,-1],[-1,0],[0,-1]],\n                }, \n                'xRange': [-2,2],\n                'yRange': [-2,2],\n                'xLabel': 'may be x',\n                'yLabel': 'y unit',\n                'title': 'test', \n                style: { \"body\": {\"font\": \"11px\"} } };\n    let plotId = vivid.scatter(plotData);\n    await vivid.show({plotId});\n})();\n```\n\n[Run code](./asset/examples/vivid.scatter.babel.js)\n\nPNG \n\n```javascript\nimport { vivid } from 'causal-net.log';\n(async ()=>{\n    const makeImageData = (offset, width=28, height=28)=>{\n        let imageData = [];\n        for (var x=0; x<width; x++) {\n            for (var y=0; y<height; y++) {\n                var pixelindex = (y * width + x) * 4;\n                // Generate a xor pattern with some random noise\n                var red = ((x+offset) % 256) ^ ((y+offset) % 256);\n                var green = ((2*x+offset) % 256) ^ ((2*y+offset) % 256);\n                var blue = 50 + Math.floor(Math.random()*100);\n                // Rotate the colors\n                blue = (blue + offset) % 256;\n                // Set the pixel data\n                imageData[pixelindex] = red;     // Red\n                imageData[pixelindex+1] = green; // Green\n                imageData[pixelindex+2] = blue;  // Blue\n                imageData[pixelindex+3] = 255;   // Alpha\n            }\n        }\n        return imageData;\n    };\n    let data = makeImageData(0);\n    let plotId = vivid.png({type: 'png', data, width:28, height:28, title:'test2'});\n    await vivid.show({plotId});\n})();\n```\n\n[Run code](./asset/examples/vivid.png.babel.js)\n\n### LoggerMixins\n\nThis Mixins class provides attributes: **Logger**.\n\n\n```javascript\nimport { LoggerMixins, termLogger, BaseLogger } from 'causal-net.log';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [LoggerMixins]){\n    constructor(){\n        super();\n        this.Logger = termLogger;\n    }\n}\nlet pipeline = new SimplePipeline();\nconsole.log(pipeline.Logger instanceof BaseLogger);\n```\n\n[Run code](./asset/examples/logger.mixins.babel.js)\n\n## causal-net.preprocessing \n\nThis module provide  standard preprocessing instances for image/text data and preprocessing mixins for pipeline\n\n### nlpPreprocessing\nProvide methods for text processing: tokenize, filter, count word frequency.\n\n### imagePreprocessing \nProvide method for image processing: split, transform color\n\n### PreprocessingMixins\nMixins for mix with Pipeline class or dataset class.\n\n## causal-net.representation\n\nThis module provides:\n\n### CausalNetEmbedding \n\nThis class provide standard implements for text to vecs transformation. Which can be accessed via causalNetEmbedding\n\nNode\n\n```javascript\nimport { causalNetEmbedding } from 'causal-net.representation';\nimport { termLogger } from 'causal-net.log';\n(async ()=>{\n    const configLink = '../../datasets/WordVec_EN/';\n    await causalNetEmbedding.connect(configLink, true);\n    //first time transform will find on storage cache\n    let vecs = await causalNetEmbedding.transform(['this', 'is', 'test']);\n    for(let vec of vecs){\n        termLogger.log({ vec });\n    }\n    //second time transform will find on memory cache\n    vecs = await causalNetEmbedding.transform(['this', 'is', 'test']);\n    for(let vec of vecs){\n        termLogger.log({ vec });\n    }\n    //return the tensor representing sentence\n    let sentVec = await causalNetEmbedding.sentenceEncode([ ['this', 'is', 'test'] ]);\n    sentVec.print();\n})().catch(err=>{\n    console.error(err);\n});\n```\n\n[Run code](./asset/examples/causalNetEmbedding.babel.node.js)\n\n### UniversalEmbedding\n\nThis class provide standard implements for text to vecs transformation into single vector based on [use](https://github.com/tensorflow/tfjs-models/tree/master/universal-sentence-encoder) which can be accesed via universalEmbedding\n\n\n```javascript\nimport { universalEmbedding } from 'causal-net.representation';\nimport { termLogger } from 'causal-net.log';\nimport { tokenizer } from 'causal-net.preprocessing';\n(async ()=>{\n    const BaseModelServer = 'http://0.0.0.0:8080/models/';\n    termLogger.groupBegin('load model');\n    await tokenizer.connect(BaseModelServer + 'use/vocab.json');\n    await universalEmbedding.connect(BaseModelServer + '/use/tensorflowjs_model.json');\n    termLogger.log('load finish');\n    const asEncode = true;\n    let tokens = [tokenizer.tokenize('dog', asEncode),\n                  tokenizer.tokenize('cat', asEncode)]; \n    termLogger.log({tokens});\n    let sentVec = await universalEmbedding.sentenceEncode(tokens);\n    sentVec.print();\n    let score = await universalEmbedding.encodeMatching(tokens[0], tokens[1]);\n    score.print();\n    termLogger.groupEnd();\n})().catch(console.err);        \n```\n\n[Run code](./asset/examples/universalEmbedding.babel.js)\n\n### RepresentationMixins\n\nThis mixin class provides attributes: **Prepresentation**.\n\n\n```javascript\nimport { RepresentationMixins, causalNetEmbedding } from 'causal-net.representation';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nconst PipeLineConfigure = {\n    Representation: {\n        Embedding: causalNetEmbedding,\n        EmbeddingConfig: '../../datasets/WordVec_EN/',\n    }\n}\nclass SimplePipeline extends platform.mixWith(Tensor, [RepresentationMixins]){\n    constructor(configure){\n        super();\n        this.setRepresentationByConfig(configure);\n    }\n}\nlet pipeline = new SimplePipeline(PipeLineConfigure);\npipeline.connect();\nconsole.log(pipeline.Representation);\n```\n\n[Run code](./asset/examples/embeddingMixins.babel.node.js)\n\n\n## causal-net.sampling \n\nThis causal-net.sampling is a sub-module for [causality](https://red-gold.github.io/causality-docs/) project.\nThis module provide sampling instance and sampling mixins\n\n### CausalNetSampling \n\nThis class provide common used sampling methods which can be accessed via **causalNetSampling** instance.\n\n\n```javascript\nimport { causalNetSampling } from 'causal-net.sampling';\nimport {termLogger as Logger} from 'causal-net.log';\nlet numSamples = 4;\nlet idSize = 10;//id list: [0,1,2,3,4,5,6,7,8,9]\nLogger.log(causalNetSampling.subSampling(numSamples, idSize));\n\nnumSamples = 4;\nlet positiveSampleId = [0, 1];\n//ids: [0, 1, 2, 3];\nlet probIds = [0.9, 0.9, 0.3, 0.7];\nlet samples = causalNetSampling.negSampling(numSamples, positiveSampleId, probIds);\ntermLogger.log({ samples });\n```\n\n[Run code](./asset/examples/causalNetSampling.babel.js)\n\n### SamplingMixins\n\nThis mixin class provide attributes: **Sampling**.\n\n\n```javascript\nimport { SamplingMixins, causalNetSampling } from 'causal-net.sampling';\nimport { Platform } from 'causal-net.utils';\nimport { Tensor, Function } from 'causal-net.core';\nconsole.log(causalNetSampling instanceof Function);\nclass SimplePipeline extends Platform.mixWith(Tensor, [SamplingMixins]){\n    constructor(){\n        super();\n        this.Sampling = causalNetSampling;\n    }\n}\nlet pipeline = new SimplePipeline();\nconsole.log(pipeline.Sampling);\n```\n\n[Run code](./asset/examples/sampling.mixins.babel.js)\n\n## causal-net.models \n\n### CausalNetModels\n\nThis class provides common used models which can be accessed via **causalNetModels** instance.\n\n- Classification models\n\n```javascript\nimport { SingleLabelClassification } from 'causal-net.models';\nimport { causalNetCore } from 'causal-net.core';\nlet model = new SingleLabelClassification(2);\nlet T = causalNetCore.CoreTensor;\nlet inputs = T.tensor([[0.1, 0.2]], [1, 2], 'float32');\nlet labels = T.tensor([[0, 1]], [1, 2], 'float32');\nmodel.LayerRunner = { Predictor: (input)=>input};\nmodel.Fit(inputs).print();\nmodel.Loss(inputs, labels).print();\nmodel.Predict(inputs).print();\nmodel.OneHotPredict(inputs).print();\n\n```\n\n[Run code](./asset/examples/singleLabelClassification.babel.js)\n\n### ModelMixins\n\nThis mixin class provides attributes: **Model**, **LossModel**, **FitModel**, **OneHotPredictModel**, **PredictModel** and handle **Model** setting of pipelineConfig.Net.\n\n\n```javascript\nimport { causalNetModels, ModelMixins } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { causalNetCore } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [LayerRunnerMixins, ModelMixins, LoggerMixins]){\n    constructor(netRunner, logger){\n        super();\n        this.Logger = logger;\n        this.LayerRunner = netRunner;\n    }\n}\n                  \n    \nconst T = causalNetCore.CoreTensor;\n(async ()=>{\n    let convLayer = causalNetLayers.convolution({kernelSize:[2,2], filters:[1,2], flatten:true} );\n    let denseLayer = causalNetLayers.dense({inputSize:24,outputSize:2});\n    const PipeLineConfigure = {\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { \n                    Predict: [  convLayer, denseLayer], \n                    Encode: [ causalNetLayers.dense({inputSize:24,outputSize:2}) ], \n                    Decode: [ causalNetLayers.dense({inputSize:24,outputSize:2}) ] \n                },\n                Model: causalNetModels.classification(2)\n        }\n    };\n\n    let pipeline = new SimplePipeline( causalNetRunner, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    \n    let inputTensor = T.tensor([  [1,2,3,4],\n                                  [1,2,3,4],\n                                  [1,2,3,4] ]).reshape([1,3,4,1]);\n    let modelOneHotPredict = pipeline.OneHotPredictModel(inputTensor);\n    modelOneHotPredict.print();\n    let fit = pipeline.FitModel(inputTensor);\n    fit.print();\n    let modelLoss = pipeline.LossModel(inputTensor, \n                             T.tensor([[0, 1]]).asType('float32'));\n    modelLoss.print();\n})().catch(err=>{\n    console.error({err});\n});\n```\n\n[Run code](./asset/examples/model.mixins.babel.js)\n\n\n\n\n## causal-net.optimizers\nThis causal-net.optimizer provides: \n\n### CausalNetSGDOptimizer\n\nThis class provides optimizing methods which can be accessed via **causalNetSGDOptimizer** instance.\n\n\n```javascript\nimport { causalNetCore } from \"causal-net.core\";\nimport { causalNetSGDOptimizer } from 'causal-net.optimizers';\n\nvar adam = causalNetSGDOptimizer.adam({learningRate: 0.01});\n\nconst T = causalNetCore.CoreTensor;\nvar a = T.variable(T.tensor([1,2,3,4]).reshape([2,2])); \nvar b = T.tensor([2,3,4,5]).reshape([2,2]);\nconst FitFn = ()=>{\n    return a.mul(b).mean();\n};\nconsole.log( adam.fit(FitFn) );\na.print();\nb.print();\n```\n\n[Run code](./asset/examples/causalNetSGDOptimizers.babel.js)\n\n### TrainerMixins\n\nThis mixin class provides attributes: **Optimizer**, **Trainer**, **TrainDataGenerator**, methods **train**, handle **Optimizer** setting of pipelineConfig.Net and **TrainDataGenerator** setting of pipelineConfig.Dataset.\n\n```javascript\nimport { causalNetSGDOptimizer, TrainerMixins, EvaluatorMixins } from 'causal-net.optimizers';\nimport { causalNetModels, ModelMixins } from 'causal-net.models';\nimport { causalNetParameters, causalNetLayers, causalNetRunner, LayerRunnerMixins } from 'causal-net.layer';\nimport { causalNetCore, Functor } from 'causal-net.core';\nimport { platform } from 'causal-net.utils';\nimport { Tensor } from 'causal-net.core';\nimport { termLogger, LoggerMixins } from 'causal-net.log';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [ \n        LayerRunnerMixins, \n        ModelMixins, \n        EvaluatorMixins,\n        LoggerMixins,\n        TrainerMixins]){\n    constructor( netRunner, functor, logger){\n        super();\n        this.F = functor;\n        this.LayerRunner = netRunner;\n        this.Logger = logger;\n    }\n}\nconst T = causalNetCore.CoreTensor;\nconst R = causalNetCore.CoreFunctor;\nconst F = new Functor();\nconst DummyData = (batchSize)=>{\n    let samples = [  [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]], \n                     [[0], [1], [2], [3]] ];\n    let labels  = [ [0,1] ];\n    return [{samples, labels}];\n}\nconsole.log(DummyData(1));\n(async ()=>{\n    let convLayer = causalNetLayers.convolution({ kernelSize: [2, 2], \n                                                  filters: [1, 2], \n                                                  flatten: true } );\n    let denseLayer = causalNetLayers.dense({ inputSize: 8, outputSize: 2 });\n    const PipeLineConfigure = {\n        Dataset: {\n            TrainDataGenerator: DummyData,\n            TestDataGenerator: DummyData,\n        },\n        Net: { \n                Parameters: causalNetParameters.InitParameters(),\n                Layers: { Predict: [ convLayer, denseLayer ] },\n                Model: causalNetModels.classification(2),\n                Optimizer: causalNetSGDOptimizer.adam({learningRate: 0.01})\n        }\n    };\n\n    let pipeline = new SimplePipeline( causalNetRunner, F, termLogger);\n    pipeline.setByConfig(PipeLineConfigure);\n    const NumEpochs = 10, BatchSize = 1;\n    console.log(await pipeline.train(NumEpochs, BatchSize));\n    console.log(await pipeline.test());\n})();\n\n\n\n```\n\n[Run code](./asset/examples/trainer.mixins.babel.js)\n\n### EvaluatorMixins\n\nThis mixin class provides methods: **test** and handle **TestDataGenerator** setting of pipelineConfig.Dataset.\n\n## causal-net.memcache \n\n### memDownCache\n\nThis class a implementation for memory caching on top of [memdown](https://www.npmjs.com/package/memdown) which can be accessed via **memDownCache**.\n\n\n```javascript\nimport {memDownCache} from 'causal-net.memcache';\nimport {termLogger} from 'causal-net.log';\n\n(async ()=>{\n    await memDownCache.setItem(123, '1223adfa');\n    termLogger.log({getItem: await memDownCache.getItem(123)});\n})();\n\n```\n\n[Run code](./asset/examples/memDownCache.babel.js)\n\n### MemCacheMixins\n\nThis mixins class provides attributes: **MemCache**.\n\n\n```javascript\nimport {memDownCache, MemCacheMixins} from 'causal-net.memcache';\nimport {termLogger} from 'causal-net.log';\n\nimport { platform } from 'causal-net.utils';\nimport { Tensor, Store } from 'causal-net.core';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [MemCacheMixins]){\n    constructor(){\n        super();\n        this.MemCache = memDownCache;\n    }\n}\nlet pipeline = new SimplePipeline();\ntermLogger.log(pipeline.MemCache instanceof Store);\n```\n\n[Run code](./asset/examples/memCache.mixins.babel.js)\n\n\n## causal-net.storage \n\nThis module provides:\n\n### indexDBStorage \n\nThe isomorphic high performance key-value storage based on indexDB.\n\n\n```javascript\nimport { indexDBStorage } from 'causal-net.storage';\n(async ()=>{\n    await indexDBStorage.writeFile('/temp','12345');\n    let content  = await indexDBStorage.readFile('/temp');\n    console.log({content});\n    \n    //get file list\n    let listFiles = await indexDBStorage.getFileList('/');\n    console.log({listFiles});\n    \n    //fetch png image and save pixel data into file\n    const url = 'https://avatars3.githubusercontent.com/u/43268620?s=200&v=4';\n    await indexDBStorage.fetchPNGFile(url, 'icon');\n    const pixelArray = await indexDBStorage.readPNGFile('icon');\n    console.log({ pixelArray });\n\n    let ops = [\n        { type: 'put', key: 'temp', value: '123445' },\n        { type: 'del', key: 'temp' }];\n    //batch does not support 'get' type\n    let batchResult = await indexDBStorage.batch(ops);\n    console.log({batchResult});\n})().catch(err=>{\n    console.error(err);\n});\n\n```\n\n[Run code](./asset/examples/storage.babel.js)\n\n### StorageMixins\n\nThis mixins class provides **Storage** attribute.\n\n\n```javascript\nimport { StorageMixins, indexDBStorage } from 'causal-net.storage';\nimport { platform } from 'causal-net.utils';\nimport { Tensor, Store } from 'causal-net.core';\n\nclass SimplePipeline extends platform.mixWith(Tensor, [StorageMixins]){\n    constructor(storage){\n        super();\n        this.Storage = storage;\n    }\n}\nlet pipeline = new SimplePipeline(indexDBStorage);\nconsole.log(pipeline.Storage instanceof Store);\n```\n\n[Run code](./asset/examples/storage.mixins.babel.js)\n\n\n## causal-net.utils  \n\nThis module provides:\n\n### Platform \n\nThis class provides enhanced isomorphic mixins with corresponding platform (node|web) which can be access via **platform**.\n\n```javascript\nimport { assert } from 'causal-net.utils';\nassert.seemMatchSample([2,2,3], [1,2,3], 'validate sample');\nassert.seemMatchSample('sample text', 'pattern text', 'validate sample');\nassert.seemMatchSample( { 'text' : 'pattern text 1', 'number' : 1123 }, \n                        { 'text' : 'pattern text', 'number' : 1123 } , 'validate sample');\ntry{\n    assert.seemMatchSample(['2',2,3], [1,2,3], 'validate sample');\n}\ncatch(err){\n    //error due to mismatch schema\n    console.log(err.message);\n};\nclass A{};\nlet a = new A();\nassert.beInstanceOf(a, A);\ntry{\n    assert.beInstanceOf('1', A);\n}\ncatch(err){\n    console.log(err.message);\n}\n\n```\n\n[Run code](./asset/examples/assert.babel.js)\n\n### Fetch \n\nThis class provides isomorphic fetch which can be accessed via **fetch**.\n\n\n```javascript\nimport {fetch, Stream, PNGUtils} from 'causal-net.utils';\n(async ()=>{\n    let link = 'https://avatars3.githubusercontent.com/u/43268620?s=200&v=4';\n    let content = await fetch.fetchData(link);\n    console.log({'content length': content.length});\n});\n\n\n```\n\n[Run code](./asset/examples/fetch.babel.js)\n\n### PNG \n\nThis class provides isomorphic PNG parser which can be accessed via **pngUtils**.\n\nWeb/Node:\n\n```javascript\nimport { pngUtils } from 'causal-net.utils';\n(async ()=>{\n    const link = 'https://avatars3.githubusercontent.com/u/43268620?s=200&v=4';\n    let fetchedData = await pngUtils.fetchPNG(link);\n    console.log(fetchedData.length);\n})();\n```\n\n[Run code](./asset/examples/png.babel.js)\n\nNode:\n\n```javascript\nimport { pngUtils } from 'causal-net.utils';\n(async ()=>{\n    let data = await pngUtils.readPNG('../../datasets/icon.png');\n    console.log(data.length);\n    pngUtils.writePNG(data, [200, 200, 4], './out.png');\n})();\n\n```\n\n[Run code](./asset/examples/png.babel.node.js)\n\n### CSV \n\nThis class provides isomorphic CSV parser which can be accessed via **csvUtils**.\n\nNode:\n\n```javascript\nimport { csvUtils } from 'causal-net.utils';\n(async ()=>{\n    let data = await csvUtils.readCSV('./credict.csv');\n    console.log(data);\n    let headers = Object.keys(data[0]);\n    await csvUtils.writeCSV(headers, data, './output.csv');\n    data = await csvUtils.readCSV('./output.csv');\n    console.log(data);\n    // console.log(await csvUtils.chunkCSV('./output.csv',3,'./chunk-{}.csv'));\n    // const csvlink = 'https://media.githubusercontent.com/media/red-gold/causality/master/datasets/credict.csv';\n    // data = await csvUtils.fetchCSV(csvlink);\n    // console.log(data);\n    // data = [{'a':'a','text':'\"this is text\\n,;\"'}];\n    // await csvUtils.writeCSV(['a','text'], data, './output.csv');\n    // console.log(await csvUtils.readCSV('./output.csv'));\n})();\n\n```\n\n[Run code](./asset/examples/csv.babel.node.js)\n\n### Stream \n\nThis class provides isomorphic Stream with Readable, Writeable, Duplex which can be accessed via **stream**.\n\n\n```javascript\nimport { stream } from 'causal-net.utils';\n\nlet reader = stream.makeReadable();\n    \nconst TranformFn = (chunkData, chunkEncoding, afterTransformFn) =>{\n    chunkData.x = (chunkData.x+1.5);\n    let event = null;\n    afterTransformFn(event, chunkData);\n};\nlet transformer = stream.makeTransform(TranformFn);\n    \nconst WriteFn = (chunkData, chunkEncoding, callback) =>{\n    console.log({chunkData});\n    callback();\n};\nlet writer = stream.makeWritable(WriteFn);\n    \nreader.pipe(transformer).pipe(writer);\n//write random int for every 100 ms    \nsetInterval(() => {\n    reader.push({ x: Math.random() });\n}, 100);\n\n```\n\n[Run code](./asset/examples/stream.babel.js)\n\n### Assert \n\nThis class provides enhanced isomorphic assert with schema learnt from example which can be accessed via **assert**.\n\n\n```javascript\nimport { assert } from 'causal-net.utils';\nassert.seemMatchSample([2,2,3], [1,2,3], 'validate sample');\nassert.seemMatchSample('sample text', 'pattern text', 'validate sample');\nassert.seemMatchSample( { 'text' : 'pattern text 1', 'number' : 1123 }, \n                        { 'text' : 'pattern text', 'number' : 1123 } , 'validate sample');\ntry{\n    assert.seemMatchSample(['2',2,3], [1,2,3], 'validate sample');\n}\ncatch(err){\n    //error due to mismatch schema\n    console.log(err.message);\n};\nclass A{};\nlet a = new A();\nassert.beInstanceOf(a, A);\ntry{\n    assert.beInstanceOf('1', A);\n}\ncatch(err){\n    console.log(err.message);\n}\n\n```\n\n[Run code](./asset/examples/assert.babel.js)\n\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/huynhnguyen/github/causality/causal-doc/tutorials/streamProcessingText8.babel.node.js.md",
    "name": "./causal-doc/tutorials/streamProcessingText8.babel.node.js.md",
    "content": "\n# Tutorials\n\n## Stream processing with text8 data\n\nInput raw text8 corpus file and return the occurent number of each tokens in corpus.\n\n\n```javascript\nimport * as Preprocessing from 'causal-net.preprocessing';\nimport * as Log from 'causal-net.log';\nimport * as Utils from 'causal-net.utils';\nimport * as Storage from 'causal-net.storage';\nimport * as fs from 'fs';\nvar { indexDBStorage } = Storage;\nvar { stream } = Utils;\nvar { termLogger } = Log;\nvar { nlpPreprocessing, tokenizerEN } = Preprocessing;\n```\n\n\n\n\n    'use strict'\n\n\n\ncreate stream process\n- read chunks from file.\n- transform each chunk.\n- write transformed chunk into new files.\n\n\n```javascript\nvar remainingChars = '', wordFreqCount = {}, lineIndex = 0;\nfunction tranformFn(chunkData, chunkEncoding, afterTransformFn){\n    let sampleText = chunkData + remainingChars;\n    let sampleLines = sampleText.split('\\n');\n    let transformedData = [];\n    for(let line of sampleLines){\n        let tokens = tokenizerEN.tokenize(line);\n        wordFreqCount = nlpPreprocessing.wordFreqCount(tokens, wordFreqCount);\n        lineIndex += 1;\n        transformedData.push({lineIndex, tokens});\n    }\n    afterTransformFn(null, transformedData);\n};\nvar transformer = stream.makeTransform(tranformFn);\n\nfunction writeTokens(transformedData, chunkEncoding, afterWriteFn){\n    const WriteTokensToFile = async (transformedData)=>{\n        for(let {lineIndex, tokens} of transformedData){\n//             console.log({lineIndex});\n            await indexDBStorage.writeFile(`/corpus/line_${lineIndex}`, JSON.stringify(tokens));\n        }\n    }\n    WriteTokensToFile(transformedData).then(()=>{\n        afterWriteFn();\n    })\n}\nvar writer = stream.makeWritable(writeTokens);\nvar characterCount = 0;\n(async ()=>{\n    var corpusReader = fs.createReadStream('../datasets/text8/text8.txt');\n    const CorpusStreamer = stream.makePipeline([corpusReader, transformer, writer], (data)=>{\n        characterCount += data.length;\n    });\n    termLogger.groupBegin('stream performance');\n    let result = await CorpusStreamer;\n    termLogger.groupEnd()\n    termLogger.log({ result, characterCount } );\n})();\n```\n\n    stream performance: begin at Fri Mar 15 2019 16:42:45 GMT+0700 (Indochina Time)\n    stream performance: end after 8514 (ms)\n    { result: 'Success', characterCount: 100000000 }\n\n\n\n```javascript\ntermLogger.log({'show 100 items': Object.entries(wordFreqCount).slice(0,100)});\n```\n\n    { 'show 100 items':\n       [ [ 'anarchism', 303 ],\n         [ 'originated', 572 ],\n         [ 'as', 131819 ],\n         [ 'a', 325895 ],\n         [ 'term', 7220 ],\n         [ 'of', 593676 ],\n         [ 'abuse', 563 ],\n         [ 'first', 28809 ],\n         [ 'used', 22736 ],\n         [ 'against', 8431 ],\n         [ 'early', 10172 ],\n         [ 'working', 2270 ],\n         [ 'class', 3412 ],\n         [ 'radicals', 116 ],\n         [ 'including', 9630 ],\n         [ 'the', 1061363 ],\n         [ 'diggers', 25 ],\n         [ 'english', 11868 ],\n         [ 'revolution', 2029 ],\n         [ 'and', 416615 ],\n         [ 'sans', 68 ],\n         [ 'culottes', 6 ],\n         [ 'french', 8736 ],\n         [ 'whilst', 481 ],\n         [ 'is', 183158 ],\n         [ 'still', 7378 ],\n         [ 'in', 372203 ],\n         [ 'pejorative', 114 ],\n         [ 'way', 6432 ],\n         [ 'to', 316375 ],\n         [ 'describe', 1352 ],\n         [ 'any', 11804 ],\n         [ 'act', 3502 ],\n         [ 'that', 109508 ],\n         [ 'violent', 653 ],\n         [ 'means', 4165 ],\n         [ 'destroy', 466 ],\n         [ 'organization', 2374 ],\n         [ 'society', 4067 ],\n         [ 'it', 73335 ],\n         [ 'has', 37865 ],\n         [ 'also', 44358 ],\n         [ 'been', 25381 ],\n         [ 'taken', 3043 ],\n         [ 'up', 12446 ],\n         [ 'positive', 1254 ],\n         [ 'label', 646 ],\n         [ 'by', 111829 ],\n         [ 'self', 2879 ],\n         [ 'defined', 2449 ],\n         [ 'anarchists', 203 ],\n         [ 'word', 5678 ],\n         [ 'derived', 1701 ],\n         [ 'from', 72865 ],\n         [ 'greek', 4577 ],\n         [ 'without', 5660 ],\n         [ 'archons', 10 ],\n         [ 'ruler', 617 ],\n         [ 'chief', 2130 ],\n         [ 'king', 7457 ],\n         [ 'political', 6967 ],\n         [ 'philosophy', 2758 ],\n         [ 'belief', 1572 ],\n         [ 'rulers', 687 ],\n         [ 'are', 76523 ],\n         [ 'unnecessary', 146 ],\n         [ 'should', 5113 ],\n         [ 'be', 61283 ],\n         [ 'abolished', 399 ],\n         [ 'although', 9286 ],\n         [ 'there', 22706 ],\n         [ 'differing', 231 ],\n         [ 'interpretations', 395 ],\n         [ 'what', 8581 ],\n         [ 'this', 58827 ],\n         [ 'refers', 1570 ],\n         [ 'related', 3535 ],\n         [ 'social', 4307 ],\n         [ 'movements', 1002 ],\n         [ 'advocate', 331 ],\n         [ 'elimination', 216 ],\n         [ 'authoritarian', 185 ],\n         [ 'institutions', 1021 ],\n         [ 'particularly', 2881 ],\n         [ 'state', 12905 ],\n         [ 'anarchy', 109 ],\n         [ 'most', 25562 ],\n         [ 'use', 14011 ],\n         [ 'does', 5220 ],\n         [ 'not', 44030 ],\n         [ 'imply', 257 ],\n         [ 'chaos', 331 ],\n         [ 'nihilism', 42 ],\n         [ 'or', 68948 ],\n         [ 'anomie', 7 ],\n         [ 'but', 35356 ],\n         [ 'rather', 4605 ],\n         [ 'harmonious', 28 ],\n         [ 'anti', 3103 ],\n         [ 'place', 5345 ] ] }\n\n\nAfter preprocessing, data is saved into files under `/copus/` folder\n\n\n```javascript\n(async ()=>{\n    termLogger.groupBegin('get list of preprocessing files')\n    let listFiles = await indexDBStorage.getFileList('/corpus/');\n    termLogger.groupEnd()\n    termLogger.groupBegin('read one file from indexDB')\n    let tokens = await indexDBStorage.readFile(listFiles[0]);\n    termLogger.groupEnd()\n    termLogger.log([ listFiles.length , JSON.parse(tokens).length]);\n})()    \n```\n\n    get list of preprocessing files: begin at Fri Mar 15 2019 16:42:56 GMT+0700 (Indochina Time)\n    get list of preprocessing files: end after 194 (ms)\n    read one file from indexDB: begin at Fri Mar 15 2019 16:42:56 GMT+0700 (Indochina Time)\n    read one file from indexDB: end after 0 (ms)\n    [ 3228, 1293 ]\n\n\n\n```javascript\n\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 832,
    "kind": "testFile",
    "name": "packages/causality/test/causalNet.test.js",
    "content": "import { causalNet } from '../src/index';\n/** @test {CausalNet} */\ntest('CausalNet should be define', async ()=>{\n    /** @test {CausalNet#instance} */\n    expect(causalNet).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality/test/causalNet.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 833,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "packages/causality/test/causalNet.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality/test/causalNet.test.js~test0",
    "access": null,
    "description": "CausalNet should be define",
    "lineNumber": 3,
    "testTargets": [
      "CausalNet"
    ]
  },
  {
    "__docId__": 834,
    "kind": "testFile",
    "name": "packages/causality-core/test/causalNetCore.test.js",
    "content": "import { default as causalNetCore } from '../src/causalNetCore';\n/** @test {CausalNetCore} */\ntest('CausalNetCore instance should be defined', ()=>{\n    expect(causalNetCore).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/test/causalNetCore.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 835,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "packages/causality-core/test/causalNetCore.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-core/test/causalNetCore.test.js~test1",
    "access": null,
    "description": "CausalNetCore instance should be defined",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetCore"
    ]
  },
  {
    "__docId__": 836,
    "kind": "testFile",
    "name": "packages/causality-core/test/event.test.js",
    "content": "import { default as Event } from '../src/event';\n/** @test {Event} */\ntest('event instance should be defined', ()=>{\n    let event = new Event();\n    expect(event).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/test/event.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 837,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "packages/causality-core/test/event.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-core/test/event.test.js~test2",
    "access": null,
    "description": "event instance should be defined",
    "lineNumber": 3,
    "testTargets": [
      "Event"
    ]
  },
  {
    "__docId__": 838,
    "kind": "testFile",
    "name": "packages/causality-core/test/functor.test.js",
    "content": "import { default as Functor } from '../src/functor';\n/** @test {Functor} */\ntest('functor setIn should be okay', ()=>{\n    let F = new Functor();\n    let setVal = F.setIn(['a','b','c'],'3',{a:1});\n    expect(setVal).toEqual({\"a\":{\"b\":{\"c\":\"3\"}}});\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/test/functor.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 839,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "packages/causality-core/test/functor.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-core/test/functor.test.js~test3",
    "access": null,
    "description": "functor setIn should be okay",
    "lineNumber": 3,
    "testTargets": [
      "Functor"
    ]
  },
  {
    "__docId__": 840,
    "kind": "testFile",
    "name": "packages/causality-core/test/tensor.test.js",
    "content": "import { default as Tensor } from '../src/tensor';\n/** @test {Tensor} */\ntest('tensor init should be okay', ()=>{\n    let T = new Tensor();\n    expect(T.CoreTensor).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-core/test/tensor.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 841,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "packages/causality-core/test/tensor.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-core/test/tensor.test.js~test4",
    "access": null,
    "description": "tensor init should be okay",
    "lineNumber": 3,
    "testTargets": [
      "Tensor"
    ]
  },
  {
    "__docId__": 842,
    "kind": "testFile",
    "name": "packages/causality-datasets/test/causalNetDataSource.test.js",
    "content": "import { causalNetDataSource } from '../src/index';\n/** @test {CausalNetDataSource} */\ntest('datasource should be defined', ()=>{\n    expect(causalNetDataSource).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/test/causalNetDataSource.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 843,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "packages/causality-datasets/test/causalNetDataSource.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-datasets/test/causalNetDataSource.test.js~test5",
    "access": null,
    "description": "datasource should be defined",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetDataSource"
    ]
  },
  {
    "__docId__": 844,
    "kind": "testFile",
    "name": "packages/causality-datasets/test/dataSource.mixins.test.js",
    "content": "import { DataSourceMixins } from '../src/index';\n/** @test {DataSourceMixins} */\ntest('DataSourceMixins should be defined', ()=>{\n    expect(DataSourceMixins).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-datasets/test/dataSource.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 845,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "packages/causality-datasets/test/dataSource.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-datasets/test/dataSource.mixins.test.js~test6",
    "access": null,
    "description": "DataSourceMixins should be defined",
    "lineNumber": 3,
    "testTargets": [
      "DataSourceMixins"
    ]
  },
  {
    "__docId__": 846,
    "kind": "testFile",
    "name": "packages/causality-deployment/test/causalNetDeployment.test.js",
    "content": "import { causalNetDeployment } from '../src/index';\n/** @test {CausalNetDeployment} */\ntest('causalNetDeployment should be defined', ()=>{\n    expect(causalNetDeployment).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-deployment/test/causalNetDeployment.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 847,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "packages/causality-deployment/test/causalNetDeployment.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-deployment/test/causalNetDeployment.test.js~test7",
    "access": null,
    "description": "causalNetDeployment should be defined",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetDeployment"
    ]
  },
  {
    "__docId__": 848,
    "kind": "testFile",
    "name": "packages/causality-layer/test/layerRunner.mixins.test.js",
    "content": "import { LayerRunnerMixins } from '../src/index';\n/** @test {LayerRunnerMixins} */\ntest('LayerRunnerMixins should be defined', ()=>{\n    expect(LayerRunnerMixins).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/test/layerRunner.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 849,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "packages/causality-layer/test/layerRunner.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-layer/test/layerRunner.mixins.test.js~test8",
    "access": null,
    "description": "LayerRunnerMixins should be defined",
    "lineNumber": 3,
    "testTargets": [
      "LayerRunnerMixins"
    ]
  },
  {
    "__docId__": 850,
    "kind": "testFile",
    "name": "packages/causality-layer/test/parameters.test.js",
    "content": "import { causalNetParameters, ParameterMixins, ParameterFunctorMixins } from '../src/index';\n/** @test {CausalNetParameters} */\ntest('CausalNetParameters should be defined', ()=>{\n    expect(causalNetParameters).toBeDefined();\n});\n/** @test {ParameterMixins} */\ntest('ParameterMixins should be defined', ()=>{\n    expect(ParameterMixins).toBeDefined();\n});\n/** @test {ParameterFunctorMixins} */\ntest('ParameterFunctorMixins should be defined', ()=>{\n    expect(ParameterFunctorMixins).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-layer/test/parameters.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 851,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "packages/causality-layer/test/parameters.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-layer/test/parameters.test.js~test9",
    "access": null,
    "description": "CausalNetParameters should be defined",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetParameters"
    ]
  },
  {
    "__docId__": 852,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "packages/causality-layer/test/parameters.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-layer/test/parameters.test.js~test10",
    "access": null,
    "description": "ParameterMixins should be defined",
    "lineNumber": 7,
    "testTargets": [
      "ParameterMixins"
    ]
  },
  {
    "__docId__": 853,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "packages/causality-layer/test/parameters.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-layer/test/parameters.test.js~test11",
    "access": null,
    "description": "ParameterFunctorMixins should be defined",
    "lineNumber": 11,
    "testTargets": [
      "ParameterFunctorMixins"
    ]
  },
  {
    "__docId__": 854,
    "kind": "testFile",
    "name": "packages/causality-log/test/termlog.test.js",
    "content": "import { termLogger } from '../src/index';\n/** @test {TermLogger} */\ntest('term logger instance should be defined', ()=>{\n    expect(termLogger).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-log/test/termlog.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 855,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "packages/causality-log/test/termlog.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-log/test/termlog.test.js~test12",
    "access": null,
    "description": "term logger instance should be defined",
    "lineNumber": 3,
    "testTargets": [
      "TermLogger"
    ]
  },
  {
    "__docId__": 856,
    "kind": "testFile",
    "name": "packages/causality-memcache/test/memcache.mixins.test.js",
    "content": "import {MemCacheMixins} from '../src/index';\n/** @test {MemCacheMixins} */\ntest('MemCacheMixins instance should be define', ()=>{\n    expect(MemCacheMixins).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/test/memcache.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 857,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "packages/causality-memcache/test/memcache.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-memcache/test/memcache.mixins.test.js~test13",
    "access": null,
    "description": "MemCacheMixins instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "MemCacheMixins"
    ]
  },
  {
    "__docId__": 858,
    "kind": "testFile",
    "name": "packages/causality-memcache/test/memdown.test.js",
    "content": "import {memDownCache} from '../src/index';\n/** @test {MemdownCache} */\ntest('MemdownCache instance should be define', ()=>{\n    expect(memDownCache).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memcache/test/memdown.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 859,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "packages/causality-memcache/test/memdown.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-memcache/test/memdown.test.js~test14",
    "access": null,
    "description": "MemdownCache instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "MemdownCache"
    ]
  },
  {
    "__docId__": 860,
    "kind": "testFile",
    "name": "packages/causality-memory/test/causalNetMemory.test.js",
    "content": "import {causalNetMemory} from '../src/index';\n/** @test {MemCacheMixins} */\ntest('CausalNetMemory instance should be define', ()=>{\n    expect(causalNetMemory).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-memory/test/causalNetMemory.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 861,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "packages/causality-memory/test/causalNetMemory.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-memory/test/causalNetMemory.test.js~test15",
    "access": null,
    "description": "CausalNetMemory instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "MemCacheMixins"
    ]
  },
  {
    "__docId__": 862,
    "kind": "testFile",
    "name": "packages/causality-models/test/causalNetModel.test.js",
    "content": "import { causalNetModels } from '../src/index';\n/** @test {CausalNetModels} */\ntest('causalNetModels instance should be defined', ()=>{\n    expect(causalNetModels).toBeDefined();\n})\n/** @test {CausalNetModels} */\ntest('classification shoudld be returned', ()=>{\n    expect(causalNetModels.classification(2)).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/test/causalNetModel.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 863,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "packages/causality-models/test/causalNetModel.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-models/test/causalNetModel.test.js~test16",
    "access": null,
    "description": "causalNetModels instance should be defined",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetModels"
    ]
  },
  {
    "__docId__": 864,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "packages/causality-models/test/causalNetModel.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-models/test/causalNetModel.test.js~test17",
    "access": null,
    "description": "classification shoudld be returned",
    "lineNumber": 7,
    "testTargets": [
      "CausalNetModels"
    ]
  },
  {
    "__docId__": 865,
    "kind": "testFile",
    "name": "packages/causality-models/test/model.mixins.test.js",
    "content": "import { ModelMixins } from '../src/index';\n/** @test {ModelMixins} */\ntest('ModelMixins instance should be define', ()=>{\n    expect(ModelMixins).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-models/test/model.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 866,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "packages/causality-models/test/model.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-models/test/model.mixins.test.js~test18",
    "access": null,
    "description": "ModelMixins instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "ModelMixins"
    ]
  },
  {
    "__docId__": 867,
    "kind": "testFile",
    "name": "packages/causality-optimizers/test/causalNetSGDOptimizer.test.js",
    "content": "import { causalNetSGDOptimizer } from '../src/index';\n/** @test {CausalNetSGDOptimizer} */\ntest('causalNetSGDOptimizer instance should be define', ()=>{\n    expect(causalNetSGDOptimizer).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/test/causalNetSGDOptimizer.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 868,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "packages/causality-optimizers/test/causalNetSGDOptimizer.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-optimizers/test/causalNetSGDOptimizer.test.js~test19",
    "access": null,
    "description": "causalNetSGDOptimizer instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetSGDOptimizer"
    ]
  },
  {
    "__docId__": 869,
    "kind": "testFile",
    "name": "packages/causality-optimizers/test/evaluator.mixins.test.js",
    "content": "import { EvaluatorMixins } from '../src/index';\n/** @test {EvaluatorMixins} */\ntest('EvaluatorMixins instance should be define', ()=>{\n    expect(EvaluatorMixins).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/test/evaluator.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 870,
    "kind": "test",
    "name": "test20",
    "testId": 20,
    "memberof": "packages/causality-optimizers/test/evaluator.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-optimizers/test/evaluator.mixins.test.js~test20",
    "access": null,
    "description": "EvaluatorMixins instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "EvaluatorMixins"
    ]
  },
  {
    "__docId__": 871,
    "kind": "testFile",
    "name": "packages/causality-optimizers/test/trainer.mixins.test.js",
    "content": "import { TrainerMixins } from '../src/index';\n/** @test {TrainerMixins} */\ntest('TrainerMixins instance should be define', ()=>{\n    expect(TrainerMixins).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-optimizers/test/trainer.mixins.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 872,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "packages/causality-optimizers/test/trainer.mixins.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-optimizers/test/trainer.mixins.test.js~test21",
    "access": null,
    "description": "TrainerMixins instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "TrainerMixins"
    ]
  },
  {
    "__docId__": 873,
    "kind": "testFile",
    "name": "packages/causality-preprocessing/test/imgPreprocessing.test.js",
    "content": "import { imagePreprocessing } from '../src/index';\n/** @test {ImagePreprocessing} */\ntest('ImagePreprocessing instance should be define', ()=>{    \n    expect(imagePreprocessing).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/test/imgPreprocessing.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 874,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "packages/causality-preprocessing/test/imgPreprocessing.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-preprocessing/test/imgPreprocessing.test.js~test22",
    "access": null,
    "description": "ImagePreprocessing instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "ImagePreprocessing"
    ]
  },
  {
    "__docId__": 875,
    "kind": "testFile",
    "name": "packages/causality-preprocessing/test/nlpPreprocessing.test.js",
    "content": "import { nlpPreprocessing } from '../src/index';\n/** @test {NLPPreprocessing} */\ntest('nlpPreprocessing instance should be define', ()=>{    \n    expect(nlpPreprocessing).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-preprocessing/test/nlpPreprocessing.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 876,
    "kind": "test",
    "name": "test23",
    "testId": 23,
    "memberof": "packages/causality-preprocessing/test/nlpPreprocessing.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-preprocessing/test/nlpPreprocessing.test.js~test23",
    "access": null,
    "description": "nlpPreprocessing instance should be define",
    "lineNumber": 3,
    "testTargets": [
      "NLPPreprocessing"
    ]
  },
  {
    "__docId__": 877,
    "kind": "testFile",
    "name": "packages/causality-representation/test/causalNetEmbedding.test.js",
    "content": "import { causalNetEmbedding } from '../src/index';\n/** @test {CausalNetEmbedding} */\ntest('CausalNetEmbedding instance should be okay', async ()=>{\n    expect(causalNetEmbedding).toBeDefined();\n})\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/test/causalNetEmbedding.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 878,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "packages/causality-representation/test/causalNetEmbedding.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-representation/test/causalNetEmbedding.test.js~test24",
    "access": null,
    "description": "CausalNetEmbedding instance should be okay",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetEmbedding"
    ]
  },
  {
    "__docId__": 879,
    "kind": "testFile",
    "name": "packages/causality-representation/test/universalEmbedding.test.js",
    "content": "import { universalEmbedding } from '../src/index';\n/** @test {UniversalEmbedding} */\ntest('universalEmbedding instance should be okay', async ()=>{\n    expect(universalEmbedding).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-representation/test/universalEmbedding.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 880,
    "kind": "test",
    "name": "test25",
    "testId": 25,
    "memberof": "packages/causality-representation/test/universalEmbedding.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-representation/test/universalEmbedding.test.js~test25",
    "access": null,
    "description": "universalEmbedding instance should be okay",
    "lineNumber": 3,
    "testTargets": [
      "UniversalEmbedding"
    ]
  },
  {
    "__docId__": 881,
    "kind": "testFile",
    "name": "packages/causality-sampling/test/sampling.test.js",
    "content": "import { default as causalNetSampling } from '../src/causalNetSampling';\n/** @test {CausalNetSampling} */\ntest('negSampling should be okay', async ()=>{\n    let samples = causalNetSampling.negSampling(4, [0, 1], [0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3]);\n    expect(samples.length).toEqual(4);\n})\n/** @test {CausalNetSampling} */\ntest('subSampling should be okay', async ()=>{\n    let samples = causalNetSampling.subSampling(4, 10);\n    expect(samples.length).toEqual(4);\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-sampling/test/sampling.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 882,
    "kind": "test",
    "name": "test26",
    "testId": 26,
    "memberof": "packages/causality-sampling/test/sampling.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-sampling/test/sampling.test.js~test26",
    "access": null,
    "description": "negSampling should be okay",
    "lineNumber": 3,
    "testTargets": [
      "CausalNetSampling"
    ]
  },
  {
    "__docId__": 883,
    "kind": "test",
    "name": "test27",
    "testId": 27,
    "memberof": "packages/causality-sampling/test/sampling.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-sampling/test/sampling.test.js~test27",
    "access": null,
    "description": "subSampling should be okay",
    "lineNumber": 8,
    "testTargets": [
      "CausalNetSampling"
    ]
  },
  {
    "__docId__": 884,
    "kind": "testFile",
    "name": "packages/causality-storage/test/indexdbStorage.test.js",
    "content": "import {indexDBStorage} from '../src/index';\nconst timeout = 10000;//10 s to avoid\nbeforeEach(()=>{}, timeout);\n/** @test {IndexDBStorage} */\ntest('indexdb write file should be okay', async ()=>{\n    let writePath = await indexDBStorage.writeFile('temp','12345');\n    expect(writePath).toBeDefined();\n})\n/** @test {IndexDBStorage} */\ntest('indexdb read file should be okay', async ()=>{\n    let item = await indexDBStorage.writeFile('temp','12345');\n    let data = await indexDBStorage.readFile('temp');    \n    expect(data).toBe('12345');\n})\n/** @test {IndexDBStorage} */\ntest('indexdb delete file should be okay', async ()=>{\n    let writePath = await indexDBStorage.writeFile('temp','12345');\n    let filePath = await indexDBStorage.deleteFile(writePath);    \n    return await indexDBStorage.readFile('temp').catch(e=>{\n        expect(e).toMatch(/read/);\n    })\n})\n/** @test {IndexDBStorage} */\ntest('indexdb batch write should be okay', async ()=>{\n    let ops = [//no op get\n            { type: 'put', key: 'temp', value: '123445' },\n            { type: 'del', key: 'temp' }];\n    let res = await indexDBStorage.batch(ops);\n    console.log({res});\n    expect(res).toBeDefined();\n})\n/** @test {IndexDBStorage} */\ntest('indexdb list file should be okay', async ()=>{\n    let fileList = await indexDBStorage.getFileList('/list/');\n    console.log({fileList});\n    expect(fileList).toBeDefined();\n})\n/** @test {IndexDBStorage} */\ntest('indexdb delete by prefix should be okay', async ()=>{\n    let writePath = await indexDBStorage.deleteFileByPrefix('/list/');\n    console.log({writePath});\n    expect(writePath).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-storage/test/indexdbStorage.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 885,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test28",
    "access": null,
    "description": "indexdb write file should be okay",
    "lineNumber": 5,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 886,
    "kind": "test",
    "name": "test29",
    "testId": 29,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test29",
    "access": null,
    "description": "indexdb read file should be okay",
    "lineNumber": 10,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 887,
    "kind": "test",
    "name": "test30",
    "testId": 30,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test30",
    "access": null,
    "description": "indexdb delete file should be okay",
    "lineNumber": 16,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 888,
    "kind": "test",
    "name": "test31",
    "testId": 31,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test31",
    "access": null,
    "description": "indexdb batch write should be okay",
    "lineNumber": 24,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 889,
    "kind": "test",
    "name": "test32",
    "testId": 32,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test32",
    "access": null,
    "description": "indexdb list file should be okay",
    "lineNumber": 33,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 890,
    "kind": "test",
    "name": "test33",
    "testId": 33,
    "memberof": "packages/causality-storage/test/indexdbStorage.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-storage/test/indexdbStorage.test.js~test33",
    "access": null,
    "description": "indexdb delete by prefix should be okay",
    "lineNumber": 39,
    "testTargets": [
      "IndexDBStorage"
    ]
  },
  {
    "__docId__": 891,
    "kind": "testFile",
    "name": "packages/causality-utils/test/assert.test.js",
    "content": "import {default as assert} from '../src/assert';\n/** @test {assert} */\ntest('assert should be define', async ()=>{\n    /** @test {assert#instance} */\n    expect(assert).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/assert.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 892,
    "kind": "test",
    "name": "test34",
    "testId": 34,
    "memberof": "packages/causality-utils/test/assert.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/assert.test.js~test34",
    "access": null,
    "description": "assert should be define",
    "lineNumber": 3,
    "testTargets": [
      "assert"
    ]
  },
  {
    "__docId__": 893,
    "kind": "testFile",
    "name": "packages/causality-utils/test/csvUtils.test.js",
    "content": "import {default as csvUtils } from '../src/csvUtils';\n/** @test {CSVUtils} */\ntest('create PNG file must success', async ()=>{\n    let csv = csvUtils.CoreCSV;\n    /** @test {CSVUtils#instance} */\n    expect(csv).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/csvUtils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 894,
    "kind": "test",
    "name": "test35",
    "testId": 35,
    "memberof": "packages/causality-utils/test/csvUtils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/csvUtils.test.js~test35",
    "access": null,
    "description": "create PNG file must success",
    "lineNumber": 3,
    "testTargets": [
      "CSVUtils"
    ]
  },
  {
    "__docId__": 895,
    "kind": "testFile",
    "name": "packages/causality-utils/test/fetch.test.js",
    "content": "import {default as fetch} from '../src/fetch';\n/** @test {Fetch} */\ntest('fetch file should be okay', async ()=>{\n    const link = 'https://avatars3.githubusercontent.com/u/43268620?s=200&v=4';\n    let data = await fetch.fetchData(link);\n    /** @test {Fetch#instance} */\n    expect(data).toBeDefined();\n})\n",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/fetch.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 896,
    "kind": "test",
    "name": "test36",
    "testId": 36,
    "memberof": "packages/causality-utils/test/fetch.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/fetch.test.js~test36",
    "access": null,
    "description": "fetch file should be okay",
    "lineNumber": 3,
    "testTargets": [
      "Fetch"
    ]
  },
  {
    "__docId__": 897,
    "kind": "testFile",
    "name": "packages/causality-utils/test/platform.test.js",
    "content": "import {default as platform} from '../src/platform';\n/** @test {Platform} */\ntest('platform must return', ()=>{\n    let machine = platform.currentPlatform();\n    /** @test {Platform#instance} */\n    expect(machine).toBeDefined();\n});\n/** @test {Platform} */\ntest('platform mix should works', ()=>{\n    class A{\n        constructor(){\n        }\n        sayA(){\n            return 'say A';\n        }\n    }\n    const AMixins = (Base)=>class extends Base{\n        sayAExtend(){\n            return 'say A with mixins';\n        }\n    }\n    class AExtends extends platform.mixWith(A, [AMixins]){}\n    const a = new AExtends();\n    /** @test {Platform#mixWith} */\n    expect(a.sayAExtend()).toEqual('say A with mixins');\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/platform.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 898,
    "kind": "test",
    "name": "test37",
    "testId": 37,
    "memberof": "packages/causality-utils/test/platform.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/platform.test.js~test37",
    "access": null,
    "description": "platform must return",
    "lineNumber": 3,
    "testTargets": [
      "Platform"
    ]
  },
  {
    "__docId__": 899,
    "kind": "test",
    "name": "test38",
    "testId": 38,
    "memberof": "packages/causality-utils/test/platform.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/platform.test.js~test38",
    "access": null,
    "description": "platform mix should works",
    "lineNumber": 9,
    "testTargets": [
      "Platform"
    ]
  },
  {
    "__docId__": 900,
    "kind": "testFile",
    "name": "packages/causality-utils/test/pngUtils.test.js",
    "content": "import {default as pngUtils } from '../src/pngUtils';\n/** @test {PNGUtils} */\ntest('create PNG file must success', async ()=>{\n    let PNG = pngUtils.CorePNG;\n    let png = new PNG({width:1, height:1});\n    png.data = Buffer.from([128,128,128,255]);\n    /** @test {pngUtils#createFile} */\n    expect(png).toBeDefined();\n});",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/pngUtils.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 901,
    "kind": "test",
    "name": "test39",
    "testId": 39,
    "memberof": "packages/causality-utils/test/pngUtils.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/pngUtils.test.js~test39",
    "access": null,
    "description": "create PNG file must success",
    "lineNumber": 3,
    "testTargets": [
      "PNGUtils"
    ]
  },
  {
    "__docId__": 902,
    "kind": "testFile",
    "name": "packages/causality-utils/test/stream.test.js",
    "content": "import {default as Stream} from '../src/stream';\n/** @test {Stream} */\ntest('Stream readable must define', async ()=>{\n    let reader = Stream.makeReadable();\n    /** @test {Stream#instance} */\n    expect(reader).toBeDefined();\n})",
    "static": true,
    "longname": "/home/huynhnguyen/github/causality/packages/causality-utils/test/stream.test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 903,
    "kind": "test",
    "name": "test40",
    "testId": 40,
    "memberof": "packages/causality-utils/test/stream.test.js",
    "testDepth": 0,
    "static": true,
    "longname": "packages/causality-utils/test/stream.test.js~test40",
    "access": null,
    "description": "Stream readable must define",
    "lineNumber": 3,
    "testTargets": [
      "Stream"
    ]
  }
]