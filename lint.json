[
  {
    "name": "Functor#range",
    "filePath": "packages/causality-core/src/functor.js",
    "lines": [
      {
        "lineNumber": 83,
        "line": "        const R = this.R;"
      },
      {
        "lineNumber": 84,
        "line": "        return R.range(beginIdx, size);"
      },
      {
        "lineNumber": 85,
        "line": "    }"
      },
      {
        "lineNumber": 86,
        "line": ""
      },
      {
        "lineNumber": 87,
        "line": "    enumerate(array){"
      },
      {
        "lineNumber": 88,
        "line": "        const R = this.R;"
      },
      {
        "lineNumber": 89,
        "line": "        return R.addIndex(R.map)((v,i)=>([i,v]))(array);"
      }
    ],
    "codeParams": [
      "size",
      "beginIdx"
    ],
    "docParams": [
      "size"
    ]
  },
  {
    "name": "Store#getItem",
    "filePath": "packages/causality-core/src/store.js",
    "lines": [
      {
        "lineNumber": 17,
        "line": "    /**"
      },
      {
        "lineNumber": 18,
        "line": "     * Get item given the key"
      },
      {
        "lineNumber": 19,
        "line": "     * @param { String } key - key name"
      },
      {
        "lineNumber": 20,
        "line": "     * @param {boolean} [asBuffer=false] - return object or buffer array, default object"
      },
      {
        "lineNumber": 21,
        "line": "     * @returns { Object } item object "
      },
      {
        "lineNumber": 22,
        "line": "     */"
      },
      {
        "lineNumber": 23,
        "line": "    async getItem(key, asBuffer=false, noError=false){"
      }
    ],
    "codeParams": [
      "key",
      "asBuffer",
      "noError"
    ],
    "docParams": [
      "key",
      "asBuffer"
    ]
  },
  {
    "name": "Store#setItem",
    "filePath": "packages/causality-core/src/store.js",
    "lines": [
      {
        "lineNumber": 44,
        "line": "    /**"
      },
      {
        "lineNumber": 45,
        "line": "     * Set new item with the given key and value"
      },
      {
        "lineNumber": 46,
        "line": "     * @param { String } key - key name of item"
      },
      {
        "lineNumber": 47,
        "line": "     * @param { Object } data - value of item"
      },
      {
        "lineNumber": 48,
        "line": "     * @returns { Promise } - new key promise"
      },
      {
        "lineNumber": 49,
        "line": "     * @memberof MemoryCache"
      },
      {
        "lineNumber": 50,
        "line": "     */"
      },
      {
        "lineNumber": 51,
        "line": "    async setItem(key, data, noError=false){"
      }
    ],
    "codeParams": [
      "key",
      "data",
      "noError"
    ],
    "docParams": [
      "key",
      "data"
    ]
  },
  {
    "name": "Store#delItem",
    "filePath": "packages/causality-core/src/store.js",
    "lines": [
      {
        "lineNumber": 72,
        "line": "    /**"
      },
      {
        "lineNumber": 73,
        "line": "     * Delete item given the item key"
      },
      {
        "lineNumber": 74,
        "line": "     * @param { String } key - key name to delete"
      },
      {
        "lineNumber": 75,
        "line": "     * @returns { Promise } deleted key promise"
      },
      {
        "lineNumber": 76,
        "line": "     * @memberof MemoryCache"
      },
      {
        "lineNumber": 77,
        "line": "     */"
      },
      {
        "lineNumber": 78,
        "line": "    async delItem(key, noError=false){"
      }
    ],
    "codeParams": [
      "key",
      "noError"
    ],
    "docParams": [
      "key"
    ]
  },
  {
    "name": "Store#getItemList",
    "filePath": "packages/causality-core/src/store.js",
    "lines": [
      {
        "lineNumber": 110,
        "line": "    /**"
      },
      {
        "lineNumber": 111,
        "line": "     * Get the current items under the prefix path"
      },
      {
        "lineNumber": 112,
        "line": "     * @param { String } namePrefix"
      },
      {
        "lineNumber": 113,
        "line": "     * @returns { Array } list of item names"
      },
      {
        "lineNumber": 114,
        "line": "     * @memberof MemoryCache"
      },
      {
        "lineNumber": 115,
        "line": "     */"
      },
      {
        "lineNumber": 116,
        "line": "    async getItemList(namePrefix, noError=false){"
      }
    ],
    "codeParams": [
      "namePrefix",
      "noError"
    ],
    "docParams": [
      "namePrefix"
    ]
  },
  {
    "name": "ConvolutionMixins#convolution",
    "filePath": "packages/causality-layer/src/CausalNetLayers/convolution.mixins.js",
    "lines": [
      {
        "lineNumber": 1,
        "line": "    /**"
      },
      {
        "lineNumber": 2,
        "line": "     * Convolutional layer"
      },
      {
        "lineNumber": 3,
        "line": "     * @param {Number} inputSize - size of net input"
      },
      {
        "lineNumber": 4,
        "line": "     * @param {Array} kernelSize - size of net output"
      },
      {
        "lineNumber": 5,
        "line": "     * @param {String|Function} activator - activator function can be customed or get from built-in by string name"
      },
      {
        "lineNumber": 6,
        "line": "     * @param {String} name - layer name, default by null"
      },
      {
        "lineNumber": 7,
        "line": "     * @returns { Object } layer"
      },
      {
        "lineNumber": 8,
        "line": "     */"
      },
      {
        "lineNumber": 9,
        "line": "    convolution({ kernelSize, filters, "
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "inputSize",
      "kernelSize",
      "activator",
      "name"
    ]
  },
  {
    "name": "DenseLayerMixins#dense",
    "filePath": "packages/causality-layer/src/CausalNetLayers/dense.mixins.js",
    "lines": [
      {
        "lineNumber": 1,
        "line": "    /**"
      },
      {
        "lineNumber": 2,
        "line": "     * Simple dense layer"
      },
      {
        "lineNumber": 3,
        "line": "     * @param {Number} inputSize - size of net input"
      },
      {
        "lineNumber": 4,
        "line": "     * @param {Number} outputSize - size of net output"
      },
      {
        "lineNumber": 5,
        "line": "     * @param {String|Function} activator - activator function can be customed or get from built-in by string name"
      },
      {
        "lineNumber": 6,
        "line": "     * @param {String} name - layer name, default by null"
      },
      {
        "lineNumber": 7,
        "line": "     * @returns { Object } layer"
      },
      {
        "lineNumber": 8,
        "line": "     */"
      },
      {
        "lineNumber": 9,
        "line": "    dense({inputSize, outputSize, activator='sigmoid', name=null}){"
      }
    ],
    "codeParams": [
      "*"
    ],
    "docParams": [
      "inputSize",
      "outputSize",
      "activator",
      "name"
    ]
  },
  {
    "name": "MemorizingMixins#write",
    "filePath": "packages/causality-memcache/src/memorizing.mixins.js",
    "lines": [
      {
        "lineNumber": 25,
        "line": "    /**"
      },
      {
        "lineNumber": 26,
        "line": "     * "
      },
      {
        "lineNumber": 27,
        "line": "     * @param { String|Number } memorySlotIndex - positive number for memory slot"
      },
      {
        "lineNumber": 28,
        "line": "     * @param { Array } memory value"
      },
      {
        "lineNumber": 29,
        "line": "     * @returns { Promise } memory slot index value"
      },
      {
        "lineNumber": 30,
        "line": "     */"
      },
      {
        "lineNumber": 31,
        "line": "    async write(memorySlotIndex, value){"
      }
    ],
    "codeParams": [
      "memorySlotIndex",
      "value"
    ],
    "docParams": [
      "memorySlotIndex",
      "memory"
    ]
  },
  {
    "name": "ColorTransformingMixins#blackWhiteTransform",
    "filePath": "packages/causality-preprocessing/src/Image/colorTransforming.mixins.js",
    "lines": [
      {
        "lineNumber": 6,
        "line": "    /**"
      },
      {
        "lineNumber": 7,
        "line": "     * Transform color image to black on white image. This function also reduce chanel to 1."
      },
      {
        "lineNumber": 8,
        "line": "     * @param { Array|Buffer } sampleBuffer"
      },
      {
        "lineNumber": 9,
        "line": "     * @param { Number } channelSize"
      },
      {
        "lineNumber": 10,
        "line": "     * @return { Array } image data after transform"
      },
      {
        "lineNumber": 11,
        "line": "     */"
      },
      {
        "lineNumber": 12,
        "line": "    blackWhiteTransform(sampleBuffer){"
      }
    ],
    "codeParams": [
      "sampleBuffer"
    ],
    "docParams": [
      "sampleBuffer",
      "channelSize"
    ]
  },
  {
    "name": "RepresentationMixins#connect",
    "filePath": "packages/causality-representation/src/representation.mixins.js",
    "lines": [
      {
        "lineNumber": 44,
        "line": "     * set embedding for pipeline"
      },
      {
        "lineNumber": 45,
        "line": "     * @param { Object } netConfig - contain Embedding instance and Embedding configure"
      },
      {
        "lineNumber": 46,
        "line": "     * @memberof RepresentationMixins"
      },
      {
        "lineNumber": 47,
        "line": "     */"
      },
      {
        "lineNumber": 48,
        "line": "    setRepresentationByConfig(netConfig){"
      },
      {
        "lineNumber": 49,
        "line": "        let { EmbeddingConfig, Embedding } = netConfig.Representation;"
      },
      {
        "lineNumber": 50,
        "line": "        assert.beInstanceOf(EmbeddingConfig, String);"
      },
      {
        "lineNumber": 51,
        "line": "        this.Representation = Embedding;"
      },
      {
        "lineNumber": 52,
        "line": "        this.embeddingConfig = EmbeddingConfig;"
      }
    ],
    "codeParams": [],
    "docParams": [
      "link",
      "refresh"
    ]
  },
  {
    "name": "WordEmbeddingMixins#sentenceEncode",
    "filePath": "packages/causality-representation/src/wordEmbedding.mixins.js",
    "lines": [
      {
        "lineNumber": 14,
        "line": "    /**"
      },
      {
        "lineNumber": 15,
        "line": "     * return the vectors of tokenized sentences"
      },
      {
        "lineNumber": 16,
        "line": "     * This function require sentence to be tokenized via preprocessing"
      },
      {
        "lineNumber": 17,
        "line": "     * @param { Array } tokens - array of string tokens of sentence"
      },
      {
        "lineNumber": 18,
        "line": "     * @returns { Tensor } encoded sentences"
      },
      {
        "lineNumber": 19,
        "line": "     */"
      },
      {
        "lineNumber": 20,
        "line": "    async sentenceEncode(sentences, asTensor=true){"
      }
    ],
    "codeParams": [
      "sentences",
      "asTensor"
    ],
    "docParams": [
      "tokens"
    ]
  },
  {
    "name": "CSVFileMixins#writeCSVFile",
    "filePath": "packages/causality-storage/src/CSVFile.mixins.js",
    "lines": [
      {
        "lineNumber": 16,
        "line": "    /**"
      },
      {
        "lineNumber": 17,
        "line": "     * @param  {} filePath"
      },
      {
        "lineNumber": 18,
        "line": "     * @param  {} data"
      },
      {
        "lineNumber": 19,
        "line": "     */"
      },
      {
        "lineNumber": 20,
        "line": "    async writeCSVFile(filePath, parsedData){"
      }
    ],
    "codeParams": [
      "filePath",
      "parsedData"
    ],
    "docParams": []
  },
  {
    "name": "IndexDBStorage#batch",
    "filePath": "packages/causality-storage/src/indexDBStorage.js",
    "lines": [
      {
        "lineNumber": 52,
        "line": "    /**"
      },
      {
        "lineNumber": 53,
        "line": "     * get list of file base on prefix"
      },
      {
        "lineNumber": 54,
        "line": "     * @param { String } filePath"
      },
      {
        "lineNumber": 55,
        "line": "     * @return { Promise } List of filenames "
      },
      {
        "lineNumber": 56,
        "line": "     * @memberof IndexDBStorage"
      },
      {
        "lineNumber": 57,
        "line": "     */"
      },
      {
        "lineNumber": 58,
        "line": "    async getFileList(filePath){"
      },
      {
        "lineNumber": 59,
        "line": "        filePath = this.correctName(filePath);"
      },
      {
        "lineNumber": 60,
        "line": "        return await this.getItemList(filePath);"
      },
      {
        "lineNumber": 61,
        "line": "    }"
      },
      {
        "lineNumber": 62,
        "line": ""
      },
      {
        "lineNumber": 63,
        "line": "    /**"
      },
      {
        "lineNumber": 64,
        "line": "     * delete all files with name match prefix pattern "
      }
    ],
    "codeParams": [
      "ops"
    ],
    "docParams": [
      "key"
    ]
  },
  {
    "name": "TextFileMixins#readFile",
    "filePath": "packages/causality-storage/src/textFile.mixins.js",
    "lines": [
      {
        "lineNumber": 3,
        "line": "    /**"
      },
      {
        "lineNumber": 4,
        "line": "     * @param  {} filePath"
      },
      {
        "lineNumber": 5,
        "line": "     */"
      },
      {
        "lineNumber": 6,
        "line": "    async readFile(filePath){"
      }
    ],
    "codeParams": [
      "filePath"
    ],
    "docParams": []
  },
  {
    "name": "TextFileMixins#writeFile",
    "filePath": "packages/causality-storage/src/textFile.mixins.js",
    "lines": [
      {
        "lineNumber": 11,
        "line": "    /**"
      },
      {
        "lineNumber": 12,
        "line": "     * @param  {} filePath"
      },
      {
        "lineNumber": 13,
        "line": "     * @param  {} data"
      },
      {
        "lineNumber": 14,
        "line": "     */"
      },
      {
        "lineNumber": 15,
        "line": "    async writeFile(filePath, data){"
      }
    ],
    "codeParams": [
      "filePath",
      "data"
    ],
    "docParams": []
  },
  {
    "name": "BufferUtils#writeBuffer",
    "filePath": "packages/causality-utils/src/bufferUtils.js",
    "lines": [
      {
        "lineNumber": 26,
        "line": "    /**"
      },
      {
        "lineNumber": 27,
        "line": "     * write buffer content from given content"
      },
      {
        "lineNumber": 28,
        "line": "     * @todo enhance reject case"
      },
      {
        "lineNumber": 29,
        "line": "     * @param { URL } url - url for csv content"
      },
      {
        "lineNumber": 30,
        "line": "     * @returns { Promise } - data promise with data if success"
      },
      {
        "lineNumber": 31,
        "line": "     * @memberof BufferUtils"
      },
      {
        "lineNumber": 32,
        "line": "     */"
      },
      {
        "lineNumber": 33,
        "line": "    async writeBuffer(data, filePath){"
      }
    ],
    "codeParams": [
      "data",
      "filePath"
    ],
    "docParams": [
      "url"
    ]
  },
  {
    "name": "BufferUtils#readBuffer",
    "filePath": "packages/causality-utils/src/bufferUtils.js",
    "lines": [
      {
        "lineNumber": 50,
        "line": "    /**"
      },
      {
        "lineNumber": 51,
        "line": "     * fetch buffer content from given url"
      },
      {
        "lineNumber": 52,
        "line": "     * @todo enhance reject case"
      },
      {
        "lineNumber": 53,
        "line": "     * @param { URL } url - url for csv content"
      },
      {
        "lineNumber": 54,
        "line": "     * @returns { Promise } - data promise with data if success"
      },
      {
        "lineNumber": 55,
        "line": "     * @memberof BufferUtils"
      },
      {
        "lineNumber": 56,
        "line": "     */"
      },
      {
        "lineNumber": 57,
        "line": "    readBuffer(filePath){"
      }
    ],
    "codeParams": [
      "filePath"
    ],
    "docParams": [
      "url"
    ]
  },
  {
    "name": "JSONUtils#writeJSON",
    "filePath": "packages/causality-utils/src/jsonUtils.js",
    "lines": [
      {
        "lineNumber": 34,
        "line": "    /**"
      },
      {
        "lineNumber": 35,
        "line": "     * write json content from given content"
      },
      {
        "lineNumber": 36,
        "line": "     * @todo enhance reject case"
      },
      {
        "lineNumber": 37,
        "line": "     * @param { URL } url - url for csv content"
      },
      {
        "lineNumber": 38,
        "line": "     * @returns { Promise } - data promise with data if success"
      },
      {
        "lineNumber": 39,
        "line": "     * @memberof JSONUtils"
      },
      {
        "lineNumber": 40,
        "line": "     */"
      },
      {
        "lineNumber": 41,
        "line": "    async writeJSON(data, filePath){"
      }
    ],
    "codeParams": [
      "data",
      "filePath"
    ],
    "docParams": [
      "url"
    ]
  },
  {
    "name": "JSONUtils#readJSON",
    "filePath": "packages/causality-utils/src/jsonUtils.js",
    "lines": [
      {
        "lineNumber": 58,
        "line": "    /**"
      },
      {
        "lineNumber": 59,
        "line": "     * fetch json content from given url"
      },
      {
        "lineNumber": 60,
        "line": "     * @todo enhance reject case"
      },
      {
        "lineNumber": 61,
        "line": "     * @param { URL } url - url for csv content"
      },
      {
        "lineNumber": 62,
        "line": "     * @returns { Promise } - data promise with data if success"
      },
      {
        "lineNumber": 63,
        "line": "     * @memberof JSONUtils"
      },
      {
        "lineNumber": 64,
        "line": "     */"
      },
      {
        "lineNumber": 65,
        "line": "    async readJSON(filePath){"
      }
    ],
    "codeParams": [
      "filePath"
    ],
    "docParams": [
      "url"
    ]
  },
  {
    "name": "PNGUtils#writePNG",
    "filePath": "packages/causality-utils/src/pngUtils.js",
    "lines": [
      {
        "lineNumber": 40,
        "line": "    /**"
      },
      {
        "lineNumber": 41,
        "line": "     * write and tranform png file to raw array from filepath"
      },
      {
        "lineNumber": 42,
        "line": "     * @param { URL } url - url for PNG file"
      },
      {
        "lineNumber": 43,
        "line": "     * @returns { Promise } data promise - return Array if success or reject with error message"
      },
      {
        "lineNumber": 44,
        "line": "     * @memberof PNGUtils"
      },
      {
        "lineNumber": 45,
        "line": "     */"
      },
      {
        "lineNumber": 46,
        "line": "    async writePNG(data, size, filePath){"
      }
    ],
    "codeParams": [
      "data",
      "size",
      "filePath"
    ],
    "docParams": [
      "url"
    ]
  }
]